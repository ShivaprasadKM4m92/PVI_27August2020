<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="103">
  <HTTPTask id="604" hostname="10.100.22.243:8081" path="/caseEntry/show/244399?openAccordion=true" url="http://10.100.22.243:8081/caseEntry/show/244399?openAccordion=true" ip="10.100.22.243" port="8081" connectionId="36" origin="Primary" frame="1" startDateTime="2020-08-26T12:15:33.213+05:30" startTime="9466625" endTime="9472781">
    <QueryString>
      <HTTPDataSet>
        <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
          <ActualData>b3BlbkFjY29yZGlvbj10cnVl</ActualData>
        </HTTPData>
      </HTTPDataSet>
      <IsExternalData>false</IsExternalData>
    </QueryString>
    <HTTPSplittedQueryStrings>
      <HTTPHeaderEntity name="openAccordion" index="0">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>dHJ1ZQ==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
    </HTTPSplittedQueryStrings>
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTAuMTAwLjIyLjI0Mzo4MDgx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Upgrade-Insecure-Requests" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg0LjAuNDE0Ny4xMzUgU2FmYXJpLzUzNy4zNg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDM6ODA4MS9pbnRha2UvcXVldWU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U0VTU0lPTj0yMDczZGM1Mi01Y2NiLTQ3NzQtOTQxNC04MDE4NzZkMDIyZTI7IEF1dGhUeXBlPURhdGFiYXNl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC9jYXNlRW50cnkvc2hvdy8yNDQzOTk/b3BlbkFjY29yZGlvbj10cnVlIEhUVFAvMS4xDQpIb3N0OiAxMC4xMDAuMjIuMjQzOjgwODENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NC4wLjQxNDcuMTM1IFNhZmFyaS81MzcuMzYNCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOQ0KUmVmZXJlcjogaHR0cDovLzEwLjEwMC4yMi4yNDM6ODA4MS9pbnRha2UvcXVldWUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KQ29va2llOiBTRVNTSU9OPTIwNzNkYzUyLTVjY2ItNDc3NC05NDE0LTgwMTg3NmQwMjJlMjsgQXV0aFR5cGU9RGF0YWJhc2UNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="SESSION" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjA3M2RjNTItNWNjYi00Nzc0LTk0MTQtODAxODc2ZDAyMmUy</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="AuthType" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RGF0YWJhc2U=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>0</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="X-Frame-Options" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>REVOWQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Application-Context" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb246cHJvZHVjdGlvbjo4MDgx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGUsIG5vLXN0b3Jl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Pragma" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sO2NoYXJzZXQ9VVRGLTg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Language" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Transfer-Encoding" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y2h1bmtlZA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2VkLCAyNiBBdWcgMjAyMCAwNjo0MjoxNSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIA0KWC1GcmFtZS1PcHRpb25zOiBERU5ZDQpYLUFwcGxpY2F0aW9uLUNvbnRleHQ6IGFwcGxpY2F0aW9uOnByb2R1Y3Rpb246ODA4MQ0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlDQpQcmFnbWE6IG5vLWNhY2hlDQpDb250ZW50LVR5cGU6IHRleHQvaHRtbDtjaGFyc2V0PVVURi04DQpDb250ZW50LUxhbmd1YWdlOiBlbg0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNiBBdWcgMjAyMCAwNjo0MjoxNSBHTVQNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>
<!doctype html>
<html lang="en" class="no-js">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta HTTP-EQUIV="Pragma" CONTENT="no-cache">
    <meta HTTP-EQUIV="Cache-Control" CONTENT="no-cache">

    <title>PV Intake - Full Case Entry</title>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="shortcut icon" href="/assets/vendor/favicon_1.ico">

    
    
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width,initial-scale=1, maximum-scale=1, user-scalable=no"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="layout" content="main"/>
    <link rel="stylesheet" href="/assets/app/case-entry/case-entry-manifest-0691008e616302be087a77f0c4f6bc2a.css"/>

    <link rel="stylesheet" href="/assets/application-13a1ddae267b7b6a32d12cfb1ac98e43.css"/>
    
    <script type="text/javascript" src="/assets/vendorUi/jquery/jquery-2.2.4-e72e6e97da5fd952079c33c415741fc6.js" ></script>

        <meta name="_csrf" content="b0e87b62-6d3c-4d14-9bc9-1d45d79cac08"/>
        <meta name="_csrf_header" content="X-CSRF-TOKEN"/>
        <meta name="_csrf_parameter" content="_csrf"/>


</head>
<body class="widescreen fixed-left-void">

<script type="text/javascript" src="/assets/UIConstants-ee3587ab40d47b8bed173814ecf5a0be.js" ></script>
<script type="text/javascript" src="/assets/common/change-theme-6ebd5f05979bc64dfe2d6f10b3e3b3db.js" ></script>
<input type="hidden" name="appConfigUrl" value="http://10.100.22.243:8081/config/appConfig" id="appConfigUrl" />
<input type="hidden" name="attachmentViewerUrl" value="http://10.100.22.243:8081/caseEntry/fetchDocument" id="attachmentViewerUrl" />

<div id="wrapper" class="forced enlarged">
    <input type="hidden" name="currentTimestamp" value="" id="currentTimestamp" />
    <!-- Top Bar-->
    <div class="topbar">
    <div class="navbar navbar-default" role="navigation">
        <div class="pull-left">
            <button class="button-menu-mobile open-left waves-effect">
                <i class="md md-menu"></i>
            </button>
            <span class="clearfix"></span>
        </div>

        <div class="container">
            <ul class="nav navbar-nav hidden-xs">
                
                
                
                <li><a href="#" class="waves-effect"><div class="text-left"><a href="/" class="Logo"><img src="/assets/PVIntake-241ae46808f3515f2be1c0c88ee0773b.png" class="pvLogo" alt="PV-Logo"/></a></div></a></li>
                
                        <li> 
                            <a href="http://10.100.22.34:8083/" class="waves-effect">PVAdmin</a>
                        </li>
                    
            </ul>
            <ul class="nav navbar-nav navbar-right pull-right">
                <li class="m-t-20">
                
                    
                        <h5 class="text-white">Load16 (Load16)</h5>
                    
                </li>
                <li class="dropdown hidden-xs hidden">
                    <a href="#" data-target="#" class="dropdown-toggle waves-effect waves-light"
                       data-toggle="dropdown" aria-expanded="true">
                        <i class="md md-notifications"></i> <span
                            class="badge badge-xs badge-pink">3</span>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-lg">
                        <li class="text-center notifi-title">Notification</li>
                        <li class="list-group nicescroll notification-list">

                        </li>

                        <li>
                            <a href="javascript:void(0);" class=" text-right">
                                <small><b>See all notifications</b></small>
                            </a>
                        </li>

                    </ul>
                </li>
                <li class="dropdown hidden-xs">
                    <a href="#" class="waves-effect waves-light" data-target="#"
                       class="dropdown-toggle waves-effect waves-light"
                       data-toggle="dropdown" aria-expanded="true">
                        <i class="md md-settings"></i></a>
                    <ul class="dropdown-menu">

                        
                        
                            
                                <li id="controlPanel" class="hidden"><a
                                        href= http://10.100.22.34:8083>
                                    Administration</a></li>
                                <li class="divider"></li>
                            
                        
                        <li id="menuPreference">
                            <a href= /preference><i class="md md-settings"></i>
                                Preferences
                            </a>
                        </li>
                        
                            <li class="divider"></li>
                            <li><a rel="noopener" href="/help" target="_blank">
                                <i class="md md-help"></i>
                                Help</a>
                            </li>
                        
                        <li class="divider"></li>

                        <li>
                            <a href="/password/resetOwnPassword" id="MI-reset-password">
                                <i class="md md-lock-reset"></i>
                                Change Password
                            </a>
                        </li>

                        <li>
                            <a href='/logout' class=''>
                                <i class="md md-exit-to-app"></i>
                                Logout
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</div>
<script>
    if ((true)) {
        LOAD_THEME_URL = "/preference/loadTheme";
    }
    if ((true)) {
        UPDATE_THEME_URL = "/preference/updateTheme"
    }
</script>


    <!-- Left Sidebar -->
    <div class="left side-menu">
    <div class="sidebar-inner slimscrollleft">
        <div id="sidebar-menu">
            <ul>
                
                    
                        
                            <li class="has_sub">
                                <a href="/" class="waves-effect waves-primary side-icon ">
                                    <i class="md md-dashboard" aria-hidden="true"></i>
                                    <span>Dashboard</span>
                                    
                                </a>
                                
                            </li>
                        
                    
                
                    
                        
                            
                            <li class="has_sub">
                                <li class="has_sub">
    <a href='#' class='waves-effect waves-primary side-icon'>
        <i class='fa fa-pencil-square' aria-hidden='true'></i>
        <span>New Case</span></a>
    <span class='menu-arrow'></span>
    <ul class="list-unstyled">
        
            <li>
                <a href="/caseEntry/index?templateId=1" class="waves-effect waves-primary side-icon">
                    <span>Basic Case Entry</span>
                </a>
            </li>
        
            <li>
                <a href="/caseEntry/index?templateId=2" class="waves-effect waves-primary side-icon">
                    <span>Full Case Entry</span>
                </a>
            </li>
        
    </ul>
</li>
                            </li>
                        
                    
                
                    
                        
                            <li class="has_sub">
                                <a href="#" class="waves-effect waves-primary side-icon ">
                                    <i class="md md-my-library-add create-follow-up" aria-hidden="true"></i>
                                    <span>New Follow Up</span>
                                    
                                </a>
                                
                            </li>
                        
                    
                
                    
                        
                            <li class="has_sub">
                                <a href="/duplicate/search" class="waves-effect waves-primary side-icon ">
                                    <i class="fa fa-search" aria-hidden="true"></i>
                                    <span>Search Case</span>
                                    
                                </a>
                                
                            </li>
                        
                    
                
                    
                        
                            <li class="has_sub">
                                <a href="/case/list" class="waves-effect waves-primary side-icon ">
                                    <i class="fa fa-list" aria-hidden="true"></i>
                                    <span>Case List</span>
                                    
                                </a>
                                
                            </li>
                        
                    
                
                    
                        
                            <li class="has_sub">
                                <a href="/intake/queue" class="waves-effect waves-primary side-icon ">
                                    <i class="md md-my-library-books" aria-hidden="true"></i>
                                    <span>Intake Queue</span>
                                    
                                </a>
                                
                            </li>
                        
                    
                
                    
                        
                            <li class="has_sub">
                                <a href="/task/management" class="waves-effect waves-primary side-icon ">
                                    <i class="md md-clipboard-text" aria-hidden="true"></i>
                                    <span>Tasks</span>
                                    
                                </a>
                                
                            </li>
                        
                    
                
                
            </ul>
        </div>

        <div class="clearfix"></div>
    </div>
</div>

    <div id="pviModalFollowUp" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="false" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close followUpCancelBtn" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title">Enter Case #</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="alert alert-danger fade in hide p-0 p-l-10 p-r-10" id="messageBox">
                            <div id="errorMessage"></div>
                        </div>
                        
                            <label class="control-label">Create Follow-Up for Initial Case #</label>
                        
                        <input type="text"  id="parentCaseId" class="caseNumber" name="submissionCaseNumber" class="form-control" maxlength="50"/>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn pv-btn-grey waves-effect followUpCancelBtn" data-dismiss="modal">Cancel</button>
                <button type="button" id="followUpOkBtn" class="btn btn-primary waves-effect waves-light">Ok</button>
            </div>
        </div>
    </div>
</div>
    <div class="modal fade" id="reportModal" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <span class="fileType h4"></span>
                <span class="modal-title XMLfileName h4"></span>
            </div>
            <div class="modal-body">
                <div class="e2bXMLDetail hide"><pre class="xmlContent" lang="xml"></pre></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
    <div id="pviSplitModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
     aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close btn-split-cancel" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title">Split</h4>
            </div>
            <div class="modal-body">
                <div class="row split-step1">
                    <label class="control-label">How many cases do you want to split this case into?</label>
                    <div class="col-sm-8">
                        <input type="text" name="splitCaseCount" class="splitInput col-sm-2" maxlength="4" value="" id="splitCaseCount" />
                    </div>

                </div>
                <div class="row split-step2 hide">
                    <div class="col-sm-12">
                        <table class="table table-striped split-table pv-inner-table m-b-0">
                            <thead>
                            <tr>
                                <th class="pv-col-sn">#</th>
                                <th class="col-md-9">File Name</th>
                                <th class="col-md-3">Case Number</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <td class="num">1</td>
                                <td>
                                    <select class="form-control select2 select2-box multiSelectSelect2Field existing-case-select select-split" id="case-attachments[0]" name="case-attachments[0]" multiple="multiple" data-value="" >
</select>
                                </td>
                                <td class="existing-case-number">
                                    <a href=""><label class="control-label existing-case-num"></label></a>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </div>

                </div>
            </div>
            <div class="row split-no-attachment hide" style='text-align: center;'></div>
            <div class="modal-footer">
                <span class="split-bot-btn1">
                    <button type="button" class="btn btn-default waves-effect split-cancel" data-dismiss="modal">Cancel</button>
                    <button type="button" id="submissionSplitModalOkBtn1" class="btn btn-inverse waves-effect waves-light" >Ok</button>
                </span>
                <span class="split-bot-btn2 hide">
                    <button type="button" class="btn btn-default waves-effect btn-split-cancel" data-dismiss="modal">Cancel</button>
                    <button type="button" id="submissionSplitModalCreateBtn" class="btn btn-inverse waves-effect waves-light" >Create</button>
                </span>
                <span class="split-bot-bt3 hide">
                    <button type="button" id="submissionSplitModalOkBtn2" class="btn btn-inverse waves-effect waves-light" >Ok</button>
                </span>
                <span class="split-bot-btn4 hide text-center">
                    <button type="button" class="btn btn-inverse waves-effect" id="submissionSplitUIDialogModalCancelBttn2" data-dismiss="modal">Ok</button>
                </span>
                <span class="split-bot-btn5 hide text-center">
                    <button type="button" class="btn btn-inverse waves-effect" id="splitSubmissionDone" data-dismiss="modal">Ok</button>
                </span>
            </div>
        </div>
    </div>

    <table class="split-row hide">
      <tr>
        <td class="num split-count"></td>
        <td>
            <select class="form-control select2 select2-box multiSelectSelect2Field select-split" name="case-attachments[0]" id="case-attachments[0]" multiple="multiple" >
</select>
        </td>
        <td class="intakeCaseNum">
            <a><label class="control-label notDefinedYet">Not Defined Yet</label></a>
        </td>
      </tr>
    </table>
</div>
    <div id="copyCaseModal" data-custom-class="" data-has-confirm-button="false"
     data-allow-outside-click="false" data-has-done-function="false" data-animation="none" data-timer="null"
     style="display: none; margin-top: -170px;">
    <div class="sa-icon sa-error" style="display: none;">
        <span class="sa-x-mark">
            <span class="sa-line sa-left"></span>
            <span class="sa-line sa-right"></span>
        </span>
    </div>

    <div class="sa-icon sa-warning pulseWarning" style="display: block;">
        <span class="sa-body pulseWarningIns"></span>
        <span class="sa-dot pulseWarningIns"></span>
    </div>

    <div class="sa-icon sa-info" style="display: none;"></div>

    <div class="sa-icon sa-success" style="display: none;">
        <span class="sa-line sa-tip"></span>
        <span class="sa-line sa-long"></span>

        <div class="sa-placeholder"></div>

        <div class="sa-fix"></div>
    </div>

    <div class="sa-icon sa-custom" style="display: none;"></div>

    <h2 class="alert-type">Warning</h2>

    <p style="display: block;" class="display-message"></p>
    <fieldset>
        <input type="text" tabindex="3" placeholder="">

        <div class="sa-input-error"></div>
    </fieldset>

    <div class="sa-error-container">
        <div class="icon">!</div>

        <p>Not valid!</p>
    </div>

    <div class="sa-button-container">

        <div class="sa-confirm-button-container">
            <button class="confirm btn-confirm w-xs first-btn" tabindex="1"
                    style="display: inline-block;">Yes</button>

            <div class="la-ball-fall">
                <div></div>

                <div></div>

                <div></div>
            </div>
        </div>

        <div class="sa-confirm-button-container">
            <button class="confirm btn-reject w-xs second-btn" tabindex="1"
                    style="display: inline-block;">No</button>

            <div class="la-ball-fall">
                <div></div>

                <div></div>

                <div></div>
            </div>
        </div></div></div>

    <div id="splitConfirmModal" data-custom-class="" data-has-confirm-button="false"
     data-allow-outside-click="false" data-has-done-function="false" data-animation="none" data-timer="null"
     style="display: none; margin-top: -170px;">
    <div class="sa-icon sa-error" style="display: none;">
        <span class="sa-x-mark">
            <span class="sa-line sa-left"></span>
            <span class="sa-line sa-right"></span>
        </span>
    </div>

    <div class="sa-icon sa-warning pulseWarning" style="display: block;">
        <span class="sa-body pulseWarningIns"></span>
        <span class="sa-dot pulseWarningIns"></span>
    </div>

    <div class="sa-icon sa-info" style="display: none;"></div>

    <div class="sa-icon sa-success" style="display: none;">
        <span class="sa-line sa-tip"></span>
        <span class="sa-line sa-long"></span>

        <div class="sa-placeholder"></div>

        <div class="sa-fix"></div>
    </div>

    <div class="sa-icon sa-custom" style="display: none;"></div>

    <h2 class="alert-type">Warning</h2>

    <p style="display: block;" class="display-message"></p>
    <fieldset>
        <input type="text" tabindex="3" placeholder="">

        <div class="sa-input-error"></div>
    </fieldset>

    <div class="sa-error-container">
        <div class="icon">!</div>

        <p>Not valid!</p>
    </div>

    <div class="sa-button-container">

        <div class="sa-confirm-button-container">
            <button class="confirm btn-confirm w-xs first-btn" tabindex="1"
                    style="display: inline-block;">Yes</button>

            <div class="la-ball-fall">
                <div></div>

                <div></div>

                <div></div>
            </div>
        </div>

        <div class="sa-confirm-button-container">
            <button class="confirm btn-reject w-xs second-btn" tabindex="1"
                    style="display: inline-block;">No</button>

            <div class="la-ball-fall">
                <div></div>

                <div></div>

                <div></div>
            </div>
        </div></div></div>

    <!-- Modal -->
<div class="modal fade" id="attachmentModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title" id="attachmentModalHeader"></h4>
            </div>
            <div class="modal-body spinner" id="modalBodyData">
                <div id="viewer" style="width:100%;"></div>
            </div>
        </div>

    </div>
</div>
    
<div id="taskModal" class="modal fade" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title">Create Task</h4>
            </div>
            <div class="modal-body">
                
                
                <form id="taskForm">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="alert alert-danger fade in hide p-0 p-l-10 p-r-10" id="messageBox">
                                <div id="errorMessage"></div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4 required">
                                    <label for="taskTypeId" class="control-label lbl-elipsis">Task Type
                                    </label>
                                        <select id="taskTypeId" data-placeholder="Select" name="taskTypeId" class="form-control select2-box" >
<option value="100012" >Case Nullification</option>
<option value="100018" >Task11</option>
<option value="100019" >task12</option>
<option value="100014" >Query Action</option>
<option value="100015" >Test QA 2</option>
<option value="100016" >Hospitalization Dates</option>
<option value="100017" >Hospital Discharge Summary</option>
<option value="1" >Case</option>
<option value="2" >Letter</option>
<option value="3" >Expedited Report</option>
<option value="4" >Periodic Report</option>
<option value="5" >Local Event</option>
<option value="100000" >Unbliding Approval</option>
<option value="100008" >Other</option>
<option value="100002" >Test_PMDA Fax report</option>
</select>
                                    
                                </div>
                                <div class="col-sm-4">
                                    <label for="priorityId">Priority</label>
                                    
                                    <select id="priorityId" name="priorityId" class="form-control select2-box" data-placeholder="Select" >
<option value="1" >High</option>
<option value="2" >Medium</option>
<option value="3" >Low</option>
</select>
                                    
                                </div>

                                <div class="col-sm-4 required">
                                    <label for="assignedToId" class="control-label lbl-elipsis">Assigned To</label>
                                    <select id="assignedToId" name="assignedToId" class="form-control" data-placeholder="Select"></select>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4 m-t-5">
                                    <label for="dueDate">Due Date</label>
                                    <div class="datepicker internal input-group date">
                                        <input type="text" class="form-control futureDatesAllowed" data-precision="DD-MMM-YYYY" name="dueDate" id="dueDate" placeholder="Due Date" value="" />
                                        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
                                            <i class="md md-calendar-blank"></i>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-sm-4 m-t-5">
                                    <label for="completionDate">Completion Date</label>
                                    <div class="datepicker internal input-group date">
                                        <input type="text" class="form-control" data-precision="DD-MMM-YYYY" name="completionDate" id="taskCompletionDate" placeholder="Completion Date" value="" />
                                        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
                                            <i class="md md-calendar-blank"></i>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-sm-4 m-t-5">
                                    <label for="status">Status</label>
                                    <select id="taskStatus" name="statusId" class="select2-box form-control" >
<option value="1" >New</option>
<option value="2" >In Progress</option>
<option value="3" >Need Clarification</option>
<option value="4" >Closed</option>
</select>
                                </div>
                                <div class="col-sm-12 required m-t-5">
                                    <label for="description" class="control-label lbl-elipsis">Description</label>
                                    <textarea id="description" name="description" rows="8" cols="20" maxlength="4000" class="form-control m-b-5" ></textarea>
                                    <span class="maxlength-feedback"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4 m-t-5 hide">
                            <label class="control-label lbl-elipsis">Intake Case Number</label>
                            <input type="hidden" id="case-id" name="primaryRefId" value="" />
                            <span></span>

                        </div>
                        <div class="col-sm-4 m-t-5">
                            <label class="control-label lbl-elipsis">Intake Case Number</label>
                            <input type="hidden" id="case-number" name="tertiaryRefId" value="" />
                            <span></span>

                        </div>
                        <div class="col-sm-4 m-t-5">
                            <label  class="control-label lbl-elipsis">Version</label>
                            <input type="hidden" id="case-version" name="secondaryRefId" value="" />
                            <span></span>
                        </div>
                        <div class="col-sm-2 m-t-5">
                            <label class="control-label lbl-elipsis">Email Alert</label>
                            <div class='internal checkbox checkbox-primary'>
                                <input type="checkbox" id="task-email-alert" name="" value="true"/>
                                <label class="" for="task-email-alert"></label>
                            </div>
                        </div>
                        <div class="col-sm-2 hide">
                            <label class="control-label lbl-elipsis">SMS Alert</label>
                            <div class='internal checkbox checkbox-primary'>
                                <input type="checkbox" id="task-sms-alert"  value="true"/>
                                <label class="" for=""></label>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4 m-t-5">
                            <label class="control-label lbl-elipsis" id="created_updated_ele">Created By</label>
                                <div class="taskManagerCreatedByUsername">Load16</div>
                        </div>
                        <div class="col-sm-4 m-t-5">
                            <label class="control-label lbl-elipsis">Date Created</label>
                            <span class="task-date"></span>
                        </div>
                    </div>
                    <input type="hidden" id="taskId" name="taskId" value="" />
                    <input type="hidden" id="countryId" name="countryId" value="" />
                    <input type="hidden" id="fourthRefId" name="fourthRefId" value="" />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" id="task-cancel-btn" class="btn pv-btn-grey waves-effect">Cancel</button>
                <button type="button" id="task-save-btn" class="btn btn-primary waves-effect waves-light">Create</button>
                <button type="button" id="task-update-btn" class="btn btn-primary waves-effect waves-light hide">Update</button>
            </div>
        </div>
    </div>
</div>
    
<div id="pviModalFollowUpQuery" class="modal fade" data-backdrop="static" data-keyboard="false" style="position: relative;">
    <div class="follow-up-modal-dialog modal-dialog modal-lg" style="position: fixed;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close FUQCancelBtn" id="followUpQueryCloseBtn" aria-hidden="true">×</button>
                <h4 class="modal-title heading addHeading">Follow-Up Query</h4>
                <h4 class="modal-title heading hide editHeading">Edit Follow-up Query</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-sm-12">
                        <form id="followUpQueryForm" enctype="multipart/form-data" method="post">
                            <div class="row">
                                <div class="method col-md-10 required">
                                    <label for="method" class="control-label m-t-5 lbl-elipsis">Method </label>
                                    <select id="method" name="methodId" class="form-control select2" >
<option value="1" >Email</option>
<option value="2" >Fax</option>
<option value="3" >Letter</option>
<option value="4" >Phone Call</option>
</select>
                                </div>
                                <div class="col-md-2 m-t-30">
                                    <div class="internal checkbox checkbox-primary toggleCC carbonCopy m-r-10 checkbox-inline">
                                        <input id="ccToggle" class="ccToggle" type="checkbox" name="ccToggle" value="true"/>
                                        <label for="ccToggle" class="control-label">CC </label>
                                    </div>
                                    <div class="internal checkbox checkbox-primary toggleBCC blindCarbonCopy checkbox-inline">
                                        <input id="bccToggle" class="bccToggle" type="checkbox" name="bccToggle" value="true"/>
                                        <label for="bccToggle" class="control-label">BCC </label>
                                    </div>
                                </div>
                            </div>

                            <div class="row m-t-10 followUpReporters to mailReceiver">
                                <div class="col-md-12 required">
                                    <label for="followUpReporters" class="control-label lbl-elipsis">To </label>
                                    <select id="followUpReporters" class="lbl-required form-control  select2 select2-box wrapped-multiselect select-split customValueMultiSelect2"
                                            name="sentTo"
                                            multiple="multiple">
                                    </select>
                                </div>
                            </div>
                            <div class="row sentToPostalMail m-t-10 required hide">
                                <div class="col-md-12">
                                    <label for="sentToPostalMail" class="control-label lbl-elipsis">To </label>
                                    <textarea id="sentToPostalMail" name="sentToPostalMail" rows="1" cols="20" maxlength="1000" class="form-control fm-text-area p-t-0" ></textarea>
                                    <span class="maxlength-feedback"></span>
                                </div>
                            </div>
                            <div id="ccDiv" class="cc carbonCopy m-t-10 row">
                                <div class="col-md-12">
                                    <label for="cc" class="control-label lbl-elipsis">CC</label>
                                    <select id="cc" class="form-control  select2 select2-box wrapped-multiselect select-split customValueMultiSelect2" name="cc" multiple="multiple">
                                    </select>
                                </div>
                            </div>

                            <div id="bccDiv" class="bcc blindCarbonCopy m-t-10 row">
                                <div class="col-md-12">
                                    <label for="bcc" class="control-label lbl-elipsis">BCC</label>
                                    <select id="bcc" class="form-control select2 select2-box wrapped-multiselect select-split customValueMultiSelect2" name="bcc" multiple="multiple"></select>
                                </div>
                            </div>

                            <div class="emailTemplate m-t-10 row">
                                <div class="col-md-12">
                                    <label for="emailTemplate" class="control-label lbl-elipsis">Template </label>
                                    <select id="emailTemplate" name="emailTemplate" class="form-control select2-box" >
</select>
                                </div>
                            </div>

                            <div class="row m-t-10 mailSubject">
                                <div class="subject col-md-12 required">
                                    <label for="subject" class="control-label lbl-elipsis">Subject </label>
                                    <textarea id="subject" name="subject" rows="1" cols="20" maxlength="1000" class="form-control fm-text-area p-t-0" ></textarea>
                                    <span class="maxlength-feedback"></span>
                                </div>
                            </div>

                            <div class="row m-t-10 mailBody">
                                <div class="modalFUQMsg col-md-12 required">
                                    <label for="modalFUQMsg" class="control-label lbl-elipsis">Message <span class="fa fa-question-circle " style="color:#0000FF;cursor: pointer;" aria-hidden="true"></span></label>
                                    <textarea id="modalFUQMsg" name="body" rows="15" cols="20" maxlength="10000" class="form-control fm-text-area hide" ></textarea>
                                    <span class="maxlength-feedback"></span>
                                </div>
                            </div>

                            <div class="nonEmail hide">
                                <div class="row sentToNonEmail m-t-10 required">
                                    <div class="col-md-12">
                                        <label for="sentToNonEmail" class="control-label lbl-elipsis">Contacted </label>
                                        <textarea id="sentToNonEmail" name="sentToNonEmail" rows="1" cols="20" maxlength="1000" class="form-control fm-text-area p-t-0" ></textarea>
                                        <span class="maxlength-feedback"></span>
                                    </div>
                                </div>
                                <div class="row description m-t-10 required">
                                    <div class="col-md-12">
                                        <label for="description" class="control-label lbl-elipsis">Description </label>
                                        <textarea id="FU_description" name="description" rows="1" cols="20" maxlength="1000" class="form-control fm-text-area p-t-0" ></textarea>
                                        <span class="maxlength-feedback"></span>
                                    </div>
                                </div>
                                <div class="row m-t-10">
                                    <div class="dateSent col-md-4">
                                        <label for="dateSent" class="control-label lbl-elipsis">Date Contacted</label>
                                        <div class="">
                                            <div class="dateSent datepicker internal input-group date">
                                                <input type="text" class="form-control" data-precision="DD-MMM-YYYY" name="dateSent" id="dateSent" placeholder="Date Contacted" value="" />
                                                <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
                                                    <i class="md md-calendar-blank"></i>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="sentByNonEmail col-md-4">
                                        <label for="sentByNonEmail" class="control-label lbl-elipsis">Contacted By </label>
                                        <input type="text" id="sentByNonEmail" name="sentByNonEmail" value="" maxlength="1000" class="form-control" />
                                    </div>
                                    <div class="dateClosed col-md-4">
                                        <label for="dateClosed" class="control-label lbl-elipsis">Date Closed</label>
                                        <div class="">
                                            <div class="dateClosed datepicker internal input-group date">
                                                <input type="text" class="form-control" data-precision="DD-MMM-YYYY" name="dateClosed" id="dateClosed" placeholder="Date Closed" value="" />
                                                <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
                                                    <i class="md md-calendar-blank"></i>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row comments m-t-10">
                                    <div class="col-md-12">
                                        <label for="comments" class="control-label lbl-elipsis">Comments </label>
                                        <textarea id="comments" name="comments" rows="8" cols="20" maxlength="4000" class="form-control fm-text-area" ></textarea>
                                        <span class="maxlength-feedback"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="attachments fileName m-t-10">
                                <table class="table table-striped pv-inner-table m-b-0">
                                    <thead>
                                        <tr>
                                            <th class="col-md-1">#</th>
                                            <th class="col-md-11  true"> <label class="control-label lbl-elipsis">Attachments </label></th>
                                            <th><a href="javascript:void(0);" class="pull-right add-attachment" data-tabular="true">
                                                <i class="fa fa-plus-square-o"></i></a>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody class="pv-draggable-list ui-sortable" id="attachmentSection-followUp" style="">
                                        <tr class="row-table pv-section-record ui-sortable-handle hide deleted" data-id = "">
                                            <td class="new-index badge-index">0</td>
                                            <td>
                                                <div class="col-sm-12 pv-col-attachment">
                                                    <a href="javascript:void(0)" class="attachmentRow m-r-10" data-deleted="false" data-filename="" data-storageid="" data-redact="false" ></a>
                                                </div>
                                            </td>
                                            <td>
                                                <a href="javascript:void(0);" title="Remove this section" class="pull-right delete-attachment">
                                                    <i class="md md-close" aria-hidden="true"></i>
                                                </a>
                                            </td>
                                        </tr>
                                    <tr class="row-table pv-section-record ui-sortable-handle" style="">
                                        <td class="new-index badge-index">1</td>
                                        <td>
                                            <div class="internal" data-id="attachmentFilePath">
                                                <div class="file-uploader" data-provides="fileupload">
                                                    <input type="file" name="followUpQuery.attachments[0].file" data-mandatory="false" data-mandatoryset="0" class="file">
                                                    <div class="input-group">
                                                        <input type="text" class="form-control fileName" disabled="" placeholder="Attach a file" value="" name="followUpQuery.attachments[0].fileName">
                                                        <span class="input-group-btn ">
                                                            <button class="browse btn btn-primary btn-file-upload" type="button"><i class="glyphicon glyphicon-search"></i>
                                                            </button>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <a href="javascript:void(0);" title="Remove this section" class="pull-right delete-attachment">
                                                <i class="md md-close" aria-hidden="true"></i>
                                            </a>
                                        </td>
                                    </tr>
                                    </tbody>
                                </table>
                            </div>

                            <div class="commentsEmail hide m-t-10">
                                <label for="commentsEmail" class="control-label lbl-elipsis">Comments</label>
                                <textarea id="commentsEmail" name="comments" rows="10" cols="20" maxlength="500" class="form-control fm-text-area" ></textarea>
                                <span class="maxlength-feedback"></span>
                            </div>

                            <div class="row">
                                <div class="dateContactedPostalMail hide  m-t-10 col-md-4">
                                    <label for="dateContactedPostalMail" class="control-label lbl-elipsis">Date Contacted</label>
                                    <div class="">
                                        <div class="dateContactedPostalMail datepicker internal input-group date">
                                            <input type="text" class="form-control" data-precision="DD-MMM-YYYY" name="dateContactedPostalMail" id="dateContactedPostalMail" placeholder="Date Contacted" value="" />
                                            <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
                                                <i class="md md-calendar-blank"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="contactedPostalMail  hide  m-t-10 col-md-4">
                                    <label for="contactedPostalMail" class="control-label lbl-elipsis">Contacted By </label>
                                    <input type="text" id="contactedPostalMail" name="contactedPostalMail" value="" maxlength="1000" class="form-control" />
                                </div>
                                <div class="dateClosedEmail hide  m-t-10 col-md-4 dropup">
                                    <label for="dateClosedEmail" class="control-label lbl-elipsis">Date Closed</label>

                                    <div class="">
                                        <div class="datepicker internal input-group date">
                                            <input type="text" class="form-control " data-precision="DD-MMM-YYYY" name="dateClosed" id="dateClosedEmail" placeholder="Date Closed" value="" />
                                            <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
                                                <i class="md md-calendar-blank"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <input type="hidden" id="followUpQueryId" name="followUpQueryId" value="" />
                            <input type="hidden" id="primaryRefId" name="primaryRefId" value="" />
                            <input type="hidden" id="secondaryRefId" name="secondaryRefId" value="" />
                            <input type="hidden" id="tertiaryRefId" name="tertiaryRefId" value="" />
                            <input type="hidden" id="maxFileSize" name="maxFileSize" value="5" />

                        </form>
                    </div>
                </div>
            </div>
            <div id="emailHelpModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" id="emailHelpClose" class="close" aria-hidden="true">×</button>
                <h4 class="modal-title emailHelp">Field tags supported in e-mail body and subject</h4>
            </div>
            <div class="modal-body">
                <table class="table table-striped pv-inner-table m-b-0" id="placeholderTable">
                    <thead>
                    <tr>
                        <th class="col-md-1">#</th>
                        <th class="col-md-3"> <label class="control-label lbl-elipsis" > Placeholder </label></th>
                        <th class="col-md-8"> <label class="control-label lbl-elipsis"> Help Text </label></th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr class="primary"><td>1</td><td>[Intake Case #]</td><td> Intake Case Number</td>
                    <tr class="primary"><td>2</td><td>[Version]</td><td> Version of the Case</td>
                    <tr class="primary"><td>3</td><td>[First Receipt Date]</td><td> First Receipt Date of the Case</td>
                    <tr class="primary"><td>4</td><td>[FU Receipt Date]</td><td> FU Receipt Date of the Case</td>
                    <tr class="primary"><td>5</td><td>[Primary Reporter]</td><td> Name of the Primary Reporter in format &lt;First Name&gt; &lt;Middle Name&gt; &lt;Last Name&gt;</td>
                    <tr class="primary"><td>6</td><td>[Patient Initials]</td><td> Name / Initials of the Patient</td>
                    <tr class="primary"><td>7</td><td>[Age]</td><td> Age of the Patient</td>
                    <tr class="primary"><td>8</td><td>[Gender]</td><td> Gender of the Patient </td>
                    <tr class="primary"><td>9</td><td>[Primary Suspect Product]</td><td> Name of the Primary Suspect Product in format &lt;Trade Name&gt; (&lt;Generic Name&gt;) if Product is coded else shall display the Product Name</td>
                    <tr class="primary"><td>10</td><td>[Primary Event]</td><td> Reported Reaction for first event in the case</td>
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" id="emailHelpOk" class="btn pv-btn-grey waves-effect emailHelp-ok-btn" >Ok</button>
            </div>
        </div>
    </div>
</div>
            <div class="modal-footer">
                <button type="button" class="btn pv-btn-dark-grey waves-effect" id="FUQResetBtn">Reset</button>
                <button type="button" class="btn pv-btn-grey waves-effect FUQCancelBtn" id="FUQCancelBtn">Cancel</button>
                
                <button type="button" class="btn btn-primary waves-effect waves-light" id="FUQSend">Send</button>
                <button type="button" class="btn pv-btn-grey waves-effect followUpCloseBtn hide" id="fuqClose">Close</button>
                <button type="button" class="btn btn-primary waves-effect waves-light followUpUpdateBtn hide" id="fuqUpdate">Update</button>
                <a id="tempDownload" target="_blank" class="hide"></a>
            </div>
        </div>
    </div>
</div>




    
<div id="product-browser-container" class="pvb-container"></div>

<div id="study-browser-container" class="pvb-container"></div>

<div id="meddra-browser-container" class="pvb-container"></div>

<div class="hide" id="eventCodedIconDivId"><i class="fa pull-right m-t-10 white-tooltip eventCodedFlag"></i></div>
<div class="sweet-alert-modal" data-custom-class="" data-has-cancel-button="true" data-has-confirm-button="false"
     data-allow-outside-click="false" data-has-done-function="false" data-animation="none" data-timer="null"
     style="display: none; margin-top: -170px;">
    <div class="sa-icon sa-error" style="display: none;">
        <span class="sa-x-mark">
            <span class="sa-line sa-left"></span>
            <span class="sa-line sa-right"></span>
        </span>
    </div>

    <div class="sa-icon sa-warning pulseWarning" style="display: block;">
        <span class="sa-body pulseWarningIns"></span>
        <span class="sa-dot pulseWarningIns"></span>
    </div>

    <div class="sa-icon sa-info" style="display: none;"></div>

    <div class="sa-icon sa-success" style="display: none;">
        <span class="sa-line sa-tip"></span>
        <span class="sa-line sa-long"></span>

        <div class="sa-placeholder"></div>

        <div class="sa-fix"></div>
    </div>

    <div class="sa-icon sa-custom" style="display: none;"></div>

    <h2 class="alert-type">Warning</h2>

    <p style="display: block;" class="display-message"></p>
    <fieldset>
        <input type="text" tabindex="3" placeholder="">

        <div class="sa-input-error"></div>
    </fieldset>

    <div class="sa-error-container">
        <div class="icon">!</div>

        <p>Not valid!</p>
    </div>

    <div class="sa-button-container">
        <button class="cancel first-btn btn-cancel w-xs" tabindex="2"
                style="display: inline-block; box-shadow: none;">Cancel</button>

        <div class="sa-confirm-button-container">
            <button class="confirm btn-confirm w-xs" tabindex="1" style="display: none;">OK</button>

            <div class="la-ball-fall">
                <div></div>

                <div></div>

                <div></div>
            </div>
        </div>

        <div class="sa-confirm-button-container">
            <button class="confirm btn-confirm w-xs second-btn" tabindex="1"
                    style="display: inline-block;">Yes</button>

            <div class="la-ball-fall">
                <div></div>

                <div></div>

                <div></div>
            </div>
        </div>

        <div class="sa-confirm-button-container">
            <button class="confirm btn-reject w-xs third-btn" tabindex="1"
                    style="display: inline-block;">No</button>

            <div class="la-ball-fall">
                <div></div>

                <div></div>

                <div></div>
            </div>
        </div></div></div>


<input type="hidden" name="serverTimestampURL" value="http://10.100.22.243:8081/config/loadServerTime" id="serverTimestampURL" />
<input type="hidden" id="serverTimestamp"/>
<div id="pv-justification-modal" class="modal fade" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="justificationModalLabel" aria-hidden="true">
</div>
<div class="modal fade attachmentUploadModel" id="attachmentUploadModel" tabindex="-1" role="dialog"
     aria-hidden="true" data-fileNameAttribute="">
    <input type="hidden" name="currentAttachmentName" value="" id="currentAttachmentName" />
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>

                <h4 class="modal-title">Update Attachment</h4>
            </div>

            <div class="modal-body">
                <p>Do you want to replace the original file or provide the edited copy?</p>
                <form>
                    <label class="radio-inline">
                        <input type="radio" name="attachment_type_redact" value="false">
                        Replace Original
                    </label>
                    <label class="radio-inline">
                        <input type="radio" name="attachment_type_redact" value="true">
                        Edited Copy
                    </label>
                </form>
            </div>

            <div class="modal-footer">
                <button id="attachmentModelSubmitButton" type="button" class="btn btn-secondary">
                    Ok
                </button>
                <button id="attachmentModelDismissButton" type="button" class="btn btn-secondary" data-dismiss="modal">
                    Cancel</button>
            </div>
        </div>
    </div>
</div>

<div id="emailContentfuqModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="false" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close emailContentModalCancelBtn" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title">Follow Up Query Information</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12 required">
                        <label for="emailMethod" class="control-label lbl-elipsis">Method </label>
                        <select id="emailMethod" name="emailMethod" class="form-control select2" disabled="disabled" >
<option value="1" >Email</option>
<option value="2" >Fax</option>
<option value="3" >Letter</option>
<option value="4" >Phone Call</option>
</select>
                    </div>
                    <div class="col-md-12 required">
                        <label for="emailSentTo" class="control-label lbl-elipsis">To </label>
                        <select id="emailSentTo" class="lbl-required form-control  select2 select2-box multiSelectSelect2Field wrapped-multiselect select-split customValueMultiSelect2"
                            name="emailSentTo"
                            multiple="multiple" disabled>
                        </select>
                    </div>
                    <div class="col-md-12">
                        <label for="emailCcValue" class="control-label lbl-elipsis">CC</label>
                        <select id="emailCcValue" class="form-control  select2 select2-box wrapped-multiselect select-split customValueMultiSelect2" name="emailCcValue" multiple="multiple" disabled>
                        </select>
                    </div>
                    <div class="col-md-12">
                        <label for="emailBccValue" class="control-label lbl-elipsis">BCC</label>
                        <select id="emailBccValue" class="form-control select2 select2-box wrapped-multiselect select-split customValueMultiSelect2" name="emailBccValue" multiple="multiple" disabled></select>
                    </div>

                    <div class="col-md-12">
                        <label for="emailTemplateValue" class="control-label lbl-elipsis">Template </label>
                        <select id="emailTemplateValue" name="emailTemplateValue" class="form-control select2-box" disabled="disabled" >
</select>
                    </div>

                    <div class="col-md-12 required">
                        <label for="emailSubjectValue" class="control-label lbl-elipsis">Subject </label>
                        <textarea id="emailSubjectValue" name="emailSubjectValue" rows="1" cols="20" maxlength="1000" class="form-control fm-text-area p-t-0" disabled="disabled" ></textarea>
                        <span class="maxlength-feedback"></span>
                    </div>

                    <div class="modalFUQMsg col-md-12 required">
                        <label for="emailContentMessage" class="control-label">Email Content</label>
                        <textarea id="emailContentMessage" name="emailContentMessage" cols="100" rows="15" class="form-control hide" disabled></textarea>
                    </div>
                </div>
                <div class="row m-t-10">
                    <label class="control-label">Attachments</label>
                    <div class="col-sm-12 pv-col-attachment" id="emailContentAttachments"></div>
                </div>
            </div>
            <div class="modal-footer">
                
                <button type="button" id="pv-emailContentClose" class="btn pv-btn-grey waves-effect" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


    

<div class="pv-loader-bg" style="display:block">
    <div class="loader">
        <svg class="circular" viewBox="25 25 50 50">
            <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>
        </svg>
    </div>
</div>

<div id="action-views-config" data-hide-class="fceHideAction"></div>
<div class="content-page">
    <!-- Start content -->
    <div class="content p-r-0">
        <div class="container p-r-0">

            <div class="pv-fullcase-treeview ">
                <div class="icon-toggle-treeview">
                    <a class="pv-tree-ictop toggle-tree-panel" href="javascript:void(0);" title="Toggle Tree View"><i class="md md-chevron-left"></i></a>
                    <a class="pv-tree-ictop toggle-tree-nodes" href="javascript:void(0);" title="Toggle All Nodes"><i class="md md-arrow-expand"></i></a>
                </div>

                <div id="treeViewId"></div>
            </div>

            <div class="pv-fullcase-container">

                <!-- Page-Title -->
                

<div class="row">
    <div class="col-sm-12">
        <div class="page-title-box">
            <div class="fixed-page-head">
                <div class="page-head-lt">
                    <div class="col-md-12">
                        
                            <span class="col-md-2">
                                <span id="pvi-readOnly-indicator" class="hide">
                                    <i class="md md-pencil-off"></i>
                                </span>
                                <h5>Intake Case Number</h5>
                                <h4 id="intakeCaseNumber">
                                    20200800138
                                </h4>
                            </span>
                            <span class="col-md-3">
                                <h5>Version</h5>
                                <h4 id="caseVersion" class="dropdown">
                                    <span class="caseVersionInfoSpan" data-case-version="1" data-case-version-display="Initial">Initial</span>
                                </h4>
                            </span>
                            
                            <span class="col-md-3">
                                <h5>State</h5><h4 id="caseStateName">New
                                <i class="fa fa-info-circle more-option hidden" id="stateChangeComment" data-content=""></i>
                            </h4>
                            </span>
                            <span class="col-md-2">
                                <h5>Assigned To</h5>
                                <h4 class="lbltop-assigned">
                                    
                                        <a href="#" id="assigneeIdLink" class="manageAssignUser lbl-elipsis lbl-elipsis-inline">
                                            
                                                Load11
                                            
                                        </a>
                                        <select id="assignSelect" class="displayUserList form-control select2 hide" disabled></select>
                                        <i id="assignedToLogTopBar" class="fa fa-info-circle pv-caseAssign-log hidden" data-content="true" data-id="244399"></i>
                                    
                                </h4>
                            </span>
                            <span class="col-md-2">
                                    <h5>Priority</h5>
                                    <h4>
                                        <span id="priorityBtn" class="btn badge pop-icP4">
                                        
                                                <span class="pv-ic-priority" data-priority-select-id="244399">P4</span>
                                        
                                        <i id="priorityLog" class="md md-information pv-priority-log hide" data-content="Auto-calculated" data-id="244399"></i>
                                        </span>
                                    </h4>
                            </span>
                        
                    </div>
                </div>



                <div class="pull-right page-head-rt text-right" id="viewActionContainer">
                    
                        <ul class="navbar-nav pv-inline-cta">
                            <li class="checkbox checkbox-primary pv-ic-checkbox">
                                <input type="hidden" name="_eastPanelToggle" /><input type="checkbox" name="eastPanelToggle" value="" id="eastPanelToggle" data-zone="east"  />
                                <label for="eastPanelToggle" class="cur-pointer" title="Display Attachments"><i class="md md-attachment md-lg"></i></label>
                            </li>
                        </ul>
                    
                </div>
            </div>
        </div>
    </div>
</div>

<div id="assignedToLogModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title rdLog">Case Assignment Log</h4>
            </div>

            <div class="modal-body">
                <div class="col-sm-12 pv-caselist caselistrecords ">
                    <div class="pv-sec-bg panel-body m-0 p-0">
                        <div class="dataTables_scroll">
                            <table class="table table-striped display order-column list-table pv-list-table"
                                   id="assignedToLogTable">
                                <thead>
                                <tr>
                                    <th>#</th>
                                    <th class="pv-col-sm">Assigned By</th>
                                    <th class="pv-col-sm">Assigned To</th>
                                    <th class="pv-col-md">Timestamp</th>
                                    <th>Comments</th>
                                </tr>
                                </thead>
                                <tbody>

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn pv-btn-grey waves-effect assignedTo-Ok-btn"
                        data-dismiss="modal">Ok</button>
            </div>
        </div>
    </div>
</div>

                <div class="row">
                    <div class="">
                        <div class="card-box-transparent">
                            <div id="splitContent" class="pv-custom-scrollbar">
                                <div class="pane ui-layout-center" id="commonDataElements"
                                     data-countries-current-user-privacy-location="[]"
                                     data-all-countries-in-privacy-location="[1, 99, 73, 79]">
                                    <div class="content-box col-lg-12">
                                        <div class="alert alert-dismissible forceLineWrap hide" role="alert" id="alertContainer"></div>
                                        <input type="hidden" name="caseState" value="New" disabled="disabled" id="caseState" />
                                        <input type="hidden" name="caseState.id" value="1" id="caseState.id" />
                                        <input type="hidden" name="pageTypeId" value="3" id="pageTypeId" />
                                        <input type="hidden" name="latestVersion" id="latestVersion" value="true" />
                                        <input type="hidden" name="caseVersion" value="1" id="caseVersion" />
                                        <input type="hidden" name="lockedByUser" value="" id="lockedByUser" />
                                        <input type="hidden" name="caseNumberDefaultValue" value="N/A" id="caseNumberDefaultValue" />
                                        <input type="hidden" name="attachmentViewerProvider" value="Accusoft" id="attachmentViewerProvider" />
                                        <input type="hidden" name="sourceDatabaseId" value="1" id="sourceDatabaseId" />
                                        <input type="hidden" name="defaultReporterContactType" value="2002" id="defaultReporterContactType" />
                                        <input type="hidden" name="isConsentForFu" id="isConsentForFu" value="1031" />
                                        
<div id="justificationModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" id="justificationCloseButton" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title justificationComments">Case Assignment</h4>
            </div>
            <div class="modal-body">
                <div class="row assigneeUserList">
                    <div class="col-sm-6 required">
                        <label for="assigneeUserList" class="control-label lbl-elipsis">Assign To:</label>
                        <select name="assigneeUserList" id="assigneeUserList" class="form-control select2"></select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <label for="justificationModalId" class="control-label">Comments
                        </label>
                        <textarea id="justificationModalId" name="justificationComments" rows="4" cols="20" maxlength="500" class="form-control fm-text-area" ></textarea>
                        <span class="maxlength-feedback"></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="justificationModalOkButton" class="btn btn-inverse waves-effect waves-light">Ok</button>
                <button type="button" id="assignCancelButton" class="btn btn-default btn-md">Cancel</button>
               </div>
        </div>
    </div>
</div>

                                        <div class="panel-group" id="accordion-case">
                                        <form action="/caseEntry/update" method="post" class="fceForm fieldDefForm" role="form" enctype="multipart/form-data" >

                                                <input type="hidden" name="id" value="244399" id="id" />
                                                <input type="hidden" name="priorityJustification" id="justification" value="Auto-calculated" />
                                                <input type="hidden" name="templateId" value="2" id="templateId" />
                                                <input type="hidden" name="showAllAccordion" id="showAllAccordion" value="false" />
                                                <input type="hidden" name="isDiffViewMode" id="isDiffViewMode" value="false" />
                                                <input type="hidden" name="lastSequenceNumber" value="138" id="lastSequenceNumber" />
                                                <input type="hidden" name="medDraHierarchyMap" value="" id="medDraHierarchyMap" />
                                                <input type="hidden" name="priority.id" value="1028" id="casePriorityId" />
                                                <!-- General -->
                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-general">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#generalCaseInfo" class="collapsed sec-display-txt sectionTitle">                    General                </a>                <div class='configureFields pv-head-config'><a href="#" class="dropdown-toggle pull-right ic-sm"       data-toggle="dropdown"><i class="md md-list" aria-hidden="true"></i></a>    <ul class="dropdown-menu field-config">                                                    <li class="field-visible checkbox checkbox-primary nowrap" data-id="safetyDataSourceType"                    data-mandatory="true">                        <input type="checkbox" data-value="Source" data-id="safetyDataSourceType" data-index = "0" data-section-name="General" data-class ="select2-box sourceType"/>                        <label for="safetyDataSourceType">Source</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="classification"                    data-mandatory="false">                        <input type="checkbox" data-value="Category" data-id="classification" data-index = "1" data-section-name="General" data-class ="select2 multiSelectSelect2Field wrapped-multiselect"/>                        <label for="classification">Category</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="safetyDataReceiptDate"                    data-mandatory="true">                        <input type="checkbox" data-value="First Receipt Date" data-id="safetyDataReceiptDate" data-index = "2" data-section-name="General" data-class =""/>                        <label for="safetyDataReceiptDate">First Receipt Date</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="mostRecentReceiptDate"                    data-mandatory="true">                        <input type="checkbox" data-value="FU Receipt Date" data-id="mostRecentReceiptDate" data-index = "3" data-section-name="General" data-class =""/>                        <label for="mostRecentReceiptDate">FU Receipt Date</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="safetyDataCentralReceiptDate"                    data-mandatory="false">                        <input type="checkbox" data-value="Central Receipt Date" data-id="safetyDataCentralReceiptDate" data-index = "4" data-section-name="General" data-class =""/>                        <label for="safetyDataCentralReceiptDate">Central Receipt Date</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="caseCountry"                    data-mandatory="true">                        <input type="checkbox" data-value="Case Country" data-id="caseCountry" data-index = "5" data-section-name="General" data-class ="country select2-box select2-lazy"/>                        <label for="caseCountry">Case Country</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="vendorId"                    data-mandatory="false">                        <input type="checkbox" data-value="Case Processing Unit" data-id="vendorId" data-index = "6" data-section-name="General" data-class ="autoPopulateSingleValue"/>                        <label for="vendorId">Case Processing Unit</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="senderType"                    data-mandatory="false">                        <input type="checkbox" data-value="Sender Type" data-id="senderType" data-index = "7" data-section-name="General" data-class ="select2-lazy"/>                        <label for="senderType">Sender Type</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="senderName"                    data-mandatory="false">                        <input type="checkbox" data-value="Sender Name" data-id="senderName" data-index = "8" data-section-name="General" data-class =""/>                        <label for="senderName">Sender Name</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="senderEmail"                    data-mandatory="false">                        <input type="checkbox" data-value="Sender Email" data-id="senderEmail" data-index = "9" data-section-name="General" data-class =""/>                        <label for="senderEmail">Sender Email</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="caseDueDate"                    data-mandatory="false">                        <input type="checkbox" data-value="Due Date" data-id="caseDueDate" data-index = "10" data-section-name="General" data-class ="futureDatesAllowed allowDateWithoutTime"/>                        <label for="caseDueDate">Due Date</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="safetyDataLocalSubmissionDueDate"                    data-mandatory="false">                        <input type="checkbox" data-value="Local Submission Due Date" data-id="safetyDataLocalSubmissionDueDate" data-index = "11" data-section-name="General" data-class ="futureDatesAllowed allowEdit"/>                        <label for="safetyDataLocalSubmissionDueDate">Local Submission Due Date</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="safetyDataLocalSubmissionDate"                    data-mandatory="false">                        <input type="checkbox" data-value="Local Submission Date" data-id="safetyDataLocalSubmissionDate" data-index = "12" data-section-name="General" data-class ="allowEdit"/>                        <label for="safetyDataLocalSubmissionDate">Local Submission Date</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="version"                    data-mandatory="false">                        <input type="checkbox" data-value="Version Type" data-id="version" data-index = "13" data-section-name="General" data-class =""/>                        <label for="version">Version Type</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="versionType"                    data-mandatory="false">                        <input type="checkbox" data-value="Version Disposition" data-id="versionType" data-index = "14" data-section-name="General" data-class ="select2-box"/>                        <label for="versionType">Version Disposition</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="versionComment"                    data-mandatory="false">                        <input type="checkbox" data-value="Version Comments" data-id="versionComment" data-index = "15" data-section-name="General" data-class =""/>                        <label for="versionComment">Version Comments</label>                    </li>                                                                                        </ul></div>            </h4>        </div>        <div id="generalCaseInfo"             class="panel-collapse collapse rxmain-container-content">            <div class="row pv-general pv-sec-seperator form-pv">                <div class="col-md-12">                    <div class="form-group pv-top-datepicker-sec">                        <div class="col-md-8 rx-col-table">                                <div id="safetyDataSourceType" class=" safetyDataSourceType null template-control col-md-3 required ">            <label class='control-label lbl-elipsis'>Source</label>        <div class='internal' data-id="safetyDataSourceType">    <select class="form-control   select2-box sourceType   " name="safetyData.sourceType.id" data-from="sourceTypes" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="true" data-value="3" id="safetyData.sourceType.id" ><option value="">Select</option><option value="100011" >Automation_PVD</option><option value="100014" >Clinical Trial</option><option value="6" >Compassionate Use</option><option value="100003" >Literature Marketed</option><option value="100002" >Literature Study</option><option value="1" >Literature-up</option><option value="10" >Non-Interventional Study</option><option value="9" >Non-Sponsored Trial</option><option value="8" >Not Available to Sender</option><option value="7" >Other</option><option value="5" >Post Marketing Surv.</option><option value="2" >Regulatory Authority</option><option value="100001" >Report From Study</option><option value="100012" >Solicited Case</option><option value="4" >Sponsored Trial</option><option value="3" selected="selected" >Spontaneous</option><option value="11" >Stimulated Spontaneous</option></select>        </div></div>    <div id="classification" class=" classification null template-control col-md-3  ">            <label class='control-label lbl-elipsis'>Category</label>        <div class='internal' data-id="classification">    <select class="form-control select2-box  select2 multiSelectSelect2Field wrapped-multiselect   " name="safetyData.classifications.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="[56]" id="safetyData.classifications.id" ><option value="56" selected="selected" >AE Case</option><option value="59" >Legal</option><option value="58" >Medical Inquiry</option><option value="1030" >Non-Valid AE</option><option value="57" >PQC</option></select>        </div></div>    <div id="safetyDataReceiptDate" class="template-control safetyDataReceiptDate  col-md-3 required">            <label class='control-label lbl-elipsis'>First Receipt Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="safetyDataReceiptDate">        <input type="text" class="form-control   " name="safetyData.receiptDate" data-mandatory="true" id="safetyData.receiptDate" data-partialdatesallowed="0" value="01-Apr-2020 00:00:00" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        </div></div>    <div id="mostRecentReceiptDate" class="template-control mostRecentReceiptDate  col-md-3 required">            <label class='control-label lbl-elipsis'>FU Receipt Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="mostRecentReceiptDate">        <input type="text" class="form-control   " name="safetyData.mostRecentReceiptDate" data-mandatory="true" id="safetyData.mostRecentReceiptDate" data-partialdatesallowed="0" value="01-Apr-2020 00:00:00" data-mandatorySet="0" placeholder="" data-precision="" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        </div></div>    <div id="safetyDataCentralReceiptDate" class="template-control safetyDataCentralReceiptDate  col-md-3 ">            <label class='control-label lbl-elipsis'>Central Receipt Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="safetyDataCentralReceiptDate">        <input type="text" class="form-control   " name="safetyData.centralReceiptDate" data-mandatory="false" id="safetyData.centralReceiptDate" data-partialdatesallowed="0" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        </div></div>    <div id="caseCountry" class=" caseCountry null template-control col-md-3 required ">            <label class='control-label lbl-elipsis'>Case Country</label>        <div class='internal' data-id="caseCountry">    <select class="form-control   country select2-box select2-lazy   " name="caseCountry.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="true" data-value="3" id="caseCountry.id" ><option value="">Select</option></select>        </div></div>    <div id="vendorId" class=" vendorId null template-control col-md-3  ">            <label class='control-label lbl-elipsis'>Case Processing Unit</label>        <div class='internal' data-id="vendorId">    <select class="form-control   autoPopulateSingleValue   " name="vendor.id" data-from="vendorsForCurrentUser" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="240219883" id="vendor.id" ><option value="">Select</option><option value="322696901" >Newtest</option><option value="240218135" >Perf1</option><option value="240219883" selected="selected" >Unit1</option><option value="304541192" >VMI</option></select>        </div></div>    <div id="senderType" class=" senderType null template-control col-md-3  ">            <label class='control-label lbl-elipsis'>Sender Type</label>        <div class='internal' data-id="senderType">    <select class="form-control   select2-lazy   " name="safetyData.senderType.id" data-from="senderTypes" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.senderType.id" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="senderName" class="col-md-3 template-control  senderName   " >        <label class='control-label lbl-elipsis'>Sender Name</label>        <div class='internal' data-id="senderName">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.senderName" value="" data-initial-value="" maxlength="100" data-field-id="senderName" id="safetyData.senderName" />            </div> </div>            <div id="senderEmail" class="col-md-3 template-control  senderEmail   " >        <label class='control-label lbl-elipsis'>Sender Email</label>        <div class='internal' data-id="senderEmail">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.senderEmail" value="" data-initial-value="" maxlength="100" data-field-id="senderEmail" id="safetyData.senderEmail" />            </div> </div>    <div id="caseDueDate" class="template-control caseDueDate  col-md-3 ">            <label class='control-label lbl-elipsis'>Due Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="caseDueDate">        <input type="text" class="form-control  futureDatesAllowed allowDateWithoutTime " name="dueDate" data-mandatory="false" id="dueDate" data-partialdatesallowed="0" value="08-Apr-2020 23:59:59" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="dueDateJustification" value="Auto-calculated" id="dueDateJustification" /><input type="hidden" name="dueDateManual" value="false" id="dueDateManual" /></div></div>    <div id="safetyDataLocalSubmissionDueDate" class="template-control safetyDataLocalSubmissionDueDate  col-md-3 ">            <label class='control-label lbl-elipsis'>Local Submission Due Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="safetyDataLocalSubmissionDueDate">        <input type="text" class="form-control  futureDatesAllowed allowEdit " name="safetyData.localSubmissionDueDate" data-mandatory="false" id="safetyData.localSubmissionDueDate" data-partialdatesallowed="0" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        </div></div>    <div id="safetyDataLocalSubmissionDate" class="template-control safetyDataLocalSubmissionDate  col-md-3 ">            <label class='control-label lbl-elipsis'>Local Submission Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="safetyDataLocalSubmissionDate">        <input type="text" class="form-control  allowEdit " name="safetyData.localSubmissionDate" data-mandatory="false" id="safetyData.localSubmissionDate" data-partialdatesallowed="0" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        </div></div>    <div id="version" class=" version null template-control col-md-3  ">            <label class='control-label lbl-elipsis'>Version Type</label>        <div class='internal' data-id="version">    <select class="form-control      " name="caseVersionType.id" data-from="caseVersions" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="60" id="caseVersionType.id" ><option value="">Select</option><option value="60" selected="selected" >Initial</option><option value="61" >Follow Up</option></select>        </div></div>    <div id="versionType" class=" versionType null template-control col-md-3  ">            <label class='control-label lbl-elipsis'>Version Disposition</label>        <div class='internal' data-id="versionType">    <select class="form-control   select2-box   " name="versionType.id" data-from="versionTypes" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="versionType.id" ><option value="" selected="selected">Select</option><option value="13" >Reportable</option><option value="14" >Non-reportable</option><option value="15" >Amendment</option><option value="16" >Nullification</option></select>        </div></div>            <div id="versionComment" class="col-md-9 template-control  versionComment   " >        <label class='control-label lbl-elipsis'>Version Comments</label>        <div class='internal' data-id="versionComment">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="versionComment" value="" data-initial-value="" maxlength="2000" data-field-id="versionComment" id="versionComment" />            </div> </div><input type="hidden" name=assignee.id value=244113113>                        </div>                                                    <div class="col-md-4 rx-col-table">                                <div class="inner-table">                                    <div class="panel-group"                                         id="accordion-innerReferences">                                        <!-- References -->                                        <div class="panel panel-default section-header inner">                                            <div class="panel-heading">                                                <h4 class="panel-title">                                                    <a data-toggle="collapse"                                                       data-parent="#accordion-innerReferences"                                                       href="#references"                                                       class="sec-display-txt"                                                       aria-expanded="true">                                                        Reference(s)                                                    </a>                                                    <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#referenceTableSection" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#referenceTableSection" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                                </h4>                                            </div>                                            <div id="references"                                                 class="pv-main panel-collapse collapse section-header inner in rxmain-container-content rxmain-container-show p-0 inner-accordion"                                                 aria-expanded="true"                                                 data-templateId="referencesTemplate" data-table="true">                                                <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                    <div class="pv-inner-product-substance pv-section">                                                        <table class="table table-striped pv-inner-table m-b-0">    <thead>            <th class="pv-col-sn">#</th>        <th id='header-referenceType' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Reference Type </label></th><th id='header-referenceId' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Reference ID </label></th>                <th class="pv-col-la"><a href="javascript:void(0);" class="pull-right add-table-row add-section btn-add-panel"               data-tabular="true">            <i class="fa fa-plus-square-o"></i></a></th>        </thead>    <tbody class="pv-draggable-list ui-sortable" id="referenceTableSection">            <tr class="row-table pv-section-record ui-sortable-handle  " id="references-section-0">            <td class="new-index badge-index"></td>        <td id="referenceType" class=" referenceType null template-control col-md-6 "><div class='internal' data-id="referenceType">    <select class="form-control   select2-box allowEdit select2-lazy   " name="safetyData.references[0].referenceType.id" data-from="referenceTypes" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.references[0].referenceType.id" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.references[0].internalRowId" value="2" id="safetyData.references[0].internalRowId" /></div></td>    <td id="referenceId" class="col-md-6 template-control  referenceId "><div class='internal' data-id="referenceId">    <input type="text" class="form-control  allowEdit " data-mandatory="false" data-mandatorySet="0" name="safetyData.references[0].id" value="" data-initial-value="" maxlength="100" data-field-id="referenceId" id="safetyData.references[0].id" />            </div></td><input type="hidden" name=safetyData.references[0].deleted value=false>            <td>            <a href="javascript:void(0);" title="Remove this section"               class="table-row-del pull-right remove-section btn-del-panel">                <i class="md md-close references_0" aria-hidden="true"></i>            </a>        </td>    </tr>        </tbody></table>                                                    </div>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                            </div>                                            </div>                </div>            </div>        </div>    </div>

                                                <!-- Study -->
                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top v-study hide studySec"         id="v-study">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-header="Study-Section" data-parent="#accordion-case"                   href="#study" aria-expanded="false" class="collapsed sec-display-txt sectionTitle">                    Study<span><span></span></span>                </a>                            </h4>        </div>        <div id="study"             class=" panel-collapse collapse rxmain-container-content rxmain-container-show"             aria-expanded="false">            <div class="pv-study-container">    <div class="row form-pv pv-study">        <div class="col-md-6 rx-col-table">            <div class="form-group">                <div class="col-md-12">                                <div id="studyNumber" class=' col-md-4 required  template-control  studyNumber' >                <label class='control-label lbl-elipsis'>Study Number</label>        <div class='input-group internal inner-addon right-addon' data-id="studyNumber">        <input type="text" class="form-control    " name="safetyData.study.number" maxlength="250" value="" data-mandatory="true" data-mandatorySet="0" data-placement="top" data-browser-type="study" data-flag-target="" data-placeholder="" data-fieldId="studyNumber" id="safetyData.study.number" />                <input type="hidden" name="safetyData.study.id" class="hidden-id" value="" id="safetyData.study.id" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.study.search" name="safetyData.study.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="studyType" class=" studyType null template-control col-md-4  ">            <label class='control-label lbl-elipsis'>Study Type</label>        <div class='internal' data-id="studyType">    <select class="form-control      " name="safetyData.study.studyType.id" data-from="studyTypes" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.study.studyType.id" ><option value="" selected="selected">Select</option><option value="100013" >Automation_PVD</option><option value="100011" >Automation_PVD</option><option value="100012" >Automation_PVD</option><option value="1" >Clinical Trial</option><option value="100005" >feb_studytype</option><option value="2" >Individual Patient Use</option><option value="100006" >mar_studytype</option><option value="3" >Other Studies</option><option value="100003" >Test_Study</option></select>        </div></div>            <div id="studyName" class="col-md-4 template-control  studyName   " >        <label class='control-label lbl-elipsis'>Name</label>        <div class='internal' data-id="studyName">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.study.name" value="" data-initial-value="" maxlength="2000" data-field-id="studyName" id="safetyData.study.name" />            </div> </div>                </div>                <div class="col-md-12">                    <div class="inner-table">                        <div class="panel-group basic-study-4"                             id="accordion-innerStudy">                            <div class="panel panel-default section-header inner">                                <div class="panel-heading">                                    <h4 class="panel-title">                                        <a data-toggle="collapse"                                           data-parent="#accordion-innerStudy"                                           href="#studyRegInfo"                                           class="sec-display-txt"                                           aria-expanded="false">                                            Study Registration Info                                        </a>                                        <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#studyRegisterationTableSection" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#studyRegisterationTableSection" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                    </h4>                                </div>                                <div id="studyRegInfo" class="pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0"                                     aria-expanded="true" data-templateId="studyRegInfoTemplate" data-table="true">                                    <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                        <div class="pv-inner-product-substance pv-section">                                            <table class="table table-striped pv-inner-table m-b-0">    <thead>            <th class="pv-col-sn">#</th>        <th id='header-studyRegistrationNumber' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Registration Number </label></th><th id='header-studyCenterCountry' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Country </label></th>                <th class="pv-col-la"><a href="javascript:void(0);" class="pull-right add-table-row add-section btn-add-panel"               data-tabular="true">            <i class="fa fa-plus-square-o"></i></a></th>        </thead>    <tbody class="pv-draggable-list ui-sortable" id="studyRegisterationTableSection">            <tr class="row-table pv-section-record ui-sortable-handle  " id="studyRegInfo-section-00">            <td class="new-index badge-index"></td>            <td id="studyRegistrationNumber" class="col-md-6 template-control  studyRegistrationNumber "><div class='internal' data-id="studyRegistrationNumber">    <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.study.registrations[0].number" value="" data-initial-value="" maxlength="50" data-field-id="studyRegistrationNumber" id="safetyData.study.registrations[0].number" />        <input type="hidden" name="safetyData.study.registrations[0].internalRowId" value="3" id="safetyData.study.registrations[0].internalRowId" />    </div></td><td id="studyCenterCountry" class=" studyCenterCountry null template-control col-md-6 "><div class='internal' data-id="studyCenterCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.study.registrations[0].country.id" data-from="countries" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.study.registrations[0].country.id" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.study.registrations[0].deleted value=false>            <td>            <a href="javascript:void(0);" title="Remove this section"               class="table-row-del pull-right remove-section btn-del-panel">                <i class="md md-close _0" aria-hidden="true"></i>            </a>        </td>    </tr>        </tbody></table>                                        </div>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>        </div>    </div>


                                                <!-- Reporter -->
                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-reporter">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#reporter" aria-expanded="false"                   class="collapsed sec-display-txt sectionTitle">                    Reporter(s)                </a>                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-reporter" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-reporter" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm " data-inner-sec=""           data-tabular="false" title="Add another section"           data-target="pvi-reporter">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>            </h4>        </div>        <div id="reporter" data-templateId="reporterTemplate"             class="panel-collapse pv-main rxmain-container-content rxmain-container-show  collapse"             aria-expanded="false">            <div class="row">                <div class="form-group inner-table m-b-0 row">                    <div class="panel-group short-field pv-draggable-list pv-section m-b-0"                         id="accordion-reporter">                                                                                    <div class="panel pv-section-record pv-reporter ui-sortable-handle panel-default "     id="reporter-section-0">    <div class="panel-heading">        <h4 class="panel-title">            <a data-toggle="collapse" data-header="Reporter-Section"               data-parent="#accordion-reporter" href="#reporter-section_0"               class="inner-repeatable" aria-expanded="true">                                    <span class="badge row-count badge-index"></span>Reporter-Section                            </a>                            <div class="configureFields pv-subhead-config">                    <a href="javascript:void(0);" data-target="pv-reporter" title="Remove this section"                       class="remove-section pull-right btn-del-panel ">                        <i class="md md-close reporter_0" aria-hidden="true"></i>                    </a>                </div>                    </h4>    </div>    <div class="panel-collapse collapse in inner-repeatable" aria-expanded="true"         id="reporter-section_0">        <div class="panel-body ">            <div class="form-group form-pv">                            <div id="reporterTitle" class="col-md-1-half template-control  reporterTitle   " >        <label class='control-label lbl-elipsis'>Title</label>        <div class='internal' data-id="reporterTitle">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].title" value="" data-initial-value="" maxlength="50" data-field-id="reporterTitle" id="safetyData.reporters[0].title" />        <input type="hidden" name="safetyData.reporters[0].internalRowId" value="4" id="safetyData.reporters[0].internalRowId" />    </div> </div>            <div id="reporterName" class="col-md-1-half template-control  reporterName   " >        <label class='control-label lbl-elipsis'>First Name</label>        <div class='internal' data-id="reporterName">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].givenName" value="" data-initial-value="" maxlength="60" data-field-id="reporterName" id="safetyData.reporters[0].givenName" />            </div> </div>            <div id="reporterMiddleName" class="col-md-1-half template-control  reporterMiddleName   " >        <label class='control-label lbl-elipsis'>Middle Name</label>        <div class='internal' data-id="reporterMiddleName">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].middleName" value="" data-initial-value="" maxlength="60" data-field-id="reporterMiddleName" id="safetyData.reporters[0].middleName" />            </div> </div>            <div id="reporterFamilyName" class="col-md-1-half template-control  reporterFamilyName   " >        <label class='control-label lbl-elipsis'>Last Name</label>        <div class='internal' data-id="reporterFamilyName">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].familyName" value="" data-initial-value="" maxlength="60" data-field-id="reporterFamilyName" id="safetyData.reporters[0].familyName" />            </div> </div>            <div id="reporterOrganization" class="col-md-1-half template-control  reporterOrganization   " >        <label class='control-label lbl-elipsis'>Organization</label>        <div class='internal' data-id="reporterOrganization">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].organization" value="" data-initial-value="" maxlength="60" data-field-id="reporterOrganization" id="safetyData.reporters[0].organization" />            </div> </div>            <div id="reporterDepartment" class="col-md-1-half template-control  reporterDepartment   " >        <label class='control-label lbl-elipsis'>Department</label>        <div class='internal' data-id="reporterDepartment">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].department" value="" data-initial-value="" maxlength="60" data-field-id="reporterDepartment" id="safetyData.reporters[0].department" />            </div> </div>            <div id="reporterStreet" class="col-md-1-half template-control  reporterStreet   " >        <label class='control-label lbl-elipsis'>Street</label>        <div class='internal' data-id="reporterStreet">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].street" value="" data-initial-value="" maxlength="100" data-field-id="reporterStreet" id="safetyData.reporters[0].street" />            </div> </div>            <div id="reporterCity" class="col-md-1-half template-control  reporterCity   " >        <label class='control-label lbl-elipsis'>City</label>        <div class='internal' data-id="reporterCity">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].city" value="" data-initial-value="" maxlength="35" data-field-id="reporterCity" id="safetyData.reporters[0].city" />            </div> </div>            <div id="reporterState" class="col-md-1-half template-control  reporterState   " >        <label class='control-label lbl-elipsis'>State / Province</label>        <div class='internal' data-id="reporterState">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].state" value="" data-initial-value="" maxlength="40" data-field-id="reporterState" id="safetyData.reporters[0].state" />            </div> </div>            <div id="reporterPostcode" class="col-md-1-half template-control  reporterPostcode   " >        <label class='control-label lbl-elipsis'>Postcode</label>        <div class='internal' data-id="reporterPostcode">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].postcode" value="" data-initial-value="" maxlength="15" data-field-id="reporterPostcode" id="safetyData.reporters[0].postcode" />            </div> </div>            <div id="reporterTelephone" class="col-md-1-half template-control  reporterTelephone   " >        <label class='control-label lbl-elipsis'>Telephone</label>        <div class='internal' data-id="reporterTelephone">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].telephone" value="" data-initial-value="" maxlength="33" data-field-id="reporterTelephone" id="safetyData.reporters[0].telephone" />            </div> </div>            <div id="reporterFax" class="col-md-1-half template-control  reporterFax   " >        <label class='control-label lbl-elipsis'>Fax Number</label>        <div class='internal' data-id="reporterFax">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].faxNumber" value="" data-initial-value="" maxlength="26" data-field-id="reporterFax" id="safetyData.reporters[0].faxNumber" />            </div> </div>            <div id="reporterEmail" class="col-md-3 template-control  reporterEmail   " >        <label class='control-label lbl-elipsis'>Email</label>        <div class='internal' data-id="reporterEmail">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.reporters[0].email" value="" data-initial-value="" maxlength="100" data-field-id="reporterEmail" id="safetyData.reporters[0].email" />            </div> </div>    <div id="reporterCountry" class=" reporterCountry null template-control col-md-1-half  required-set">            <label class='control-label lbl-elipsis'>Country</label>        <div class='internal' data-id="reporterCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.reporters[0].country.id" data-from="countries" data-tabular="false" data-mandatorySet="1" data-placeholder="Select" data-mandatory="false" data-value="3" id="safetyData.reporters[0].country.id" ><option value="">Select</option></select>        </div></div>    <div id="reporterQualification" class=" reporterQualification null template-control col-md-1-half  required-set">            <label class='control-label lbl-elipsis'>Qualification</label>        <div class='internal' data-id="reporterQualification">    <select class="form-control   select2-box  select2-lazy   " name="safetyData.reporters[0].qualification.id" data-from="reporterTypes" data-tabular="false" data-mandatorySet="1" data-placeholder="Select" data-mandatory="false" data-value="4" id="safetyData.reporters[0].qualification.id" ><option value="">Select</option></select>        </div></div>    <div id="reporterContactType" class=" reporterContactType null template-control col-md-3  ">            <label class='control-label lbl-elipsis'>Contact Type</label>        <div class='internal' data-id="reporterContactType">    <select class="form-control select2-box  select2 multiSelectSelect2Field wrapped-multiselect   " name="safetyData.reporters[0].contactTypes.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="[2002]" id="safetyData.reporters[0].contactTypes.id" ><option value="2000" >Correspondence Contact</option><option value="2001" >Patient</option><option value="2002" selected="selected" >Reporter</option></select>        </div></div>    <div id="reporterConsentToDisclosePII" class=" reporterConsentToDisclosePII null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Consent to disclose PII</label>        <div class='internal' data-id="reporterConsentToDisclosePII">    <select class="form-control      " name="safetyData.reporters[0].consentToDisclosePII.id" data-from="consentToDisclosePII" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.reporters[0].consentToDisclosePII.id" ><option value="" selected="selected">Select</option><option value="1021" >Yes</option><option value="1022" >No</option></select>        </div></div>    <div id="reporterConsentForFU" class=" reporterConsentForFU null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Consent for F/U</label>        <div class='internal' data-id="reporterConsentForFU">    <select class="form-control      " name="safetyData.reporters[0].consentForFU.id" data-from="consentForFU" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.reporters[0].consentForFU.id" ><option value="" selected="selected">Select</option><option value="1031" >Yes</option><option value="1032" >No</option></select>        </div></div>            <div id="reporterPrimaryReporter" class='template-control col-md-1-half    reporterPrimaryReporter'>            <label class='control-label lbl-elipsis'>Primary Source</label>            <div class='internal checkbox checkbox-primary ' data-id="reporterPrimaryReporter">                <input type="hidden" name="_safetyData.reporters[0].primary">                <input type="checkbox" name="safetyData.reporters[0].primary" value="true" data-mandatory="false"                       data-mandatorySet="0" class=" primaryReporter " checked data-search-field=""/>                                <label class="" for="safetyData.reporters[0].primary"></label>            </div>                    </div>    <input type="hidden" name=safetyData.reporters[0].deleted value=false>            </div>        </div>    </div></div>                                                                        </div>                </div>            </div>        </div>    </div>

                                                <!-- literature -->
                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-literature">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#literature" aria-expanded="true"                   class="collapsed sec-display-txt sectionTitle">                    Literature(s)                </a>                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#pvDragRecordLiterature" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#pvDragRecordLiterature" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm " data-inner-sec=""           data-tabular="false" title="Add another section"           data-target="pvi-literature">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>            </h4>        </div>        <div id="literature" data-templateId="literatureTemplate"             class="panel-collapse pv-main rxmain-container-content rxmain-container-show collapse"             aria-expanded="false">            <div class="pv-literature-container pv-draggable-list pv-section" id="pvDragRecordLiterature">                                    <div class="row row-strip pv-literature pv-section-record ui-sortable-handle p-b-10  "     id="literature-section-0">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-literature" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close literature_0" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="literatureAuthor" class="col-md-3 template-control  literatureAuthor   " >        <label class='control-label lbl-elipsis'>Author</label>        <div class='internal' data-id="literatureAuthor">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.literatures[0].author" value="" data-initial-value="" maxlength="120" data-field-id="literatureAuthor" id="safetyData.literatures[0].author" />        <input type="hidden" name="safetyData.literatures[0].internalRowId" value="5" id="safetyData.literatures[0].internalRowId" />    </div> </div>            <div id="literatureTitle" class="col-md-3 template-control  literatureTitle   " >        <label class='control-label lbl-elipsis'>Title</label>        <div class='internal' data-id="literatureTitle">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.literatures[0].title" value="" data-initial-value="" maxlength="250" data-field-id="literatureTitle" id="safetyData.literatures[0].title" />            </div> </div>            <div id="literatureJournal" class="col-md-3 template-control  literatureJournal   " >        <label class='control-label lbl-elipsis'>Journal</label>        <div class='internal' data-id="literatureJournal">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.literatures[0].journal" value="" data-initial-value="" maxlength="80" data-field-id="literatureJournal" id="safetyData.literatures[0].journal" />            </div> </div>            <div id="literatureYear" class="col-md-1 template-control  literatureYear   " >        <label class='control-label lbl-elipsis'>Year</label>        <div class='internal' data-id="literatureYear">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.literatures[0].year" value="" data-initial-value="" maxlength="4" data-field-id="literatureYear" id="safetyData.literatures[0].year" />            </div> </div>            <div id="literatureVolume" class="col-md-1 template-control  literatureVolume   " >        <label class='control-label lbl-elipsis'>Vol</label>        <div class='internal' data-id="literatureVolume">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.literatures[0].vol" value="" data-initial-value="" maxlength="15" data-field-id="literatureVolume" id="safetyData.literatures[0].vol" />            </div> </div>            <div id="literaturePages" class="col-md-1 template-control  literaturePages   " >        <label class='control-label lbl-elipsis'>Pages</label>        <div class='internal' data-id="literaturePages">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.literatures[0].pages" value="" data-initial-value="" maxlength="30" data-field-id="literaturePages" id="safetyData.literatures[0].pages" />            </div> </div><div id="literatureFilePath"     class=' template-control    literatureFilePath   literatureFilePath'>    <div class="col-md-6 basic-literature-7 internal" data-id="literatureFilePath">    <label class="control-label lbl-elipsis">Literature Article</label><div class="file-uploader" data-provides="fileupload"><input type="file" name="safetyData.literatures[0].literatureArticle.filePath" data-mandatory="false" data-mandatorySet="0" class="file "><div class="input-group">    <input type="text" class="form-control " disabled placeholder="Attach a file" id="literatureFilePath"           name="safetyData.fileInputBox[-1].fileName" value="">        <input type="hidden" name="safetyData.literatures[0].literatureArticle.id" value="" id="safetyData.literatures[0].literatureArticle.id" /><input type="hidden" name="safetyData.literatures[0].literatureArticle.fileName" value="" id="safetyData.literatures[0].literatureArticle.fileName" />    <span class="input-group-btn ">        <button class="browse btn btn-primary btn-file-upload "                type="button"><i                class="glyphicon glyphicon-search"></i>        </button>    </span>    </div></div>    </div>  </div><input type="hidden" name=safetyData.literatures[0].deleted value=false>        </div>    </div></div>                            </div>        </div>    </div>

                                                <!--Patient -->
                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-patient">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#patientDetail" aria-expanded="false"                   class="collapsed sec-display-txt inner sectionTitle">                    Patient                </a>                            </h4>        </div>        <div id="patientDetail"             class="pv-section panel-collapse collapse  rxmain-container-content rxmain-container-show"             aria-expanded="false">            <div class="row pv-patient form-pv form-horizontal">                <div class="col-md-12">                    <div class="form-group row">                                    <div id="patientName" class="col-md-2 template-control  patientName  required-set " >        <label class='control-label lbl-elipsis'>Name / Initials</label>        <div class='internal' data-id="patientName">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="3" name="safetyData.patient.name" value="Load16" data-initial-value="Load16" maxlength="60" data-field-id="patientName" id="safetyData.patient.name" />            </div> </div>            <div id="patientPatientId" class="col-md-2 template-control  patientPatientId  required-set " >        <label class='control-label lbl-elipsis'>Patient ID</label>        <div class='internal' data-id="patientPatientId">        <input type="text" class="form-control  patientPatientId " data-mandatory="false" data-mandatorySet="3" name="safetyData.patient.patientId" value="" data-initial-value="" maxlength="20" data-field-id="patientPatientId" id="safetyData.patient.patientId" />            </div> </div>        <div id="patientAge" class="col-md-4 template-control  patientAge  required-set " >            <div class="input-group">                <label class='control-label lbl-elipsis'>DOB/ Age/ Group </label>                <div class='internal' data-id="patientAge">       <input type="text" class="form-control  patientAge  " data-mandatory="false" data-mandatorySet="3" name="safetyData.patient.age.value" value="55" maxlength="1000" id="safetyData.patient.age.value" />              <input type="hidden" name="safetyData.patient.age.id" value="5" id="safetyData.patient.age.id" /><input type="hidden" name="safetyData.patient.age.ageType" value="PATIENT_ON_SET_AGE" id="safetyData.patient.age.ageType" />                    </div>                <span class="input-group-btn inner-input-group-checkbox true">                    <label class="lbl-elipsis">Fetus</label>                    <span class="checkbox checkbox-primary btn-default btn-chkbox ">                        <input type="checkbox" name="safetyData.patient.fetus" id="patientFetus" value="true"  class="patientFetus " data-search-field=""/>                        <label class=""></label>                    </span>                </span>            </div>        </div>    <div id="patientGender" class=" patientGender null template-control col-md-2  required-set">            <label class='control-label lbl-elipsis'>Gender</label>        <div class='internal' data-id="patientGender">    <select class="form-control      " name="safetyData.patient.gender.id" data-from="genders" data-tabular="false" data-mandatorySet="3" data-placeholder="Select" data-mandatory="false" data-value="1" id="safetyData.patient.gender.id" ><option value="">Select</option><option value="100004" >AddedNew</option><option value="100000" >Confident</option><option value="100003" >CopyConf</option><option value="2" >Female</option><option value="1" selected="selected" >Male</option><option value="4" >UNK</option></select>        </div></div>    <div id="patientLmpDate" class="template-control patientLmpDate  col-md-2 required-set">            <label class='control-label lbl-elipsis'>LMP Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientLmpDate">        <input type="text" class="form-control   " name="safetyData.patient.lmpDate.value" data-mandatory="false" id="safetyData.patient.lmpDate.value" data-dateformat="dd-MMM-yyyy" data-partialdatesallowed="1" value="01-Apr-2020" data-mandatorySet="3" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.lmpDate.format" value="dd-MMM-yyyy" id="safetyData.patient.lmpDate.format" /></div></div><div id="patientWeight" class='col-md-2  required-set template-control  patientWeight'>    <div class="no-txt-overflow input-group internal" data-id="patientWeight">        <label class="control-label lbl-elipsis">Weight</label>            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="3" name="safetyData.patient.weight" value="55.0" maxlength="6" id="safetyData.patient.weight" />                                <span class="input-group-btn inner-input-group unit">            <label>Unit</label>            <select name="safetyData.patient.weightUnit.id" data-value="44" data-placeholder="Select" class="btn form-control select2 null has-default-val " id="safetyData.patient.weightUnit.id" ><option value="44" >Kgs</option><option value="45" >Lbs</option></select>                                </span>    </div></div><div id="patientHeight" class='col-md-2  required-set template-control  patientHeight'>    <div class="no-txt-overflow input-group internal" data-id="patientHeight">        <label class="control-label lbl-elipsis">Height</label>            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="3" name="safetyData.patient.height" value="165.0" maxlength="3" id="safetyData.patient.height" />                                <span class="input-group-btn inner-input-group unit">            <label>Unit</label>            <select name="safetyData.patient.heightUnit.id" data-value="46" data-placeholder="Select" class="btn form-control select2 null has-default-val " id="safetyData.patient.heightUnit.id" ><option value="46" >Cms</option><option value="47" >Inches</option></select>                                </span>    </div></div>            <div id="patientGpRecordNumber" class="col-md-2 template-control  patientGpRecordNumber  required-set " >        <label class='control-label lbl-elipsis'>GP Record #</label>        <div class='internal' data-id="patientGpRecordNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="3" name="safetyData.patient.gpRecordNumber" value="3ABCD" data-initial-value="3ABCD" maxlength="20" data-field-id="patientGpRecordNumber" id="safetyData.patient.gpRecordNumber" />            </div> </div>            <div id="patientSpecialistRecordNumber" class="col-md-2 template-control  patientSpecialistRecordNumber  required-set " >        <label class='control-label lbl-elipsis'>Specialist Record #</label>        <div class='internal' data-id="patientSpecialistRecordNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="3" name="safetyData.patient.specialistRecordNumber" value="3ABCD" data-initial-value="3ABCD" maxlength="20" data-field-id="patientSpecialistRecordNumber" id="safetyData.patient.specialistRecordNumber" />            </div> </div>            <div id="patientHospitalRecordNumber" class="col-md-2 template-control  patientHospitalRecordNumber  required-set " >        <label class='control-label lbl-elipsis'>Hospital Record #</label>        <div class='internal' data-id="patientHospitalRecordNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="3" name="safetyData.patient.hospitalRecordNumber" value="3ABCD" data-initial-value="3ABCD" maxlength="20" data-field-id="patientHospitalRecordNumber" id="safetyData.patient.hospitalRecordNumber" />            </div> </div>            <div id="patientConcomitantTherapies" class='template-control col-md-2    patientConcomitantTherapies'>            <label class='control-label lbl-elipsis'>Concomitant Therapies</label>            <div class='internal checkbox checkbox-primary ' data-id="patientConcomitantTherapies">                <input type="hidden" name="_safetyData.patient.concomitantTherapies">                <input type="checkbox" name="safetyData.patient.concomitantTherapies" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.patient.concomitantTherapies"></label>            </div>                    </div>    <div id="patientAdditionalRelevantMedicalHistory" class='template-control     patientAdditionalRelevantMedicalHistory col-md-12'>    <label class='control-label lbl-elipsis'>Add&#39;l Relevant Medical History</label>    <div class='internal' data-id="patientAdditionalRelevantMedicalHistory">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.additionalRelevantMedicalHistory" maxlength="10000" rows="2" cols="100" id="safetyData.patient.additionalRelevantMedicalHistory" ></textarea>                <span class="maxlength-feedback"></span>            </div></div>                    </div>                    <div class="form-group inner-table m-t-5">                        <div class="panel-group"                             id="accordion-innerPatient">                        <!-- Death Details -->                                                            <div class="panel panel-default section-header inner" id="patientDeathDetailContainer">                                    <div class="rxmain-container-row panel-heading">                                        <h4 class="panel-title">                                            <a data-toggle="collapse"                                               data-parent="#accordion-innerPatient"                                               href="#patientDeathDetail"                                               class="collapsed sec-display-txt childSectionTitle"                                               aria-expanded="false">                                                Death Details                                            </a>                                        </h4>                                    </div>                                    <div id="patientDeathDetail"                                         class="pv-main panel-collapse collapse"                                         aria-expanded="false">                                        <div class="panel-body">                                            <div class="form-group">                                                <div class="col-md-5 rx-col-table">                                                        <div id="patientDeathDetailDeathDate" class="template-control patientDeathDetailDeathDate  col-md-6 ">            <label class='control-label lbl-elipsis'>Death Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientDeathDetailDeathDate">        <input type="text" class="form-control   " name="safetyData.deathDetail.deathDate.value" data-mandatory="false" id="safetyData.deathDetail.deathDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.deathDetail.deathDate.format" value="" id="safetyData.deathDetail.deathDate.format" /></div></div>    <div id="patientDeathDetailAutopsyDone" class=" patientDeathDetailAutopsyDone null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Autopsy Done</label>        <div class='internal' data-id="patientDeathDetailAutopsyDone">    <select class="form-control      " name="safetyData.deathDetail.autopsyDone" data-from="autopsyDone" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.deathDetail.autopsyDone" ><option value="" selected="selected">Select</option><option value="25" >Yes</option><option value="26" >No</option></select>        </div></div>                                                </div>                                            </div>                                            <div class="form-group">                                                <div class="col-md-8 rx-col-table">                                                    <div class="inner-table col-md-12">                                                        <div class="panel-group">                                                                                                                            <div class="panel panel-default section-header inner">                                                                    <div class="panel-heading">                                                                        <h4 class="panel-title">                                                                            <a data-toggle="collapse"                                                                               data-parent="#accordion-innerPatDeathCause"                                                                               href="#deathCause"                                                                               class="sec-display-txt"                                                                               aria-expanded="true">                                                                                Death Cause(s)                                                                            </a>                                                                            <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#patientDeathTableSection" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#patientDeathTableSection" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                                                        </h4>                                                                    </div>                                                                    <div id="deathCause"                                                                         data-templateId="deathCauseTemplate" data-table="true"                                                                         class="pv-main panel-collapse collapse in rxmain-container-content  rxmain-container-show p-0 inner-accordion"                                                                         aria-expanded="true">                                                                        <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                                            <div class="pv-inner-product-substance pv-section">                                                                                <table class="table table-striped pv-inner-table m-b-0">    <thead>            <th class="pv-col-sn">#</th>        <th id='header-patientDeathCauseType' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Cause Type </label></th><th id='header-patientDeathReportedCause' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Cause (Reported) </label></th><th id='header-patientDeathCodedCause' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Cause (Coded) </label></th>                <th class="pv-col-la"><a href="javascript:void(0);" class="pull-right add-table-row add-section btn-add-panel"               data-tabular="true">            <i class="fa fa-plus-square-o"></i></a></th>        </thead>    <tbody class="pv-draggable-list ui-sortable" id="patientDeathTableSection">            <tr class="row-table pv-section-record ui-sortable-handle  " id="deathCause-section-0">            <td class="new-index badge-index"></td>        <td id="patientDeathCauseType" class=" patientDeathCauseType null template-control col-md-4 "><div class='internal' data-id="patientDeathCauseType">    <select class="form-control      " name="safetyData.deathDetail.deathCauses[0].causeType.id" data-from="causeTypes" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.deathDetail.deathCauses[0].causeType.id" ><option value="" selected="selected">Select</option><option value="28" >Autopsy Determined Cause</option><option value="27" >Death Cause</option></select>        <input type="hidden" name="safetyData.deathDetail.deathCauses[0].internalRowId" value="6" id="safetyData.deathDetail.deathCauses[0].internalRowId" /></div></td>            <td class="col-md-4  template-control patientDeathReportedCause"><div class='internal' data-id="patientDeathReportedCause">        <div class='input-group internal inner-addon right-addon' data-id="patientDeathReportedCause">        <input type="text" class="form-control  meddraBrowser  " name="safetyData.deathDetail.deathCauses[0].reportedReaction" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="patientDeathCodedCause" data-placeholder="" data-fieldId="patientDeathReportedCause" id="safetyData.deathDetail.deathCauses[0].reportedReaction" />                <input type="hidden" name="safetyData.deathDetail.deathCauses[0].lltCode" class="hidden-id" value="" id="safetyData.deathDetail.deathCauses[0].lltCode" /><input type="hidden" name="safetyData.deathDetail.deathCauses[0].codedWithSearchString" value="" id="safetyData.deathDetail.deathCauses[0].codedWithSearchString" /><input type="hidden" name="safetyData.deathDetail.deathCauses[0].hierarchyStorageId" value="" id="safetyData.deathDetail.deathCauses[0].hierarchyStorageId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <td id="patientDeathCodedCause" class="col-md-4 template-control  patientDeathCodedCause "><div class='internal' data-id="patientDeathCodedCause">    <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.deathDetail.deathCauses[0].reactionCoded" value="" data-initial-value="" maxlength="1000" data-field-id="patientDeathCodedCause" readonly="readonly" id="safetyData.deathDetail.deathCauses[0].reactionCoded" />            </div></td><input type="hidden" name=safetyData.deathDetail.deathCauses[0].deleted value=false>            <td>            <a href="javascript:void(0);" title="Remove this section"               class="table-row-del pull-right remove-section btn-del-panel">                <i class="md md-close deathCause_0" aria-hidden="true"></i>            </a>        </td>    </tr>        </tbody></table>                                                                            </div>                                                                        </div>                                                                    </div>                                                                </div>                                                                                                                    </div>                                                    </div>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                                                                        <!-- Patient Medical History Details-->                                <div class="panel panel-default section-header inner" id="patientMedicalHistoryContainer">                                    <div class="panel-heading rxmain-container-row">                                        <h4 class="panel-title">                                            <a data-toggle="collapse"                                               data-parent="#accordion-innerPatient"                                               href="#patientMedHistory"                                               class="collapsed sec-display-txt childSectionTitle"                                               aria-expanded="false">                                                Medical History                                            </a>                                            <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#pvDraginnerPatientMedicalHistory" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#pvDraginnerPatientMedicalHistory" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm pv-add-row" data-inner-sec="true"           data-tabular="inner" title="Add another section"           data-target="pv-med-history">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>                                        </h4>                                    </div>                                    <div id="patientMedHistory"                                         data-templateId="patientMedHistoryTemplate"                                         class="pv-main panel-collapse collapse inner-accordion"                                         aria-expanded="false">                                        <div class="pv-draggable-list pv-section ui-sortable" id="pvDraginnerPatientMedicalHistory">                                                                                            <div class="row row-strip pv-med-history pv-section-record ui-sortable-handle p-b-10  "     id="patientMedHistory-section-0">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-med-history" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close patientMedHistory_0" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="patientMedicalHistory" class=' col-md-3   template-control  patientMedicalHistory' >                <label class='control-label lbl-elipsis'>Medical History</label>        <div class='input-group internal inner-addon right-addon' data-id="patientMedicalHistory">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.medicalHistories[0].medicalHistory.reactionCoded" maxlength="250" value="Chills and fever" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-value="Chills and fever" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientMedicalHistory" id="safetyData.patient.medicalHistories[0].medicalHistory.reactionCoded" />                <input type="hidden" name="safetyData.patient.medicalHistories[0].medicalHistory.lltCode" class="hidden-id" value="10008533" id="safetyData.patient.medicalHistories[0].medicalHistory.lltCode" /><input type="hidden" name="safetyData.patient.medicalHistories[0].medicalHistory.codedWithSearchString" value="fever" id="safetyData.patient.medicalHistories[0].medicalHistory.codedWithSearchString" /><input type="hidden" name="safetyData.patient.medicalHistories[0].medicalHistory.hierarchyStorageId" value="" id="safetyData.patient.medicalHistories[0].medicalHistory.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.medicalHistories[0].medicalHistory.reportedReaction" value="fever" id="safetyData.patient.medicalHistories[0].medicalHistory.reportedReaction" /><input type="hidden" name="safetyData.patient.medicalHistories[0].internalRowId" value="7" id="safetyData.patient.medicalHistories[0].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="patientMedicalHistoryStartDate" class="template-control patientMedicalHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[0].startDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[0].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[0].startDate.format" value="" id="safetyData.patient.medicalHistories[0].startDate.format" /></div></div>    <div id="patientMedicalHistoryEndDate" class="template-control patientMedicalHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[0].endDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[0].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[0].endDate.format" value="" id="safetyData.patient.medicalHistories[0].endDate.format" /></div></div>    <div id="patientMedicalHistoryContinuing" class=" patientMedicalHistoryContinuing null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Continuing</label>        <div class='internal' data-id="patientMedicalHistoryContinuing">    <select class="form-control      " name="safetyData.patient.medicalHistories[0].continuing" data-from="continuings" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.patient.medicalHistories[0].continuing" ><option value="" selected="selected">Select</option><option value="23" >Yes</option><option value="24" >No</option></select>        </div></div>            <div id="patientMedicalHistoryFamilyHistory" class='template-control col-md-3    patientMedicalHistoryFamilyHistory'>            <label class='control-label lbl-elipsis'>Family History</label>            <div class='internal checkbox checkbox-primary ' data-id="patientMedicalHistoryFamilyHistory">                <input type="hidden" name="_safetyData.patient.medicalHistories[0].familyHistory">                <input type="checkbox" name="safetyData.patient.medicalHistories[0].familyHistory" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.patient.medicalHistories[0].familyHistory"></label>            </div>                    </div>    <div id="patientMedicalHistoryComments" class='template-control     patientMedicalHistoryComments col-md-12'>    <label class='control-label lbl-elipsis'>Comments</label>    <div class='internal' data-id="patientMedicalHistoryComments">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.medicalHistories[0].comments" maxlength="2000" rows="2" cols="100" id="safetyData.patient.medicalHistories[0].comments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.patient.medicalHistories[0].deleted value=false>        </div>    </div></div>                                                                                            <div class="row row-strip pv-med-history pv-section-record ui-sortable-handle p-b-10  "     id="patientMedHistory-section-1">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-med-history" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close patientMedHistory_1" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="patientMedicalHistory" class=' col-md-3   template-control  patientMedicalHistory' >                <label class='control-label lbl-elipsis'>Medical History</label>        <div class='input-group internal inner-addon right-addon' data-id="patientMedicalHistory">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.medicalHistories[1].medicalHistory.reactionCoded" maxlength="250" value="Dark reddish macule" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-value="Dark reddish macule" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientMedicalHistory" id="safetyData.patient.medicalHistories[1].medicalHistory.reactionCoded" />                <input type="hidden" name="safetyData.patient.medicalHistories[1].medicalHistory.lltCode" class="hidden-id" value="10011862" id="safetyData.patient.medicalHistories[1].medicalHistory.lltCode" /><input type="hidden" name="safetyData.patient.medicalHistories[1].medicalHistory.codedWithSearchString" value="redd" id="safetyData.patient.medicalHistories[1].medicalHistory.codedWithSearchString" /><input type="hidden" name="safetyData.patient.medicalHistories[1].medicalHistory.hierarchyStorageId" value="" id="safetyData.patient.medicalHistories[1].medicalHistory.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.medicalHistories[1].medicalHistory.reportedReaction" value="redd" id="safetyData.patient.medicalHistories[1].medicalHistory.reportedReaction" /><input type="hidden" name="safetyData.patient.medicalHistories[1].internalRowId" value="21" id="safetyData.patient.medicalHistories[1].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="patientMedicalHistoryStartDate" class="template-control patientMedicalHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[1].startDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[1].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[1].startDate.format" value="" id="safetyData.patient.medicalHistories[1].startDate.format" /></div></div>    <div id="patientMedicalHistoryEndDate" class="template-control patientMedicalHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[1].endDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[1].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[1].endDate.format" value="" id="safetyData.patient.medicalHistories[1].endDate.format" /></div></div>    <div id="patientMedicalHistoryContinuing" class=" patientMedicalHistoryContinuing null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Continuing</label>        <div class='internal' data-id="patientMedicalHistoryContinuing">    <select class="form-control      " name="safetyData.patient.medicalHistories[1].continuing" data-from="continuings" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.patient.medicalHistories[1].continuing" ><option value="" selected="selected">Select</option><option value="23" >Yes</option><option value="24" >No</option></select>        </div></div>            <div id="patientMedicalHistoryFamilyHistory" class='template-control col-md-3    patientMedicalHistoryFamilyHistory'>            <label class='control-label lbl-elipsis'>Family History</label>            <div class='internal checkbox checkbox-primary ' data-id="patientMedicalHistoryFamilyHistory">                <input type="hidden" name="_safetyData.patient.medicalHistories[1].familyHistory">                <input type="checkbox" name="safetyData.patient.medicalHistories[1].familyHistory" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.patient.medicalHistories[1].familyHistory"></label>            </div>                    </div>    <div id="patientMedicalHistoryComments" class='template-control     patientMedicalHistoryComments col-md-12'>    <label class='control-label lbl-elipsis'>Comments</label>    <div class='internal' data-id="patientMedicalHistoryComments">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.medicalHistories[1].comments" maxlength="2000" rows="2" cols="100" id="safetyData.patient.medicalHistories[1].comments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.patient.medicalHistories[1].deleted value=false>        </div>    </div></div>                                                                                            <div class="row row-strip pv-med-history pv-section-record ui-sortable-handle p-b-10  "     id="patientMedHistory-section-2">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-med-history" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close patientMedHistory_2" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="patientMedicalHistory" class=' col-md-3   template-control  patientMedicalHistory' >                <label class='control-label lbl-elipsis'>Medical History</label>        <div class='input-group internal inner-addon right-addon' data-id="patientMedicalHistory">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.medicalHistories[2].medicalHistory.reactionCoded" maxlength="250" value="Gum blue line" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-value="Gum blue line" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientMedicalHistory" id="safetyData.patient.medicalHistories[2].medicalHistory.reactionCoded" />                <input type="hidden" name="safetyData.patient.medicalHistories[2].medicalHistory.lltCode" class="hidden-id" value="10018772" id="safetyData.patient.medicalHistories[2].medicalHistory.lltCode" /><input type="hidden" name="safetyData.patient.medicalHistories[2].medicalHistory.codedWithSearchString" value="blue" id="safetyData.patient.medicalHistories[2].medicalHistory.codedWithSearchString" /><input type="hidden" name="safetyData.patient.medicalHistories[2].medicalHistory.hierarchyStorageId" value="" id="safetyData.patient.medicalHistories[2].medicalHistory.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.medicalHistories[2].medicalHistory.reportedReaction" value="blue" id="safetyData.patient.medicalHistories[2].medicalHistory.reportedReaction" /><input type="hidden" name="safetyData.patient.medicalHistories[2].internalRowId" value="22" id="safetyData.patient.medicalHistories[2].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="patientMedicalHistoryStartDate" class="template-control patientMedicalHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[2].startDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[2].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[2].startDate.format" value="" id="safetyData.patient.medicalHistories[2].startDate.format" /></div></div>    <div id="patientMedicalHistoryEndDate" class="template-control patientMedicalHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[2].endDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[2].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[2].endDate.format" value="" id="safetyData.patient.medicalHistories[2].endDate.format" /></div></div>    <div id="patientMedicalHistoryContinuing" class=" patientMedicalHistoryContinuing null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Continuing</label>        <div class='internal' data-id="patientMedicalHistoryContinuing">    <select class="form-control      " name="safetyData.patient.medicalHistories[2].continuing" data-from="continuings" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.patient.medicalHistories[2].continuing" ><option value="" selected="selected">Select</option><option value="23" >Yes</option><option value="24" >No</option></select>        </div></div>            <div id="patientMedicalHistoryFamilyHistory" class='template-control col-md-3    patientMedicalHistoryFamilyHistory'>            <label class='control-label lbl-elipsis'>Family History</label>            <div class='internal checkbox checkbox-primary ' data-id="patientMedicalHistoryFamilyHistory">                <input type="hidden" name="_safetyData.patient.medicalHistories[2].familyHistory">                <input type="checkbox" name="safetyData.patient.medicalHistories[2].familyHistory" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.patient.medicalHistories[2].familyHistory"></label>            </div>                    </div>    <div id="patientMedicalHistoryComments" class='template-control     patientMedicalHistoryComments col-md-12'>    <label class='control-label lbl-elipsis'>Comments</label>    <div class='internal' data-id="patientMedicalHistoryComments">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.medicalHistories[2].comments" maxlength="2000" rows="2" cols="100" id="safetyData.patient.medicalHistories[2].comments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.patient.medicalHistories[2].deleted value=false>        </div>    </div></div>                                                                                            <div class="row row-strip pv-med-history pv-section-record ui-sortable-handle p-b-10  "     id="patientMedHistory-section-3">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-med-history" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close patientMedHistory_3" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="patientMedicalHistory" class=' col-md-3   template-control  patientMedicalHistory' >                <label class='control-label lbl-elipsis'>Medical History</label>        <div class='input-group internal inner-addon right-addon' data-id="patientMedicalHistory">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.medicalHistories[3].medicalHistory.reactionCoded" maxlength="250" value="Green discoloration of skin" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-value="Green discoloration of skin" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientMedicalHistory" id="safetyData.patient.medicalHistories[3].medicalHistory.reactionCoded" />                <input type="hidden" name="safetyData.patient.medicalHistories[3].medicalHistory.lltCode" class="hidden-id" value="10070807" id="safetyData.patient.medicalHistories[3].medicalHistory.lltCode" /><input type="hidden" name="safetyData.patient.medicalHistories[3].medicalHistory.codedWithSearchString" value="gree" id="safetyData.patient.medicalHistories[3].medicalHistory.codedWithSearchString" /><input type="hidden" name="safetyData.patient.medicalHistories[3].medicalHistory.hierarchyStorageId" value="" id="safetyData.patient.medicalHistories[3].medicalHistory.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.medicalHistories[3].medicalHistory.reportedReaction" value="gree" id="safetyData.patient.medicalHistories[3].medicalHistory.reportedReaction" /><input type="hidden" name="safetyData.patient.medicalHistories[3].internalRowId" value="23" id="safetyData.patient.medicalHistories[3].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="patientMedicalHistoryStartDate" class="template-control patientMedicalHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[3].startDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[3].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[3].startDate.format" value="" id="safetyData.patient.medicalHistories[3].startDate.format" /></div></div>    <div id="patientMedicalHistoryEndDate" class="template-control patientMedicalHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[3].endDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[3].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[3].endDate.format" value="" id="safetyData.patient.medicalHistories[3].endDate.format" /></div></div>    <div id="patientMedicalHistoryContinuing" class=" patientMedicalHistoryContinuing null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Continuing</label>        <div class='internal' data-id="patientMedicalHistoryContinuing">    <select class="form-control      " name="safetyData.patient.medicalHistories[3].continuing" data-from="continuings" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.patient.medicalHistories[3].continuing" ><option value="" selected="selected">Select</option><option value="23" >Yes</option><option value="24" >No</option></select>        </div></div>            <div id="patientMedicalHistoryFamilyHistory" class='template-control col-md-3    patientMedicalHistoryFamilyHistory'>            <label class='control-label lbl-elipsis'>Family History</label>            <div class='internal checkbox checkbox-primary ' data-id="patientMedicalHistoryFamilyHistory">                <input type="hidden" name="_safetyData.patient.medicalHistories[3].familyHistory">                <input type="checkbox" name="safetyData.patient.medicalHistories[3].familyHistory" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.patient.medicalHistories[3].familyHistory"></label>            </div>                    </div>    <div id="patientMedicalHistoryComments" class='template-control     patientMedicalHistoryComments col-md-12'>    <label class='control-label lbl-elipsis'>Comments</label>    <div class='internal' data-id="patientMedicalHistoryComments">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.medicalHistories[3].comments" maxlength="2000" rows="2" cols="100" id="safetyData.patient.medicalHistories[3].comments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.patient.medicalHistories[3].deleted value=false>        </div>    </div></div>                                                                                            <div class="row row-strip pv-med-history pv-section-record ui-sortable-handle p-b-10  "     id="patientMedHistory-section-4">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-med-history" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close patientMedHistory_4" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="patientMedicalHistory" class=' col-md-3   template-control  patientMedicalHistory' >                <label class='control-label lbl-elipsis'>Medical History</label>        <div class='input-group internal inner-addon right-addon' data-id="patientMedicalHistory">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.medicalHistories[4].medicalHistory.reactionCoded" maxlength="250" value="blue" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-value="blue" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientMedicalHistory" id="safetyData.patient.medicalHistories[4].medicalHistory.reactionCoded" />                <input type="hidden" name="safetyData.patient.medicalHistories[4].medicalHistory.lltCode" class="hidden-id" value="" id="safetyData.patient.medicalHistories[4].medicalHistory.lltCode" /><input type="hidden" name="safetyData.patient.medicalHistories[4].medicalHistory.codedWithSearchString" value="" id="safetyData.patient.medicalHistories[4].medicalHistory.codedWithSearchString" /><input type="hidden" name="safetyData.patient.medicalHistories[4].medicalHistory.hierarchyStorageId" value="" id="safetyData.patient.medicalHistories[4].medicalHistory.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.medicalHistories[4].medicalHistory.reportedReaction" value="blue" id="safetyData.patient.medicalHistories[4].medicalHistory.reportedReaction" /><input type="hidden" name="safetyData.patient.medicalHistories[4].internalRowId" value="24" id="safetyData.patient.medicalHistories[4].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="patientMedicalHistoryStartDate" class="template-control patientMedicalHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[4].startDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[4].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[4].startDate.format" value="" id="safetyData.patient.medicalHistories[4].startDate.format" /></div></div>    <div id="patientMedicalHistoryEndDate" class="template-control patientMedicalHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[4].endDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[4].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[4].endDate.format" value="" id="safetyData.patient.medicalHistories[4].endDate.format" /></div></div>    <div id="patientMedicalHistoryContinuing" class=" patientMedicalHistoryContinuing null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Continuing</label>        <div class='internal' data-id="patientMedicalHistoryContinuing">    <select class="form-control      " name="safetyData.patient.medicalHistories[4].continuing" data-from="continuings" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.patient.medicalHistories[4].continuing" ><option value="" selected="selected">Select</option><option value="23" >Yes</option><option value="24" >No</option></select>        </div></div>            <div id="patientMedicalHistoryFamilyHistory" class='template-control col-md-3    patientMedicalHistoryFamilyHistory'>            <label class='control-label lbl-elipsis'>Family History</label>            <div class='internal checkbox checkbox-primary ' data-id="patientMedicalHistoryFamilyHistory">                <input type="hidden" name="_safetyData.patient.medicalHistories[4].familyHistory">                <input type="checkbox" name="safetyData.patient.medicalHistories[4].familyHistory" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.patient.medicalHistories[4].familyHistory"></label>            </div>                    </div>    <div id="patientMedicalHistoryComments" class='template-control     patientMedicalHistoryComments col-md-12'>    <label class='control-label lbl-elipsis'>Comments</label>    <div class='internal' data-id="patientMedicalHistoryComments">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.medicalHistories[4].comments" maxlength="2000" rows="2" cols="100" id="safetyData.patient.medicalHistories[4].comments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.patient.medicalHistories[4].deleted value=false>        </div>    </div></div>                                                                                            <div class="row row-strip pv-med-history pv-section-record ui-sortable-handle p-b-10  "     id="patientMedHistory-section-5">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-med-history" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close patientMedHistory_5" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="patientMedicalHistory" class=' col-md-3   template-control  patientMedicalHistory' >                <label class='control-label lbl-elipsis'>Medical History</label>        <div class='input-group internal inner-addon right-addon' data-id="patientMedicalHistory">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.medicalHistories[5].medicalHistory.reactionCoded" maxlength="250" value="Skin bacterial infection" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-value="Skin bacterial infection" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientMedicalHistory" id="safetyData.patient.medicalHistories[5].medicalHistory.reactionCoded" />                <input type="hidden" name="safetyData.patient.medicalHistories[5].medicalHistory.lltCode" class="hidden-id" value="10052891" id="safetyData.patient.medicalHistories[5].medicalHistory.lltCode" /><input type="hidden" name="safetyData.patient.medicalHistories[5].medicalHistory.codedWithSearchString" value="skin" id="safetyData.patient.medicalHistories[5].medicalHistory.codedWithSearchString" /><input type="hidden" name="safetyData.patient.medicalHistories[5].medicalHistory.hierarchyStorageId" value="" id="safetyData.patient.medicalHistories[5].medicalHistory.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.medicalHistories[5].medicalHistory.reportedReaction" value="skin" id="safetyData.patient.medicalHistories[5].medicalHistory.reportedReaction" /><input type="hidden" name="safetyData.patient.medicalHistories[5].internalRowId" value="25" id="safetyData.patient.medicalHistories[5].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="patientMedicalHistoryStartDate" class="template-control patientMedicalHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[5].startDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[5].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[5].startDate.format" value="" id="safetyData.patient.medicalHistories[5].startDate.format" /></div></div>    <div id="patientMedicalHistoryEndDate" class="template-control patientMedicalHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[5].endDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[5].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[5].endDate.format" value="" id="safetyData.patient.medicalHistories[5].endDate.format" /></div></div>    <div id="patientMedicalHistoryContinuing" class=" patientMedicalHistoryContinuing null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Continuing</label>        <div class='internal' data-id="patientMedicalHistoryContinuing">    <select class="form-control      " name="safetyData.patient.medicalHistories[5].continuing" data-from="continuings" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.patient.medicalHistories[5].continuing" ><option value="" selected="selected">Select</option><option value="23" >Yes</option><option value="24" >No</option></select>        </div></div>            <div id="patientMedicalHistoryFamilyHistory" class='template-control col-md-3    patientMedicalHistoryFamilyHistory'>            <label class='control-label lbl-elipsis'>Family History</label>            <div class='internal checkbox checkbox-primary ' data-id="patientMedicalHistoryFamilyHistory">                <input type="hidden" name="_safetyData.patient.medicalHistories[5].familyHistory">                <input type="checkbox" name="safetyData.patient.medicalHistories[5].familyHistory" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.patient.medicalHistories[5].familyHistory"></label>            </div>                    </div>    <div id="patientMedicalHistoryComments" class='template-control     patientMedicalHistoryComments col-md-12'>    <label class='control-label lbl-elipsis'>Comments</label>    <div class='internal' data-id="patientMedicalHistoryComments">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.medicalHistories[5].comments" maxlength="2000" rows="2" cols="100" id="safetyData.patient.medicalHistories[5].comments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.patient.medicalHistories[5].deleted value=false>        </div>    </div></div>                                                                                            <div class="row row-strip pv-med-history pv-section-record ui-sortable-handle p-b-10  "     id="patientMedHistory-section-6">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-med-history" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close patientMedHistory_6" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="patientMedicalHistory" class=' col-md-3   template-control  patientMedicalHistory' >                <label class='control-label lbl-elipsis'>Medical History</label>        <div class='input-group internal inner-addon right-addon' data-id="patientMedicalHistory">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.medicalHistories[6].medicalHistory.reactionCoded" maxlength="250" value="Skin candida NOS" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-value="Skin candida NOS" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientMedicalHistory" id="safetyData.patient.medicalHistories[6].medicalHistory.reactionCoded" />                <input type="hidden" name="safetyData.patient.medicalHistories[6].medicalHistory.lltCode" class="hidden-id" value="10040809" id="safetyData.patient.medicalHistories[6].medicalHistory.lltCode" /><input type="hidden" name="safetyData.patient.medicalHistories[6].medicalHistory.codedWithSearchString" value="skin" id="safetyData.patient.medicalHistories[6].medicalHistory.codedWithSearchString" /><input type="hidden" name="safetyData.patient.medicalHistories[6].medicalHistory.hierarchyStorageId" value="" id="safetyData.patient.medicalHistories[6].medicalHistory.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.medicalHistories[6].medicalHistory.reportedReaction" value="skin" id="safetyData.patient.medicalHistories[6].medicalHistory.reportedReaction" /><input type="hidden" name="safetyData.patient.medicalHistories[6].internalRowId" value="26" id="safetyData.patient.medicalHistories[6].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="patientMedicalHistoryStartDate" class="template-control patientMedicalHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[6].startDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[6].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[6].startDate.format" value="" id="safetyData.patient.medicalHistories[6].startDate.format" /></div></div>    <div id="patientMedicalHistoryEndDate" class="template-control patientMedicalHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[6].endDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[6].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[6].endDate.format" value="" id="safetyData.patient.medicalHistories[6].endDate.format" /></div></div>    <div id="patientMedicalHistoryContinuing" class=" patientMedicalHistoryContinuing null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Continuing</label>        <div class='internal' data-id="patientMedicalHistoryContinuing">    <select class="form-control      " name="safetyData.patient.medicalHistories[6].continuing" data-from="continuings" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.patient.medicalHistories[6].continuing" ><option value="" selected="selected">Select</option><option value="23" >Yes</option><option value="24" >No</option></select>        </div></div>            <div id="patientMedicalHistoryFamilyHistory" class='template-control col-md-3    patientMedicalHistoryFamilyHistory'>            <label class='control-label lbl-elipsis'>Family History</label>            <div class='internal checkbox checkbox-primary ' data-id="patientMedicalHistoryFamilyHistory">                <input type="hidden" name="_safetyData.patient.medicalHistories[6].familyHistory">                <input type="checkbox" name="safetyData.patient.medicalHistories[6].familyHistory" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.patient.medicalHistories[6].familyHistory"></label>            </div>                    </div>    <div id="patientMedicalHistoryComments" class='template-control     patientMedicalHistoryComments col-md-12'>    <label class='control-label lbl-elipsis'>Comments</label>    <div class='internal' data-id="patientMedicalHistoryComments">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.medicalHistories[6].comments" maxlength="2000" rows="2" cols="100" id="safetyData.patient.medicalHistories[6].comments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.patient.medicalHistories[6].deleted value=false>        </div>    </div></div>                                                                                            <div class="row row-strip pv-med-history pv-section-record ui-sortable-handle p-b-10  "     id="patientMedHistory-section-7">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-med-history" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close patientMedHistory_7" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="patientMedicalHistory" class=' col-md-3   template-control  patientMedicalHistory' >                <label class='control-label lbl-elipsis'>Medical History</label>        <div class='input-group internal inner-addon right-addon' data-id="patientMedicalHistory">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.medicalHistories[7].medicalHistory.reactionCoded" maxlength="250" value="Skin &amp; subcutaneous tissue abscess" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-value="Skin &amp; subcutaneous tissue abscess" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientMedicalHistory" id="safetyData.patient.medicalHistories[7].medicalHistory.reactionCoded" />                <input type="hidden" name="safetyData.patient.medicalHistories[7].medicalHistory.lltCode" class="hidden-id" value="10040784" id="safetyData.patient.medicalHistories[7].medicalHistory.lltCode" /><input type="hidden" name="safetyData.patient.medicalHistories[7].medicalHistory.codedWithSearchString" value="skin" id="safetyData.patient.medicalHistories[7].medicalHistory.codedWithSearchString" /><input type="hidden" name="safetyData.patient.medicalHistories[7].medicalHistory.hierarchyStorageId" value="" id="safetyData.patient.medicalHistories[7].medicalHistory.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.medicalHistories[7].medicalHistory.reportedReaction" value="skin" id="safetyData.patient.medicalHistories[7].medicalHistory.reportedReaction" /><input type="hidden" name="safetyData.patient.medicalHistories[7].internalRowId" value="27" id="safetyData.patient.medicalHistories[7].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="patientMedicalHistoryStartDate" class="template-control patientMedicalHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[7].startDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[7].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[7].startDate.format" value="" id="safetyData.patient.medicalHistories[7].startDate.format" /></div></div>    <div id="patientMedicalHistoryEndDate" class="template-control patientMedicalHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[7].endDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[7].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[7].endDate.format" value="" id="safetyData.patient.medicalHistories[7].endDate.format" /></div></div>    <div id="patientMedicalHistoryContinuing" class=" patientMedicalHistoryContinuing null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Continuing</label>        <div class='internal' data-id="patientMedicalHistoryContinuing">    <select class="form-control      " name="safetyData.patient.medicalHistories[7].continuing" data-from="continuings" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.patient.medicalHistories[7].continuing" ><option value="" selected="selected">Select</option><option value="23" >Yes</option><option value="24" >No</option></select>        </div></div>            <div id="patientMedicalHistoryFamilyHistory" class='template-control col-md-3    patientMedicalHistoryFamilyHistory'>            <label class='control-label lbl-elipsis'>Family History</label>            <div class='internal checkbox checkbox-primary ' data-id="patientMedicalHistoryFamilyHistory">                <input type="hidden" name="_safetyData.patient.medicalHistories[7].familyHistory">                <input type="checkbox" name="safetyData.patient.medicalHistories[7].familyHistory" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.patient.medicalHistories[7].familyHistory"></label>            </div>                    </div>    <div id="patientMedicalHistoryComments" class='template-control     patientMedicalHistoryComments col-md-12'>    <label class='control-label lbl-elipsis'>Comments</label>    <div class='internal' data-id="patientMedicalHistoryComments">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.medicalHistories[7].comments" maxlength="2000" rows="2" cols="100" id="safetyData.patient.medicalHistories[7].comments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.patient.medicalHistories[7].deleted value=false>        </div>    </div></div>                                                                                            <div class="row row-strip pv-med-history pv-section-record ui-sortable-handle p-b-10  "     id="patientMedHistory-section-8">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-med-history" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close patientMedHistory_8" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="patientMedicalHistory" class=' col-md-3   template-control  patientMedicalHistory' >                <label class='control-label lbl-elipsis'>Medical History</label>        <div class='input-group internal inner-addon right-addon' data-id="patientMedicalHistory">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.medicalHistories[8].medicalHistory.reactionCoded" maxlength="250" value="Skin bacterial infection" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-value="Skin bacterial infection" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientMedicalHistory" id="safetyData.patient.medicalHistories[8].medicalHistory.reactionCoded" />                <input type="hidden" name="safetyData.patient.medicalHistories[8].medicalHistory.lltCode" class="hidden-id" value="10052891" id="safetyData.patient.medicalHistories[8].medicalHistory.lltCode" /><input type="hidden" name="safetyData.patient.medicalHistories[8].medicalHistory.codedWithSearchString" value="skin" id="safetyData.patient.medicalHistories[8].medicalHistory.codedWithSearchString" /><input type="hidden" name="safetyData.patient.medicalHistories[8].medicalHistory.hierarchyStorageId" value="" id="safetyData.patient.medicalHistories[8].medicalHistory.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.medicalHistories[8].medicalHistory.reportedReaction" value="skin" id="safetyData.patient.medicalHistories[8].medicalHistory.reportedReaction" /><input type="hidden" name="safetyData.patient.medicalHistories[8].internalRowId" value="28" id="safetyData.patient.medicalHistories[8].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="patientMedicalHistoryStartDate" class="template-control patientMedicalHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[8].startDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[8].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[8].startDate.format" value="" id="safetyData.patient.medicalHistories[8].startDate.format" /></div></div>    <div id="patientMedicalHistoryEndDate" class="template-control patientMedicalHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[8].endDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[8].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[8].endDate.format" value="" id="safetyData.patient.medicalHistories[8].endDate.format" /></div></div>    <div id="patientMedicalHistoryContinuing" class=" patientMedicalHistoryContinuing null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Continuing</label>        <div class='internal' data-id="patientMedicalHistoryContinuing">    <select class="form-control      " name="safetyData.patient.medicalHistories[8].continuing" data-from="continuings" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.patient.medicalHistories[8].continuing" ><option value="" selected="selected">Select</option><option value="23" >Yes</option><option value="24" >No</option></select>        </div></div>            <div id="patientMedicalHistoryFamilyHistory" class='template-control col-md-3    patientMedicalHistoryFamilyHistory'>            <label class='control-label lbl-elipsis'>Family History</label>            <div class='internal checkbox checkbox-primary ' data-id="patientMedicalHistoryFamilyHistory">                <input type="hidden" name="_safetyData.patient.medicalHistories[8].familyHistory">                <input type="checkbox" name="safetyData.patient.medicalHistories[8].familyHistory" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.patient.medicalHistories[8].familyHistory"></label>            </div>                    </div>    <div id="patientMedicalHistoryComments" class='template-control     patientMedicalHistoryComments col-md-12'>    <label class='control-label lbl-elipsis'>Comments</label>    <div class='internal' data-id="patientMedicalHistoryComments">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.medicalHistories[8].comments" maxlength="2000" rows="2" cols="100" id="safetyData.patient.medicalHistories[8].comments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.patient.medicalHistories[8].deleted value=false>        </div>    </div></div>                                                                                            <div class="row row-strip pv-med-history pv-section-record ui-sortable-handle p-b-10  "     id="patientMedHistory-section-9">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-med-history" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close patientMedHistory_9" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="patientMedicalHistory" class=' col-md-3   template-control  patientMedicalHistory' >                <label class='control-label lbl-elipsis'>Medical History</label>        <div class='input-group internal inner-addon right-addon' data-id="patientMedicalHistory">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.medicalHistories[9].medicalHistory.reactionCoded" maxlength="250" value="Rash" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-value="Rash" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientMedicalHistory" id="safetyData.patient.medicalHistories[9].medicalHistory.reactionCoded" />                <input type="hidden" name="safetyData.patient.medicalHistories[9].medicalHistory.lltCode" class="hidden-id" value="10037844" id="safetyData.patient.medicalHistories[9].medicalHistory.lltCode" /><input type="hidden" name="safetyData.patient.medicalHistories[9].medicalHistory.codedWithSearchString" value="rash" id="safetyData.patient.medicalHistories[9].medicalHistory.codedWithSearchString" /><input type="hidden" name="safetyData.patient.medicalHistories[9].medicalHistory.hierarchyStorageId" value="" id="safetyData.patient.medicalHistories[9].medicalHistory.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.medicalHistories[9].medicalHistory.reportedReaction" value="rash" id="safetyData.patient.medicalHistories[9].medicalHistory.reportedReaction" /><input type="hidden" name="safetyData.patient.medicalHistories[9].internalRowId" value="29" id="safetyData.patient.medicalHistories[9].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="patientMedicalHistoryStartDate" class="template-control patientMedicalHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[9].startDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[9].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[9].startDate.format" value="" id="safetyData.patient.medicalHistories[9].startDate.format" /></div></div>    <div id="patientMedicalHistoryEndDate" class="template-control patientMedicalHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientMedicalHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.patient.medicalHistories[9].endDate.value" data-mandatory="false" id="safetyData.patient.medicalHistories[9].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.medicalHistories[9].endDate.format" value="" id="safetyData.patient.medicalHistories[9].endDate.format" /></div></div>    <div id="patientMedicalHistoryContinuing" class=" patientMedicalHistoryContinuing null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Continuing</label>        <div class='internal' data-id="patientMedicalHistoryContinuing">    <select class="form-control      " name="safetyData.patient.medicalHistories[9].continuing" data-from="continuings" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.patient.medicalHistories[9].continuing" ><option value="" selected="selected">Select</option><option value="23" >Yes</option><option value="24" >No</option></select>        </div></div>            <div id="patientMedicalHistoryFamilyHistory" class='template-control col-md-3    patientMedicalHistoryFamilyHistory'>            <label class='control-label lbl-elipsis'>Family History</label>            <div class='internal checkbox checkbox-primary ' data-id="patientMedicalHistoryFamilyHistory">                <input type="hidden" name="_safetyData.patient.medicalHistories[9].familyHistory">                <input type="checkbox" name="safetyData.patient.medicalHistories[9].familyHistory" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.patient.medicalHistories[9].familyHistory"></label>            </div>                    </div>    <div id="patientMedicalHistoryComments" class='template-control     patientMedicalHistoryComments col-md-12'>    <label class='control-label lbl-elipsis'>Comments</label>    <div class='internal' data-id="patientMedicalHistoryComments">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.medicalHistories[9].comments" maxlength="2000" rows="2" cols="100" id="safetyData.patient.medicalHistories[9].comments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.patient.medicalHistories[9].deleted value=false>        </div>    </div></div>                                                                                    </div>                                    </div>                                </div>                                                                                        <!-- Patient Past Drug History -->                                <div class="panel panel-default section-header inner" id="patientPastDrugHistoryContainer">                                    <div class="panel-heading rxmain-container-row">                                        <h4 class="panel-title">                                            <a data-toggle="collapse"                                               data-parent="#accordion-innerPatient"                                               href="#patientDrugHistory"                                               class="collapsed sec-display-txt childSectionTitle"                                               aria-expanded="false">                                                Past Drug History                                            </a>                                            <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#pvDraginnerPatientPastDrugHistory" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#pvDraginnerPatientPastDrugHistory" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm pv-add-row" data-inner-sec="true"           data-tabular="inner" title="Add another section"           data-target="pvi-drug-history">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>                                        </h4>                                    </div>                                    <div id="patientDrugHistory"                                         data-templateId="patientDrugHistoryTemplate"                                         class="pv-main panel-collapse collapse inner-accordion"                                         aria-expanded="false">                                        <div class="pv-draggable-list pv-section ui-sortable" id="pvDraginnerPatientPastDrugHistory">                                                                                            <div class="row row-strip pv-drug-history  pv-section-record ui-sortable-handle p-b-10  "     id="patientDrugHistory-section-0">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-drug-history " title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close patientDrugHistory_0" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="patientPastDrugHistoryName" class="col-md-3 template-control  patientPastDrugHistoryName   " >        <label class='control-label lbl-elipsis'>Drug Name</label>        <div class='internal' data-id="patientPastDrugHistoryName">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.patient.pastDrugHistories[0].drugName.value" value="" data-initial-value="" maxlength="250" data-field-id="patientPastDrugHistoryName" id="safetyData.patient.pastDrugHistories[0].drugName.value" />        <input type="hidden" name="safetyData.patient.pastDrugHistories[0].drugName.id" value="" id="safetyData.patient.pastDrugHistories[0].drugName.id" /><input type="hidden" name="safetyData.patient.pastDrugHistories[0].internalRowId" value="8" id="safetyData.patient.pastDrugHistories[0].internalRowId" />    </div> </div>    <div id="patientPastDrugHistoryStartDate" class="template-control patientPastDrugHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientPastDrugHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.patient.pastDrugHistories[0].startDate.value" data-mandatory="false" id="safetyData.patient.pastDrugHistories[0].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.pastDrugHistories[0].startDate.format" value="" id="safetyData.patient.pastDrugHistories[0].startDate.format" /></div></div>    <div id="patientPastDrugHistoryEndDate" class="template-control patientPastDrugHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="patientPastDrugHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.patient.pastDrugHistories[0].endDate.value" data-mandatory="false" id="safetyData.patient.pastDrugHistories[0].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.patient.pastDrugHistories[0].endDate.format" value="" id="safetyData.patient.pastDrugHistories[0].endDate.format" /></div></div>            <div id="patientPastDrugHistoryDrugIndication" class=' col-md-3   template-control  patientPastDrugHistoryDrugIndication' >                <label class='control-label lbl-elipsis'>Drug Indication</label>        <div class='input-group internal inner-addon right-addon' data-id="patientPastDrugHistoryDrugIndication">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.pastDrugHistories[0].drugIndication.reactionCoded" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientPastDrugHistoryDrugIndication" id="safetyData.patient.pastDrugHistories[0].drugIndication.reactionCoded" />                <input type="hidden" name="safetyData.patient.pastDrugHistories[0].drugIndication.lltCode" class="hidden-id" value="" id="safetyData.patient.pastDrugHistories[0].drugIndication.lltCode" /><input type="hidden" name="safetyData.patient.pastDrugHistories[0].drugIndication.codedWithSearchString" value="" id="safetyData.patient.pastDrugHistories[0].drugIndication.codedWithSearchString" /><input type="hidden" name="safetyData.patient.pastDrugHistories[0].drugIndication.hierarchyStorageId" value="" id="safetyData.patient.pastDrugHistories[0].drugIndication.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.pastDrugHistories[0].drugIndication.reportedReaction" value="" id="safetyData.patient.pastDrugHistories[0].drugIndication.reportedReaction" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>            <div id="patientPastDrugHistoryDrugReaction" class=' col-md-3   template-control  patientPastDrugHistoryDrugReaction' >                <label class='control-label lbl-elipsis'>Drug Reaction</label>        <div class='input-group internal inner-addon right-addon' data-id="patientPastDrugHistoryDrugReaction">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.patient.pastDrugHistories[0].drugReaction.reactionCoded" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="patientPastDrugHistoryDrugReaction" id="safetyData.patient.pastDrugHistories[0].drugReaction.reactionCoded" />                <input type="hidden" name="safetyData.patient.pastDrugHistories[0].drugReaction.lltCode" class="hidden-id" value="" id="safetyData.patient.pastDrugHistories[0].drugReaction.lltCode" /><input type="hidden" name="safetyData.patient.pastDrugHistories[0].drugReaction.codedWithSearchString" value="" id="safetyData.patient.pastDrugHistories[0].drugReaction.codedWithSearchString" /><input type="hidden" name="safetyData.patient.pastDrugHistories[0].drugReaction.hierarchyStorageId" value="" id="safetyData.patient.pastDrugHistories[0].drugReaction.hierarchyStorageId" /><input type="hidden" name="safetyData.patient.pastDrugHistories[0].drugReaction.reportedReaction" value="" id="safetyData.patient.pastDrugHistories[0].drugReaction.reportedReaction" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div><input type="hidden" name=safetyData.patient.pastDrugHistories[0].deleted value=false>        </div>    </div></div>                                                                                    </div>                                    </div>                                </div>                                                    </div>                    </div>                </div>            </div>        </div>    </div>

                                                <!--Parent -->
                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-parent">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#parentDetail" aria-expanded="false"                   class="collapsed sec-display-txt sectionTitle">                    Parent                </a>                            </h4>        </div>        <div id="parentDetail"             class="panel-collapse collapse rxmain-container-content rxmain-container-show"             aria-expanded="false">            <div class="row pv-parent form-pv">                <div class="col-md-12">                    <div class="form-group row form-horizontal">                                    <div id="parentName" class="col-md-2 template-control  parentName   " >        <label class='control-label lbl-elipsis'>Name / Initials</label>        <div class='internal' data-id="parentName">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.parent.name" value="" data-initial-value="" maxlength="60" data-field-id="parentName" id="safetyData.parent.name" />            </div> </div>            <div id="parentAge" class="col-md-2 template-control  parentAge   " >        <label class='control-label lbl-elipsis'>Date of Birth/ Age</label>        <div class='internal' data-id="parentAge">        <input type="text" class="form-control  parentAge " data-mandatory="false" data-mandatorySet="0" name="safetyData.parent.age.value" value="" data-initial-value="" maxlength="1000" data-field-id="parentAge" id="safetyData.parent.age.value" />        <input type="hidden" name="safetyData.parent.age.id" value="" id="safetyData.parent.age.id" />    </div> </div><div id="parentWeight" class='col-md-2   template-control  parentWeight'>    <div class="no-txt-overflow input-group internal" data-id="parentWeight">        <label class="control-label lbl-elipsis">Weight</label>            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.parent.weight" value="" maxlength="6" id="safetyData.parent.weight" />                                <span class="input-group-btn inner-input-group unit">            <label>Unit</label>            <select name="safetyData.parent.weightUnit.id" data-value="44" data-placeholder="Select" class="btn form-control select2 null has-default-val " id="safetyData.parent.weightUnit.id" ><option value="44" >Kgs</option><option value="45" >Lbs</option></select>                                </span>    </div></div><div id="parentHeight" class='col-md-2   template-control  parentHeight'>    <div class="no-txt-overflow input-group internal" data-id="parentHeight">        <label class="control-label lbl-elipsis">Height</label>            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.parent.height" value="" maxlength="3" id="safetyData.parent.height" />                                <span class="input-group-btn inner-input-group unit">            <label>Unit</label>            <select name="safetyData.parent.heightUnit.id" data-value="46" data-placeholder="Select" class="btn form-control select2 null has-default-val " id="safetyData.parent.heightUnit.id" ><option value="46" >Cms</option><option value="47" >Inches</option></select>                                </span>    </div></div>    <div id="parentGender" class=" parentGender null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Gender</label>        <div class='internal' data-id="parentGender">    <select class="form-control      " name="safetyData.parent.gender.id" data-from="genders" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.parent.gender.id" ><option value="" selected="selected">Select</option><option value="100004" >AddedNew</option><option value="100000" >Confident</option><option value="100003" >CopyConf</option><option value="2" >Female</option><option value="1" >Male</option><option value="4" >UNK</option></select>        </div></div>    <div id="parentLmpDate" class="template-control parentLmpDate  col-md-2 ">            <label class='control-label lbl-elipsis'>LMP Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="parentLmpDate">        <input type="text" class="form-control   " name="safetyData.parent.lmpDate.value" data-mandatory="false" id="safetyData.parent.lmpDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.parent.lmpDate.format" value="" id="safetyData.parent.lmpDate.format" /></div></div><div id="parentAdditionalRelevantMedicalHistory" class='template-control     parentAdditionalRelevantMedicalHistory col-md-12'>    <label class='control-label lbl-elipsis'>Add&#39;l Relevant Medical History</label>    <div class='internal' data-id="parentAdditionalRelevantMedicalHistory">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.parent.additionalRelevantMedicalHistory" maxlength="10000" rows="2" cols="100" id="safetyData.parent.additionalRelevantMedicalHistory" ></textarea>                <span class="maxlength-feedback"></span>            </div></div>                    </div>                    <div class="form-group inner-table m-t-5">                        <div class="panel-group" id="accordion-innerParent">                        <!-- parent Medical History Details	 -->                                                            <div class="panel panel-default section-header inner" id="parentMedicalHistoryContainer">                                    <div class="panel-heading rxmain-container-row">                                        <h4 class="panel-title">                                            <a data-toggle="collapse"                                               data-parent="#accordion-innerParent"                                               href="#parentMedHistory"                                               class="collapsed sec-display-txt childSectionTitle"                                               aria-expanded="false">                                                Parent Medical History                                            </a>                                            <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#pvDraginnerParentMedicalHistory" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#pvDraginnerParentMedicalHistory" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm pv-add-row" data-inner-sec="true"           data-tabular="inner" title="Add another section"           data-target="pvi-med-history-parent">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>                                        </h4>                                    </div>                                    <div id="parentMedHistory"                                         data-templateId="parentMedHistoryTemplate"                                         class="pv-main panel-collapse collapse"                                         aria-expanded="false">                                        <div class="pv-draggable-list pv-section ui-sortable" id="pvDraginnerParentMedicalHistory">                                                                                            <div class="row row-strip pv-med-history-parent pv-section-record ui-sortable-handle p-b-10  "     id="parentMedHistory-section-0">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-med-history-parent" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close parentMedHistory_0" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="parentMedicalHistory" class=' col-md-3   template-control  parentMedicalHistory' >                <label class='control-label lbl-elipsis'>Medical History</label>        <div class='input-group internal inner-addon right-addon' data-id="parentMedicalHistory">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.parent.medicalHistories[0].medicalHistory.reactionCoded" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="parentMedicalHistory" id="safetyData.parent.medicalHistories[0].medicalHistory.reactionCoded" />                <input type="hidden" name="safetyData.parent.medicalHistories[0].medicalHistory.lltCode" class="hidden-id" value="" id="safetyData.parent.medicalHistories[0].medicalHistory.lltCode" /><input type="hidden" name="safetyData.parent.medicalHistories[0].medicalHistory.codedWithSearchString" value="" id="safetyData.parent.medicalHistories[0].medicalHistory.codedWithSearchString" /><input type="hidden" name="safetyData.parent.medicalHistories[0].medicalHistory.hierarchyStorageId" value="" id="safetyData.parent.medicalHistories[0].medicalHistory.hierarchyStorageId" /><input type="hidden" name="safetyData.parent.medicalHistories[0].medicalHistory.reportedReaction" value="" id="safetyData.parent.medicalHistories[0].medicalHistory.reportedReaction" /><input type="hidden" name="safetyData.parent.medicalHistories[0].internalRowId" value="9" id="safetyData.parent.medicalHistories[0].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="parentMedicalHistoryStartDate" class="template-control parentMedicalHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="parentMedicalHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.parent.medicalHistories[0].startDate.value" data-mandatory="false" id="safetyData.parent.medicalHistories[0].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.parent.medicalHistories[0].startDate.format" value="" id="safetyData.parent.medicalHistories[0].startDate.format" /></div></div>    <div id="parentMedicalHistoryEndDate" class="template-control parentMedicalHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="parentMedicalHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.parent.medicalHistories[0].endDate.value" data-mandatory="false" id="safetyData.parent.medicalHistories[0].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.parent.medicalHistories[0].endDate.format" value="" id="safetyData.parent.medicalHistories[0].endDate.format" /></div></div>    <div id="parentMedicalHistoryContinuing" class=" parentMedicalHistoryContinuing null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Continuing</label>        <div class='internal' data-id="parentMedicalHistoryContinuing">    <select class="form-control      " name="safetyData.parent.medicalHistories[0].continuing" data-from="continuings" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.parent.medicalHistories[0].continuing" ><option value="" selected="selected">Select</option><option value="23" >Yes</option><option value="24" >No</option></select>        </div></div><div id="parentMedicalHistoryComments" class='template-control     parentMedicalHistoryComments col-md-12'>    <label class='control-label lbl-elipsis'>Comments</label>    <div class='internal' data-id="parentMedicalHistoryComments">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.parent.medicalHistories[0].comments" maxlength="2000" rows="2" cols="100" id="safetyData.parent.medicalHistories[0].comments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.parent.medicalHistories[0].deleted value=false>        </div>    </div></div>                                                                                    </div>                                    </div>                                </div>                                                    <!-- parent Past Drug History -->                                                            <div class="panel panel-default section-header inner" id="parentDrugHistoryContainer">                                    <div class="panel-heading rxmain-container-row">                                        <h4 class="panel-title">                                            <a data-toggle="collapse"                                               data-parent="#accordion-innerParent"                                               href="#parentDrugHistory"                                               class="collapsed sec-display-txt childSectionTitle"                                               aria-expanded="false">                                                Parent Past Drug History                                            </a>                                            <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#pvDraginnerParentPastDrugHistory" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#pvDraginnerParentPastDrugHistory" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm pv-add-row" data-inner-sec="true"           data-tabular="inner" title="Add another section"           data-target="pvi-drug-history-parent">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>                                        </h4>                                    </div>                                    <div id="parentDrugHistory"                                         data-templateId="parentDrugHistoryTemplate"                                         class="pv-main panel-collapse collapse inner-accordion"                                         aria-expanded="false">                                        <div class="pv-draggable-list pv-section ui-sortable" id="pvDraginnerParentPastDrugHistory">                                                                                            <div class="row row-strip pv-drug-history-parent pv-section-record ui-sortable-handle p-b-10  "     id="parentDrugHistory-section-0">            <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="pv-drug-history-parent" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close parentDrugHistory_0" aria-hidden="true"></i>    </a></div>        <div class="col-md-12 m-t-20 form-pv form-horizontal">        <div class="form-group">                        <div id="parentPastDrugHistoryName" class="col-md-3 template-control  parentPastDrugHistoryName   " >        <label class='control-label lbl-elipsis'>Drug Name</label>        <div class='internal' data-id="parentPastDrugHistoryName">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.parent.pastDrugHistories[0].drugName.value" value="" data-initial-value="" maxlength="250" data-field-id="parentPastDrugHistoryName" id="safetyData.parent.pastDrugHistories[0].drugName.value" />        <input type="hidden" name="safetyData.parent.pastDrugHistories[0].drugName.id" value="" id="safetyData.parent.pastDrugHistories[0].drugName.id" /><input type="hidden" name="safetyData.parent.pastDrugHistories[0].internalRowId" value="10" id="safetyData.parent.pastDrugHistories[0].internalRowId" />    </div> </div>    <div id="parentPastDrugHistoryStartDate" class="template-control parentPastDrugHistoryStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="parentPastDrugHistoryStartDate">        <input type="text" class="form-control   " name="safetyData.parent.pastDrugHistories[0].startDate.value" data-mandatory="false" id="safetyData.parent.pastDrugHistories[0].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.parent.pastDrugHistories[0].startDate.format" value="" id="safetyData.parent.pastDrugHistories[0].startDate.format" /></div></div>    <div id="parentPastDrugHistoryEndDate" class="template-control parentPastDrugHistoryEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="parentPastDrugHistoryEndDate">        <input type="text" class="form-control   " name="safetyData.parent.pastDrugHistories[0].endDate.value" data-mandatory="false" id="safetyData.parent.pastDrugHistories[0].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.parent.pastDrugHistories[0].endDate.format" value="" id="safetyData.parent.pastDrugHistories[0].endDate.format" /></div></div>            <div id="parentPastDrugHistoryDrugIndication" class=' col-md-3   template-control  parentPastDrugHistoryDrugIndication' >                <label class='control-label lbl-elipsis'>Drug Indication</label>        <div class='input-group internal inner-addon right-addon' data-id="parentPastDrugHistoryDrugIndication">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.parent.pastDrugHistories[0].drugIndication.reactionCoded" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="parentPastDrugHistoryDrugIndication" id="safetyData.parent.pastDrugHistories[0].drugIndication.reactionCoded" />                <input type="hidden" name="safetyData.parent.pastDrugHistories[0].drugIndication.lltCode" class="hidden-id" value="" id="safetyData.parent.pastDrugHistories[0].drugIndication.lltCode" /><input type="hidden" name="safetyData.parent.pastDrugHistories[0].drugIndication.codedWithSearchString" value="" id="safetyData.parent.pastDrugHistories[0].drugIndication.codedWithSearchString" /><input type="hidden" name="safetyData.parent.pastDrugHistories[0].drugIndication.hierarchyStorageId" value="" id="safetyData.parent.pastDrugHistories[0].drugIndication.hierarchyStorageId" /><input type="hidden" name="safetyData.parent.pastDrugHistories[0].drugIndication.reportedReaction" value="" id="safetyData.parent.pastDrugHistories[0].drugIndication.reportedReaction" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>            <div id="parentPastDrugHistoryDrugReaction" class=' col-md-3   template-control  parentPastDrugHistoryDrugReaction' >                <label class='control-label lbl-elipsis'>Drug Reaction</label>        <div class='input-group internal inner-addon right-addon' data-id="parentPastDrugHistoryDrugReaction">        <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.parent.pastDrugHistories[0].drugReaction.reactionCoded" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="parentPastDrugHistoryDrugReaction" id="safetyData.parent.pastDrugHistories[0].drugReaction.reactionCoded" />                <input type="hidden" name="safetyData.parent.pastDrugHistories[0].drugReaction.lltCode" class="hidden-id" value="" id="safetyData.parent.pastDrugHistories[0].drugReaction.lltCode" /><input type="hidden" name="safetyData.parent.pastDrugHistories[0].drugReaction.codedWithSearchString" value="" id="safetyData.parent.pastDrugHistories[0].drugReaction.codedWithSearchString" /><input type="hidden" name="safetyData.parent.pastDrugHistories[0].drugReaction.hierarchyStorageId" value="" id="safetyData.parent.pastDrugHistories[0].drugReaction.hierarchyStorageId" /><input type="hidden" name="safetyData.parent.pastDrugHistories[0].drugReaction.reportedReaction" value="" id="safetyData.parent.pastDrugHistories[0].drugReaction.reportedReaction" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div><input type="hidden" name=safetyData.parent.pastDrugHistories[0].deleted value=false>        </div>    </div></div>                                                                                    </div>                                    </div>                                </div>                                                    </div>                    </div>                </div>            </div>        </div>    </div>

                                                <!-- Products -->
                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-products">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#product" aria-expanded="false" class="collapsed sec-display-txt sectionTitle">                    Product(s)                </a>                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-product" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-product" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm " data-inner-sec=""           data-tabular="false" title="Add another section"           data-target="pvi-product">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>            </h4>        </div>        <div id="product" data-templateId="productsTemplate"             class="panel-collapse pv-main collapse product-sec rxmain-container-content rxmain-container-show"             aria-expanded="false">            <div class="row pv-product">                <div class="form-group inner-table m-b-0 row">                    <div class="panel-group pv-section m-b-0 pv-nested-draggable-list" id="product-section">                                                        <div class="panel panel-default pv-section-record ui-sortable-handle " id="product-section-0">        <div class="panel-heading">            <h4 class="panel-title">                <a data-toggle="collapse" data-header="Product-Section" data-parent="#product-section"                   href="#product-section_0" class="inner-repeatable"                   aria-expanded="true">                                            <span class="badge row-count badge-index">1</span>Product-Section                                    </a>                                    <div class="configureFields pv-subhead-config">                        <a href="javascript:void(0);" data-target="" title="Remove this section"                           class="pull-right btn-del-panel remove-section product-del">                            <i class="md md-close product_0" aria-hidden="true"></i>                        </a>                    </div>                            </h4>        </div>        <div id="product-section_0" class="panel-collapse collapse in inner-repeatable product-sec"             aria-expanded="true">            <div class="panel-body ui-nested-sortable-handle ">                <div class="col-md-12 form-pv">                    <div>                        <div class="form-group">                                        <div id="productLicense" class=' col-md-4 required  template-control  productLicense' >                <label class='control-label lbl-elipsis'>Product Name</label>        <div class='input-group internal inner-addon right-addon' data-id="productLicense">        <input type="text" class="form-control productNameBrowser   " name="safetyData.products[0].license.value" maxlength="250" value="Rx CISPLATIN ID" data-mandatory="true" data-mandatorySet="0" data-placement="top" data-browser-value="Rx CISPLATIN ID" data-browser-type="product" data-flag-target="" data-placeholder="" data-fieldId="productLicense" id="safetyData.products[0].license.value" />                <input type="hidden" name="safetyData.products[0].license.id" value="100381" id="safetyData.products[0].license.id" /><input type="hidden" name="safetyData.products[0].id" class="hidden-id" value="100271" id="safetyData.products[0].id" /><input type="hidden" name="safetyData.products[0].internalRowId" value="11" id="safetyData.products[0].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.products[0].search" name="safetyData.products[0].search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="productDosageForm" class=" productDosageForm null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Dosage Form</label>        <div class='internal' data-id="productDosageForm">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[0].dosageForm.id" data-from="dosageForm" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="480" id="safetyData.products[0].dosageForm.id" ><option value="">Select</option></select>        </div></div>    <div id="productRole" class=" productRole null template-control col-md-2 required ">            <label class='control-label lbl-elipsis'>Role</label>        <div class='internal' data-id="productRole">    <select class="form-control   productRoleId select2-lazy   " name="safetyData.products[0].role.id" data-from="roles" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="true" data-value="29" id="safetyData.products[0].role.id" ><option value="">Select</option></select>        </div></div>    <div id="productObtainCountry" class=" productObtainCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Obtain Country</label>        <div class='internal' data-id="productObtainCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.products[0].obtainCountry.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[0].obtainCountry.id" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productAuthNumber" class="col-md-2 template-control  productAuthNumber   " >        <label class='control-label lbl-elipsis'>Auth. Number</label>        <div class='internal' data-id="productAuthNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[0].authNumber" value="" data-initial-value="" maxlength="35" data-field-id="productAuthNumber" id="safetyData.products[0].authNumber" />            </div> </div>    <div id="productAuthCountry" class=" productAuthCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Auth. Country</label>        <div class='internal' data-id="productAuthCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.products[0].authCountry.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[0].authCountry.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productManufacturer" class=" productManufacturer null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Auth. Holder</label>        <div class='internal' data-id="productManufacturer">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[0].authHolder.idOrValue" data-tag="true" data-from="manufacturers" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[0].authHolder.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productCumulativeDoseToFirstReaction" class="col-md-2 template-control  productCumulativeDoseToFirstReaction   " >        <label class='control-label lbl-elipsis'>Cumulative Dose to First Reaction</label>        <div class='internal' data-id="productCumulativeDoseToFirstReaction">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="10" data-unitList="dosage-unit-list" name="safetyData.products[0].cumulativeDoseToFirstReaction.value" value="" data-initial-value="" maxlength="10" data-field-id="productCumulativeDoseToFirstReaction" id="safetyData.products[0].cumulativeDoseToFirstReaction.value" />        <input type="hidden" name="safetyData.products[0].cumulativeDoseToFirstReaction.id" value="" id="safetyData.products[0].cumulativeDoseToFirstReaction.id" />    </div> </div>            <div id="productExposureGestationPeriod" class="col-md-2 template-control  productExposureGestationPeriod   " >        <label class='control-label lbl-elipsis'>Exposure Gestation Period</label>        <div class='internal' data-id="productExposureGestationPeriod">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="3" data-unitList="gestation-period-list" name="safetyData.products[0].exposureGestationPeriod.value" value="" data-initial-value="" maxlength="3" data-field-id="productExposureGestationPeriod" id="safetyData.products[0].exposureGestationPeriod.value" />        <input type="hidden" name="safetyData.products[0].exposureGestationPeriod.id" value="" id="safetyData.products[0].exposureGestationPeriod.id" />    </div> </div>    <div id="productActionTaken" class=" productActionTaken null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Action Taken</label>        <div class='internal' data-id="productActionTaken">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[0].actionTaken.id" data-from="actionTaken" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[0].actionTaken.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productExpirationDate" class="template-control productExpirationDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Expiration Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productExpirationDate">        <input type="text" class="form-control  futureDatesAllowed allowDateWithoutTime " name="safetyData.products[0].expirationDate.value" data-mandatory="false" id="safetyData.products[0].expirationDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[0].expirationDate.format" value="" id="safetyData.products[0].expirationDate.format" /></div></div>    <div id="productReplacementRequired" class=" productReplacementRequired null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Replacement Required</label>        <div class='internal' data-id="productReplacementRequired">    <select class="form-control      " name="safetyData.products[0].replacementRequired.id" data-from="replacementRequired" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[0].replacementRequired.id" ><option value="" selected="selected">Select</option><option value="1023" >Yes</option><option value="1024" >No</option></select>        </div></div>    <div id="productReturnRequired" class=" productReturnRequired null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Return Required</label>        <div class='internal' data-id="productReturnRequired">    <select class="form-control      " name="safetyData.products[0].returnRequired.id" data-from="returnRequired" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[0].returnRequired.id" ><option value="" selected="selected">Select</option><option value="1033" >Yes</option><option value="1034" >No</option></select>        </div></div>    <div id="productRefundRequested" class=" productRefundRequested null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Refund Requested</label>        <div class='internal' data-id="productRefundRequested">    <select class="form-control      " name="safetyData.products[0].refundRequested.id" data-from="refundRequested" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[0].refundRequested.id" ><option value="" selected="selected">Select</option><option value="1035" >Yes</option><option value="1036" >No</option></select>        </div></div>            <div id="productBlinded" class='template-control col-md-2    productBlinded'>            <label class='control-label lbl-elipsis'>Blinded</label>            <div class='internal checkbox checkbox-primary ' data-id="productBlinded">                <input type="hidden" name="_safetyData.products[0].blinded">                <input type="checkbox" name="safetyData.products[0].blinded" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.products[0].blinded"></label>            </div>                    </div>        <div id="productAddlnDrugInformation" class=" productAddlnDrugInformation null template-control col-md-12  ">            <label class='control-label lbl-elipsis'>Add&#39;l Drug Info</label>        <div class='internal' data-id="productAddlnDrugInformation">    <select class="form-control select2-box  multiSelectSelect2Field wrapped-multiselect   " name="safetyData.products[0].additionalDrugInfo.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="" id="safetyData.products[0].additionalDrugInfo.id" ><option value="33" >Counterfeit</option><option value="34" >Overdose</option><option value="35" >Drug taken by the father</option><option value="36" >Drug taken beyond expiry date</option><option value="37" >Batch and lot tested and found within specifications</option><option value="38" >Batch and lot tested and found not within specifications</option><option value="39" >Medication error</option><option value="40" >Misuse</option><option value="41" >Abuse</option><option value="42" >Occupational exposure</option><option value="43" >Off label use</option></select>        </div></div><div id="productAdditionalDrugInfoNotes" class='template-control     productAdditionalDrugInfoNotes col-md-12'>    <label class='control-label lbl-elipsis'>Add&#39;l Drug Info Notes</label>    <div class='internal' data-id="productAdditionalDrugInfoNotes">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[0].additionalDrugInfoNotes" maxlength="2000" rows="2" cols="100" id="safetyData.products[0].additionalDrugInfoNotes" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.products[0].deleted value=false>                        </div>                    </div>                    <!-- Sub Sections Products -->                    <div class="form-group inner-table innerSectionTable ">                        <div class="panel-group inner-repeatable"                             id="accordion-innerProducts_0_">                        <!-- Substances -->                                                            <div class="col-md-6 rx-col-table override-col-padding">                                    <div class="panel panel-default section-header inner">                                        <div class="panel-heading">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_0_"                                                   href="#productSubstances_0"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   id="accordion-innerProducts_0_" aria-expanded="false">                                                    Substance(s)                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-product-innersubstance_0_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-product-innersubstance_0_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                            </h4>                                        </div>                                        <div id="productSubstances_0"                                             data-templateId="productSubstancesTemplate" data-table="true"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                <div class="pv-inner-product-substance pv-section">                                                    <table class="table table-striped pv-inner-table m-b-0">                                                        <thead class="unhighlightSection">                                                                                                                    <th class="pv-col-sn">#</th>                                                                                                                <th id='header-productIngredients' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Name </label></th><th id='header-ingredientDosageUnit' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Strength </label></th>                                                                                                                    <th class="pv-col-la">                                                                <a href="javascript:void(0);" data-tabular="true"                                                                   class="pull-right add-table-row add-section btn-add-panel">                                                                    <i class="fa fa-plus-square-o"></i>                                                                </a>                                                            </th>                                                                                                                </thead>                                                        <tbody class="pv-draggable-list inner-repeatable"                                                               id="accordion-product-innersubstance_0_">                                                                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle  "                                                                id="productSubstances_0_-section-0">                                                                                                                                    <td class="new-index badge-index">1</td>                                                                                                                                <td id="productIngredients" class=" productIngredients null template-control col-md-6 "><div class='internal' data-id="productIngredients">    <select class="form-control   select2-box select2-ajax wrapped-multiselect   " name="safetyData.products[0].ingredients[0].name.id" data-from="" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-url="/caseEntry/searchIngredients" data-value="3539" id="safetyData.products[0].ingredients[0].name.id" ><option value="">Select</option></select>        <input type="hidden" name="safetyData.products[0].ingredients[0].internalRowId" value="46" id="safetyData.products[0].ingredients[0].internalRowId" /></div></td>    <td id="ingredientDosageUnit" class="col-md-6 template-control  ingredientDosageUnit "><div class='internal' data-id="ingredientDosageUnit">    <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="10" data-unitList="strength-unit-list" name="safetyData.products[0].ingredients[0].strength.value" value="" data-initial-value="" maxlength="10" data-field-id="ingredientDosageUnit" id="safetyData.products[0].ingredients[0].strength.value" />        <input type="hidden" name="safetyData.products[0].ingredients[0].strength.id" value="" id="safetyData.products[0].ingredients[0].strength.id" />    </div></td><input type="hidden" name=safetyData.products[0].ingredients[0].deleted value=false>                                                                                                                                    <td>                                                                        <a href="javascript:void(0);"                                                                           class="table-row-del pull-right remove-section btn-del-panel"><i                                                                                class="md md-close productSubstances_0"                                                                                aria-hidden="true"></i></a>                                                                    </td>                                                                                                                            </tr>                                                                                                                </tbody>                                                    </table>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                                    <!-- Product Indication -->                                                            <div class="col-md-6 rx-col-table override-col-padding">                                    <div class="panel panel-default section-header inner">                                        <div class="panel-heading">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_0_"                                                   id="accordion-innerProducts_0_"                                                   href="#productIndication_0"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   aria-expanded="false">                                                    Product Indication(s)                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-product-innerindication_0_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-product-innerindication_0_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                            </h4>                                        </div>                                        <div id="productIndication_0"                                             data-templateId="productIndicationTemplate" data-table="true"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                <div class="pv-inner-product-indication pv-section">                                                    <table class="table table-striped pv-inner-table m-b-0">                                                        <thead class="unhighlightSection">                                                                                                                <th class="pv-col-sn">#</th>                                                                                                                <th id='header-productIndicationReported' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Indication (Reported) </label></th><th id='header-productIndicationCoded' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Indication (Coded) </label></th>                                                                                                                    <th class="pv-col-la">                                                                <a href="javascript:void(0);" data-tabular="true"                                                                   class="pull-right add-table-row add-section btn-add-panel"><i                                                                        class="fa fa-plus-square-o"></i>                                                                </a>                                                            </th>                                                                                                                </thead>                                                        <tbody class="pv-draggable-list inner-repeatable"                                                               id="accordion-product-innerindication_0_">                                                                                                                                                                                                                                            <tr class="row-table  pv-section-record inner-repeatable ui-sortable-handle  "                                                                id="productIndication_0_-section-0">                                                                                                                            <td class="new-index badge-index">1</td>                                                                                                                                        <td class="col-md-6  template-control productIndicationReported"><div class='internal' data-id="productIndicationReported">        <div class='input-group internal inner-addon right-addon' data-id="productIndicationReported">        <input type="text" class="form-control  meddraBrowser  " name="safetyData.products[0].productIndications[0].reportedReaction" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="productIndicationCoded" data-placeholder="" data-fieldId="productIndicationReported" id="safetyData.products[0].productIndications[0].reportedReaction" />                <input type="hidden" name="safetyData.products[0].productIndications[0].lltCode" class="hidden-id" value="" id="safetyData.products[0].productIndications[0].lltCode" /><input type="hidden" name="safetyData.products[0].productIndications[0].codedWithSearchString" value="" id="safetyData.products[0].productIndications[0].codedWithSearchString" /><input type="hidden" name="safetyData.products[0].productIndications[0].hierarchyStorageId" value="" id="safetyData.products[0].productIndications[0].hierarchyStorageId" /><input type="hidden" name="safetyData.products[0].productIndications[0].internalRowId" value="13" id="safetyData.products[0].productIndications[0].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <td id="productIndicationCoded" class="col-md-6 template-control  productIndicationCoded "><div class='internal' data-id="productIndicationCoded">    <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[0].productIndications[0].reactionCoded" value="" data-initial-value="" maxlength="1000" data-field-id="productIndicationCoded" readonly="readonly" id="safetyData.products[0].productIndications[0].reactionCoded" />            </div></td><input type="hidden" name=safetyData.products[0].productIndications[0].deleted value=false>                                                                                                                                    <td>                                                                        <a href="javascript:void(0);"                                                                           class="table-row-del pull-right remove-section btn-del-panel"><i                                                                                class="md md-close productIndication_0"                                                                                aria-hidden="true"></i></a>                                                                    </td>                                                                                                                            </tr>                                                                                                                </tbody>                                                    </table>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                                    <!-- Dose Information  -->                                                            <div class="col-md-12 m-b-0 override-col-padding-full">                                    <div class="panel panel-default rxmain-container section-header inner">                                        <div class="panel-heading rxmain-container-row">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_0_"                                                   id="accordion-innerProducts_0_"                                                   href="#productDose_0"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   aria-expanded="false">                                                    Dose Information                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#pviInnerProductDoseRecords_0_" title="Move Record Up" data-anchordiv="#productDose_0_" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#pviInnerProductDoseRecords_0_" data-anchordiv="#productDose_0_" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm pv-add-row" data-inner-sec="true"           data-tabular="inner" title="Add another section"           data-target="pv-innerProductDose">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>                                            </h4>                                        </div>                                        <div id="productDose_0" data-templateId="productDoseTemplate"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="innerdose-container pv-draggable-list pv-section ui-sortable inner-repeatable"                                                 id="pviInnerProductDoseRecords_0_">                                                                                                                                                                                                            <div class="pv-section-record inner-repeatable pv-innerProductDose p-10 ui-sortable-handle p-b-10 row row-strip   "                                                         id="productDose_0_-section-0">                                                                                                                    <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close product_0" aria-hidden="true"></i>    </a></div>                                                                                                                <div class="col-md-12 m-t-20 m-b-10 form-pv form-horizontal">                                                            <div class="form-group">                                                                            <div id="productDoseInformation" class="col-md-1-half template-control  productDoseInformation   " >        <label class='control-label lbl-elipsis'>Dose</label>        <div class='internal' data-id="productDoseInformation">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="8" data-unitList="dosage-unit-list" name="safetyData.products[0].doseInformations[0].dose.value" value="" data-initial-value="" maxlength="8" data-field-id="productDoseInformation" id="safetyData.products[0].doseInformations[0].dose.value" />        <input type="hidden" name="safetyData.products[0].doseInformations[0].dose.id" value="" id="safetyData.products[0].doseInformations[0].dose.id" /><input type="hidden" name="safetyData.products[0].doseInformations[0].internalRowId" value="14" id="safetyData.products[0].doseInformations[0].internalRowId" />    </div> </div>    <div id="productDoseFrequency" class=" productDoseFrequency null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Frequency</label>        <div class='internal' data-id="productDoseFrequency">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[0].doseInformations[0].frequency.id" data-from="dosageFrequency" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[0].doseInformations[0].frequency.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productDoseStartDate" class="template-control productDoseStartDate  col-md-1-half ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productDoseStartDate">        <input type="text" class="form-control   " name="safetyData.products[0].doseInformations[0].startDate.value" data-mandatory="false" id="safetyData.products[0].doseInformations[0].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[0].doseInformations[0].startDate.format" value="" id="safetyData.products[0].doseInformations[0].startDate.format" /></div></div>    <div id="productDoseEndDate" class="template-control productDoseEndDate  col-md-1-half ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productDoseEndDate">        <input type="text" class="form-control   " name="safetyData.products[0].doseInformations[0].endDate.value" data-mandatory="false" id="safetyData.products[0].doseInformations[0].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[0].doseInformations[0].endDate.format" value="" id="safetyData.products[0].doseInformations[0].endDate.format" /></div></div>            <div id="productDoseDuration" class="col-md-1-half template-control  productDoseDuration   " >        <label class='control-label lbl-elipsis'>Duration</label>        <div class='internal' data-id="productDoseDuration">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.products[0].doseInformations[0].duration.value" value="" data-initial-value="" maxlength="5" data-field-id="productDoseDuration" id="safetyData.products[0].doseInformations[0].duration.value" />        <input type="hidden" name="safetyData.products[0].doseInformations[0].duration.id" value="" id="safetyData.products[0].doseInformations[0].duration.id" />    </div> </div>            <div id="productDoseBatchNumber" class="col-md-1-half template-control  productDoseBatchNumber   " >        <label class='control-label lbl-elipsis'>Batch/Lot Number</label>        <div class='internal' data-id="productDoseBatchNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[0].doseInformations[0].batchNumber" value="" data-initial-value="" maxlength="35" data-field-id="productDoseBatchNumber" id="safetyData.products[0].doseInformations[0].batchNumber" />            </div> </div>    <div id="productDoseRoute" class=" productDoseRoute null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Route</label>        <div class='internal' data-id="productDoseRoute">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[0].doseInformations[0].route.idOrValue" data-tag="true" data-from="route" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[0].doseInformations[0].route.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productDoseParentRoute" class=" productDoseParentRoute null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Parent Route</label>        <div class='internal' data-id="productDoseParentRoute">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[0].doseInformations[0].parentRoute.idOrValue" data-tag="true" data-from="route" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[0].doseInformations[0].parentRoute.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productDoseDescription" class="col-md-3 template-control  productDoseDescription   " >        <label class='control-label lbl-elipsis'>Dose Description</label>        <div class='internal' data-id="productDoseDescription">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[0].doseInformations[0].description" value="" data-initial-value="" maxlength="2000" data-field-id="productDoseDescription" id="safetyData.products[0].doseInformations[0].description" />            </div> </div><input type="hidden" name=safetyData.products[0].doseInformations[0].deleted value=false>                                                            </div>                                                        </div>                                                    </div>                                                                                            </div>                                        </div>                                    </div>                                </div>                                                    </div>                    </div>                </div>            </div>        </div>    </div>                                                        <div class="panel panel-default pv-section-record ui-sortable-handle " id="product-section-1">        <div class="panel-heading">            <h4 class="panel-title">                <a data-toggle="collapse" data-header="Product-Section" data-parent="#product-section"                   href="#product-section_1" class="inner-repeatable"                   aria-expanded="true">                                            <span class="badge row-count badge-index">2</span>Product-Section                                    </a>                                    <div class="configureFields pv-subhead-config">                        <a href="javascript:void(0);" data-target="" title="Remove this section"                           class="pull-right btn-del-panel remove-section product-del">                            <i class="md md-close product_1" aria-hidden="true"></i>                        </a>                    </div>                            </h4>        </div>        <div id="product-section_1" class="panel-collapse collapse in inner-repeatable product-sec"             aria-expanded="true">            <div class="panel-body ui-nested-sortable-handle ">                <div class="col-md-12 form-pv">                    <div>                        <div class="form-group">                                        <div id="productLicense" class=' col-md-4 required  template-control  productLicense' >                <label class='control-label lbl-elipsis'>Product Name</label>        <div class='input-group internal inner-addon right-addon' data-id="productLicense">        <input type="text" class="form-control productNameBrowser   " name="safetyData.products[1].license.value" maxlength="250" value="Rx METFORMIN" data-mandatory="true" data-mandatorySet="0" data-placement="top" data-browser-value="Rx METFORMIN" data-browser-type="product" data-flag-target="" data-placeholder="" data-fieldId="productLicense" id="safetyData.products[1].license.value" />                <input type="hidden" name="safetyData.products[1].license.id" value="100385" id="safetyData.products[1].license.id" /><input type="hidden" name="safetyData.products[1].id" class="hidden-id" value="100258" id="safetyData.products[1].id" /><input type="hidden" name="safetyData.products[1].internalRowId" value="30" id="safetyData.products[1].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.products[0].search" name="safetyData.products[0].search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="productDosageForm" class=" productDosageForm null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Dosage Form</label>        <div class='internal' data-id="productDosageForm">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[1].dosageForm.id" data-from="dosageForm" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="1" id="safetyData.products[1].dosageForm.id" ><option value="">Select</option></select>        </div></div>    <div id="productRole" class=" productRole null template-control col-md-2 required ">            <label class='control-label lbl-elipsis'>Role</label>        <div class='internal' data-id="productRole">    <select class="form-control   productRoleId select2-lazy   " name="safetyData.products[1].role.id" data-from="roles" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="true" data-value="29" id="safetyData.products[1].role.id" ><option value="">Select</option></select>        </div></div>    <div id="productObtainCountry" class=" productObtainCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Obtain Country</label>        <div class='internal' data-id="productObtainCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.products[1].obtainCountry.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[1].obtainCountry.id" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productAuthNumber" class="col-md-2 template-control  productAuthNumber   " >        <label class='control-label lbl-elipsis'>Auth. Number</label>        <div class='internal' data-id="productAuthNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[1].authNumber" value="" data-initial-value="" maxlength="35" data-field-id="productAuthNumber" id="safetyData.products[1].authNumber" />            </div> </div>    <div id="productAuthCountry" class=" productAuthCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Auth. Country</label>        <div class='internal' data-id="productAuthCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.products[1].authCountry.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[1].authCountry.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productManufacturer" class=" productManufacturer null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Auth. Holder</label>        <div class='internal' data-id="productManufacturer">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[1].authHolder.idOrValue" data-tag="true" data-from="manufacturers" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[1].authHolder.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productCumulativeDoseToFirstReaction" class="col-md-2 template-control  productCumulativeDoseToFirstReaction   " >        <label class='control-label lbl-elipsis'>Cumulative Dose to First Reaction</label>        <div class='internal' data-id="productCumulativeDoseToFirstReaction">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="10" data-unitList="dosage-unit-list" name="safetyData.products[1].cumulativeDoseToFirstReaction.value" value="" data-initial-value="" maxlength="10" data-field-id="productCumulativeDoseToFirstReaction" id="safetyData.products[1].cumulativeDoseToFirstReaction.value" />        <input type="hidden" name="safetyData.products[1].cumulativeDoseToFirstReaction.id" value="" id="safetyData.products[1].cumulativeDoseToFirstReaction.id" />    </div> </div>            <div id="productExposureGestationPeriod" class="col-md-2 template-control  productExposureGestationPeriod   " >        <label class='control-label lbl-elipsis'>Exposure Gestation Period</label>        <div class='internal' data-id="productExposureGestationPeriod">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="3" data-unitList="gestation-period-list" name="safetyData.products[1].exposureGestationPeriod.value" value="" data-initial-value="" maxlength="3" data-field-id="productExposureGestationPeriod" id="safetyData.products[1].exposureGestationPeriod.value" />        <input type="hidden" name="safetyData.products[1].exposureGestationPeriod.id" value="" id="safetyData.products[1].exposureGestationPeriod.id" />    </div> </div>    <div id="productActionTaken" class=" productActionTaken null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Action Taken</label>        <div class='internal' data-id="productActionTaken">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[1].actionTaken.id" data-from="actionTaken" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[1].actionTaken.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productExpirationDate" class="template-control productExpirationDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Expiration Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productExpirationDate">        <input type="text" class="form-control  futureDatesAllowed allowDateWithoutTime " name="safetyData.products[1].expirationDate.value" data-mandatory="false" id="safetyData.products[1].expirationDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[1].expirationDate.format" value="" id="safetyData.products[1].expirationDate.format" /></div></div>    <div id="productReplacementRequired" class=" productReplacementRequired null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Replacement Required</label>        <div class='internal' data-id="productReplacementRequired">    <select class="form-control      " name="safetyData.products[1].replacementRequired.id" data-from="replacementRequired" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[1].replacementRequired.id" ><option value="" selected="selected">Select</option><option value="1023" >Yes</option><option value="1024" >No</option></select>        </div></div>    <div id="productReturnRequired" class=" productReturnRequired null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Return Required</label>        <div class='internal' data-id="productReturnRequired">    <select class="form-control      " name="safetyData.products[1].returnRequired.id" data-from="returnRequired" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[1].returnRequired.id" ><option value="" selected="selected">Select</option><option value="1033" >Yes</option><option value="1034" >No</option></select>        </div></div>    <div id="productRefundRequested" class=" productRefundRequested null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Refund Requested</label>        <div class='internal' data-id="productRefundRequested">    <select class="form-control      " name="safetyData.products[1].refundRequested.id" data-from="refundRequested" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[1].refundRequested.id" ><option value="" selected="selected">Select</option><option value="1035" >Yes</option><option value="1036" >No</option></select>        </div></div>            <div id="productBlinded" class='template-control col-md-2    productBlinded'>            <label class='control-label lbl-elipsis'>Blinded</label>            <div class='internal checkbox checkbox-primary ' data-id="productBlinded">                <input type="hidden" name="_safetyData.products[1].blinded">                <input type="checkbox" name="safetyData.products[1].blinded" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.products[1].blinded"></label>            </div>                    </div>        <div id="productAddlnDrugInformation" class=" productAddlnDrugInformation null template-control col-md-12  ">            <label class='control-label lbl-elipsis'>Add&#39;l Drug Info</label>        <div class='internal' data-id="productAddlnDrugInformation">    <select class="form-control select2-box  multiSelectSelect2Field wrapped-multiselect   " name="safetyData.products[1].additionalDrugInfo.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="" id="safetyData.products[1].additionalDrugInfo.id" ><option value="33" >Counterfeit</option><option value="34" >Overdose</option><option value="35" >Drug taken by the father</option><option value="36" >Drug taken beyond expiry date</option><option value="37" >Batch and lot tested and found within specifications</option><option value="38" >Batch and lot tested and found not within specifications</option><option value="39" >Medication error</option><option value="40" >Misuse</option><option value="41" >Abuse</option><option value="42" >Occupational exposure</option><option value="43" >Off label use</option></select>        </div></div><div id="productAdditionalDrugInfoNotes" class='template-control     productAdditionalDrugInfoNotes col-md-12'>    <label class='control-label lbl-elipsis'>Add&#39;l Drug Info Notes</label>    <div class='internal' data-id="productAdditionalDrugInfoNotes">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[1].additionalDrugInfoNotes" maxlength="2000" rows="2" cols="100" id="safetyData.products[1].additionalDrugInfoNotes" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.products[1].deleted value=false>                        </div>                    </div>                    <!-- Sub Sections Products -->                    <div class="form-group inner-table innerSectionTable ">                        <div class="panel-group inner-repeatable"                             id="accordion-innerProducts_1_">                        <!-- Substances -->                                                            <div class="col-md-6 rx-col-table override-col-padding">                                    <div class="panel panel-default section-header inner">                                        <div class="panel-heading">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_1_"                                                   href="#productSubstances_1"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   id="accordion-innerProducts_1_" aria-expanded="false">                                                    Substance(s)                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-product-innersubstance_1_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-product-innersubstance_1_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                            </h4>                                        </div>                                        <div id="productSubstances_1"                                             data-templateId="productSubstancesTemplate" data-table="true"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                <div class="pv-inner-product-substance pv-section">                                                    <table class="table table-striped pv-inner-table m-b-0">                                                        <thead class="unhighlightSection">                                                                                                                    <th class="pv-col-sn">#</th>                                                                                                                <th id='header-productIngredients' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Name </label></th><th id='header-ingredientDosageUnit' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Strength </label></th>                                                                                                                    <th class="pv-col-la">                                                                <a href="javascript:void(0);" data-tabular="true"                                                                   class="pull-right add-table-row add-section btn-add-panel">                                                                    <i class="fa fa-plus-square-o"></i>                                                                </a>                                                            </th>                                                                                                                </thead>                                                        <tbody class="pv-draggable-list inner-repeatable"                                                               id="accordion-product-innersubstance_1_">                                                                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle  "                                                                id="productSubstances_1_-section-0">                                                                                                                                    <td class="new-index badge-index">1</td>                                                                                                                                <td id="productIngredients" class=" productIngredients null template-control col-md-6 "><div class='internal' data-id="productIngredients">    <select class="form-control   select2-box select2-ajax wrapped-multiselect   " name="safetyData.products[1].ingredients[0].name.id" data-from="" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-url="/caseEntry/searchIngredients" data-value="10260101" id="safetyData.products[1].ingredients[0].name.id" ><option value="">Select</option></select>        <input type="hidden" name="safetyData.products[1].ingredients[0].internalRowId" value="47" id="safetyData.products[1].ingredients[0].internalRowId" /></div></td>    <td id="ingredientDosageUnit" class="col-md-6 template-control  ingredientDosageUnit "><div class='internal' data-id="ingredientDosageUnit">    <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="10" data-unitList="strength-unit-list" name="safetyData.products[1].ingredients[0].strength.value" value="" data-initial-value="" maxlength="10" data-field-id="ingredientDosageUnit" id="safetyData.products[1].ingredients[0].strength.value" />        <input type="hidden" name="safetyData.products[1].ingredients[0].strength.id" value="" id="safetyData.products[1].ingredients[0].strength.id" />    </div></td><input type="hidden" name=safetyData.products[1].ingredients[0].deleted value=false>                                                                                                                                    <td>                                                                        <a href="javascript:void(0);"                                                                           class="table-row-del pull-right remove-section btn-del-panel"><i                                                                                class="md md-close productSubstances_1"                                                                                aria-hidden="true"></i></a>                                                                    </td>                                                                                                                            </tr>                                                                                                                </tbody>                                                    </table>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                                    <!-- Product Indication -->                                                            <div class="col-md-6 rx-col-table override-col-padding">                                    <div class="panel panel-default section-header inner">                                        <div class="panel-heading">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_1_"                                                   id="accordion-innerProducts_1_"                                                   href="#productIndication_1"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   aria-expanded="false">                                                    Product Indication(s)                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-product-innerindication_1_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-product-innerindication_1_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                            </h4>                                        </div>                                        <div id="productIndication_1"                                             data-templateId="productIndicationTemplate" data-table="true"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                <div class="pv-inner-product-indication pv-section">                                                    <table class="table table-striped pv-inner-table m-b-0">                                                        <thead class="unhighlightSection">                                                                                                                <th class="pv-col-sn">#</th>                                                                                                                <th id='header-productIndicationReported' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Indication (Reported) </label></th><th id='header-productIndicationCoded' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Indication (Coded) </label></th>                                                                                                                    <th class="pv-col-la">                                                                <a href="javascript:void(0);" data-tabular="true"                                                                   class="pull-right add-table-row add-section btn-add-panel"><i                                                                        class="fa fa-plus-square-o"></i>                                                                </a>                                                            </th>                                                                                                                </thead>                                                        <tbody class="pv-draggable-list inner-repeatable"                                                               id="accordion-product-innerindication_1_">                                                                                                                                                                                                                                            <tr class="row-table  pv-section-record inner-repeatable ui-sortable-handle  "                                                                id="productIndication_1_-section-0">                                                                                                                            <td class="new-index badge-index">1</td>                                                                                                                                        <td class="col-md-6  template-control productIndicationReported"><div class='internal' data-id="productIndicationReported">        <div class='input-group internal inner-addon right-addon' data-id="productIndicationReported">        <input type="text" class="form-control  meddraBrowser  " name="safetyData.products[1].productIndications[0].reportedReaction" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="productIndicationCoded" data-placeholder="" data-fieldId="productIndicationReported" id="safetyData.products[1].productIndications[0].reportedReaction" />                <input type="hidden" name="safetyData.products[1].productIndications[0].lltCode" class="hidden-id" value="" id="safetyData.products[1].productIndications[0].lltCode" /><input type="hidden" name="safetyData.products[1].productIndications[0].codedWithSearchString" value="" id="safetyData.products[1].productIndications[0].codedWithSearchString" /><input type="hidden" name="safetyData.products[1].productIndications[0].hierarchyStorageId" value="" id="safetyData.products[1].productIndications[0].hierarchyStorageId" /><input type="hidden" name="safetyData.products[1].productIndications[0].internalRowId" value="32" id="safetyData.products[1].productIndications[0].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <td id="productIndicationCoded" class="col-md-6 template-control  productIndicationCoded "><div class='internal' data-id="productIndicationCoded">    <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[1].productIndications[0].reactionCoded" value="" data-initial-value="" maxlength="1000" data-field-id="productIndicationCoded" readonly="readonly" id="safetyData.products[1].productIndications[0].reactionCoded" />            </div></td><input type="hidden" name=safetyData.products[1].productIndications[0].deleted value=false>                                                                                                                                    <td>                                                                        <a href="javascript:void(0);"                                                                           class="table-row-del pull-right remove-section btn-del-panel"><i                                                                                class="md md-close productIndication_1"                                                                                aria-hidden="true"></i></a>                                                                    </td>                                                                                                                            </tr>                                                                                                                </tbody>                                                    </table>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                                    <!-- Dose Information  -->                                                            <div class="col-md-12 m-b-0 override-col-padding-full">                                    <div class="panel panel-default rxmain-container section-header inner">                                        <div class="panel-heading rxmain-container-row">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_1_"                                                   id="accordion-innerProducts_1_"                                                   href="#productDose_1"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   aria-expanded="false">                                                    Dose Information                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#pviInnerProductDoseRecords_1_" title="Move Record Up" data-anchordiv="#productDose_1_" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#pviInnerProductDoseRecords_1_" data-anchordiv="#productDose_1_" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm pv-add-row" data-inner-sec="true"           data-tabular="inner" title="Add another section"           data-target="pv-innerProductDose">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>                                            </h4>                                        </div>                                        <div id="productDose_1" data-templateId="productDoseTemplate"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="innerdose-container pv-draggable-list pv-section ui-sortable inner-repeatable"                                                 id="pviInnerProductDoseRecords_1_">                                                                                                                                                                                                            <div class="pv-section-record inner-repeatable pv-innerProductDose p-10 ui-sortable-handle p-b-10 row row-strip   "                                                         id="productDose_1_-section-0">                                                                                                                    <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close product_0" aria-hidden="true"></i>    </a></div>                                                                                                                <div class="col-md-12 m-t-20 m-b-10 form-pv form-horizontal">                                                            <div class="form-group">                                                                            <div id="productDoseInformation" class="col-md-1-half template-control  productDoseInformation   " >        <label class='control-label lbl-elipsis'>Dose</label>        <div class='internal' data-id="productDoseInformation">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="8" data-unitList="dosage-unit-list" name="safetyData.products[1].doseInformations[0].dose.value" value="" data-initial-value="" maxlength="8" data-field-id="productDoseInformation" id="safetyData.products[1].doseInformations[0].dose.value" />        <input type="hidden" name="safetyData.products[1].doseInformations[0].dose.id" value="" id="safetyData.products[1].doseInformations[0].dose.id" /><input type="hidden" name="safetyData.products[1].doseInformations[0].internalRowId" value="33" id="safetyData.products[1].doseInformations[0].internalRowId" />    </div> </div>    <div id="productDoseFrequency" class=" productDoseFrequency null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Frequency</label>        <div class='internal' data-id="productDoseFrequency">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[1].doseInformations[0].frequency.id" data-from="dosageFrequency" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[1].doseInformations[0].frequency.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productDoseStartDate" class="template-control productDoseStartDate  col-md-1-half ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productDoseStartDate">        <input type="text" class="form-control   " name="safetyData.products[1].doseInformations[0].startDate.value" data-mandatory="false" id="safetyData.products[1].doseInformations[0].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[1].doseInformations[0].startDate.format" value="" id="safetyData.products[1].doseInformations[0].startDate.format" /></div></div>    <div id="productDoseEndDate" class="template-control productDoseEndDate  col-md-1-half ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productDoseEndDate">        <input type="text" class="form-control   " name="safetyData.products[1].doseInformations[0].endDate.value" data-mandatory="false" id="safetyData.products[1].doseInformations[0].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[1].doseInformations[0].endDate.format" value="" id="safetyData.products[1].doseInformations[0].endDate.format" /></div></div>            <div id="productDoseDuration" class="col-md-1-half template-control  productDoseDuration   " >        <label class='control-label lbl-elipsis'>Duration</label>        <div class='internal' data-id="productDoseDuration">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.products[1].doseInformations[0].duration.value" value="" data-initial-value="" maxlength="5" data-field-id="productDoseDuration" id="safetyData.products[1].doseInformations[0].duration.value" />        <input type="hidden" name="safetyData.products[1].doseInformations[0].duration.id" value="" id="safetyData.products[1].doseInformations[0].duration.id" />    </div> </div>            <div id="productDoseBatchNumber" class="col-md-1-half template-control  productDoseBatchNumber   " >        <label class='control-label lbl-elipsis'>Batch/Lot Number</label>        <div class='internal' data-id="productDoseBatchNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[1].doseInformations[0].batchNumber" value="" data-initial-value="" maxlength="35" data-field-id="productDoseBatchNumber" id="safetyData.products[1].doseInformations[0].batchNumber" />            </div> </div>    <div id="productDoseRoute" class=" productDoseRoute null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Route</label>        <div class='internal' data-id="productDoseRoute">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[1].doseInformations[0].route.idOrValue" data-tag="true" data-from="route" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[1].doseInformations[0].route.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productDoseParentRoute" class=" productDoseParentRoute null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Parent Route</label>        <div class='internal' data-id="productDoseParentRoute">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[1].doseInformations[0].parentRoute.idOrValue" data-tag="true" data-from="route" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[1].doseInformations[0].parentRoute.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productDoseDescription" class="col-md-3 template-control  productDoseDescription   " >        <label class='control-label lbl-elipsis'>Dose Description</label>        <div class='internal' data-id="productDoseDescription">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[1].doseInformations[0].description" value="" data-initial-value="" maxlength="2000" data-field-id="productDoseDescription" id="safetyData.products[1].doseInformations[0].description" />            </div> </div><input type="hidden" name=safetyData.products[1].doseInformations[0].deleted value=false>                                                            </div>                                                        </div>                                                    </div>                                                                                            </div>                                        </div>                                    </div>                                </div>                                                    </div>                    </div>                </div>            </div>        </div>    </div>                                                        <div class="panel panel-default pv-section-record ui-sortable-handle " id="product-section-2">        <div class="panel-heading">            <h4 class="panel-title">                <a data-toggle="collapse" data-header="Product-Section" data-parent="#product-section"                   href="#product-section_2" class="inner-repeatable"                   aria-expanded="true">                                            <span class="badge row-count badge-index">3</span>Product-Section                                    </a>                                    <div class="configureFields pv-subhead-config">                        <a href="javascript:void(0);" data-target="" title="Remove this section"                           class="pull-right btn-del-panel remove-section product-del">                            <i class="md md-close product_2" aria-hidden="true"></i>                        </a>                    </div>                            </h4>        </div>        <div id="product-section_2" class="panel-collapse collapse in inner-repeatable product-sec"             aria-expanded="true">            <div class="panel-body ui-nested-sortable-handle ">                <div class="col-md-12 form-pv">                    <div>                        <div class="form-group">                                        <div id="productLicense" class=' col-md-4 required  template-control  productLicense' >                <label class='control-label lbl-elipsis'>Product Name</label>        <div class='input-group internal inner-addon right-addon' data-id="productLicense">        <input type="text" class="form-control productNameBrowser   " name="safetyData.products[2].license.value" maxlength="250" value="Rx CISPLATIN ID" data-mandatory="true" data-mandatorySet="0" data-placement="top" data-browser-value="Rx CISPLATIN ID" data-browser-type="product" data-flag-target="" data-placeholder="" data-fieldId="productLicense" id="safetyData.products[2].license.value" />                <input type="hidden" name="safetyData.products[2].license.id" value="100381" id="safetyData.products[2].license.id" /><input type="hidden" name="safetyData.products[2].id" class="hidden-id" value="100271" id="safetyData.products[2].id" /><input type="hidden" name="safetyData.products[2].internalRowId" value="34" id="safetyData.products[2].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.products[0].search" name="safetyData.products[0].search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="productDosageForm" class=" productDosageForm null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Dosage Form</label>        <div class='internal' data-id="productDosageForm">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[2].dosageForm.id" data-from="dosageForm" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="480" id="safetyData.products[2].dosageForm.id" ><option value="">Select</option></select>        </div></div>    <div id="productRole" class=" productRole null template-control col-md-2 required ">            <label class='control-label lbl-elipsis'>Role</label>        <div class='internal' data-id="productRole">    <select class="form-control   productRoleId select2-lazy   " name="safetyData.products[2].role.id" data-from="roles" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="true" data-value="29" id="safetyData.products[2].role.id" ><option value="">Select</option></select>        </div></div>    <div id="productObtainCountry" class=" productObtainCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Obtain Country</label>        <div class='internal' data-id="productObtainCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.products[2].obtainCountry.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[2].obtainCountry.id" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productAuthNumber" class="col-md-2 template-control  productAuthNumber   " >        <label class='control-label lbl-elipsis'>Auth. Number</label>        <div class='internal' data-id="productAuthNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[2].authNumber" value="" data-initial-value="" maxlength="35" data-field-id="productAuthNumber" id="safetyData.products[2].authNumber" />            </div> </div>    <div id="productAuthCountry" class=" productAuthCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Auth. Country</label>        <div class='internal' data-id="productAuthCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.products[2].authCountry.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[2].authCountry.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productManufacturer" class=" productManufacturer null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Auth. Holder</label>        <div class='internal' data-id="productManufacturer">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[2].authHolder.idOrValue" data-tag="true" data-from="manufacturers" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[2].authHolder.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productCumulativeDoseToFirstReaction" class="col-md-2 template-control  productCumulativeDoseToFirstReaction   " >        <label class='control-label lbl-elipsis'>Cumulative Dose to First Reaction</label>        <div class='internal' data-id="productCumulativeDoseToFirstReaction">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="10" data-unitList="dosage-unit-list" name="safetyData.products[2].cumulativeDoseToFirstReaction.value" value="" data-initial-value="" maxlength="10" data-field-id="productCumulativeDoseToFirstReaction" id="safetyData.products[2].cumulativeDoseToFirstReaction.value" />        <input type="hidden" name="safetyData.products[2].cumulativeDoseToFirstReaction.id" value="" id="safetyData.products[2].cumulativeDoseToFirstReaction.id" />    </div> </div>            <div id="productExposureGestationPeriod" class="col-md-2 template-control  productExposureGestationPeriod   " >        <label class='control-label lbl-elipsis'>Exposure Gestation Period</label>        <div class='internal' data-id="productExposureGestationPeriod">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="3" data-unitList="gestation-period-list" name="safetyData.products[2].exposureGestationPeriod.value" value="" data-initial-value="" maxlength="3" data-field-id="productExposureGestationPeriod" id="safetyData.products[2].exposureGestationPeriod.value" />        <input type="hidden" name="safetyData.products[2].exposureGestationPeriod.id" value="" id="safetyData.products[2].exposureGestationPeriod.id" />    </div> </div>    <div id="productActionTaken" class=" productActionTaken null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Action Taken</label>        <div class='internal' data-id="productActionTaken">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[2].actionTaken.id" data-from="actionTaken" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[2].actionTaken.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productExpirationDate" class="template-control productExpirationDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Expiration Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productExpirationDate">        <input type="text" class="form-control  futureDatesAllowed allowDateWithoutTime " name="safetyData.products[2].expirationDate.value" data-mandatory="false" id="safetyData.products[2].expirationDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[2].expirationDate.format" value="" id="safetyData.products[2].expirationDate.format" /></div></div>    <div id="productReplacementRequired" class=" productReplacementRequired null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Replacement Required</label>        <div class='internal' data-id="productReplacementRequired">    <select class="form-control      " name="safetyData.products[2].replacementRequired.id" data-from="replacementRequired" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[2].replacementRequired.id" ><option value="" selected="selected">Select</option><option value="1023" >Yes</option><option value="1024" >No</option></select>        </div></div>    <div id="productReturnRequired" class=" productReturnRequired null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Return Required</label>        <div class='internal' data-id="productReturnRequired">    <select class="form-control      " name="safetyData.products[2].returnRequired.id" data-from="returnRequired" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[2].returnRequired.id" ><option value="" selected="selected">Select</option><option value="1033" >Yes</option><option value="1034" >No</option></select>        </div></div>    <div id="productRefundRequested" class=" productRefundRequested null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Refund Requested</label>        <div class='internal' data-id="productRefundRequested">    <select class="form-control      " name="safetyData.products[2].refundRequested.id" data-from="refundRequested" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[2].refundRequested.id" ><option value="" selected="selected">Select</option><option value="1035" >Yes</option><option value="1036" >No</option></select>        </div></div>            <div id="productBlinded" class='template-control col-md-2    productBlinded'>            <label class='control-label lbl-elipsis'>Blinded</label>            <div class='internal checkbox checkbox-primary ' data-id="productBlinded">                <input type="hidden" name="_safetyData.products[2].blinded">                <input type="checkbox" name="safetyData.products[2].blinded" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.products[2].blinded"></label>            </div>                    </div>        <div id="productAddlnDrugInformation" class=" productAddlnDrugInformation null template-control col-md-12  ">            <label class='control-label lbl-elipsis'>Add&#39;l Drug Info</label>        <div class='internal' data-id="productAddlnDrugInformation">    <select class="form-control select2-box  multiSelectSelect2Field wrapped-multiselect   " name="safetyData.products[2].additionalDrugInfo.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="" id="safetyData.products[2].additionalDrugInfo.id" ><option value="33" >Counterfeit</option><option value="34" >Overdose</option><option value="35" >Drug taken by the father</option><option value="36" >Drug taken beyond expiry date</option><option value="37" >Batch and lot tested and found within specifications</option><option value="38" >Batch and lot tested and found not within specifications</option><option value="39" >Medication error</option><option value="40" >Misuse</option><option value="41" >Abuse</option><option value="42" >Occupational exposure</option><option value="43" >Off label use</option></select>        </div></div><div id="productAdditionalDrugInfoNotes" class='template-control     productAdditionalDrugInfoNotes col-md-12'>    <label class='control-label lbl-elipsis'>Add&#39;l Drug Info Notes</label>    <div class='internal' data-id="productAdditionalDrugInfoNotes">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[2].additionalDrugInfoNotes" maxlength="2000" rows="2" cols="100" id="safetyData.products[2].additionalDrugInfoNotes" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.products[2].deleted value=false>                        </div>                    </div>                    <!-- Sub Sections Products -->                    <div class="form-group inner-table innerSectionTable ">                        <div class="panel-group inner-repeatable"                             id="accordion-innerProducts_2_">                        <!-- Substances -->                                                            <div class="col-md-6 rx-col-table override-col-padding">                                    <div class="panel panel-default section-header inner">                                        <div class="panel-heading">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_2_"                                                   href="#productSubstances_2"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   id="accordion-innerProducts_2_" aria-expanded="false">                                                    Substance(s)                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-product-innersubstance_2_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-product-innersubstance_2_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                            </h4>                                        </div>                                        <div id="productSubstances_2"                                             data-templateId="productSubstancesTemplate" data-table="true"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                <div class="pv-inner-product-substance pv-section">                                                    <table class="table table-striped pv-inner-table m-b-0">                                                        <thead class="unhighlightSection">                                                                                                                    <th class="pv-col-sn">#</th>                                                                                                                <th id='header-productIngredients' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Name </label></th><th id='header-ingredientDosageUnit' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Strength </label></th>                                                                                                                    <th class="pv-col-la">                                                                <a href="javascript:void(0);" data-tabular="true"                                                                   class="pull-right add-table-row add-section btn-add-panel">                                                                    <i class="fa fa-plus-square-o"></i>                                                                </a>                                                            </th>                                                                                                                </thead>                                                        <tbody class="pv-draggable-list inner-repeatable"                                                               id="accordion-product-innersubstance_2_">                                                                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle  "                                                                id="productSubstances_2_-section-0">                                                                                                                                    <td class="new-index badge-index">1</td>                                                                                                                                <td id="productIngredients" class=" productIngredients null template-control col-md-6 "><div class='internal' data-id="productIngredients">    <select class="form-control   select2-box select2-ajax wrapped-multiselect   " name="safetyData.products[2].ingredients[0].name.id" data-from="" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-url="/caseEntry/searchIngredients" data-value="3539" id="safetyData.products[2].ingredients[0].name.id" ><option value="">Select</option></select>        <input type="hidden" name="safetyData.products[2].ingredients[0].internalRowId" value="48" id="safetyData.products[2].ingredients[0].internalRowId" /></div></td>    <td id="ingredientDosageUnit" class="col-md-6 template-control  ingredientDosageUnit "><div class='internal' data-id="ingredientDosageUnit">    <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="10" data-unitList="strength-unit-list" name="safetyData.products[2].ingredients[0].strength.value" value="" data-initial-value="" maxlength="10" data-field-id="ingredientDosageUnit" id="safetyData.products[2].ingredients[0].strength.value" />        <input type="hidden" name="safetyData.products[2].ingredients[0].strength.id" value="" id="safetyData.products[2].ingredients[0].strength.id" />    </div></td><input type="hidden" name=safetyData.products[2].ingredients[0].deleted value=false>                                                                                                                                    <td>                                                                        <a href="javascript:void(0);"                                                                           class="table-row-del pull-right remove-section btn-del-panel"><i                                                                                class="md md-close productSubstances_2"                                                                                aria-hidden="true"></i></a>                                                                    </td>                                                                                                                            </tr>                                                                                                                </tbody>                                                    </table>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                                    <!-- Product Indication -->                                                            <div class="col-md-6 rx-col-table override-col-padding">                                    <div class="panel panel-default section-header inner">                                        <div class="panel-heading">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_2_"                                                   id="accordion-innerProducts_2_"                                                   href="#productIndication_2"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   aria-expanded="false">                                                    Product Indication(s)                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-product-innerindication_2_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-product-innerindication_2_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                            </h4>                                        </div>                                        <div id="productIndication_2"                                             data-templateId="productIndicationTemplate" data-table="true"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                <div class="pv-inner-product-indication pv-section">                                                    <table class="table table-striped pv-inner-table m-b-0">                                                        <thead class="unhighlightSection">                                                                                                                <th class="pv-col-sn">#</th>                                                                                                                <th id='header-productIndicationReported' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Indication (Reported) </label></th><th id='header-productIndicationCoded' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Indication (Coded) </label></th>                                                                                                                    <th class="pv-col-la">                                                                <a href="javascript:void(0);" data-tabular="true"                                                                   class="pull-right add-table-row add-section btn-add-panel"><i                                                                        class="fa fa-plus-square-o"></i>                                                                </a>                                                            </th>                                                                                                                </thead>                                                        <tbody class="pv-draggable-list inner-repeatable"                                                               id="accordion-product-innerindication_2_">                                                                                                                                                                                                                                            <tr class="row-table  pv-section-record inner-repeatable ui-sortable-handle  "                                                                id="productIndication_2_-section-0">                                                                                                                            <td class="new-index badge-index">1</td>                                                                                                                                        <td class="col-md-6  template-control productIndicationReported"><div class='internal' data-id="productIndicationReported">        <div class='input-group internal inner-addon right-addon' data-id="productIndicationReported">        <input type="text" class="form-control  meddraBrowser  " name="safetyData.products[2].productIndications[0].reportedReaction" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="productIndicationCoded" data-placeholder="" data-fieldId="productIndicationReported" id="safetyData.products[2].productIndications[0].reportedReaction" />                <input type="hidden" name="safetyData.products[2].productIndications[0].lltCode" class="hidden-id" value="" id="safetyData.products[2].productIndications[0].lltCode" /><input type="hidden" name="safetyData.products[2].productIndications[0].codedWithSearchString" value="" id="safetyData.products[2].productIndications[0].codedWithSearchString" /><input type="hidden" name="safetyData.products[2].productIndications[0].hierarchyStorageId" value="" id="safetyData.products[2].productIndications[0].hierarchyStorageId" /><input type="hidden" name="safetyData.products[2].productIndications[0].internalRowId" value="36" id="safetyData.products[2].productIndications[0].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <td id="productIndicationCoded" class="col-md-6 template-control  productIndicationCoded "><div class='internal' data-id="productIndicationCoded">    <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[2].productIndications[0].reactionCoded" value="" data-initial-value="" maxlength="1000" data-field-id="productIndicationCoded" readonly="readonly" id="safetyData.products[2].productIndications[0].reactionCoded" />            </div></td><input type="hidden" name=safetyData.products[2].productIndications[0].deleted value=false>                                                                                                                                    <td>                                                                        <a href="javascript:void(0);"                                                                           class="table-row-del pull-right remove-section btn-del-panel"><i                                                                                class="md md-close productIndication_2"                                                                                aria-hidden="true"></i></a>                                                                    </td>                                                                                                                            </tr>                                                                                                                </tbody>                                                    </table>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                                    <!-- Dose Information  -->                                                            <div class="col-md-12 m-b-0 override-col-padding-full">                                    <div class="panel panel-default rxmain-container section-header inner">                                        <div class="panel-heading rxmain-container-row">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_2_"                                                   id="accordion-innerProducts_2_"                                                   href="#productDose_2"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   aria-expanded="false">                                                    Dose Information                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#pviInnerProductDoseRecords_2_" title="Move Record Up" data-anchordiv="#productDose_2_" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#pviInnerProductDoseRecords_2_" data-anchordiv="#productDose_2_" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm pv-add-row" data-inner-sec="true"           data-tabular="inner" title="Add another section"           data-target="pv-innerProductDose">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>                                            </h4>                                        </div>                                        <div id="productDose_2" data-templateId="productDoseTemplate"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="innerdose-container pv-draggable-list pv-section ui-sortable inner-repeatable"                                                 id="pviInnerProductDoseRecords_2_">                                                                                                                                                                                                            <div class="pv-section-record inner-repeatable pv-innerProductDose p-10 ui-sortable-handle p-b-10 row row-strip   "                                                         id="productDose_2_-section-0">                                                                                                                    <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close product_0" aria-hidden="true"></i>    </a></div>                                                                                                                <div class="col-md-12 m-t-20 m-b-10 form-pv form-horizontal">                                                            <div class="form-group">                                                                            <div id="productDoseInformation" class="col-md-1-half template-control  productDoseInformation   " >        <label class='control-label lbl-elipsis'>Dose</label>        <div class='internal' data-id="productDoseInformation">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="8" data-unitList="dosage-unit-list" name="safetyData.products[2].doseInformations[0].dose.value" value="" data-initial-value="" maxlength="8" data-field-id="productDoseInformation" id="safetyData.products[2].doseInformations[0].dose.value" />        <input type="hidden" name="safetyData.products[2].doseInformations[0].dose.id" value="" id="safetyData.products[2].doseInformations[0].dose.id" /><input type="hidden" name="safetyData.products[2].doseInformations[0].internalRowId" value="37" id="safetyData.products[2].doseInformations[0].internalRowId" />    </div> </div>    <div id="productDoseFrequency" class=" productDoseFrequency null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Frequency</label>        <div class='internal' data-id="productDoseFrequency">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[2].doseInformations[0].frequency.id" data-from="dosageFrequency" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[2].doseInformations[0].frequency.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productDoseStartDate" class="template-control productDoseStartDate  col-md-1-half ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productDoseStartDate">        <input type="text" class="form-control   " name="safetyData.products[2].doseInformations[0].startDate.value" data-mandatory="false" id="safetyData.products[2].doseInformations[0].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[2].doseInformations[0].startDate.format" value="" id="safetyData.products[2].doseInformations[0].startDate.format" /></div></div>    <div id="productDoseEndDate" class="template-control productDoseEndDate  col-md-1-half ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productDoseEndDate">        <input type="text" class="form-control   " name="safetyData.products[2].doseInformations[0].endDate.value" data-mandatory="false" id="safetyData.products[2].doseInformations[0].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[2].doseInformations[0].endDate.format" value="" id="safetyData.products[2].doseInformations[0].endDate.format" /></div></div>            <div id="productDoseDuration" class="col-md-1-half template-control  productDoseDuration   " >        <label class='control-label lbl-elipsis'>Duration</label>        <div class='internal' data-id="productDoseDuration">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.products[2].doseInformations[0].duration.value" value="" data-initial-value="" maxlength="5" data-field-id="productDoseDuration" id="safetyData.products[2].doseInformations[0].duration.value" />        <input type="hidden" name="safetyData.products[2].doseInformations[0].duration.id" value="" id="safetyData.products[2].doseInformations[0].duration.id" />    </div> </div>            <div id="productDoseBatchNumber" class="col-md-1-half template-control  productDoseBatchNumber   " >        <label class='control-label lbl-elipsis'>Batch/Lot Number</label>        <div class='internal' data-id="productDoseBatchNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[2].doseInformations[0].batchNumber" value="" data-initial-value="" maxlength="35" data-field-id="productDoseBatchNumber" id="safetyData.products[2].doseInformations[0].batchNumber" />            </div> </div>    <div id="productDoseRoute" class=" productDoseRoute null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Route</label>        <div class='internal' data-id="productDoseRoute">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[2].doseInformations[0].route.idOrValue" data-tag="true" data-from="route" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[2].doseInformations[0].route.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productDoseParentRoute" class=" productDoseParentRoute null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Parent Route</label>        <div class='internal' data-id="productDoseParentRoute">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[2].doseInformations[0].parentRoute.idOrValue" data-tag="true" data-from="route" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[2].doseInformations[0].parentRoute.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productDoseDescription" class="col-md-3 template-control  productDoseDescription   " >        <label class='control-label lbl-elipsis'>Dose Description</label>        <div class='internal' data-id="productDoseDescription">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[2].doseInformations[0].description" value="" data-initial-value="" maxlength="2000" data-field-id="productDoseDescription" id="safetyData.products[2].doseInformations[0].description" />            </div> </div><input type="hidden" name=safetyData.products[2].doseInformations[0].deleted value=false>                                                            </div>                                                        </div>                                                    </div>                                                                                            </div>                                        </div>                                    </div>                                </div>                                                    </div>                    </div>                </div>            </div>        </div>    </div>                                                        <div class="panel panel-default pv-section-record ui-sortable-handle " id="product-section-3">        <div class="panel-heading">            <h4 class="panel-title">                <a data-toggle="collapse" data-header="Product-Section" data-parent="#product-section"                   href="#product-section_3" class="inner-repeatable"                   aria-expanded="true">                                            <span class="badge row-count badge-index">4</span>Product-Section                                    </a>                                    <div class="configureFields pv-subhead-config">                        <a href="javascript:void(0);" data-target="" title="Remove this section"                           class="pull-right btn-del-panel remove-section product-del">                            <i class="md md-close product_3" aria-hidden="true"></i>                        </a>                    </div>                            </h4>        </div>        <div id="product-section_3" class="panel-collapse collapse in inner-repeatable product-sec"             aria-expanded="true">            <div class="panel-body ui-nested-sortable-handle ">                <div class="col-md-12 form-pv">                    <div>                        <div class="form-group">                                        <div id="productLicense" class=' col-md-4 required  template-control  productLicense' >                <label class='control-label lbl-elipsis'>Product Name</label>        <div class='input-group internal inner-addon right-addon' data-id="productLicense">        <input type="text" class="form-control productNameBrowser   " name="safetyData.products[3].license.value" maxlength="250" value="Ibrance JPV Capsules 50mg" data-mandatory="true" data-mandatorySet="0" data-placement="top" data-browser-value="Ibrance JPV Capsules 50mg" data-browser-type="product" data-flag-target="" data-placeholder="" data-fieldId="productLicense" id="safetyData.products[3].license.value" />                <input type="hidden" name="safetyData.products[3].license.id" value="100140" id="safetyData.products[3].license.id" /><input type="hidden" name="safetyData.products[3].id" class="hidden-id" value="100110" id="safetyData.products[3].id" /><input type="hidden" name="safetyData.products[3].internalRowId" value="38" id="safetyData.products[3].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.products[0].search" name="safetyData.products[0].search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="productDosageForm" class=" productDosageForm null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Dosage Form</label>        <div class='internal' data-id="productDosageForm">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[3].dosageForm.id" data-from="dosageForm" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="2" id="safetyData.products[3].dosageForm.id" ><option value="">Select</option></select>        </div></div>    <div id="productRole" class=" productRole null template-control col-md-2 required ">            <label class='control-label lbl-elipsis'>Role</label>        <div class='internal' data-id="productRole">    <select class="form-control   productRoleId select2-lazy   " name="safetyData.products[3].role.id" data-from="roles" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="true" data-value="29" id="safetyData.products[3].role.id" ><option value="">Select</option></select>        </div></div>    <div id="productObtainCountry" class=" productObtainCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Obtain Country</label>        <div class='internal' data-id="productObtainCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.products[3].obtainCountry.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[3].obtainCountry.id" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productAuthNumber" class="col-md-2 template-control  productAuthNumber   " >        <label class='control-label lbl-elipsis'>Auth. Number</label>        <div class='internal' data-id="productAuthNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[3].authNumber" value="" data-initial-value="" maxlength="35" data-field-id="productAuthNumber" id="safetyData.products[3].authNumber" />            </div> </div>    <div id="productAuthCountry" class=" productAuthCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Auth. Country</label>        <div class='internal' data-id="productAuthCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.products[3].authCountry.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[3].authCountry.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productManufacturer" class=" productManufacturer null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Auth. Holder</label>        <div class='internal' data-id="productManufacturer">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[3].authHolder.idOrValue" data-tag="true" data-from="manufacturers" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[3].authHolder.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productCumulativeDoseToFirstReaction" class="col-md-2 template-control  productCumulativeDoseToFirstReaction   " >        <label class='control-label lbl-elipsis'>Cumulative Dose to First Reaction</label>        <div class='internal' data-id="productCumulativeDoseToFirstReaction">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="10" data-unitList="dosage-unit-list" name="safetyData.products[3].cumulativeDoseToFirstReaction.value" value="" data-initial-value="" maxlength="10" data-field-id="productCumulativeDoseToFirstReaction" id="safetyData.products[3].cumulativeDoseToFirstReaction.value" />        <input type="hidden" name="safetyData.products[3].cumulativeDoseToFirstReaction.id" value="" id="safetyData.products[3].cumulativeDoseToFirstReaction.id" />    </div> </div>            <div id="productExposureGestationPeriod" class="col-md-2 template-control  productExposureGestationPeriod   " >        <label class='control-label lbl-elipsis'>Exposure Gestation Period</label>        <div class='internal' data-id="productExposureGestationPeriod">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="3" data-unitList="gestation-period-list" name="safetyData.products[3].exposureGestationPeriod.value" value="" data-initial-value="" maxlength="3" data-field-id="productExposureGestationPeriod" id="safetyData.products[3].exposureGestationPeriod.value" />        <input type="hidden" name="safetyData.products[3].exposureGestationPeriod.id" value="" id="safetyData.products[3].exposureGestationPeriod.id" />    </div> </div>    <div id="productActionTaken" class=" productActionTaken null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Action Taken</label>        <div class='internal' data-id="productActionTaken">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[3].actionTaken.id" data-from="actionTaken" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[3].actionTaken.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productExpirationDate" class="template-control productExpirationDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Expiration Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productExpirationDate">        <input type="text" class="form-control  futureDatesAllowed allowDateWithoutTime " name="safetyData.products[3].expirationDate.value" data-mandatory="false" id="safetyData.products[3].expirationDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[3].expirationDate.format" value="" id="safetyData.products[3].expirationDate.format" /></div></div>    <div id="productReplacementRequired" class=" productReplacementRequired null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Replacement Required</label>        <div class='internal' data-id="productReplacementRequired">    <select class="form-control      " name="safetyData.products[3].replacementRequired.id" data-from="replacementRequired" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[3].replacementRequired.id" ><option value="" selected="selected">Select</option><option value="1023" >Yes</option><option value="1024" >No</option></select>        </div></div>    <div id="productReturnRequired" class=" productReturnRequired null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Return Required</label>        <div class='internal' data-id="productReturnRequired">    <select class="form-control      " name="safetyData.products[3].returnRequired.id" data-from="returnRequired" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[3].returnRequired.id" ><option value="" selected="selected">Select</option><option value="1033" >Yes</option><option value="1034" >No</option></select>        </div></div>    <div id="productRefundRequested" class=" productRefundRequested null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Refund Requested</label>        <div class='internal' data-id="productRefundRequested">    <select class="form-control      " name="safetyData.products[3].refundRequested.id" data-from="refundRequested" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[3].refundRequested.id" ><option value="" selected="selected">Select</option><option value="1035" >Yes</option><option value="1036" >No</option></select>        </div></div>            <div id="productBlinded" class='template-control col-md-2    productBlinded'>            <label class='control-label lbl-elipsis'>Blinded</label>            <div class='internal checkbox checkbox-primary ' data-id="productBlinded">                <input type="hidden" name="_safetyData.products[3].blinded">                <input type="checkbox" name="safetyData.products[3].blinded" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.products[3].blinded"></label>            </div>                    </div>        <div id="productAddlnDrugInformation" class=" productAddlnDrugInformation null template-control col-md-12  ">            <label class='control-label lbl-elipsis'>Add&#39;l Drug Info</label>        <div class='internal' data-id="productAddlnDrugInformation">    <select class="form-control select2-box  multiSelectSelect2Field wrapped-multiselect   " name="safetyData.products[3].additionalDrugInfo.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="" id="safetyData.products[3].additionalDrugInfo.id" ><option value="33" >Counterfeit</option><option value="34" >Overdose</option><option value="35" >Drug taken by the father</option><option value="36" >Drug taken beyond expiry date</option><option value="37" >Batch and lot tested and found within specifications</option><option value="38" >Batch and lot tested and found not within specifications</option><option value="39" >Medication error</option><option value="40" >Misuse</option><option value="41" >Abuse</option><option value="42" >Occupational exposure</option><option value="43" >Off label use</option></select>        </div></div><div id="productAdditionalDrugInfoNotes" class='template-control     productAdditionalDrugInfoNotes col-md-12'>    <label class='control-label lbl-elipsis'>Add&#39;l Drug Info Notes</label>    <div class='internal' data-id="productAdditionalDrugInfoNotes">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[3].additionalDrugInfoNotes" maxlength="2000" rows="2" cols="100" id="safetyData.products[3].additionalDrugInfoNotes" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.products[3].deleted value=false>                        </div>                    </div>                    <!-- Sub Sections Products -->                    <div class="form-group inner-table innerSectionTable ">                        <div class="panel-group inner-repeatable"                             id="accordion-innerProducts_3_">                        <!-- Substances -->                                                            <div class="col-md-6 rx-col-table override-col-padding">                                    <div class="panel panel-default section-header inner">                                        <div class="panel-heading">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_3_"                                                   href="#productSubstances_3"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   id="accordion-innerProducts_3_" aria-expanded="false">                                                    Substance(s)                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-product-innersubstance_3_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-product-innersubstance_3_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                            </h4>                                        </div>                                        <div id="productSubstances_3"                                             data-templateId="productSubstancesTemplate" data-table="true"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                <div class="pv-inner-product-substance pv-section">                                                    <table class="table table-striped pv-inner-table m-b-0">                                                        <thead class="unhighlightSection">                                                                                                                    <th class="pv-col-sn">#</th>                                                                                                                <th id='header-productIngredients' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Name </label></th><th id='header-ingredientDosageUnit' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Strength </label></th>                                                                                                                    <th class="pv-col-la">                                                                <a href="javascript:void(0);" data-tabular="true"                                                                   class="pull-right add-table-row add-section btn-add-panel">                                                                    <i class="fa fa-plus-square-o"></i>                                                                </a>                                                            </th>                                                                                                                </thead>                                                        <tbody class="pv-draggable-list inner-repeatable"                                                               id="accordion-product-innersubstance_3_">                                                                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle  "                                                                id="productSubstances_3_-section-0">                                                                                                                                    <td class="new-index badge-index">1</td>                                                                                                                                <td id="productIngredients" class=" productIngredients null template-control col-md-6 "><div class='internal' data-id="productIngredients">    <select class="form-control   select2-box select2-ajax wrapped-multiselect   " name="safetyData.products[3].ingredients[0].name.id" data-from="" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-url="/caseEntry/searchIngredients" data-value="10349701" id="safetyData.products[3].ingredients[0].name.id" ><option value="">Select</option></select>        <input type="hidden" name="safetyData.products[3].ingredients[0].internalRowId" value="49" id="safetyData.products[3].ingredients[0].internalRowId" /></div></td>    <td id="ingredientDosageUnit" class="col-md-6 template-control  ingredientDosageUnit "><div class='internal' data-id="ingredientDosageUnit">    <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="10" data-unitList="strength-unit-list" name="safetyData.products[3].ingredients[0].strength.value" value="" data-initial-value="" maxlength="10" data-field-id="ingredientDosageUnit" id="safetyData.products[3].ingredients[0].strength.value" />        <input type="hidden" name="safetyData.products[3].ingredients[0].strength.id" value="" id="safetyData.products[3].ingredients[0].strength.id" />    </div></td><input type="hidden" name=safetyData.products[3].ingredients[0].deleted value=false>                                                                                                                                    <td>                                                                        <a href="javascript:void(0);"                                                                           class="table-row-del pull-right remove-section btn-del-panel"><i                                                                                class="md md-close productSubstances_3"                                                                                aria-hidden="true"></i></a>                                                                    </td>                                                                                                                            </tr>                                                                                                                </tbody>                                                    </table>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                                    <!-- Product Indication -->                                                            <div class="col-md-6 rx-col-table override-col-padding">                                    <div class="panel panel-default section-header inner">                                        <div class="panel-heading">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_3_"                                                   id="accordion-innerProducts_3_"                                                   href="#productIndication_3"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   aria-expanded="false">                                                    Product Indication(s)                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-product-innerindication_3_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-product-innerindication_3_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                            </h4>                                        </div>                                        <div id="productIndication_3"                                             data-templateId="productIndicationTemplate" data-table="true"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                <div class="pv-inner-product-indication pv-section">                                                    <table class="table table-striped pv-inner-table m-b-0">                                                        <thead class="unhighlightSection">                                                                                                                <th class="pv-col-sn">#</th>                                                                                                                <th id='header-productIndicationReported' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Indication (Reported) </label></th><th id='header-productIndicationCoded' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Indication (Coded) </label></th>                                                                                                                    <th class="pv-col-la">                                                                <a href="javascript:void(0);" data-tabular="true"                                                                   class="pull-right add-table-row add-section btn-add-panel"><i                                                                        class="fa fa-plus-square-o"></i>                                                                </a>                                                            </th>                                                                                                                </thead>                                                        <tbody class="pv-draggable-list inner-repeatable"                                                               id="accordion-product-innerindication_3_">                                                                                                                                                                                                                                            <tr class="row-table  pv-section-record inner-repeatable ui-sortable-handle  "                                                                id="productIndication_3_-section-0">                                                                                                                            <td class="new-index badge-index">1</td>                                                                                                                                        <td class="col-md-6  template-control productIndicationReported"><div class='internal' data-id="productIndicationReported">        <div class='input-group internal inner-addon right-addon' data-id="productIndicationReported">        <input type="text" class="form-control  meddraBrowser  " name="safetyData.products[3].productIndications[0].reportedReaction" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="productIndicationCoded" data-placeholder="" data-fieldId="productIndicationReported" id="safetyData.products[3].productIndications[0].reportedReaction" />                <input type="hidden" name="safetyData.products[3].productIndications[0].lltCode" class="hidden-id" value="" id="safetyData.products[3].productIndications[0].lltCode" /><input type="hidden" name="safetyData.products[3].productIndications[0].codedWithSearchString" value="" id="safetyData.products[3].productIndications[0].codedWithSearchString" /><input type="hidden" name="safetyData.products[3].productIndications[0].hierarchyStorageId" value="" id="safetyData.products[3].productIndications[0].hierarchyStorageId" /><input type="hidden" name="safetyData.products[3].productIndications[0].internalRowId" value="40" id="safetyData.products[3].productIndications[0].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <td id="productIndicationCoded" class="col-md-6 template-control  productIndicationCoded "><div class='internal' data-id="productIndicationCoded">    <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[3].productIndications[0].reactionCoded" value="" data-initial-value="" maxlength="1000" data-field-id="productIndicationCoded" readonly="readonly" id="safetyData.products[3].productIndications[0].reactionCoded" />            </div></td><input type="hidden" name=safetyData.products[3].productIndications[0].deleted value=false>                                                                                                                                    <td>                                                                        <a href="javascript:void(0);"                                                                           class="table-row-del pull-right remove-section btn-del-panel"><i                                                                                class="md md-close productIndication_3"                                                                                aria-hidden="true"></i></a>                                                                    </td>                                                                                                                            </tr>                                                                                                                </tbody>                                                    </table>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                                    <!-- Dose Information  -->                                                            <div class="col-md-12 m-b-0 override-col-padding-full">                                    <div class="panel panel-default rxmain-container section-header inner">                                        <div class="panel-heading rxmain-container-row">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_3_"                                                   id="accordion-innerProducts_3_"                                                   href="#productDose_3"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   aria-expanded="false">                                                    Dose Information                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#pviInnerProductDoseRecords_3_" title="Move Record Up" data-anchordiv="#productDose_3_" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#pviInnerProductDoseRecords_3_" data-anchordiv="#productDose_3_" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm pv-add-row" data-inner-sec="true"           data-tabular="inner" title="Add another section"           data-target="pv-innerProductDose">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>                                            </h4>                                        </div>                                        <div id="productDose_3" data-templateId="productDoseTemplate"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="innerdose-container pv-draggable-list pv-section ui-sortable inner-repeatable"                                                 id="pviInnerProductDoseRecords_3_">                                                                                                                                                                                                            <div class="pv-section-record inner-repeatable pv-innerProductDose p-10 ui-sortable-handle p-b-10 row row-strip   "                                                         id="productDose_3_-section-0">                                                                                                                    <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close product_0" aria-hidden="true"></i>    </a></div>                                                                                                                <div class="col-md-12 m-t-20 m-b-10 form-pv form-horizontal">                                                            <div class="form-group">                                                                            <div id="productDoseInformation" class="col-md-1-half template-control  productDoseInformation   " >        <label class='control-label lbl-elipsis'>Dose</label>        <div class='internal' data-id="productDoseInformation">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="8" data-unitList="dosage-unit-list" name="safetyData.products[3].doseInformations[0].dose.value" value="" data-initial-value="" maxlength="8" data-field-id="productDoseInformation" id="safetyData.products[3].doseInformations[0].dose.value" />        <input type="hidden" name="safetyData.products[3].doseInformations[0].dose.id" value="" id="safetyData.products[3].doseInformations[0].dose.id" /><input type="hidden" name="safetyData.products[3].doseInformations[0].internalRowId" value="41" id="safetyData.products[3].doseInformations[0].internalRowId" />    </div> </div>    <div id="productDoseFrequency" class=" productDoseFrequency null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Frequency</label>        <div class='internal' data-id="productDoseFrequency">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[3].doseInformations[0].frequency.id" data-from="dosageFrequency" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[3].doseInformations[0].frequency.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productDoseStartDate" class="template-control productDoseStartDate  col-md-1-half ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productDoseStartDate">        <input type="text" class="form-control   " name="safetyData.products[3].doseInformations[0].startDate.value" data-mandatory="false" id="safetyData.products[3].doseInformations[0].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[3].doseInformations[0].startDate.format" value="" id="safetyData.products[3].doseInformations[0].startDate.format" /></div></div>    <div id="productDoseEndDate" class="template-control productDoseEndDate  col-md-1-half ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productDoseEndDate">        <input type="text" class="form-control   " name="safetyData.products[3].doseInformations[0].endDate.value" data-mandatory="false" id="safetyData.products[3].doseInformations[0].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[3].doseInformations[0].endDate.format" value="" id="safetyData.products[3].doseInformations[0].endDate.format" /></div></div>            <div id="productDoseDuration" class="col-md-1-half template-control  productDoseDuration   " >        <label class='control-label lbl-elipsis'>Duration</label>        <div class='internal' data-id="productDoseDuration">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.products[3].doseInformations[0].duration.value" value="" data-initial-value="" maxlength="5" data-field-id="productDoseDuration" id="safetyData.products[3].doseInformations[0].duration.value" />        <input type="hidden" name="safetyData.products[3].doseInformations[0].duration.id" value="" id="safetyData.products[3].doseInformations[0].duration.id" />    </div> </div>            <div id="productDoseBatchNumber" class="col-md-1-half template-control  productDoseBatchNumber   " >        <label class='control-label lbl-elipsis'>Batch/Lot Number</label>        <div class='internal' data-id="productDoseBatchNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[3].doseInformations[0].batchNumber" value="" data-initial-value="" maxlength="35" data-field-id="productDoseBatchNumber" id="safetyData.products[3].doseInformations[0].batchNumber" />            </div> </div>    <div id="productDoseRoute" class=" productDoseRoute null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Route</label>        <div class='internal' data-id="productDoseRoute">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[3].doseInformations[0].route.idOrValue" data-tag="true" data-from="route" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[3].doseInformations[0].route.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productDoseParentRoute" class=" productDoseParentRoute null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Parent Route</label>        <div class='internal' data-id="productDoseParentRoute">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[3].doseInformations[0].parentRoute.idOrValue" data-tag="true" data-from="route" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[3].doseInformations[0].parentRoute.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productDoseDescription" class="col-md-3 template-control  productDoseDescription   " >        <label class='control-label lbl-elipsis'>Dose Description</label>        <div class='internal' data-id="productDoseDescription">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[3].doseInformations[0].description" value="" data-initial-value="" maxlength="2000" data-field-id="productDoseDescription" id="safetyData.products[3].doseInformations[0].description" />            </div> </div><input type="hidden" name=safetyData.products[3].doseInformations[0].deleted value=false>                                                            </div>                                                        </div>                                                    </div>                                                                                            </div>                                        </div>                                    </div>                                </div>                                                    </div>                    </div>                </div>            </div>        </div>    </div>                                                        <div class="panel panel-default pv-section-record ui-sortable-handle " id="product-section-4">        <div class="panel-heading">            <h4 class="panel-title">                <a data-toggle="collapse" data-header="Product-Section" data-parent="#product-section"                   href="#product-section_4" class="inner-repeatable"                   aria-expanded="true">                                            <span class="badge row-count badge-index">5</span>Product-Section                                    </a>                                    <div class="configureFields pv-subhead-config">                        <a href="javascript:void(0);" data-target="" title="Remove this section"                           class="pull-right btn-del-panel remove-section product-del">                            <i class="md md-close product_4" aria-hidden="true"></i>                        </a>                    </div>                            </h4>        </div>        <div id="product-section_4" class="panel-collapse collapse in inner-repeatable product-sec"             aria-expanded="true">            <div class="panel-body ui-nested-sortable-handle ">                <div class="col-md-12 form-pv">                    <div>                        <div class="form-group">                                        <div id="productLicense" class=' col-md-4 required  template-control  productLicense' >                <label class='control-label lbl-elipsis'>Product Name</label>        <div class='input-group internal inner-addon right-addon' data-id="productLicense">        <input type="text" class="form-control productNameBrowser   " name="safetyData.products[4].license.value" maxlength="250" value="Depromel 75mg tablet" data-mandatory="true" data-mandatorySet="0" data-placement="top" data-browser-value="Depromel 75mg tablet" data-browser-type="product" data-flag-target="" data-placeholder="" data-fieldId="productLicense" id="safetyData.products[4].license.value" />                <input type="hidden" name="safetyData.products[4].license.id" value="100161" id="safetyData.products[4].license.id" /><input type="hidden" name="safetyData.products[4].id" class="hidden-id" value="100121" id="safetyData.products[4].id" /><input type="hidden" name="safetyData.products[4].internalRowId" value="42" id="safetyData.products[4].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.products[0].search" name="safetyData.products[0].search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="productDosageForm" class=" productDosageForm null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Dosage Form</label>        <div class='internal' data-id="productDosageForm">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[4].dosageForm.id" data-from="dosageForm" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="1" id="safetyData.products[4].dosageForm.id" ><option value="">Select</option></select>        </div></div>    <div id="productRole" class=" productRole null template-control col-md-2 required ">            <label class='control-label lbl-elipsis'>Role</label>        <div class='internal' data-id="productRole">    <select class="form-control   productRoleId select2-lazy   " name="safetyData.products[4].role.id" data-from="roles" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="true" data-value="29" id="safetyData.products[4].role.id" ><option value="">Select</option></select>        </div></div>    <div id="productObtainCountry" class=" productObtainCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Obtain Country</label>        <div class='internal' data-id="productObtainCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.products[4].obtainCountry.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[4].obtainCountry.id" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productAuthNumber" class="col-md-2 template-control  productAuthNumber   " >        <label class='control-label lbl-elipsis'>Auth. Number</label>        <div class='internal' data-id="productAuthNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[4].authNumber" value="" data-initial-value="" maxlength="35" data-field-id="productAuthNumber" id="safetyData.products[4].authNumber" />            </div> </div>    <div id="productAuthCountry" class=" productAuthCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Auth. Country</label>        <div class='internal' data-id="productAuthCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.products[4].authCountry.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[4].authCountry.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productManufacturer" class=" productManufacturer null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Auth. Holder</label>        <div class='internal' data-id="productManufacturer">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[4].authHolder.idOrValue" data-tag="true" data-from="manufacturers" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[4].authHolder.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productCumulativeDoseToFirstReaction" class="col-md-2 template-control  productCumulativeDoseToFirstReaction   " >        <label class='control-label lbl-elipsis'>Cumulative Dose to First Reaction</label>        <div class='internal' data-id="productCumulativeDoseToFirstReaction">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="10" data-unitList="dosage-unit-list" name="safetyData.products[4].cumulativeDoseToFirstReaction.value" value="" data-initial-value="" maxlength="10" data-field-id="productCumulativeDoseToFirstReaction" id="safetyData.products[4].cumulativeDoseToFirstReaction.value" />        <input type="hidden" name="safetyData.products[4].cumulativeDoseToFirstReaction.id" value="" id="safetyData.products[4].cumulativeDoseToFirstReaction.id" />    </div> </div>            <div id="productExposureGestationPeriod" class="col-md-2 template-control  productExposureGestationPeriod   " >        <label class='control-label lbl-elipsis'>Exposure Gestation Period</label>        <div class='internal' data-id="productExposureGestationPeriod">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="3" data-unitList="gestation-period-list" name="safetyData.products[4].exposureGestationPeriod.value" value="" data-initial-value="" maxlength="3" data-field-id="productExposureGestationPeriod" id="safetyData.products[4].exposureGestationPeriod.value" />        <input type="hidden" name="safetyData.products[4].exposureGestationPeriod.id" value="" id="safetyData.products[4].exposureGestationPeriod.id" />    </div> </div>    <div id="productActionTaken" class=" productActionTaken null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Action Taken</label>        <div class='internal' data-id="productActionTaken">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[4].actionTaken.id" data-from="actionTaken" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[4].actionTaken.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productExpirationDate" class="template-control productExpirationDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Expiration Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productExpirationDate">        <input type="text" class="form-control  futureDatesAllowed allowDateWithoutTime " name="safetyData.products[4].expirationDate.value" data-mandatory="false" id="safetyData.products[4].expirationDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[4].expirationDate.format" value="" id="safetyData.products[4].expirationDate.format" /></div></div>    <div id="productReplacementRequired" class=" productReplacementRequired null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Replacement Required</label>        <div class='internal' data-id="productReplacementRequired">    <select class="form-control      " name="safetyData.products[4].replacementRequired.id" data-from="replacementRequired" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[4].replacementRequired.id" ><option value="" selected="selected">Select</option><option value="1023" >Yes</option><option value="1024" >No</option></select>        </div></div>    <div id="productReturnRequired" class=" productReturnRequired null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Return Required</label>        <div class='internal' data-id="productReturnRequired">    <select class="form-control      " name="safetyData.products[4].returnRequired.id" data-from="returnRequired" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[4].returnRequired.id" ><option value="" selected="selected">Select</option><option value="1033" >Yes</option><option value="1034" >No</option></select>        </div></div>    <div id="productRefundRequested" class=" productRefundRequested null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Refund Requested</label>        <div class='internal' data-id="productRefundRequested">    <select class="form-control      " name="safetyData.products[4].refundRequested.id" data-from="refundRequested" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[4].refundRequested.id" ><option value="" selected="selected">Select</option><option value="1035" >Yes</option><option value="1036" >No</option></select>        </div></div>            <div id="productBlinded" class='template-control col-md-2    productBlinded'>            <label class='control-label lbl-elipsis'>Blinded</label>            <div class='internal checkbox checkbox-primary ' data-id="productBlinded">                <input type="hidden" name="_safetyData.products[4].blinded">                <input type="checkbox" name="safetyData.products[4].blinded" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="safetyData.products[4].blinded"></label>            </div>                    </div>        <div id="productAddlnDrugInformation" class=" productAddlnDrugInformation null template-control col-md-12  ">            <label class='control-label lbl-elipsis'>Add&#39;l Drug Info</label>        <div class='internal' data-id="productAddlnDrugInformation">    <select class="form-control select2-box  multiSelectSelect2Field wrapped-multiselect   " name="safetyData.products[4].additionalDrugInfo.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="" id="safetyData.products[4].additionalDrugInfo.id" ><option value="33" >Counterfeit</option><option value="34" >Overdose</option><option value="35" >Drug taken by the father</option><option value="36" >Drug taken beyond expiry date</option><option value="37" >Batch and lot tested and found within specifications</option><option value="38" >Batch and lot tested and found not within specifications</option><option value="39" >Medication error</option><option value="40" >Misuse</option><option value="41" >Abuse</option><option value="42" >Occupational exposure</option><option value="43" >Off label use</option></select>        </div></div><div id="productAdditionalDrugInfoNotes" class='template-control     productAdditionalDrugInfoNotes col-md-12'>    <label class='control-label lbl-elipsis'>Add&#39;l Drug Info Notes</label>    <div class='internal' data-id="productAdditionalDrugInfoNotes">        <textarea class="form-control fm-text-area    " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[4].additionalDrugInfoNotes" maxlength="2000" rows="2" cols="100" id="safetyData.products[4].additionalDrugInfoNotes" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><input type="hidden" name=safetyData.products[4].deleted value=false>                        </div>                    </div>                    <!-- Sub Sections Products -->                    <div class="form-group inner-table innerSectionTable ">                        <div class="panel-group inner-repeatable"                             id="accordion-innerProducts_4_">                        <!-- Substances -->                                                            <div class="col-md-6 rx-col-table override-col-padding">                                    <div class="panel panel-default section-header inner">                                        <div class="panel-heading">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_4_"                                                   href="#productSubstances_4"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   id="accordion-innerProducts_4_" aria-expanded="false">                                                    Substance(s)                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-product-innersubstance_4_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-product-innersubstance_4_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                            </h4>                                        </div>                                        <div id="productSubstances_4"                                             data-templateId="productSubstancesTemplate" data-table="true"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                <div class="pv-inner-product-substance pv-section">                                                    <table class="table table-striped pv-inner-table m-b-0">                                                        <thead class="unhighlightSection">                                                                                                                    <th class="pv-col-sn">#</th>                                                                                                                <th id='header-productIngredients' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Name </label></th><th id='header-ingredientDosageUnit' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Strength </label></th>                                                                                                                    <th class="pv-col-la">                                                                <a href="javascript:void(0);" data-tabular="true"                                                                   class="pull-right add-table-row add-section btn-add-panel">                                                                    <i class="fa fa-plus-square-o"></i>                                                                </a>                                                            </th>                                                                                                                </thead>                                                        <tbody class="pv-draggable-list inner-repeatable"                                                               id="accordion-product-innersubstance_4_">                                                                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle  "                                                                id="productSubstances_4_-section-0">                                                                                                                                    <td class="new-index badge-index">1</td>                                                                                                                                <td id="productIngredients" class=" productIngredients null template-control col-md-6 "><div class='internal' data-id="productIngredients">    <select class="form-control   select2-box select2-ajax wrapped-multiselect   " name="safetyData.products[4].ingredients[0].name.id" data-from="" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-url="/caseEntry/searchIngredients" data-value="2330" id="safetyData.products[4].ingredients[0].name.id" ><option value="">Select</option></select>        <input type="hidden" name="safetyData.products[4].ingredients[0].internalRowId" value="50" id="safetyData.products[4].ingredients[0].internalRowId" /></div></td>    <td id="ingredientDosageUnit" class="col-md-6 template-control  ingredientDosageUnit "><div class='internal' data-id="ingredientDosageUnit">    <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="10" data-unitList="strength-unit-list" name="safetyData.products[4].ingredients[0].strength.value" value="" data-initial-value="" maxlength="10" data-field-id="ingredientDosageUnit" id="safetyData.products[4].ingredients[0].strength.value" />        <input type="hidden" name="safetyData.products[4].ingredients[0].strength.id" value="" id="safetyData.products[4].ingredients[0].strength.id" />    </div></td><input type="hidden" name=safetyData.products[4].ingredients[0].deleted value=false>                                                                                                                                    <td>                                                                        <a href="javascript:void(0);"                                                                           class="table-row-del pull-right remove-section btn-del-panel"><i                                                                                class="md md-close productSubstances_4"                                                                                aria-hidden="true"></i></a>                                                                    </td>                                                                                                                            </tr>                                                                                                                </tbody>                                                    </table>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                                    <!-- Product Indication -->                                                            <div class="col-md-6 rx-col-table override-col-padding">                                    <div class="panel panel-default section-header inner">                                        <div class="panel-heading">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_4_"                                                   id="accordion-innerProducts_4_"                                                   href="#productIndication_4"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   aria-expanded="false">                                                    Product Indication(s)                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-product-innerindication_4_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-product-innerindication_4_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                            </h4>                                        </div>                                        <div id="productIndication_4"                                             data-templateId="productIndicationTemplate" data-table="true"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="pv-relatedness pv-sec-seperator panel-body p-0">                                                <div class="pv-inner-product-indication pv-section">                                                    <table class="table table-striped pv-inner-table m-b-0">                                                        <thead class="unhighlightSection">                                                                                                                <th class="pv-col-sn">#</th>                                                                                                                <th id='header-productIndicationReported' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Indication (Reported) </label></th><th id='header-productIndicationCoded' class='col-md-6  true'> <label class='control-label lbl-elipsis'> Indication (Coded) </label></th>                                                                                                                    <th class="pv-col-la">                                                                <a href="javascript:void(0);" data-tabular="true"                                                                   class="pull-right add-table-row add-section btn-add-panel"><i                                                                        class="fa fa-plus-square-o"></i>                                                                </a>                                                            </th>                                                                                                                </thead>                                                        <tbody class="pv-draggable-list inner-repeatable"                                                               id="accordion-product-innerindication_4_">                                                                                                                                                                                                                                            <tr class="row-table  pv-section-record inner-repeatable ui-sortable-handle  "                                                                id="productIndication_4_-section-0">                                                                                                                            <td class="new-index badge-index">1</td>                                                                                                                                        <td class="col-md-6  template-control productIndicationReported"><div class='internal' data-id="productIndicationReported">        <div class='input-group internal inner-addon right-addon' data-id="productIndicationReported">        <input type="text" class="form-control  meddraBrowser  " name="safetyData.products[4].productIndications[0].reportedReaction" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="productIndicationCoded" data-placeholder="" data-fieldId="productIndicationReported" id="safetyData.products[4].productIndications[0].reportedReaction" />                <input type="hidden" name="safetyData.products[4].productIndications[0].lltCode" class="hidden-id" value="" id="safetyData.products[4].productIndications[0].lltCode" /><input type="hidden" name="safetyData.products[4].productIndications[0].codedWithSearchString" value="" id="safetyData.products[4].productIndications[0].codedWithSearchString" /><input type="hidden" name="safetyData.products[4].productIndications[0].hierarchyStorageId" value="" id="safetyData.products[4].productIndications[0].hierarchyStorageId" /><input type="hidden" name="safetyData.products[4].productIndications[0].internalRowId" value="44" id="safetyData.products[4].productIndications[0].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <td id="productIndicationCoded" class="col-md-6 template-control  productIndicationCoded "><div class='internal' data-id="productIndicationCoded">    <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[4].productIndications[0].reactionCoded" value="" data-initial-value="" maxlength="1000" data-field-id="productIndicationCoded" readonly="readonly" id="safetyData.products[4].productIndications[0].reactionCoded" />            </div></td><input type="hidden" name=safetyData.products[4].productIndications[0].deleted value=false>                                                                                                                                    <td>                                                                        <a href="javascript:void(0);"                                                                           class="table-row-del pull-right remove-section btn-del-panel"><i                                                                                class="md md-close productIndication_4"                                                                                aria-hidden="true"></i></a>                                                                    </td>                                                                                                                            </tr>                                                                                                                </tbody>                                                    </table>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                                                    <!-- Dose Information  -->                                                            <div class="col-md-12 m-b-0 override-col-padding-full">                                    <div class="panel panel-default rxmain-container section-header inner">                                        <div class="panel-heading rxmain-container-row">                                            <h4 class="panel-title">                                                <a data-toggle="collapse"                                                   data-parent="#accordion-innerProducts_4_"                                                   id="accordion-innerProducts_4_"                                                   href="#productDose_4"                                                   class="collapsed inner-repeatable sec-display-txt"                                                   aria-expanded="false">                                                    Dose Information                                                </a>                                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#pviInnerProductDoseRecords_4_" title="Move Record Up" data-anchordiv="#productDose_4_" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#pviInnerProductDoseRecords_4_" data-anchordiv="#productDose_4_" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm pv-add-row" data-inner-sec="true"           data-tabular="inner" title="Add another section"           data-target="pv-innerProductDose">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>                                            </h4>                                        </div>                                        <div id="productDose_4" data-templateId="productDoseTemplate"                                             class="pv-main panel-collapse collapse  inner-repeatable inner-accordion"                                             aria-expanded="false">                                            <div class="innerdose-container pv-draggable-list pv-section ui-sortable inner-repeatable"                                                 id="pviInnerProductDoseRecords_4_">                                                                                                                                                                                                            <div class="pv-section-record inner-repeatable pv-innerProductDose p-10 ui-sortable-handle p-b-10 row row-strip   "                                                         id="productDose_4_-section-0">                                                                                                                    <div class="row-num num-bg"><span class="row-count badge-index"></span></div><div class="row-action num-bg">    <a href="javascript:void(0);" data-target="" title="Remove this section" class="pv-ic ic-xs m-r-5 remove-section pull-right btn-del-panel">        <i class="md md-close product_0" aria-hidden="true"></i>    </a></div>                                                                                                                <div class="col-md-12 m-t-20 m-b-10 form-pv form-horizontal">                                                            <div class="form-group">                                                                            <div id="productDoseInformation" class="col-md-1-half template-control  productDoseInformation   " >        <label class='control-label lbl-elipsis'>Dose</label>        <div class='internal' data-id="productDoseInformation">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="8" data-unitList="dosage-unit-list" name="safetyData.products[4].doseInformations[0].dose.value" value="" data-initial-value="" maxlength="8" data-field-id="productDoseInformation" id="safetyData.products[4].doseInformations[0].dose.value" />        <input type="hidden" name="safetyData.products[4].doseInformations[0].dose.id" value="" id="safetyData.products[4].doseInformations[0].dose.id" /><input type="hidden" name="safetyData.products[4].doseInformations[0].internalRowId" value="45" id="safetyData.products[4].doseInformations[0].internalRowId" />    </div> </div>    <div id="productDoseFrequency" class=" productDoseFrequency null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Frequency</label>        <div class='internal' data-id="productDoseFrequency">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[4].doseInformations[0].frequency.id" data-from="dosageFrequency" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[4].doseInformations[0].frequency.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productDoseStartDate" class="template-control productDoseStartDate  col-md-1-half ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productDoseStartDate">        <input type="text" class="form-control   " name="safetyData.products[4].doseInformations[0].startDate.value" data-mandatory="false" id="safetyData.products[4].doseInformations[0].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[4].doseInformations[0].startDate.format" value="" id="safetyData.products[4].doseInformations[0].startDate.format" /></div></div>    <div id="productDoseEndDate" class="template-control productDoseEndDate  col-md-1-half ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="productDoseEndDate">        <input type="text" class="form-control   " name="safetyData.products[4].doseInformations[0].endDate.value" data-mandatory="false" id="safetyData.products[4].doseInformations[0].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.products[4].doseInformations[0].endDate.format" value="" id="safetyData.products[4].doseInformations[0].endDate.format" /></div></div>            <div id="productDoseDuration" class="col-md-1-half template-control  productDoseDuration   " >        <label class='control-label lbl-elipsis'>Duration</label>        <div class='internal' data-id="productDoseDuration">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.products[4].doseInformations[0].duration.value" value="" data-initial-value="" maxlength="5" data-field-id="productDoseDuration" id="safetyData.products[4].doseInformations[0].duration.value" />        <input type="hidden" name="safetyData.products[4].doseInformations[0].duration.id" value="" id="safetyData.products[4].doseInformations[0].duration.id" />    </div> </div>            <div id="productDoseBatchNumber" class="col-md-1-half template-control  productDoseBatchNumber   " >        <label class='control-label lbl-elipsis'>Batch/Lot Number</label>        <div class='internal' data-id="productDoseBatchNumber">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[4].doseInformations[0].batchNumber" value="" data-initial-value="" maxlength="35" data-field-id="productDoseBatchNumber" id="safetyData.products[4].doseInformations[0].batchNumber" />            </div> </div>    <div id="productDoseRoute" class=" productDoseRoute null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Route</label>        <div class='internal' data-id="productDoseRoute">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[4].doseInformations[0].route.idOrValue" data-tag="true" data-from="route" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[4].doseInformations[0].route.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productDoseParentRoute" class=" productDoseParentRoute null template-control col-md-1-half  ">            <label class='control-label lbl-elipsis'>Parent Route</label>        <div class='internal' data-id="productDoseParentRoute">    <select class="form-control   select2-box select2-lazy   " name="safetyData.products[4].doseInformations[0].parentRoute.idOrValue" data-tag="true" data-from="route" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.products[4].doseInformations[0].parentRoute.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></div>            <div id="productDoseDescription" class="col-md-3 template-control  productDoseDescription   " >        <label class='control-label lbl-elipsis'>Dose Description</label>        <div class='internal' data-id="productDoseDescription">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.products[4].doseInformations[0].description" value="" data-initial-value="" maxlength="2000" data-field-id="productDoseDescription" id="safetyData.products[4].doseInformations[0].description" />            </div> </div><input type="hidden" name=safetyData.products[4].doseInformations[0].deleted value=false>                                                            </div>                                                        </div>                                                    </div>                                                                                            </div>                                        </div>                                    </div>                                </div>                                                    </div>                    </div>                </div>            </div>        </div>    </div>                                            </div>                </div>            </div>        </div>    </div>

                                                <!-- Events -->
                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-event">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#event" aria-expanded="false"                   class="collapsed sec-display-txt sectionTitle">                    Event(s)                </a>                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#accordion-event" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#accordion-event" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm " data-inner-sec=""           data-tabular="false" title="Add another section"           data-target="pvi-event">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>            </h4>        </div>        <div id="event" data-templateId="eventTemplate"             class="pv-main panel-collapse rxmain-container-content rxmain-container-show collapse "             aria-expanded="false">            <div class="row">                <div class="form-group inner-table m-b-0 row">                    <div class="panel-group pv-draggable-list short-field pv-section m-b-0"                         id="accordion-event">                                                                                    <div class="panel pv-section-record pv-event ui-sortable-handle panel-default "     id="event-section-0">    <div class="panel-heading">        <h4 class="panel-title">            <a data-toggle="collapse" data-header="Event-Section"               data-parent="#accordion-event" href="#event-section_0"               class="inner-repeatable" aria-expanded="true">                                    <span class="badge row-count badge-index"></span>Event-Section                            </a>                            <div class="configureFields pv-subhead-config">                    <a href="javascript:void(0);" data-target="pv-event" title="Remove this section"                       class="remove-section pull-right btn-del-panel event-del">                        <i class="md md-close event_0" aria-hidden="true"></i>                    </a>                </div>                    </h4>    </div>    <div class="panel-collapse collapse in inner-repeatable" aria-expanded="true"         id="event-section_0">        <div class="panel-body ">            <div class="form-group form-pv">                            <div id="eventReportedReaction" class=' col-md-4 required  template-control  eventReportedReaction' >                <label class='control-label lbl-elipsis'>Reported Reaction</label>        <div class='input-group internal inner-addon right-addon' data-id="eventReportedReaction">        <input type="text" class="form-control  eventNameBrowser meddraBrowser  " name="safetyData.events[0].reportedReaction" maxlength="250" value="headach" data-mandatory="true" data-mandatorySet="0" data-placement="top" data-browser-value="headach" data-browser-type="meddra" data-flag-target="eventReactionCoded" data-placeholder="" data-fieldId="eventReportedReaction" id="safetyData.events[0].reportedReaction" />                <input type="hidden" name="safetyData.events[0].lltCode" class="hidden-id" value="10019211" id="safetyData.events[0].lltCode" /><input type="hidden" name="safetyData.events[0].codedWithSearchString" value="headach" id="safetyData.events[0].codedWithSearchString" /><input type="hidden" name="safetyData.events[0].hierarchyStorageId" value="" id="safetyData.events[0].hierarchyStorageId" /><input type="hidden" name="safetyData.events[0].internalRowId" value="15" id="safetyData.events[0].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="eventLanguage" class=" eventLanguage null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Reported Language</label>        <div class='internal' data-id="eventLanguage">    <select class="form-control   select2-box select2-lazy   " name="safetyData.events[0].reportedLanguage.id" data-from="languages" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="1" id="safetyData.events[0].reportedLanguage.id" ><option value="">Select</option></select>        </div></div>            <div id="eventTranslatedReaction" class="col-md-2 template-control  eventTranslatedReaction   " >        <label class='control-label lbl-elipsis'>Translated Reaction</label>        <div class='internal' data-id="eventTranslatedReaction">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.events[0].translatedReaction" value="" data-initial-value="" maxlength="250" data-field-id="eventTranslatedReaction" id="safetyData.events[0].translatedReaction" />            </div> </div>            <div id="eventReactionCoded" class="col-md-4 template-control  eventReactionCoded   " >        <label class='control-label lbl-elipsis'>Reaction (Coded)</label>        <div class='internal' data-id="eventReactionCoded">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.events[0].reactionCoded" value="Headache" data-initial-value="Headache" maxlength="250" data-field-id="eventReactionCoded" readonly="readonly" id="safetyData.events[0].reactionCoded" />            </div> </div>    <div id="eventHighlightedByReporter" class=" eventHighlightedByReporter null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Highlighted by Reporter</label>        <div class='internal' data-id="eventHighlightedByReporter">    <select class="form-control      " name="safetyData.events[0].highlightedByReporter.id" data-from="highlightedByReporters" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[0].highlightedByReporter.id" ><option value="" selected="selected">Select</option><option value="17" >Highlighted, NOT serious</option><option value="18" >Not highlighted, NOT serious</option><option value="19" >Highlighted, SERIOUS</option><option value="20" >Not highlighted, SERIOUS</option></select>        </div></div>    <div id="eventSeriousNess" class=" eventSeriousNess null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Seriousness Criteria</label>        <div class='internal' data-id="eventSeriousNess">    <select class="form-control select2-box  seriousnesses multiSelectSelect2Field wrapped-multiselect   " name="safetyData.events[0].seriousnesses.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="" id="safetyData.events[0].seriousnesses.id" ><option value="1" >Death</option><option value="2" >Life Threatening</option><option value="3" >Hospitalization</option><option value="4" >Disabling</option><option value="5" >Congenital Anomaly</option><option value="6" >Other Medically Important Condition</option></select>        </div></div>    <div id="eventStartDate" class="template-control eventStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventStartDate">        <input type="text" class="form-control   " name="safetyData.events[0].startDate.value" data-mandatory="false" id="safetyData.events[0].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[0].startDate.format" value="" id="safetyData.events[0].startDate.format" /></div></div>    <div id="eventEndDate" class="template-control eventEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventEndDate">        <input type="text" class="form-control   " name="safetyData.events[0].endDate.value" data-mandatory="false" id="safetyData.events[0].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[0].endDate.format" value="" id="safetyData.events[0].endDate.format" /></div></div>            <div id="eventDuration" class="col-md-2 template-control  eventDuration   " >        <label class='control-label lbl-elipsis'>Duration</label>        <div class='internal' data-id="eventDuration">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.events[0].duration.value" value="" data-initial-value="" maxlength="5" data-field-id="eventDuration" id="safetyData.events[0].duration.value" />        <input type="hidden" name="safetyData.events[0].duration.id" value="" id="safetyData.events[0].duration.id" />    </div> </div>    <div id="eventOutcomes" class=" eventOutcomes null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Outcome</label>        <div class='internal' data-id="eventOutcomes">    <select class="form-control   select2-box select2-lazy   " name="safetyData.events[0].outcome.id" data-from="outcomes" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[0].outcome.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="eventMedicallyConfirmed" class=" eventMedicallyConfirmed null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Medically Confirmed</label>        <div class='internal' data-id="eventMedicallyConfirmed">    <select class="form-control      " name="safetyData.events[0].medicallyConfirmed.id" data-from="medicallyConfirmed" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[0].medicallyConfirmed.id" ><option value="" selected="selected">Select</option><option value="21" >Yes</option><option value="22" >No</option></select>        </div></div>    <div id="eventCountry" class=" eventCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Country</label>        <div class='internal' data-id="eventCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.events[0].country.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="3" id="safetyData.events[0].country.id" ><option value="">Select</option></select>        </div></div>    <div id="eventHospitalizationStartDate" class="template-control eventHospitalizationStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Hospitalization Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventHospitalizationStartDate">        <input type="text" class="form-control  allowDateWithoutTime " name="safetyData.events[0].hospitalizationStartDate.value" data-mandatory="false" id="safetyData.events[0].hospitalizationStartDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[0].hospitalizationStartDate.format" value="" id="safetyData.events[0].hospitalizationStartDate.format" /></div></div>    <div id="eventHospitalizationEndDate" class="template-control eventHospitalizationEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Hospitalization End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventHospitalizationEndDate">        <input type="text" class="form-control  allowDateWithoutTime " name="safetyData.events[0].hospitalizationEndDate.value" data-mandatory="false" id="safetyData.events[0].hospitalizationEndDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[0].hospitalizationEndDate.format" value="" id="safetyData.events[0].hospitalizationEndDate.format" /></div></div><input type="hidden" name=safetyData.events[0].deleted value=false>            </div>        </div>    </div></div>                                                                                                                <div class="panel pv-section-record pv-event ui-sortable-handle panel-default "     id="event-section-1">    <div class="panel-heading">        <h4 class="panel-title">            <a data-toggle="collapse" data-header="Event-Section"               data-parent="#accordion-event" href="#event-section_1"               class="inner-repeatable" aria-expanded="true">                                    <span class="badge row-count badge-index"></span>Event-Section                            </a>                            <div class="configureFields pv-subhead-config">                    <a href="javascript:void(0);" data-target="pv-event" title="Remove this section"                       class="remove-section pull-right btn-del-panel event-del">                        <i class="md md-close event_1" aria-hidden="true"></i>                    </a>                </div>                    </h4>    </div>    <div class="panel-collapse collapse in inner-repeatable" aria-expanded="true"         id="event-section_1">        <div class="panel-body ">            <div class="form-group form-pv">                            <div id="eventReportedReaction" class=' col-md-4 required  template-control  eventReportedReaction' >                <label class='control-label lbl-elipsis'>Reported Reaction</label>        <div class='input-group internal inner-addon right-addon' data-id="eventReportedReaction">        <input type="text" class="form-control  eventNameBrowser meddraBrowser  " name="safetyData.events[1].reportedReaction" maxlength="250" value="nau" data-mandatory="true" data-mandatorySet="0" data-placement="top" data-browser-value="nau" data-browser-type="meddra" data-flag-target="eventReactionCoded" data-placeholder="" data-fieldId="eventReportedReaction" id="safetyData.events[1].reportedReaction" />                <input type="hidden" name="safetyData.events[1].lltCode" class="hidden-id" value="10048364" id="safetyData.events[1].lltCode" /><input type="hidden" name="safetyData.events[1].codedWithSearchString" value="nau" id="safetyData.events[1].codedWithSearchString" /><input type="hidden" name="safetyData.events[1].hierarchyStorageId" value="" id="safetyData.events[1].hierarchyStorageId" /><input type="hidden" name="safetyData.events[1].internalRowId" value="51" id="safetyData.events[1].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="eventLanguage" class=" eventLanguage null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Reported Language</label>        <div class='internal' data-id="eventLanguage">    <select class="form-control   select2-box select2-lazy   " name="safetyData.events[1].reportedLanguage.id" data-from="languages" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="1" id="safetyData.events[1].reportedLanguage.id" ><option value="">Select</option></select>        </div></div>            <div id="eventTranslatedReaction" class="col-md-2 template-control  eventTranslatedReaction   " >        <label class='control-label lbl-elipsis'>Translated Reaction</label>        <div class='internal' data-id="eventTranslatedReaction">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.events[1].translatedReaction" value="" data-initial-value="" maxlength="250" data-field-id="eventTranslatedReaction" id="safetyData.events[1].translatedReaction" />            </div> </div>            <div id="eventReactionCoded" class="col-md-4 template-control  eventReactionCoded   " >        <label class='control-label lbl-elipsis'>Reaction (Coded)</label>        <div class='internal' data-id="eventReactionCoded">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.events[1].reactionCoded" value="Nausea aggravated" data-initial-value="Nausea aggravated" maxlength="250" data-field-id="eventReactionCoded" readonly="readonly" id="safetyData.events[1].reactionCoded" />            </div> </div>    <div id="eventHighlightedByReporter" class=" eventHighlightedByReporter null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Highlighted by Reporter</label>        <div class='internal' data-id="eventHighlightedByReporter">    <select class="form-control      " name="safetyData.events[1].highlightedByReporter.id" data-from="highlightedByReporters" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[1].highlightedByReporter.id" ><option value="" selected="selected">Select</option><option value="17" >Highlighted, NOT serious</option><option value="18" >Not highlighted, NOT serious</option><option value="19" >Highlighted, SERIOUS</option><option value="20" >Not highlighted, SERIOUS</option></select>        </div></div>    <div id="eventSeriousNess" class=" eventSeriousNess null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Seriousness Criteria</label>        <div class='internal' data-id="eventSeriousNess">    <select class="form-control select2-box  seriousnesses multiSelectSelect2Field wrapped-multiselect   " name="safetyData.events[1].seriousnesses.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="" id="safetyData.events[1].seriousnesses.id" ><option value="1" >Death</option><option value="2" >Life Threatening</option><option value="3" >Hospitalization</option><option value="4" >Disabling</option><option value="5" >Congenital Anomaly</option><option value="6" >Other Medically Important Condition</option></select>        </div></div>    <div id="eventStartDate" class="template-control eventStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventStartDate">        <input type="text" class="form-control   " name="safetyData.events[1].startDate.value" data-mandatory="false" id="safetyData.events[1].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[1].startDate.format" value="" id="safetyData.events[1].startDate.format" /></div></div>    <div id="eventEndDate" class="template-control eventEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventEndDate">        <input type="text" class="form-control   " name="safetyData.events[1].endDate.value" data-mandatory="false" id="safetyData.events[1].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[1].endDate.format" value="" id="safetyData.events[1].endDate.format" /></div></div>            <div id="eventDuration" class="col-md-2 template-control  eventDuration   " >        <label class='control-label lbl-elipsis'>Duration</label>        <div class='internal' data-id="eventDuration">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.events[1].duration.value" value="" data-initial-value="" maxlength="5" data-field-id="eventDuration" id="safetyData.events[1].duration.value" />        <input type="hidden" name="safetyData.events[1].duration.id" value="" id="safetyData.events[1].duration.id" />    </div> </div>    <div id="eventOutcomes" class=" eventOutcomes null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Outcome</label>        <div class='internal' data-id="eventOutcomes">    <select class="form-control   select2-box select2-lazy   " name="safetyData.events[1].outcome.id" data-from="outcomes" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[1].outcome.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="eventMedicallyConfirmed" class=" eventMedicallyConfirmed null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Medically Confirmed</label>        <div class='internal' data-id="eventMedicallyConfirmed">    <select class="form-control      " name="safetyData.events[1].medicallyConfirmed.id" data-from="medicallyConfirmed" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[1].medicallyConfirmed.id" ><option value="" selected="selected">Select</option><option value="21" >Yes</option><option value="22" >No</option></select>        </div></div>    <div id="eventCountry" class=" eventCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Country</label>        <div class='internal' data-id="eventCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.events[1].country.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="3" id="safetyData.events[1].country.id" ><option value="">Select</option></select>        </div></div>    <div id="eventHospitalizationStartDate" class="template-control eventHospitalizationStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Hospitalization Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventHospitalizationStartDate">        <input type="text" class="form-control  allowDateWithoutTime " name="safetyData.events[1].hospitalizationStartDate.value" data-mandatory="false" id="safetyData.events[1].hospitalizationStartDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[1].hospitalizationStartDate.format" value="" id="safetyData.events[1].hospitalizationStartDate.format" /></div></div>    <div id="eventHospitalizationEndDate" class="template-control eventHospitalizationEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Hospitalization End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventHospitalizationEndDate">        <input type="text" class="form-control  allowDateWithoutTime " name="safetyData.events[1].hospitalizationEndDate.value" data-mandatory="false" id="safetyData.events[1].hospitalizationEndDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[1].hospitalizationEndDate.format" value="" id="safetyData.events[1].hospitalizationEndDate.format" /></div></div><input type="hidden" name=safetyData.events[1].deleted value=false>            </div>        </div>    </div></div>                                                                                                                <div class="panel pv-section-record pv-event ui-sortable-handle panel-default "     id="event-section-2">    <div class="panel-heading">        <h4 class="panel-title">            <a data-toggle="collapse" data-header="Event-Section"               data-parent="#accordion-event" href="#event-section_2"               class="inner-repeatable" aria-expanded="true">                                    <span class="badge row-count badge-index"></span>Event-Section                            </a>                            <div class="configureFields pv-subhead-config">                    <a href="javascript:void(0);" data-target="pv-event" title="Remove this section"                       class="remove-section pull-right btn-del-panel event-del">                        <i class="md md-close event_2" aria-hidden="true"></i>                    </a>                </div>                    </h4>    </div>    <div class="panel-collapse collapse in inner-repeatable" aria-expanded="true"         id="event-section_2">        <div class="panel-body ">            <div class="form-group form-pv">                            <div id="eventReportedReaction" class=' col-md-4 required  template-control  eventReportedReaction' >                <label class='control-label lbl-elipsis'>Reported Reaction</label>        <div class='input-group internal inner-addon right-addon' data-id="eventReportedReaction">        <input type="text" class="form-control  eventNameBrowser meddraBrowser  " name="safetyData.events[2].reportedReaction" maxlength="250" value="migrai" data-mandatory="true" data-mandatorySet="0" data-placement="top" data-browser-value="migrai" data-browser-type="meddra" data-flag-target="eventReactionCoded" data-placeholder="" data-fieldId="eventReportedReaction" id="safetyData.events[2].reportedReaction" />                <input type="hidden" name="safetyData.events[2].lltCode" class="hidden-id" value="10027602" id="safetyData.events[2].lltCode" /><input type="hidden" name="safetyData.events[2].codedWithSearchString" value="migrai" id="safetyData.events[2].codedWithSearchString" /><input type="hidden" name="safetyData.events[2].hierarchyStorageId" value="" id="safetyData.events[2].hierarchyStorageId" /><input type="hidden" name="safetyData.events[2].internalRowId" value="52" id="safetyData.events[2].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="eventLanguage" class=" eventLanguage null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Reported Language</label>        <div class='internal' data-id="eventLanguage">    <select class="form-control   select2-box select2-lazy   " name="safetyData.events[2].reportedLanguage.id" data-from="languages" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="1" id="safetyData.events[2].reportedLanguage.id" ><option value="">Select</option></select>        </div></div>            <div id="eventTranslatedReaction" class="col-md-2 template-control  eventTranslatedReaction   " >        <label class='control-label lbl-elipsis'>Translated Reaction</label>        <div class='internal' data-id="eventTranslatedReaction">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.events[2].translatedReaction" value="" data-initial-value="" maxlength="250" data-field-id="eventTranslatedReaction" id="safetyData.events[2].translatedReaction" />            </div> </div>            <div id="eventReactionCoded" class="col-md-4 template-control  eventReactionCoded   " >        <label class='control-label lbl-elipsis'>Reaction (Coded)</label>        <div class='internal' data-id="eventReactionCoded">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.events[2].reactionCoded" value="Migraine headache" data-initial-value="Migraine headache" maxlength="250" data-field-id="eventReactionCoded" readonly="readonly" id="safetyData.events[2].reactionCoded" />            </div> </div>    <div id="eventHighlightedByReporter" class=" eventHighlightedByReporter null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Highlighted by Reporter</label>        <div class='internal' data-id="eventHighlightedByReporter">    <select class="form-control      " name="safetyData.events[2].highlightedByReporter.id" data-from="highlightedByReporters" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[2].highlightedByReporter.id" ><option value="" selected="selected">Select</option><option value="17" >Highlighted, NOT serious</option><option value="18" >Not highlighted, NOT serious</option><option value="19" >Highlighted, SERIOUS</option><option value="20" >Not highlighted, SERIOUS</option></select>        </div></div>    <div id="eventSeriousNess" class=" eventSeriousNess null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Seriousness Criteria</label>        <div class='internal' data-id="eventSeriousNess">    <select class="form-control select2-box  seriousnesses multiSelectSelect2Field wrapped-multiselect   " name="safetyData.events[2].seriousnesses.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="" id="safetyData.events[2].seriousnesses.id" ><option value="1" >Death</option><option value="2" >Life Threatening</option><option value="3" >Hospitalization</option><option value="4" >Disabling</option><option value="5" >Congenital Anomaly</option><option value="6" >Other Medically Important Condition</option></select>        </div></div>    <div id="eventStartDate" class="template-control eventStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventStartDate">        <input type="text" class="form-control   " name="safetyData.events[2].startDate.value" data-mandatory="false" id="safetyData.events[2].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[2].startDate.format" value="" id="safetyData.events[2].startDate.format" /></div></div>    <div id="eventEndDate" class="template-control eventEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventEndDate">        <input type="text" class="form-control   " name="safetyData.events[2].endDate.value" data-mandatory="false" id="safetyData.events[2].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[2].endDate.format" value="" id="safetyData.events[2].endDate.format" /></div></div>            <div id="eventDuration" class="col-md-2 template-control  eventDuration   " >        <label class='control-label lbl-elipsis'>Duration</label>        <div class='internal' data-id="eventDuration">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.events[2].duration.value" value="" data-initial-value="" maxlength="5" data-field-id="eventDuration" id="safetyData.events[2].duration.value" />        <input type="hidden" name="safetyData.events[2].duration.id" value="" id="safetyData.events[2].duration.id" />    </div> </div>    <div id="eventOutcomes" class=" eventOutcomes null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Outcome</label>        <div class='internal' data-id="eventOutcomes">    <select class="form-control   select2-box select2-lazy   " name="safetyData.events[2].outcome.id" data-from="outcomes" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[2].outcome.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="eventMedicallyConfirmed" class=" eventMedicallyConfirmed null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Medically Confirmed</label>        <div class='internal' data-id="eventMedicallyConfirmed">    <select class="form-control      " name="safetyData.events[2].medicallyConfirmed.id" data-from="medicallyConfirmed" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[2].medicallyConfirmed.id" ><option value="" selected="selected">Select</option><option value="21" >Yes</option><option value="22" >No</option></select>        </div></div>    <div id="eventCountry" class=" eventCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Country</label>        <div class='internal' data-id="eventCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.events[2].country.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="3" id="safetyData.events[2].country.id" ><option value="">Select</option></select>        </div></div>    <div id="eventHospitalizationStartDate" class="template-control eventHospitalizationStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Hospitalization Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventHospitalizationStartDate">        <input type="text" class="form-control  allowDateWithoutTime " name="safetyData.events[2].hospitalizationStartDate.value" data-mandatory="false" id="safetyData.events[2].hospitalizationStartDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[2].hospitalizationStartDate.format" value="" id="safetyData.events[2].hospitalizationStartDate.format" /></div></div>    <div id="eventHospitalizationEndDate" class="template-control eventHospitalizationEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Hospitalization End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventHospitalizationEndDate">        <input type="text" class="form-control  allowDateWithoutTime " name="safetyData.events[2].hospitalizationEndDate.value" data-mandatory="false" id="safetyData.events[2].hospitalizationEndDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[2].hospitalizationEndDate.format" value="" id="safetyData.events[2].hospitalizationEndDate.format" /></div></div><input type="hidden" name=safetyData.events[2].deleted value=false>            </div>        </div>    </div></div>                                                                                                                <div class="panel pv-section-record pv-event ui-sortable-handle panel-default "     id="event-section-3">    <div class="panel-heading">        <h4 class="panel-title">            <a data-toggle="collapse" data-header="Event-Section"               data-parent="#accordion-event" href="#event-section_3"               class="inner-repeatable" aria-expanded="true">                                    <span class="badge row-count badge-index"></span>Event-Section                            </a>                            <div class="configureFields pv-subhead-config">                    <a href="javascript:void(0);" data-target="pv-event" title="Remove this section"                       class="remove-section pull-right btn-del-panel event-del">                        <i class="md md-close event_3" aria-hidden="true"></i>                    </a>                </div>                    </h4>    </div>    <div class="panel-collapse collapse in inner-repeatable" aria-expanded="true"         id="event-section_3">        <div class="panel-body ">            <div class="form-group form-pv">                            <div id="eventReportedReaction" class=' col-md-4 required  template-control  eventReportedReaction' >                <label class='control-label lbl-elipsis'>Reported Reaction</label>        <div class='input-group internal inner-addon right-addon' data-id="eventReportedReaction">        <input type="text" class="form-control  eventNameBrowser meddraBrowser  " name="safetyData.events[3].reportedReaction" maxlength="250" value="tin" data-mandatory="true" data-mandatorySet="0" data-placement="top" data-browser-value="tin" data-browser-type="meddra" data-flag-target="eventReactionCoded" data-placeholder="" data-fieldId="eventReportedReaction" id="safetyData.events[3].reportedReaction" />                <input type="hidden" name="safetyData.events[3].lltCode" class="hidden-id" value="10073466" id="safetyData.events[3].lltCode" /><input type="hidden" name="safetyData.events[3].codedWithSearchString" value="tin" id="safetyData.events[3].codedWithSearchString" /><input type="hidden" name="safetyData.events[3].hierarchyStorageId" value="" id="safetyData.events[3].hierarchyStorageId" /><input type="hidden" name="safetyData.events[3].internalRowId" value="53" id="safetyData.events[3].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="eventLanguage" class=" eventLanguage null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Reported Language</label>        <div class='internal' data-id="eventLanguage">    <select class="form-control   select2-box select2-lazy   " name="safetyData.events[3].reportedLanguage.id" data-from="languages" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="1" id="safetyData.events[3].reportedLanguage.id" ><option value="">Select</option></select>        </div></div>            <div id="eventTranslatedReaction" class="col-md-2 template-control  eventTranslatedReaction   " >        <label class='control-label lbl-elipsis'>Translated Reaction</label>        <div class='internal' data-id="eventTranslatedReaction">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.events[3].translatedReaction" value="" data-initial-value="" maxlength="250" data-field-id="eventTranslatedReaction" id="safetyData.events[3].translatedReaction" />            </div> </div>            <div id="eventReactionCoded" class="col-md-4 template-control  eventReactionCoded   " >        <label class='control-label lbl-elipsis'>Reaction (Coded)</label>        <div class='internal' data-id="eventReactionCoded">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.events[3].reactionCoded" value="Tinea incognito" data-initial-value="Tinea incognito" maxlength="250" data-field-id="eventReactionCoded" readonly="readonly" id="safetyData.events[3].reactionCoded" />            </div> </div>    <div id="eventHighlightedByReporter" class=" eventHighlightedByReporter null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Highlighted by Reporter</label>        <div class='internal' data-id="eventHighlightedByReporter">    <select class="form-control      " name="safetyData.events[3].highlightedByReporter.id" data-from="highlightedByReporters" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[3].highlightedByReporter.id" ><option value="" selected="selected">Select</option><option value="17" >Highlighted, NOT serious</option><option value="18" >Not highlighted, NOT serious</option><option value="19" >Highlighted, SERIOUS</option><option value="20" >Not highlighted, SERIOUS</option></select>        </div></div>    <div id="eventSeriousNess" class=" eventSeriousNess null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Seriousness Criteria</label>        <div class='internal' data-id="eventSeriousNess">    <select class="form-control select2-box  seriousnesses multiSelectSelect2Field wrapped-multiselect   " name="safetyData.events[3].seriousnesses.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="" id="safetyData.events[3].seriousnesses.id" ><option value="1" >Death</option><option value="2" >Life Threatening</option><option value="3" >Hospitalization</option><option value="4" >Disabling</option><option value="5" >Congenital Anomaly</option><option value="6" >Other Medically Important Condition</option></select>        </div></div>    <div id="eventStartDate" class="template-control eventStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventStartDate">        <input type="text" class="form-control   " name="safetyData.events[3].startDate.value" data-mandatory="false" id="safetyData.events[3].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[3].startDate.format" value="" id="safetyData.events[3].startDate.format" /></div></div>    <div id="eventEndDate" class="template-control eventEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventEndDate">        <input type="text" class="form-control   " name="safetyData.events[3].endDate.value" data-mandatory="false" id="safetyData.events[3].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[3].endDate.format" value="" id="safetyData.events[3].endDate.format" /></div></div>            <div id="eventDuration" class="col-md-2 template-control  eventDuration   " >        <label class='control-label lbl-elipsis'>Duration</label>        <div class='internal' data-id="eventDuration">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.events[3].duration.value" value="" data-initial-value="" maxlength="5" data-field-id="eventDuration" id="safetyData.events[3].duration.value" />        <input type="hidden" name="safetyData.events[3].duration.id" value="" id="safetyData.events[3].duration.id" />    </div> </div>    <div id="eventOutcomes" class=" eventOutcomes null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Outcome</label>        <div class='internal' data-id="eventOutcomes">    <select class="form-control   select2-box select2-lazy   " name="safetyData.events[3].outcome.id" data-from="outcomes" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[3].outcome.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="eventMedicallyConfirmed" class=" eventMedicallyConfirmed null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Medically Confirmed</label>        <div class='internal' data-id="eventMedicallyConfirmed">    <select class="form-control      " name="safetyData.events[3].medicallyConfirmed.id" data-from="medicallyConfirmed" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[3].medicallyConfirmed.id" ><option value="" selected="selected">Select</option><option value="21" >Yes</option><option value="22" >No</option></select>        </div></div>    <div id="eventCountry" class=" eventCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Country</label>        <div class='internal' data-id="eventCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.events[3].country.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="3" id="safetyData.events[3].country.id" ><option value="">Select</option></select>        </div></div>    <div id="eventHospitalizationStartDate" class="template-control eventHospitalizationStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Hospitalization Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventHospitalizationStartDate">        <input type="text" class="form-control  allowDateWithoutTime " name="safetyData.events[3].hospitalizationStartDate.value" data-mandatory="false" id="safetyData.events[3].hospitalizationStartDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[3].hospitalizationStartDate.format" value="" id="safetyData.events[3].hospitalizationStartDate.format" /></div></div>    <div id="eventHospitalizationEndDate" class="template-control eventHospitalizationEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Hospitalization End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventHospitalizationEndDate">        <input type="text" class="form-control  allowDateWithoutTime " name="safetyData.events[3].hospitalizationEndDate.value" data-mandatory="false" id="safetyData.events[3].hospitalizationEndDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[3].hospitalizationEndDate.format" value="" id="safetyData.events[3].hospitalizationEndDate.format" /></div></div><input type="hidden" name=safetyData.events[3].deleted value=false>            </div>        </div>    </div></div>                                                                                                                <div class="panel pv-section-record pv-event ui-sortable-handle panel-default "     id="event-section-4">    <div class="panel-heading">        <h4 class="panel-title">            <a data-toggle="collapse" data-header="Event-Section"               data-parent="#accordion-event" href="#event-section_4"               class="inner-repeatable" aria-expanded="true">                                    <span class="badge row-count badge-index"></span>Event-Section                            </a>                            <div class="configureFields pv-subhead-config">                    <a href="javascript:void(0);" data-target="pv-event" title="Remove this section"                       class="remove-section pull-right btn-del-panel event-del">                        <i class="md md-close event_4" aria-hidden="true"></i>                    </a>                </div>                    </h4>    </div>    <div class="panel-collapse collapse in inner-repeatable" aria-expanded="true"         id="event-section_4">        <div class="panel-body ">            <div class="form-group form-pv">                            <div id="eventReportedReaction" class=' col-md-4 required  template-control  eventReportedReaction' >                <label class='control-label lbl-elipsis'>Reported Reaction</label>        <div class='input-group internal inner-addon right-addon' data-id="eventReportedReaction">        <input type="text" class="form-control  eventNameBrowser meddraBrowser  " name="safetyData.events[4].reportedReaction" maxlength="250" value="red" data-mandatory="true" data-mandatorySet="0" data-placement="top" data-browser-value="red" data-browser-type="meddra" data-flag-target="eventReactionCoded" data-placeholder="" data-fieldId="eventReportedReaction" id="safetyData.events[4].reportedReaction" />                <input type="hidden" name="safetyData.events[4].lltCode" class="hidden-id" value="10062748" id="safetyData.events[4].lltCode" /><input type="hidden" name="safetyData.events[4].codedWithSearchString" value="red" id="safetyData.events[4].codedWithSearchString" /><input type="hidden" name="safetyData.events[4].hierarchyStorageId" value="" id="safetyData.events[4].hierarchyStorageId" /><input type="hidden" name="safetyData.events[4].internalRowId" value="54" id="safetyData.events[4].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div>    <div id="eventLanguage" class=" eventLanguage null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Reported Language</label>        <div class='internal' data-id="eventLanguage">    <select class="form-control   select2-box select2-lazy   " name="safetyData.events[4].reportedLanguage.id" data-from="languages" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="1" id="safetyData.events[4].reportedLanguage.id" ><option value="">Select</option></select>        </div></div>            <div id="eventTranslatedReaction" class="col-md-2 template-control  eventTranslatedReaction   " >        <label class='control-label lbl-elipsis'>Translated Reaction</label>        <div class='internal' data-id="eventTranslatedReaction">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.events[4].translatedReaction" value="" data-initial-value="" maxlength="250" data-field-id="eventTranslatedReaction" id="safetyData.events[4].translatedReaction" />            </div> </div>            <div id="eventReactionCoded" class="col-md-4 template-control  eventReactionCoded   " >        <label class='control-label lbl-elipsis'>Reaction (Coded)</label>        <div class='internal' data-id="eventReactionCoded">        <input type="text" class="form-control   " data-mandatory="false" data-mandatorySet="0" name="safetyData.events[4].reactionCoded" value="Red blood cell analysis" data-initial-value="Red blood cell analysis" maxlength="250" data-field-id="eventReactionCoded" readonly="readonly" id="safetyData.events[4].reactionCoded" />            </div> </div>    <div id="eventHighlightedByReporter" class=" eventHighlightedByReporter null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Highlighted by Reporter</label>        <div class='internal' data-id="eventHighlightedByReporter">    <select class="form-control      " name="safetyData.events[4].highlightedByReporter.id" data-from="highlightedByReporters" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[4].highlightedByReporter.id" ><option value="" selected="selected">Select</option><option value="17" >Highlighted, NOT serious</option><option value="18" >Not highlighted, NOT serious</option><option value="19" >Highlighted, SERIOUS</option><option value="20" >Not highlighted, SERIOUS</option></select>        </div></div>    <div id="eventSeriousNess" class=" eventSeriousNess null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Seriousness Criteria</label>        <div class='internal' data-id="eventSeriousNess">    <select class="form-control select2-box  seriousnesses multiSelectSelect2Field wrapped-multiselect   " name="safetyData.events[4].seriousnesses.id" data-tabular="false" data-mandatorySet="0" data-placeholder="Choose" multiple="multiple" data-mandatory="false" data-value="" id="safetyData.events[4].seriousnesses.id" ><option value="1" >Death</option><option value="2" >Life Threatening</option><option value="3" >Hospitalization</option><option value="4" >Disabling</option><option value="5" >Congenital Anomaly</option><option value="6" >Other Medically Important Condition</option></select>        </div></div>    <div id="eventStartDate" class="template-control eventStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventStartDate">        <input type="text" class="form-control   " name="safetyData.events[4].startDate.value" data-mandatory="false" id="safetyData.events[4].startDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[4].startDate.format" value="" id="safetyData.events[4].startDate.format" /></div></div>    <div id="eventEndDate" class="template-control eventEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventEndDate">        <input type="text" class="form-control   " name="safetyData.events[4].endDate.value" data-mandatory="false" id="safetyData.events[4].endDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[4].endDate.format" value="" id="safetyData.events[4].endDate.format" /></div></div>            <div id="eventDuration" class="col-md-2 template-control  eventDuration   " >        <label class='control-label lbl-elipsis'>Duration</label>        <div class='internal' data-id="eventDuration">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.events[4].duration.value" value="" data-initial-value="" maxlength="5" data-field-id="eventDuration" id="safetyData.events[4].duration.value" />        <input type="hidden" name="safetyData.events[4].duration.id" value="" id="safetyData.events[4].duration.id" />    </div> </div>    <div id="eventOutcomes" class=" eventOutcomes null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Outcome</label>        <div class='internal' data-id="eventOutcomes">    <select class="form-control   select2-box select2-lazy   " name="safetyData.events[4].outcome.id" data-from="outcomes" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[4].outcome.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="eventMedicallyConfirmed" class=" eventMedicallyConfirmed null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Medically Confirmed</label>        <div class='internal' data-id="eventMedicallyConfirmed">    <select class="form-control      " name="safetyData.events[4].medicallyConfirmed.id" data-from="medicallyConfirmed" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.events[4].medicallyConfirmed.id" ><option value="" selected="selected">Select</option><option value="21" >Yes</option><option value="22" >No</option></select>        </div></div>    <div id="eventCountry" class=" eventCountry null template-control col-md-2  ">            <label class='control-label lbl-elipsis'>Country</label>        <div class='internal' data-id="eventCountry">    <select class="form-control   country select2-box select2-lazy   " name="safetyData.events[4].country.id" data-from="countries" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="3" id="safetyData.events[4].country.id" ><option value="">Select</option></select>        </div></div>    <div id="eventHospitalizationStartDate" class="template-control eventHospitalizationStartDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Hospitalization Start Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventHospitalizationStartDate">        <input type="text" class="form-control  allowDateWithoutTime " name="safetyData.events[4].hospitalizationStartDate.value" data-mandatory="false" id="safetyData.events[4].hospitalizationStartDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[4].hospitalizationStartDate.format" value="" id="safetyData.events[4].hospitalizationStartDate.format" /></div></div>    <div id="eventHospitalizationEndDate" class="template-control eventHospitalizationEndDate  col-md-2 ">            <label class='control-label lbl-elipsis'>Hospitalization End Date</label>    <div class="">    <div class="datepicker internal input-group date "         data-id="eventHospitalizationEndDate">        <input type="text" class="form-control  allowDateWithoutTime " name="safetyData.events[4].hospitalizationEndDate.value" data-mandatory="false" id="safetyData.events[4].hospitalizationEndDate.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MON-CCYY" data-precision="YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.events[4].hospitalizationEndDate.format" value="" id="safetyData.events[4].hospitalizationEndDate.format" /></div></div><input type="hidden" name=safetyData.events[4].deleted value=false>            </div>        </div>    </div></div>                                                                        </div>                </div>            </div>        </div>    </div>

                                                <!-- Test -->
                                                 
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-test">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#test" aria-expanded="false" class="collapsed sec-display-txt sectionTitle">                    Test(s)                </a>                                    <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#testTableSection" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#testTableSection" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>            <a href="javascript:void(0);"           class="pull-right btn-add-panel btn-addrow-top ic-sm " data-inner-sec=""           data-tabular="false" title="Add another section"           data-target="pvi-testSection">            <i class="md md-add" aria-hidden="true"></i>        </a>    </span>                                            </h4>        </div>        <div id="test" data-templateId="testTemplate-2"             class=" pv-main panel-collapse rxmain-container-content rxmain-container-show collapse"             aria-expanded="false" data-table="true">            <div class="row pv-section" data-templateId="testTemplate"     class="panel-collapse rxmain-container-content rxmain-container-show collapse pv-section"     aria-expanded="false">    <table class="table pv-labtest-grid-listview table-striped pv-inner-table m-b-0 " data-templateId="2">        <thead>        <tr>            <th class="num-col">#</th>            <th class="lt-col">                <div class="row">                    <div class="col-md-7">                        <label class="control-label lbl-elipsis" title="Test Name">Test Name                                                        <i class="fa fa-long-arrow-down" aria-hidden="true"></i>                            <a href="javascript:void(0);" data-tabular="true" data-target="pv-lab-test-row" data-insert="pviTestPanel" class="pv-ic addTestInTable btn-add-panel edit-lock" title="Add New Test">                                <i class="fa fa-flask" aria-hidden="true"><sup>+</sup></i>                            </a>                                                    </label>                    </div>                    <div class="col-md-5">                        <label class="control-label lbl-elipsis" title="Low-High">Low-High | Unit</label>                    </div>                </div>            </th>            <th class="rt-col">                <div class="row">                    <div class="col-md-2 pv-labtest-col-date">                        <label class="control-label lbl-elipsis" title="Test Date">Test Date                                                        <a href="javascript:void(0);" data-target="" data-insert="" title="Add Test Date" class="pv-ic addReportInTable edit-lock">                                <i class="fa fa-calendar-plus-o" aria-hidden="true"></i>                            </a> <i class="fa fa-long-arrow-down" aria-hidden="true"></i>                                                    </label>                    </div>                    <div class="col-md-3">                        <label class="control-label lbl-elipsis" title="Test Result">Test Result</label>                    </div>                    <div class="col-md-5">                        <label class="control-label lbl-elipsis" title="Comments">Comments</label>                    </div>                    <div class="pull-left"><label class="control-label lbl-elipsis" title="More Info">More Info</label></div>                </div>            </th>        </tr>        </thead>        <tbody class="pv-draggable-list ui-sortable [intake.common.dto.Test&#64;11fec62e, intake.common.dto.Test&#64;47bc3076, intake.common.dto.Test&#64;4e1f5c6e, intake.common.dto.Test&#64;3214c79a, intake.common.dto.Test&#64;55bca840, intake.common.dto.Test&#64;73a50d01, intake.common.dto.Test&#64;47edc337, intake.common.dto.Test&#64;53d1f447, intake.common.dto.Test&#64;631fa8d5, intake.common.dto.Test&#64;38096cb2, intake.common.dto.Test&#64;11d4f4ff, intake.common.dto.Test&#64;4d7b594e, intake.common.dto.Test&#64;53bc0934, intake.common.dto.Test&#64;2023830d, intake.common.dto.Test&#64;1666f8fa, intake.common.dto.Test&#64;1406251, intake.common.dto.Test&#64;32862ee4, intake.common.dto.Test&#64;e81e852, intake.common.dto.Test&#64;2f017050, intake.common.dto.Test&#64;2dd1dd0b]" id="testTableSection">                                                            <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-0">    <td class="serialNo">                    <span class="new-index badge-index row-count">                0            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[0].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[0].name.reactionCoded" value="With hydrocephalus, spina bifida, cervical region" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="With hydrocephalus, spina bifida, cervical region" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[0].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[0].name.lltCode" class="hidden-id" value="10047993" id="safetyData.tests[0].name.lltCode" /><input type="hidden" name="safetyData.tests[0].name.codedWithSearchString" value="wit" id="safetyData.tests[0].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[0].name.hierarchyStorageId" value="" id="safetyData.tests[0].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[0].name.reportedReaction" value="wit" id="safetyData.tests[0].name.reportedReaction" /><input type="hidden" name="safetyData.tests[0].internalRowId" value="16" id="safetyData.tests[0].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[0].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[0].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[0].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[0].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[0].normalLow" value="" id="safetyData.tests[0].normalLow" /><input type="hidden" name="safetyData.tests[0].normalHigh" value="" id="safetyData.tests[0].normalHigh" />        </div>    </div>    <div id="safetyData.tests[0].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[0].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[0].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[0].reports[0].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[0].reports[0].date.value" data-mandatory="false" id="safetyData.tests[0].reports[0].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[0].reports[0].internalRowId" value="" id="safetyData.tests[0].reports[0].internalRowId" /></div></div>    <div id="safetyData.tests[0].reports[0].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[0].reports[0].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[0].reports[0].result.value" />                        <input type="hidden" name="safetyData.tests[0].reports[0].result.id" value="" id="safetyData.tests[0].reports[0].result.id" />        </div>    </div>    <div id="safetyData.tests[0].reports[0].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[0].reports[0].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[0].reports[0].comments" />                                </div>    </div>            <div id="safetyData.tests[0].reports[0].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[0].reports[0].moreInfo">                <input type="checkbox" name="safetyData.tests[0].reports[0].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[0].reports[0].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_0" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-1">    <td class="serialNo">                    <span class="new-index badge-index row-count">                1            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[1].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[1].name.reactionCoded" value="Blocked tear duct congenital" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Blocked tear duct congenital" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[1].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[1].name.lltCode" class="hidden-id" value="10005276" id="safetyData.tests[1].name.lltCode" /><input type="hidden" name="safetyData.tests[1].name.codedWithSearchString" value="blo" id="safetyData.tests[1].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[1].name.hierarchyStorageId" value="" id="safetyData.tests[1].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[1].name.reportedReaction" value="blo" id="safetyData.tests[1].name.reportedReaction" /><input type="hidden" name="safetyData.tests[1].internalRowId" value="55" id="safetyData.tests[1].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[1].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[1].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[1].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[1].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[1].normalLow" value="" id="safetyData.tests[1].normalLow" /><input type="hidden" name="safetyData.tests[1].normalHigh" value="" id="safetyData.tests[1].normalHigh" />        </div>    </div>    <div id="safetyData.tests[1].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[1].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[1].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[1].reports[1].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[1].reports[1].date.value" data-mandatory="false" id="safetyData.tests[1].reports[1].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[1].reports[1].internalRowId" value="" id="safetyData.tests[1].reports[1].internalRowId" /></div></div>    <div id="safetyData.tests[1].reports[1].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[1].reports[1].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[1].reports[1].result.value" />                        <input type="hidden" name="safetyData.tests[1].reports[1].result.id" value="" id="safetyData.tests[1].reports[1].result.id" />        </div>    </div>    <div id="safetyData.tests[1].reports[1].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[1].reports[1].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[1].reports[1].comments" />                                </div>    </div>            <div id="safetyData.tests[1].reports[1].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[1].reports[1].moreInfo">                <input type="checkbox" name="safetyData.tests[1].reports[1].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[1].reports[1].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_1" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-2">    <td class="serialNo">                    <span class="new-index badge-index row-count">                2            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[2].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[2].name.reactionCoded" value="Iron binding capacity total low" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Iron binding capacity total low" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[2].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[2].name.lltCode" class="hidden-id" value="10022966" id="safetyData.tests[2].name.lltCode" /><input type="hidden" name="safetyData.tests[2].name.codedWithSearchString" value="iro" id="safetyData.tests[2].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[2].name.hierarchyStorageId" value="" id="safetyData.tests[2].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[2].name.reportedReaction" value="iro" id="safetyData.tests[2].name.reportedReaction" /><input type="hidden" name="safetyData.tests[2].internalRowId" value="58" id="safetyData.tests[2].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[2].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[2].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[2].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[2].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[2].normalLow" value="" id="safetyData.tests[2].normalLow" /><input type="hidden" name="safetyData.tests[2].normalHigh" value="" id="safetyData.tests[2].normalHigh" />        </div>    </div>    <div id="safetyData.tests[2].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[2].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[2].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[2].reports[2].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[2].reports[2].date.value" data-mandatory="false" id="safetyData.tests[2].reports[2].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[2].reports[2].internalRowId" value="" id="safetyData.tests[2].reports[2].internalRowId" /></div></div>    <div id="safetyData.tests[2].reports[2].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[2].reports[2].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[2].reports[2].result.value" />                        <input type="hidden" name="safetyData.tests[2].reports[2].result.id" value="" id="safetyData.tests[2].reports[2].result.id" />        </div>    </div>    <div id="safetyData.tests[2].reports[2].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[2].reports[2].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[2].reports[2].comments" />                                </div>    </div>            <div id="safetyData.tests[2].reports[2].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[2].reports[2].moreInfo">                <input type="checkbox" name="safetyData.tests[2].reports[2].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[2].reports[2].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_2" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-3">    <td class="serialNo">                    <span class="new-index badge-index row-count">                3            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[3].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[3].name.reactionCoded" value="Thyreostatic therapy" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Thyreostatic therapy" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[3].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[3].name.lltCode" class="hidden-id" value="10065359" id="safetyData.tests[3].name.lltCode" /><input type="hidden" name="safetyData.tests[3].name.codedWithSearchString" value="thy" id="safetyData.tests[3].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[3].name.hierarchyStorageId" value="" id="safetyData.tests[3].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[3].name.reportedReaction" value="thy" id="safetyData.tests[3].name.reportedReaction" /><input type="hidden" name="safetyData.tests[3].internalRowId" value="61" id="safetyData.tests[3].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[3].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[3].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[3].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[3].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[3].normalLow" value="" id="safetyData.tests[3].normalLow" /><input type="hidden" name="safetyData.tests[3].normalHigh" value="" id="safetyData.tests[3].normalHigh" />        </div>    </div>    <div id="safetyData.tests[3].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[3].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[3].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[3].reports[3].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[3].reports[3].date.value" data-mandatory="false" id="safetyData.tests[3].reports[3].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[3].reports[3].internalRowId" value="" id="safetyData.tests[3].reports[3].internalRowId" /></div></div>    <div id="safetyData.tests[3].reports[3].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[3].reports[3].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[3].reports[3].result.value" />                        <input type="hidden" name="safetyData.tests[3].reports[3].result.id" value="" id="safetyData.tests[3].reports[3].result.id" />        </div>    </div>    <div id="safetyData.tests[3].reports[3].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[3].reports[3].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[3].reports[3].comments" />                                </div>    </div>            <div id="safetyData.tests[3].reports[3].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[3].reports[3].moreInfo">                <input type="checkbox" name="safetyData.tests[3].reports[3].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[3].reports[3].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_3" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-4">    <td class="serialNo">                    <span class="new-index badge-index row-count">                4            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[4].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[4].name.reactionCoded" value="Neointimal hyperplasia" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Neointimal hyperplasia" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[4].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[4].name.lltCode" class="hidden-id" value="10076851" id="safetyData.tests[4].name.lltCode" /><input type="hidden" name="safetyData.tests[4].name.codedWithSearchString" value="neo" id="safetyData.tests[4].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[4].name.hierarchyStorageId" value="" id="safetyData.tests[4].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[4].name.reportedReaction" value="neo" id="safetyData.tests[4].name.reportedReaction" /><input type="hidden" name="safetyData.tests[4].internalRowId" value="64" id="safetyData.tests[4].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[4].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[4].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[4].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[4].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[4].normalLow" value="" id="safetyData.tests[4].normalLow" /><input type="hidden" name="safetyData.tests[4].normalHigh" value="" id="safetyData.tests[4].normalHigh" />        </div>    </div>    <div id="safetyData.tests[4].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[4].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[4].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[4].reports[4].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[4].reports[4].date.value" data-mandatory="false" id="safetyData.tests[4].reports[4].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[4].reports[4].internalRowId" value="" id="safetyData.tests[4].reports[4].internalRowId" /></div></div>    <div id="safetyData.tests[4].reports[4].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[4].reports[4].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[4].reports[4].result.value" />                        <input type="hidden" name="safetyData.tests[4].reports[4].result.id" value="" id="safetyData.tests[4].reports[4].result.id" />        </div>    </div>    <div id="safetyData.tests[4].reports[4].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[4].reports[4].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[4].reports[4].comments" />                                </div>    </div>            <div id="safetyData.tests[4].reports[4].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[4].reports[4].moreInfo">                <input type="checkbox" name="safetyData.tests[4].reports[4].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[4].reports[4].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_4" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-5">    <td class="serialNo">                    <span class="new-index badge-index row-count">                5            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[5].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[5].name.reactionCoded" value="Blue baby syndrome" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Blue baby syndrome" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[5].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[5].name.lltCode" class="hidden-id" value="10069412" id="safetyData.tests[5].name.lltCode" /><input type="hidden" name="safetyData.tests[5].name.codedWithSearchString" value="blue" id="safetyData.tests[5].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[5].name.hierarchyStorageId" value="" id="safetyData.tests[5].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[5].name.reportedReaction" value="blue" id="safetyData.tests[5].name.reportedReaction" /><input type="hidden" name="safetyData.tests[5].internalRowId" value="67" id="safetyData.tests[5].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[5].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[5].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[5].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[5].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[5].normalLow" value="" id="safetyData.tests[5].normalLow" /><input type="hidden" name="safetyData.tests[5].normalHigh" value="" id="safetyData.tests[5].normalHigh" />        </div>    </div>    <div id="safetyData.tests[5].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[5].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[5].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[5].reports[5].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[5].reports[5].date.value" data-mandatory="false" id="safetyData.tests[5].reports[5].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[5].reports[5].internalRowId" value="" id="safetyData.tests[5].reports[5].internalRowId" /></div></div>    <div id="safetyData.tests[5].reports[5].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[5].reports[5].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[5].reports[5].result.value" />                        <input type="hidden" name="safetyData.tests[5].reports[5].result.id" value="" id="safetyData.tests[5].reports[5].result.id" />        </div>    </div>    <div id="safetyData.tests[5].reports[5].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[5].reports[5].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[5].reports[5].comments" />                                </div>    </div>            <div id="safetyData.tests[5].reports[5].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[5].reports[5].moreInfo">                <input type="checkbox" name="safetyData.tests[5].reports[5].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[5].reports[5].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_5" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-6">    <td class="serialNo">                    <span class="new-index badge-index row-count">                6            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[6].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[6].name.reactionCoded" value="Brittle teeth" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Brittle teeth" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[6].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[6].name.lltCode" class="hidden-id" value="10006374" id="safetyData.tests[6].name.lltCode" /><input type="hidden" name="safetyData.tests[6].name.codedWithSearchString" value="teet" id="safetyData.tests[6].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[6].name.hierarchyStorageId" value="" id="safetyData.tests[6].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[6].name.reportedReaction" value="teet" id="safetyData.tests[6].name.reportedReaction" /><input type="hidden" name="safetyData.tests[6].internalRowId" value="70" id="safetyData.tests[6].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[6].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[6].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[6].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[6].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[6].normalLow" value="" id="safetyData.tests[6].normalLow" /><input type="hidden" name="safetyData.tests[6].normalHigh" value="" id="safetyData.tests[6].normalHigh" />        </div>    </div>    <div id="safetyData.tests[6].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[6].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[6].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[6].reports[6].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[6].reports[6].date.value" data-mandatory="false" id="safetyData.tests[6].reports[6].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[6].reports[6].internalRowId" value="" id="safetyData.tests[6].reports[6].internalRowId" /></div></div>    <div id="safetyData.tests[6].reports[6].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[6].reports[6].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[6].reports[6].result.value" />                        <input type="hidden" name="safetyData.tests[6].reports[6].result.id" value="" id="safetyData.tests[6].reports[6].result.id" />        </div>    </div>    <div id="safetyData.tests[6].reports[6].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[6].reports[6].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[6].reports[6].comments" />                                </div>    </div>            <div id="safetyData.tests[6].reports[6].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[6].reports[6].moreInfo">                <input type="checkbox" name="safetyData.tests[6].reports[6].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[6].reports[6].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_6" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-7">    <td class="serialNo">                    <span class="new-index badge-index row-count">                7            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[7].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[7].name.reactionCoded" value="Black colored sweating" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Black colored sweating" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[7].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[7].name.lltCode" class="hidden-id" value="10004970" id="safetyData.tests[7].name.lltCode" /><input type="hidden" name="safetyData.tests[7].name.codedWithSearchString" value="bla" id="safetyData.tests[7].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[7].name.hierarchyStorageId" value="" id="safetyData.tests[7].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[7].name.reportedReaction" value="bla" id="safetyData.tests[7].name.reportedReaction" /><input type="hidden" name="safetyData.tests[7].internalRowId" value="73" id="safetyData.tests[7].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[7].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[7].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[7].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[7].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[7].normalLow" value="" id="safetyData.tests[7].normalLow" /><input type="hidden" name="safetyData.tests[7].normalHigh" value="" id="safetyData.tests[7].normalHigh" />        </div>    </div>    <div id="safetyData.tests[7].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[7].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[7].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[7].reports[7].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[7].reports[7].date.value" data-mandatory="false" id="safetyData.tests[7].reports[7].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[7].reports[7].internalRowId" value="" id="safetyData.tests[7].reports[7].internalRowId" /></div></div>    <div id="safetyData.tests[7].reports[7].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[7].reports[7].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[7].reports[7].result.value" />                        <input type="hidden" name="safetyData.tests[7].reports[7].result.id" value="" id="safetyData.tests[7].reports[7].result.id" />        </div>    </div>    <div id="safetyData.tests[7].reports[7].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[7].reports[7].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[7].reports[7].comments" />                                </div>    </div>            <div id="safetyData.tests[7].reports[7].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[7].reports[7].moreInfo">                <input type="checkbox" name="safetyData.tests[7].reports[7].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[7].reports[7].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_7" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-8">    <td class="serialNo">                    <span class="new-index badge-index row-count">                8            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[8].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[8].name.reactionCoded" value="Fire accident" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Fire accident" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[8].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[8].name.lltCode" class="hidden-id" value="10072097" id="safetyData.tests[8].name.lltCode" /><input type="hidden" name="safetyData.tests[8].name.codedWithSearchString" value="fire" id="safetyData.tests[8].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[8].name.hierarchyStorageId" value="" id="safetyData.tests[8].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[8].name.reportedReaction" value="fire" id="safetyData.tests[8].name.reportedReaction" /><input type="hidden" name="safetyData.tests[8].internalRowId" value="76" id="safetyData.tests[8].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[8].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[8].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[8].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[8].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[8].normalLow" value="" id="safetyData.tests[8].normalLow" /><input type="hidden" name="safetyData.tests[8].normalHigh" value="" id="safetyData.tests[8].normalHigh" />        </div>    </div>    <div id="safetyData.tests[8].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[8].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[8].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[8].reports[8].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[8].reports[8].date.value" data-mandatory="false" id="safetyData.tests[8].reports[8].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[8].reports[8].internalRowId" value="" id="safetyData.tests[8].reports[8].internalRowId" /></div></div>    <div id="safetyData.tests[8].reports[8].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[8].reports[8].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[8].reports[8].result.value" />                        <input type="hidden" name="safetyData.tests[8].reports[8].result.id" value="" id="safetyData.tests[8].reports[8].result.id" />        </div>    </div>    <div id="safetyData.tests[8].reports[8].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[8].reports[8].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[8].reports[8].comments" />                                </div>    </div>            <div id="safetyData.tests[8].reports[8].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[8].reports[8].moreInfo">                <input type="checkbox" name="safetyData.tests[8].reports[8].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[8].reports[8].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_8" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-9">    <td class="serialNo">                    <span class="new-index badge-index row-count">                9            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[9].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[9].name.reactionCoded" value="Dependence addictive" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Dependence addictive" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[9].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[9].name.lltCode" class="hidden-id" value="10012336" id="safetyData.tests[9].name.lltCode" /><input type="hidden" name="safetyData.tests[9].name.codedWithSearchString" value="dep" id="safetyData.tests[9].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[9].name.hierarchyStorageId" value="" id="safetyData.tests[9].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[9].name.reportedReaction" value="dep" id="safetyData.tests[9].name.reportedReaction" /><input type="hidden" name="safetyData.tests[9].internalRowId" value="79" id="safetyData.tests[9].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[9].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[9].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[9].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[9].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[9].normalLow" value="" id="safetyData.tests[9].normalLow" /><input type="hidden" name="safetyData.tests[9].normalHigh" value="" id="safetyData.tests[9].normalHigh" />        </div>    </div>    <div id="safetyData.tests[9].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[9].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[9].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[9].reports[9].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[9].reports[9].date.value" data-mandatory="false" id="safetyData.tests[9].reports[9].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[9].reports[9].internalRowId" value="" id="safetyData.tests[9].reports[9].internalRowId" /></div></div>    <div id="safetyData.tests[9].reports[9].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[9].reports[9].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[9].reports[9].result.value" />                        <input type="hidden" name="safetyData.tests[9].reports[9].result.id" value="" id="safetyData.tests[9].reports[9].result.id" />        </div>    </div>    <div id="safetyData.tests[9].reports[9].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[9].reports[9].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[9].reports[9].comments" />                                </div>    </div>            <div id="safetyData.tests[9].reports[9].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[9].reports[9].moreInfo">                <input type="checkbox" name="safetyData.tests[9].reports[9].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[9].reports[9].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_9" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-10">    <td class="serialNo">                    <span class="new-index badge-index row-count">                10            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[10].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[10].name.reactionCoded" value="Marantic endocarditis" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Marantic endocarditis" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[10].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[10].name.lltCode" class="hidden-id" value="10058147" id="safetyData.tests[10].name.lltCode" /><input type="hidden" name="safetyData.tests[10].name.codedWithSearchString" value="mar" id="safetyData.tests[10].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[10].name.hierarchyStorageId" value="" id="safetyData.tests[10].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[10].name.reportedReaction" value="mar" id="safetyData.tests[10].name.reportedReaction" /><input type="hidden" name="safetyData.tests[10].internalRowId" value="82" id="safetyData.tests[10].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[10].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[10].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[10].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[10].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[10].normalLow" value="" id="safetyData.tests[10].normalLow" /><input type="hidden" name="safetyData.tests[10].normalHigh" value="" id="safetyData.tests[10].normalHigh" />        </div>    </div>    <div id="safetyData.tests[10].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[10].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[10].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[10].reports[10].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[10].reports[10].date.value" data-mandatory="false" id="safetyData.tests[10].reports[10].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[10].reports[10].internalRowId" value="" id="safetyData.tests[10].reports[10].internalRowId" /></div></div>    <div id="safetyData.tests[10].reports[10].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[10].reports[10].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[10].reports[10].result.value" />                        <input type="hidden" name="safetyData.tests[10].reports[10].result.id" value="" id="safetyData.tests[10].reports[10].result.id" />        </div>    </div>    <div id="safetyData.tests[10].reports[10].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[10].reports[10].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[10].reports[10].comments" />                                </div>    </div>            <div id="safetyData.tests[10].reports[10].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[10].reports[10].moreInfo">                <input type="checkbox" name="safetyData.tests[10].reports[10].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[10].reports[10].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_10" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-11">    <td class="serialNo">                    <span class="new-index badge-index row-count">                11            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[11].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[11].name.reactionCoded" value="Digestive tract X-ray NOS normal" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Digestive tract X-ray NOS normal" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[11].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[11].name.lltCode" class="hidden-id" value="10012987" id="safetyData.tests[11].name.lltCode" /><input type="hidden" name="safetyData.tests[11].name.codedWithSearchString" value="dig" id="safetyData.tests[11].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[11].name.hierarchyStorageId" value="" id="safetyData.tests[11].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[11].name.reportedReaction" value="dig" id="safetyData.tests[11].name.reportedReaction" /><input type="hidden" name="safetyData.tests[11].internalRowId" value="85" id="safetyData.tests[11].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[11].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[11].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[11].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[11].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[11].normalLow" value="" id="safetyData.tests[11].normalLow" /><input type="hidden" name="safetyData.tests[11].normalHigh" value="" id="safetyData.tests[11].normalHigh" />        </div>    </div>    <div id="safetyData.tests[11].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[11].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[11].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[11].reports[11].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[11].reports[11].date.value" data-mandatory="false" id="safetyData.tests[11].reports[11].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[11].reports[11].internalRowId" value="" id="safetyData.tests[11].reports[11].internalRowId" /></div></div>    <div id="safetyData.tests[11].reports[11].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[11].reports[11].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[11].reports[11].result.value" />                        <input type="hidden" name="safetyData.tests[11].reports[11].result.id" value="" id="safetyData.tests[11].reports[11].result.id" />        </div>    </div>    <div id="safetyData.tests[11].reports[11].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[11].reports[11].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[11].reports[11].comments" />                                </div>    </div>            <div id="safetyData.tests[11].reports[11].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[11].reports[11].moreInfo">                <input type="checkbox" name="safetyData.tests[11].reports[11].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[11].reports[11].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_11" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-12">    <td class="serialNo">                    <span class="new-index badge-index row-count">                12            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[12].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[12].name.reactionCoded" value="Tri-iodothyronine free abnormal" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Tri-iodothyronine free abnormal" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[12].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[12].name.lltCode" class="hidden-id" value="10053794" id="safetyData.tests[12].name.lltCode" /><input type="hidden" name="safetyData.tests[12].name.codedWithSearchString" value="tri" id="safetyData.tests[12].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[12].name.hierarchyStorageId" value="" id="safetyData.tests[12].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[12].name.reportedReaction" value="tri" id="safetyData.tests[12].name.reportedReaction" /><input type="hidden" name="safetyData.tests[12].internalRowId" value="88" id="safetyData.tests[12].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[12].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[12].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[12].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[12].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[12].normalLow" value="" id="safetyData.tests[12].normalLow" /><input type="hidden" name="safetyData.tests[12].normalHigh" value="" id="safetyData.tests[12].normalHigh" />        </div>    </div>    <div id="safetyData.tests[12].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[12].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[12].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[12].reports[12].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[12].reports[12].date.value" data-mandatory="false" id="safetyData.tests[12].reports[12].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[12].reports[12].internalRowId" value="" id="safetyData.tests[12].reports[12].internalRowId" /></div></div>    <div id="safetyData.tests[12].reports[12].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[12].reports[12].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[12].reports[12].result.value" />                        <input type="hidden" name="safetyData.tests[12].reports[12].result.id" value="" id="safetyData.tests[12].reports[12].result.id" />        </div>    </div>    <div id="safetyData.tests[12].reports[12].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[12].reports[12].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[12].reports[12].comments" />                                </div>    </div>            <div id="safetyData.tests[12].reports[12].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[12].reports[12].moreInfo">                <input type="checkbox" name="safetyData.tests[12].reports[12].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[12].reports[12].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_12" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-13">    <td class="serialNo">                    <span class="new-index badge-index row-count">                13            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[13].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[13].name.reactionCoded" value="TSH decrease" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="TSH decrease" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[13].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[13].name.lltCode" class="hidden-id" value="10044714" id="safetyData.tests[13].name.lltCode" /><input type="hidden" name="safetyData.tests[13].name.codedWithSearchString" value="tsh" id="safetyData.tests[13].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[13].name.hierarchyStorageId" value="" id="safetyData.tests[13].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[13].name.reportedReaction" value="tsh" id="safetyData.tests[13].name.reportedReaction" /><input type="hidden" name="safetyData.tests[13].internalRowId" value="91" id="safetyData.tests[13].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[13].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[13].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[13].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[13].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[13].normalLow" value="" id="safetyData.tests[13].normalLow" /><input type="hidden" name="safetyData.tests[13].normalHigh" value="" id="safetyData.tests[13].normalHigh" />        </div>    </div>    <div id="safetyData.tests[13].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[13].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[13].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[13].reports[13].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[13].reports[13].date.value" data-mandatory="false" id="safetyData.tests[13].reports[13].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[13].reports[13].internalRowId" value="" id="safetyData.tests[13].reports[13].internalRowId" /></div></div>    <div id="safetyData.tests[13].reports[13].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[13].reports[13].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[13].reports[13].result.value" />                        <input type="hidden" name="safetyData.tests[13].reports[13].result.id" value="" id="safetyData.tests[13].reports[13].result.id" />        </div>    </div>    <div id="safetyData.tests[13].reports[13].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[13].reports[13].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[13].reports[13].comments" />                                </div>    </div>            <div id="safetyData.tests[13].reports[13].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[13].reports[13].moreInfo">                <input type="checkbox" name="safetyData.tests[13].reports[13].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[13].reports[13].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_13" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-14">    <td class="serialNo">                    <span class="new-index badge-index row-count">                14            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[14].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[14].name.reactionCoded" value="T3 normal" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="T3 normal" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[14].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[14].name.lltCode" class="hidden-id" value="10043054" id="safetyData.tests[14].name.lltCode" /><input type="hidden" name="safetyData.tests[14].name.codedWithSearchString" value="t3" id="safetyData.tests[14].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[14].name.hierarchyStorageId" value="" id="safetyData.tests[14].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[14].name.reportedReaction" value="t3" id="safetyData.tests[14].name.reportedReaction" /><input type="hidden" name="safetyData.tests[14].internalRowId" value="94" id="safetyData.tests[14].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[14].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[14].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[14].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[14].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[14].normalLow" value="" id="safetyData.tests[14].normalLow" /><input type="hidden" name="safetyData.tests[14].normalHigh" value="" id="safetyData.tests[14].normalHigh" />        </div>    </div>    <div id="safetyData.tests[14].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[14].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[14].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[14].reports[14].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[14].reports[14].date.value" data-mandatory="false" id="safetyData.tests[14].reports[14].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[14].reports[14].internalRowId" value="" id="safetyData.tests[14].reports[14].internalRowId" /></div></div>    <div id="safetyData.tests[14].reports[14].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[14].reports[14].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[14].reports[14].result.value" />                        <input type="hidden" name="safetyData.tests[14].reports[14].result.id" value="" id="safetyData.tests[14].reports[14].result.id" />        </div>    </div>    <div id="safetyData.tests[14].reports[14].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[14].reports[14].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[14].reports[14].comments" />                                </div>    </div>            <div id="safetyData.tests[14].reports[14].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[14].reports[14].moreInfo">                <input type="checkbox" name="safetyData.tests[14].reports[14].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[14].reports[14].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_14" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-15">    <td class="serialNo">                    <span class="new-index badge-index row-count">                15            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[15].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[15].name.reactionCoded" value="Iodide intoxication" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Iodide intoxication" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[15].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[15].name.lltCode" class="hidden-id" value="10022902" id="safetyData.tests[15].name.lltCode" /><input type="hidden" name="safetyData.tests[15].name.codedWithSearchString" value="iod" id="safetyData.tests[15].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[15].name.hierarchyStorageId" value="" id="safetyData.tests[15].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[15].name.reportedReaction" value="iod" id="safetyData.tests[15].name.reportedReaction" /><input type="hidden" name="safetyData.tests[15].internalRowId" value="97" id="safetyData.tests[15].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[15].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[15].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[15].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[15].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[15].normalLow" value="" id="safetyData.tests[15].normalLow" /><input type="hidden" name="safetyData.tests[15].normalHigh" value="" id="safetyData.tests[15].normalHigh" />        </div>    </div>    <div id="safetyData.tests[15].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[15].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[15].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[15].reports[15].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[15].reports[15].date.value" data-mandatory="false" id="safetyData.tests[15].reports[15].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[15].reports[15].internalRowId" value="" id="safetyData.tests[15].reports[15].internalRowId" /></div></div>    <div id="safetyData.tests[15].reports[15].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[15].reports[15].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[15].reports[15].result.value" />                        <input type="hidden" name="safetyData.tests[15].reports[15].result.id" value="" id="safetyData.tests[15].reports[15].result.id" />        </div>    </div>    <div id="safetyData.tests[15].reports[15].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[15].reports[15].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[15].reports[15].comments" />                                </div>    </div>            <div id="safetyData.tests[15].reports[15].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[15].reports[15].moreInfo">                <input type="checkbox" name="safetyData.tests[15].reports[15].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[15].reports[15].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_15" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-16">    <td class="serialNo">                    <span class="new-index badge-index row-count">                16            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[16].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[16].name.reactionCoded" value="Flu prevention" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Flu prevention" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[16].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[16].name.lltCode" class="hidden-id" value="10016792" id="safetyData.tests[16].name.lltCode" /><input type="hidden" name="safetyData.tests[16].name.codedWithSearchString" value="flu" id="safetyData.tests[16].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[16].name.hierarchyStorageId" value="" id="safetyData.tests[16].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[16].name.reportedReaction" value="flu" id="safetyData.tests[16].name.reportedReaction" /><input type="hidden" name="safetyData.tests[16].internalRowId" value="100" id="safetyData.tests[16].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[16].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[16].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[16].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[16].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[16].normalLow" value="" id="safetyData.tests[16].normalLow" /><input type="hidden" name="safetyData.tests[16].normalHigh" value="" id="safetyData.tests[16].normalHigh" />        </div>    </div>    <div id="safetyData.tests[16].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[16].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[16].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[16].reports[16].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[16].reports[16].date.value" data-mandatory="false" id="safetyData.tests[16].reports[16].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[16].reports[16].internalRowId" value="" id="safetyData.tests[16].reports[16].internalRowId" /></div></div>    <div id="safetyData.tests[16].reports[16].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[16].reports[16].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[16].reports[16].result.value" />                        <input type="hidden" name="safetyData.tests[16].reports[16].result.id" value="" id="safetyData.tests[16].reports[16].result.id" />        </div>    </div>    <div id="safetyData.tests[16].reports[16].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[16].reports[16].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[16].reports[16].comments" />                                </div>    </div>            <div id="safetyData.tests[16].reports[16].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[16].reports[16].moreInfo">                <input type="checkbox" name="safetyData.tests[16].reports[16].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[16].reports[16].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_16" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-17">    <td class="serialNo">                    <span class="new-index badge-index row-count">                17            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[17].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[17].name.reactionCoded" value="Body image disorder" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Body image disorder" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[17].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[17].name.lltCode" class="hidden-id" value="10005892" id="safetyData.tests[17].name.lltCode" /><input type="hidden" name="safetyData.tests[17].name.codedWithSearchString" value="bod" id="safetyData.tests[17].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[17].name.hierarchyStorageId" value="" id="safetyData.tests[17].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[17].name.reportedReaction" value="bod" id="safetyData.tests[17].name.reportedReaction" /><input type="hidden" name="safetyData.tests[17].internalRowId" value="103" id="safetyData.tests[17].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[17].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[17].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[17].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[17].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[17].normalLow" value="" id="safetyData.tests[17].normalLow" /><input type="hidden" name="safetyData.tests[17].normalHigh" value="" id="safetyData.tests[17].normalHigh" />        </div>    </div>    <div id="safetyData.tests[17].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[17].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[17].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[17].reports[17].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[17].reports[17].date.value" data-mandatory="false" id="safetyData.tests[17].reports[17].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[17].reports[17].internalRowId" value="" id="safetyData.tests[17].reports[17].internalRowId" /></div></div>    <div id="safetyData.tests[17].reports[17].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[17].reports[17].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[17].reports[17].result.value" />                        <input type="hidden" name="safetyData.tests[17].reports[17].result.id" value="" id="safetyData.tests[17].reports[17].result.id" />        </div>    </div>    <div id="safetyData.tests[17].reports[17].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[17].reports[17].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[17].reports[17].comments" />                                </div>    </div>            <div id="safetyData.tests[17].reports[17].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[17].reports[17].moreInfo">                <input type="checkbox" name="safetyData.tests[17].reports[17].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[17].reports[17].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_17" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-18">    <td class="serialNo">                    <span class="new-index badge-index row-count">                18            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[18].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[18].name.reactionCoded" value="Factor V Leiden carrier" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Factor V Leiden carrier" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[18].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[18].name.lltCode" class="hidden-id" value="10075652" id="safetyData.tests[18].name.lltCode" /><input type="hidden" name="safetyData.tests[18].name.codedWithSearchString" value="den" id="safetyData.tests[18].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[18].name.hierarchyStorageId" value="" id="safetyData.tests[18].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[18].name.reportedReaction" value="den" id="safetyData.tests[18].name.reportedReaction" /><input type="hidden" name="safetyData.tests[18].internalRowId" value="106" id="safetyData.tests[18].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[18].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[18].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[18].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[18].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[18].normalLow" value="" id="safetyData.tests[18].normalLow" /><input type="hidden" name="safetyData.tests[18].normalHigh" value="" id="safetyData.tests[18].normalHigh" />        </div>    </div>    <div id="safetyData.tests[18].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[18].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[18].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[18].reports[18].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[18].reports[18].date.value" data-mandatory="false" id="safetyData.tests[18].reports[18].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[18].reports[18].internalRowId" value="" id="safetyData.tests[18].reports[18].internalRowId" /></div></div>    <div id="safetyData.tests[18].reports[18].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[18].reports[18].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[18].reports[18].result.value" />                        <input type="hidden" name="safetyData.tests[18].reports[18].result.id" value="" id="safetyData.tests[18].reports[18].result.id" />        </div>    </div>    <div id="safetyData.tests[18].reports[18].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[18].reports[18].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[18].reports[18].comments" />                                </div>    </div>            <div id="safetyData.tests[18].reports[18].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[18].reports[18].moreInfo">                <input type="checkbox" name="safetyData.tests[18].reports[18].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[18].reports[18].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_18" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    <tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-19">    <td class="serialNo">                    <span class="new-index badge-index row-count">                19            </span>                        <div class="del-test hide">            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">                <i class="md md-close delTestIcon" aria-hidden="true"></i>            </a>        </div>            </td>    <td class="testName">            <div id="safetyData.tests[19].name.reactionCoded" class='col-md-7   template-control  testName'>        <div class="input-group internal">            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[19].name.reactionCoded" value="Yellow nail syndrome" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Yellow nail syndrome" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[19].name.reactionCoded" />                        <input type="hidden" name="safetyData.tests[19].name.lltCode" class="hidden-id" value="10048244" id="safetyData.tests[19].name.lltCode" /><input type="hidden" name="safetyData.tests[19].name.codedWithSearchString" value="yellow" id="safetyData.tests[19].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[19].name.hierarchyStorageId" value="" id="safetyData.tests[19].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[19].name.reportedReaction" value="yellow" id="safetyData.tests[19].name.reportedReaction" /><input type="hidden" name="safetyData.tests[19].internalRowId" value="109" id="safetyData.tests[19].internalRowId" />            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">                <i class="glyphicon glyphicon-search"></i>            </span>        </div>    </div><input type="hidden" name=safetyData.tests[19].deleted value=false>        <div class="col-md-5 testUnits test-has-name">                <div id="safetyData.tests[19].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">        <div class='internal' data-id="testNormalLowHigh">            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[19].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[19].normalLowHigh" />                        <input type="hidden" name="safetyData.tests[19].normalLow" value="" id="safetyData.tests[19].normalLow" /><input type="hidden" name="safetyData.tests[19].normalHigh" value="" id="safetyData.tests[19].normalHigh" />        </div>    </div>    <div id="safetyData.tests[19].unit.id" class=" testUnit null template-control col-md-7  ">        <div class='internal' data-id="testUnit">    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[19].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[19].unit.id" ><option value="" selected="selected">Select</option></select>        </div></div>        </div>    </td>    <td class="testReportRow testReports">                    <div class="row test-date-row"  data-reportNo="0">                    <div id="safetyData.tests[19].reports[19].date.value" class="template-control testDate  col-md-2 ">    <div class="">    <div class="datepicker internal input-group date "         data-id="testDate">        <input type="text" class="form-control   " name="safetyData.tests[19].reports[19].date.value" data-mandatory="false" id="safetyData.tests[19].reports[19].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.tests[19].reports[19].internalRowId" value="" id="safetyData.tests[19].reports[19].internalRowId" /></div></div>    <div id="safetyData.tests[19].reports[19].result.value" class="col-md-3 template-control  testResult  ">        <div class='internal' data-id="testResult">            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[19].reports[19].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[19].reports[19].result.value" />                        <input type="hidden" name="safetyData.tests[19].reports[19].result.id" value="" id="safetyData.tests[19].reports[19].result.id" />        </div>    </div>    <div id="safetyData.tests[19].reports[19].comments" class="col-md-5 template-control  testComments  ">        <div class='internal' data-id="testComments">            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[19].reports[19].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[19].reports[19].comments" />                                </div>    </div>            <div id="safetyData.tests[19].reports[19].moreInfo" class='col-sm-1     testMoreInfo'>            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">                <input type="hidden" name="_safetyData.tests[19].reports[19].moreInfo">                <input type="checkbox" name="safetyData.tests[19].reports[19].moreInfo" value="true" data-mandatory="false"                       data-mandatorySet="0" class="  "  data-search-field=""/>                                <label class="" for="testMoreInfo"></label>            </div>                    </div>    <input type="hidden" name=safetyData.tests[19].reports[19].deleted value=>                <div class="del-report">                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">                        <i class="md md-close delReportIcon test_19" aria-hidden="true"></i>                    </a>                </div>            </div>            </td></tr>                                    </tbody>    </table></div>        </div>    </div>

                                                <!-- Product Event Matrix -->
                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-productEventMatrix">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label" style="display: inline-block">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#productEventMatrix" aria-expanded="false"                   class="collapsed sec-display-txt sectionTitle">                    Product Event Matrix                </a>            </h4>                <i class="md md-alert-circle-outline text-danger pemRefresh hide" id="pemRefresh" aria-hidden="true"       data-require-pem-product-order="false" data-require-pem-event-order="false"       data-require-reindex-all-events="false" data-require-tree-view-refresh="false" data-require-row-number-update="false"       data-success-msg="Products & Events order in Product Event Matrix and the Tree View is refreshed."       title="Refresh the products & events order and the tree view"       data-section-id="#productEventMatrix" data-section-name="Product Event"></i>        </div>        <div id="productEventMatrix"             class="panel-collapse pv-main collapse rxmain-container-content rxmain-container-show pem-refresh"             aria-expanded="false">            <div class="pv-section pe-row inner-table m-b-0 row">                <div class="no-pe-warning"></div>                                                    <div class="row pv-section-record panel productPETemplate " data-product-row-id="11" data-persisted = "true">    <div class="panel-group m-b-0 inner-repeatable" id="accordion-innerProdEventMatrix_0">        <div class="panel panel-default section-header m-b-0 eventContainer">            <div class="panel-heading">                <h4 class="panel-title">                    <a data-toggle="collapse" id="productNamePEM"                       data-parent="#accordion-innerProdEventMatrix" href="#pvPEM_0"                       class="productNameHeaderPE inner-repeatable sec-display-txt collapsed" aria-expanded="false">                                            </a>                </h4>            </div>            <div id="pvPEM_0" class="panel-collapse inner-repeatable collapse" aria-expanded="false" style="height: 0">                <div class="panel-body short-field p-0 event-container-div">                                                                <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="15"     id="productEventMatrix-section-0" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">1</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[0].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[0].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[0].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[0].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[0].internalRowId" value="113" id="safetyData.productEventMatrix[0].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[0].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[0].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[0].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[0].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[0].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[0].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[0].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[0].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[0].productInternalId value=11><input type="hidden" name=safetyData.productEventMatrix[0].eventInternalId value=15><input type="hidden" name=safetyData.productEventMatrix[0].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[0].productId value=><input type="hidden" name=safetyData.productEventMatrix[0].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_0" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_0_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_0_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_0" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_0_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_0_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[0].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[0].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[0].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[0].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[0].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[0].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[0].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[0].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[0].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="51"     id="productEventMatrix-section-1" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">2</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[1].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[1].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[1].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[1].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[1].internalRowId" value="114" id="safetyData.productEventMatrix[1].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[1].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[1].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[1].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[1].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[1].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[1].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[1].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[1].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[1].productInternalId value=11><input type="hidden" name=safetyData.productEventMatrix[1].eventInternalId value=51><input type="hidden" name=safetyData.productEventMatrix[1].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[1].productId value=><input type="hidden" name=safetyData.productEventMatrix[1].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_1" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_1_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_1_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_1" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_1_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_1_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[1].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[1].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[1].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[1].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[1].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[1].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[1].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[1].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[1].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="52"     id="productEventMatrix-section-2" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">3</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[2].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[2].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[2].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[2].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[2].internalRowId" value="115" id="safetyData.productEventMatrix[2].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[2].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[2].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[2].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[2].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[2].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[2].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[2].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[2].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[2].productInternalId value=11><input type="hidden" name=safetyData.productEventMatrix[2].eventInternalId value=52><input type="hidden" name=safetyData.productEventMatrix[2].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[2].productId value=><input type="hidden" name=safetyData.productEventMatrix[2].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_2" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_2_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_2_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_2" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_2_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_2_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[2].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[2].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[2].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[2].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[2].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[2].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[2].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[2].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[2].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="53"     id="productEventMatrix-section-3" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">4</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[3].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[3].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[3].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[3].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[3].internalRowId" value="116" id="safetyData.productEventMatrix[3].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[3].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[3].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[3].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[3].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[3].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[3].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[3].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[3].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[3].productInternalId value=11><input type="hidden" name=safetyData.productEventMatrix[3].eventInternalId value=53><input type="hidden" name=safetyData.productEventMatrix[3].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[3].productId value=><input type="hidden" name=safetyData.productEventMatrix[3].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_3" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_3_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_3_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_3" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_3_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_3_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[3].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[3].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[3].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[3].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[3].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[3].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[3].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[3].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[3].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="54"     id="productEventMatrix-section-4" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">5</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[4].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[4].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[4].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[4].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[4].internalRowId" value="117" id="safetyData.productEventMatrix[4].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[4].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[4].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[4].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[4].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[4].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[4].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[4].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[4].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[4].productInternalId value=11><input type="hidden" name=safetyData.productEventMatrix[4].eventInternalId value=54><input type="hidden" name=safetyData.productEventMatrix[4].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[4].productId value=><input type="hidden" name=safetyData.productEventMatrix[4].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_4" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_4_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_4_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_4" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_4_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_4_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[4].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[4].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[4].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[4].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[4].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[4].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[4].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[4].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[4].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                    </div>            </div>        </div>    </div></div>                                    <div class="row pv-section-record panel productPETemplate " data-product-row-id="30" data-persisted = "true">    <div class="panel-group m-b-0 inner-repeatable" id="accordion-innerProdEventMatrix_1">        <div class="panel panel-default section-header m-b-0 eventContainer">            <div class="panel-heading">                <h4 class="panel-title">                    <a data-toggle="collapse" id="productNamePEM"                       data-parent="#accordion-innerProdEventMatrix" href="#pvPEM_1"                       class="productNameHeaderPE inner-repeatable sec-display-txt collapsed" aria-expanded="false">                                            </a>                </h4>            </div>            <div id="pvPEM_1" class="panel-collapse inner-repeatable collapse" aria-expanded="false" style="height: 0">                <div class="panel-body short-field p-0 event-container-div">                                                                <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="15"     id="productEventMatrix-section-5" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">1</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[5].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[5].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[5].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[5].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[5].internalRowId" value="118" id="safetyData.productEventMatrix[5].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[5].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[5].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[5].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[5].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[5].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[5].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[5].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[5].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[5].productInternalId value=30><input type="hidden" name=safetyData.productEventMatrix[5].eventInternalId value=15><input type="hidden" name=safetyData.productEventMatrix[5].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[5].productId value=><input type="hidden" name=safetyData.productEventMatrix[5].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_5" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_5_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_5_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_5" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_5_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_5_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[5].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[5].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[5].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[5].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[5].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[5].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[5].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[5].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[5].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="51"     id="productEventMatrix-section-6" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">2</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[6].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[6].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[6].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[6].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[6].internalRowId" value="119" id="safetyData.productEventMatrix[6].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[6].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[6].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[6].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[6].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[6].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[6].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[6].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[6].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[6].productInternalId value=30><input type="hidden" name=safetyData.productEventMatrix[6].eventInternalId value=51><input type="hidden" name=safetyData.productEventMatrix[6].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[6].productId value=><input type="hidden" name=safetyData.productEventMatrix[6].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_6" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_6_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_6_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_6" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_6_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_6_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[6].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[6].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[6].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[6].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[6].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[6].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[6].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[6].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[6].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="52"     id="productEventMatrix-section-7" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">3</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[7].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[7].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[7].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[7].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[7].internalRowId" value="120" id="safetyData.productEventMatrix[7].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[7].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[7].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[7].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[7].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[7].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[7].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[7].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[7].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[7].productInternalId value=30><input type="hidden" name=safetyData.productEventMatrix[7].eventInternalId value=52><input type="hidden" name=safetyData.productEventMatrix[7].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[7].productId value=><input type="hidden" name=safetyData.productEventMatrix[7].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_7" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_7_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_7_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_7" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_7_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_7_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[7].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[7].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[7].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[7].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[7].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[7].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[7].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[7].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[7].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="53"     id="productEventMatrix-section-8" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">4</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[8].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[8].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[8].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[8].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[8].internalRowId" value="121" id="safetyData.productEventMatrix[8].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[8].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[8].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[8].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[8].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[8].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[8].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[8].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[8].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[8].productInternalId value=30><input type="hidden" name=safetyData.productEventMatrix[8].eventInternalId value=53><input type="hidden" name=safetyData.productEventMatrix[8].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[8].productId value=><input type="hidden" name=safetyData.productEventMatrix[8].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_8" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_8_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_8_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_8" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_8_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_8_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[8].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[8].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[8].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[8].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[8].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[8].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[8].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[8].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[8].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="54"     id="productEventMatrix-section-9" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">5</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[9].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[9].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[9].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[9].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[9].internalRowId" value="122" id="safetyData.productEventMatrix[9].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[9].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[9].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[9].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[9].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[9].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[9].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[9].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[9].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[9].productInternalId value=30><input type="hidden" name=safetyData.productEventMatrix[9].eventInternalId value=54><input type="hidden" name=safetyData.productEventMatrix[9].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[9].productId value=><input type="hidden" name=safetyData.productEventMatrix[9].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_9" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_9_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_9_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_9" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_9_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_9_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[9].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[9].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[9].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[9].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[9].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[9].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[9].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[9].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[9].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                    </div>            </div>        </div>    </div></div>                                    <div class="row pv-section-record panel productPETemplate " data-product-row-id="34" data-persisted = "true">    <div class="panel-group m-b-0 inner-repeatable" id="accordion-innerProdEventMatrix_2">        <div class="panel panel-default section-header m-b-0 eventContainer">            <div class="panel-heading">                <h4 class="panel-title">                    <a data-toggle="collapse" id="productNamePEM"                       data-parent="#accordion-innerProdEventMatrix" href="#pvPEM_2"                       class="productNameHeaderPE inner-repeatable sec-display-txt collapsed" aria-expanded="false">                                            </a>                </h4>            </div>            <div id="pvPEM_2" class="panel-collapse inner-repeatable collapse" aria-expanded="false" style="height: 0">                <div class="panel-body short-field p-0 event-container-div">                                                                <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="15"     id="productEventMatrix-section-10" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">1</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[10].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[10].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[10].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[10].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[10].internalRowId" value="123" id="safetyData.productEventMatrix[10].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[10].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[10].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[10].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[10].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[10].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[10].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[10].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[10].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[10].productInternalId value=34><input type="hidden" name=safetyData.productEventMatrix[10].eventInternalId value=15><input type="hidden" name=safetyData.productEventMatrix[10].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[10].productId value=><input type="hidden" name=safetyData.productEventMatrix[10].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_10" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_10_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_10_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_10" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_10_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_10_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[10].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[10].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[10].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[10].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[10].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[10].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[10].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[10].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[10].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="51"     id="productEventMatrix-section-11" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">2</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[11].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[11].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[11].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[11].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[11].internalRowId" value="124" id="safetyData.productEventMatrix[11].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[11].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[11].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[11].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[11].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[11].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[11].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[11].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[11].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[11].productInternalId value=34><input type="hidden" name=safetyData.productEventMatrix[11].eventInternalId value=51><input type="hidden" name=safetyData.productEventMatrix[11].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[11].productId value=><input type="hidden" name=safetyData.productEventMatrix[11].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_11" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_11_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_11_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_11" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_11_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_11_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[11].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[11].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[11].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[11].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[11].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[11].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[11].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[11].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[11].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="52"     id="productEventMatrix-section-12" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">3</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[12].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[12].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[12].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[12].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[12].internalRowId" value="125" id="safetyData.productEventMatrix[12].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[12].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[12].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[12].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[12].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[12].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[12].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[12].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[12].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[12].productInternalId value=34><input type="hidden" name=safetyData.productEventMatrix[12].eventInternalId value=52><input type="hidden" name=safetyData.productEventMatrix[12].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[12].productId value=><input type="hidden" name=safetyData.productEventMatrix[12].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_12" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_12_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_12_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_12" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_12_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_12_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[12].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[12].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[12].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[12].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[12].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[12].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[12].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[12].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[12].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="53"     id="productEventMatrix-section-13" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">4</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[13].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[13].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[13].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[13].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[13].internalRowId" value="126" id="safetyData.productEventMatrix[13].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[13].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[13].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[13].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[13].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[13].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[13].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[13].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[13].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[13].productInternalId value=34><input type="hidden" name=safetyData.productEventMatrix[13].eventInternalId value=53><input type="hidden" name=safetyData.productEventMatrix[13].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[13].productId value=><input type="hidden" name=safetyData.productEventMatrix[13].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_13" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_13_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_13_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_13" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_13_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_13_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[13].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[13].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[13].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[13].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[13].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[13].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[13].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[13].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[13].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="54"     id="productEventMatrix-section-14" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">5</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[14].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[14].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[14].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[14].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[14].internalRowId" value="127" id="safetyData.productEventMatrix[14].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[14].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[14].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[14].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[14].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[14].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[14].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[14].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[14].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[14].productInternalId value=34><input type="hidden" name=safetyData.productEventMatrix[14].eventInternalId value=54><input type="hidden" name=safetyData.productEventMatrix[14].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[14].productId value=><input type="hidden" name=safetyData.productEventMatrix[14].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_14" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_14_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_14_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_14" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_14_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_14_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[14].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[14].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[14].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[14].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[14].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[14].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[14].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[14].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[14].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                    </div>            </div>        </div>    </div></div>                                    <div class="row pv-section-record panel productPETemplate " data-product-row-id="38" data-persisted = "true">    <div class="panel-group m-b-0 inner-repeatable" id="accordion-innerProdEventMatrix_3">        <div class="panel panel-default section-header m-b-0 eventContainer">            <div class="panel-heading">                <h4 class="panel-title">                    <a data-toggle="collapse" id="productNamePEM"                       data-parent="#accordion-innerProdEventMatrix" href="#pvPEM_3"                       class="productNameHeaderPE inner-repeatable sec-display-txt collapsed" aria-expanded="false">                                            </a>                </h4>            </div>            <div id="pvPEM_3" class="panel-collapse inner-repeatable collapse" aria-expanded="false" style="height: 0">                <div class="panel-body short-field p-0 event-container-div">                                                                <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="15"     id="productEventMatrix-section-15" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">1</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[15].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[15].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[15].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[15].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[15].internalRowId" value="128" id="safetyData.productEventMatrix[15].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[15].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[15].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[15].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[15].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[15].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[15].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[15].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[15].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[15].productInternalId value=38><input type="hidden" name=safetyData.productEventMatrix[15].eventInternalId value=15><input type="hidden" name=safetyData.productEventMatrix[15].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[15].productId value=><input type="hidden" name=safetyData.productEventMatrix[15].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_15" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_15_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_15_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_15" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_15_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_15_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[15].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[15].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[15].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[15].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[15].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[15].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[15].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[15].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[15].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="51"     id="productEventMatrix-section-16" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">2</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[16].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[16].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[16].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[16].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[16].internalRowId" value="129" id="safetyData.productEventMatrix[16].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[16].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[16].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[16].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[16].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[16].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[16].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[16].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[16].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[16].productInternalId value=38><input type="hidden" name=safetyData.productEventMatrix[16].eventInternalId value=51><input type="hidden" name=safetyData.productEventMatrix[16].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[16].productId value=><input type="hidden" name=safetyData.productEventMatrix[16].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_16" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_16_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_16_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_16" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_16_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_16_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[16].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[16].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[16].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[16].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[16].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[16].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[16].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[16].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[16].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="52"     id="productEventMatrix-section-17" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">3</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[17].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[17].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[17].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[17].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[17].internalRowId" value="130" id="safetyData.productEventMatrix[17].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[17].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[17].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[17].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[17].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[17].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[17].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[17].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[17].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[17].productInternalId value=38><input type="hidden" name=safetyData.productEventMatrix[17].eventInternalId value=52><input type="hidden" name=safetyData.productEventMatrix[17].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[17].productId value=><input type="hidden" name=safetyData.productEventMatrix[17].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_17" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_17_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_17_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_17" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_17_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_17_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[17].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[17].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[17].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[17].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[17].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[17].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[17].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[17].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[17].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="53"     id="productEventMatrix-section-18" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">4</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[18].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[18].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[18].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[18].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[18].internalRowId" value="131" id="safetyData.productEventMatrix[18].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[18].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[18].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[18].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[18].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[18].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[18].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[18].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[18].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[18].productInternalId value=38><input type="hidden" name=safetyData.productEventMatrix[18].eventInternalId value=53><input type="hidden" name=safetyData.productEventMatrix[18].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[18].productId value=><input type="hidden" name=safetyData.productEventMatrix[18].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_18" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_18_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_18_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_18" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_18_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_18_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[18].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[18].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[18].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[18].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[18].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[18].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[18].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[18].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[18].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="54"     id="productEventMatrix-section-19" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">5</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[19].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[19].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[19].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[19].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[19].internalRowId" value="132" id="safetyData.productEventMatrix[19].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[19].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[19].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[19].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[19].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[19].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[19].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[19].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[19].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[19].productInternalId value=38><input type="hidden" name=safetyData.productEventMatrix[19].eventInternalId value=54><input type="hidden" name=safetyData.productEventMatrix[19].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[19].productId value=><input type="hidden" name=safetyData.productEventMatrix[19].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_19" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_19_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_19_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_19" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_19_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_19_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[19].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[19].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[19].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[19].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[19].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[19].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[19].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[19].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[19].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                    </div>            </div>        </div>    </div></div>                                    <div class="row pv-section-record panel productPETemplate " data-product-row-id="42" data-persisted = "true">    <div class="panel-group m-b-0 inner-repeatable" id="accordion-innerProdEventMatrix_4">        <div class="panel panel-default section-header m-b-0 eventContainer">            <div class="panel-heading">                <h4 class="panel-title">                    <a data-toggle="collapse" id="productNamePEM"                       data-parent="#accordion-innerProdEventMatrix" href="#pvPEM_4"                       class="productNameHeaderPE inner-repeatable sec-display-txt collapsed" aria-expanded="false">                                            </a>                </h4>            </div>            <div id="pvPEM_4" class="panel-collapse inner-repeatable collapse" aria-expanded="false" style="height: 0">                <div class="panel-body short-field p-0 event-container-div">                                                                <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="15"     id="productEventMatrix-section-20" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">1</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[20].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[20].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[20].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[20].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[20].internalRowId" value="133" id="safetyData.productEventMatrix[20].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[20].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[20].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[20].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[20].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[20].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[20].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[20].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[20].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[20].productInternalId value=42><input type="hidden" name=safetyData.productEventMatrix[20].eventInternalId value=15><input type="hidden" name=safetyData.productEventMatrix[20].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[20].productId value=><input type="hidden" name=safetyData.productEventMatrix[20].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_20" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_20_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_20_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_20" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_20_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_20_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[20].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[20].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[20].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[20].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[20].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[20].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[20].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[20].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[20].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="51"     id="productEventMatrix-section-21" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">2</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[21].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[21].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[21].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[21].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[21].internalRowId" value="134" id="safetyData.productEventMatrix[21].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[21].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[21].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[21].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[21].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[21].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[21].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[21].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[21].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[21].productInternalId value=42><input type="hidden" name=safetyData.productEventMatrix[21].eventInternalId value=51><input type="hidden" name=safetyData.productEventMatrix[21].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[21].productId value=><input type="hidden" name=safetyData.productEventMatrix[21].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_21" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_21_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_21_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_21" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_21_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_21_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[21].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[21].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[21].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[21].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[21].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[21].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[21].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[21].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[21].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="52"     id="productEventMatrix-section-22" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">3</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[22].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[22].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[22].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[22].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[22].internalRowId" value="135" id="safetyData.productEventMatrix[22].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[22].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[22].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[22].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[22].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[22].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[22].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[22].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[22].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[22].productInternalId value=42><input type="hidden" name=safetyData.productEventMatrix[22].eventInternalId value=52><input type="hidden" name=safetyData.productEventMatrix[22].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[22].productId value=><input type="hidden" name=safetyData.productEventMatrix[22].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_22" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_22_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_22_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_22" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_22_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_22_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[22].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[22].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[22].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[22].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[22].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[22].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[22].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[22].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[22].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="53"     id="productEventMatrix-section-23" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">4</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[23].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[23].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[23].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[23].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[23].internalRowId" value="136" id="safetyData.productEventMatrix[23].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[23].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[23].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[23].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[23].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[23].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[23].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[23].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[23].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[23].productInternalId value=42><input type="hidden" name=safetyData.productEventMatrix[23].eventInternalId value=53><input type="hidden" name=safetyData.productEventMatrix[23].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[23].productId value=><input type="hidden" name=safetyData.productEventMatrix[23].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_23" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_23_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_23_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_23" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_23_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_23_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[23].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[23].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[23].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[23].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[23].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[23].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[23].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[23].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[23].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                            <div class="row pv-product-event-metrix pv-section-record eventPETemplate row-strip m-0 p-l-10 p-r-5 p-b-10   "     data-event-row-id="54"     id="productEventMatrix-section-24" data-persisted="true">            <div class="row-num num-bg">            <span class="row-count">5</span>        </div>        <div class="col-md-12">        <div class="col-md-4 rx-col-table">            <div class="form-group inner-table">                <div class="panel-title col-md-12 event" id="eventNamePEM">                    <span class="eventNameHeaderPE"></span>                    <span class="pv-ic-indicator"></span>                </div>                <div class="col-md-12">                                <div id="productEventFirstDoseInterval" class="col-md-6 template-control  productEventFirstDoseInterval   " >        <label class='control-label lbl-elipsis'>First Dose Interval</label>        <div class='internal' data-id="productEventFirstDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[24].firstDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventFirstDoseInterval" id="safetyData.productEventMatrix[24].firstDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[24].firstDoseInterval.id" value="" id="safetyData.productEventMatrix[24].firstDoseInterval.id" /><input type="hidden" name="safetyData.productEventMatrix[24].internalRowId" value="137" id="safetyData.productEventMatrix[24].internalRowId" />    </div> </div>            <div id="productEventLastDoseInterval" class="col-md-6 template-control  productEventLastDoseInterval   " >        <label class='control-label lbl-elipsis'>Last Dose Interval</label>        <div class='internal' data-id="productEventLastDoseInterval">        <input type="text" class="form-control  combinedComplexField " data-mandatory="false" data-mandatorySet="0" data-allowedFirstPart="5" data-unitList="duration-code-list" name="safetyData.productEventMatrix[24].lastDoseInterval.value" value="" data-initial-value="" maxlength="5" data-field-id="productEventLastDoseInterval" id="safetyData.productEventMatrix[24].lastDoseInterval.value" />        <input type="hidden" name="safetyData.productEventMatrix[24].lastDoseInterval.id" value="" id="safetyData.productEventMatrix[24].lastDoseInterval.id" />    </div> </div>    <div id="productEventRechallenge" class=" productEventRechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Rechallenge</label>        <div class='internal' data-id="productEventRechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[24].rechallenge.id" data-from="rechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[24].rechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div>    <div id="productEventDechallenge" class=" productEventDechallenge null template-control col-md-6  ">            <label class='control-label lbl-elipsis'>Dechallenge</label>        <div class='internal' data-id="productEventDechallenge">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[24].dechallenge.id" data-from="dechallenges" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[24].dechallenge.id" ><option value="" selected="selected">Select</option></select>        </div></div><input type="hidden" name=safetyData.productEventMatrix[24].productInternalId value=42><input type="hidden" name=safetyData.productEventMatrix[24].eventInternalId value=54><input type="hidden" name=safetyData.productEventMatrix[24].deleted value=false><input type="hidden" name=safetyData.productEventMatrix[24].productId value=><input type="hidden" name=safetyData.productEventMatrix[24].eventId value=>                </div>            </div>        </div>        <div class="col-md-8 relatednessAssesment rx-col-table">            <div class="inner-table m-t-10">                <div class="panel-group m-b-0">                    <div class="panel panel-default section-header inner">                        <div class="panel-heading">                            <h4 class="panel-title">                                <a class="inner-repeatable sec-display-txt" data-toggle="collapse"                                   href="#relatednessAssessment_24" aria-expanded="true">                                    Relatedness Assessments                                </a>                                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#relatednessAssessmentTableSection_24_" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#relatednessAssessmentTableSection_24_" data-anchordiv="" class="btn-row-down ic-xs inner-repeatable">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                            </h4>                        </div>                        <div id="relatednessAssessment_24" data-templateId="relatednessAssessmentTemplate"                             data-table="true"                             class="inner-repeatable pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                             aria-expanded="true">                            <div class="panel-body p-0">                                <div class="pv-relatedness pv-sec-seperator">                                    <div class="pv-inner-product-substance pv-section">                                        <table class="table table-striped pv-inner-table m-b-0">                                            <thead>                                                                                            <th class="pv-col-sn">#</th>                                                                                        <th id='header-productEventRelatedNessSource' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Source </label></th><th id='header-productEventRelatedNesstMethod' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Method </label></th><th id='header-productEventRelatedNessResult' class='col-md-4  true'> <label class='control-label lbl-elipsis'> Result </label></th>                                                                                            <th class="pv-col-la">                                                    <a href="javascript:void(0);"                                                       class="pull-right add-table-row add-section btn-add-panel"                                                       data-tabular="true">                                                        <i class="fa fa-plus-square-o"></i>                                                    </a>                                                </th>                                                                                        </thead>                                            <tbody class="pv-draggable-list ui-sortable inner-repeatable"                                                   id="relatednessAssessmentTableSection_24_">                                                                                                                                                                                            <tr class="row-table inner-repeatable pv-section-record ui-sortable-handle   relatednessRow"                                                    id="relatednessAssessment_24_-section-0">                                                                                                            <td class="new-index">1</td>                                                                                                        <td id="productEventRelatedNessSource" class=" productEventRelatedNessSource null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNessSource">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[24].relatednessAssessments[0].source.idOrValue" data-from="causalitySource" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[24].relatednessAssessments[0].source.idOrValue" ><option value="" selected="selected">Select</option></select>        <input type="hidden" name="safetyData.productEventMatrix[24].relatednessAssessments[0].internalRowId" value="" id="safetyData.productEventMatrix[24].relatednessAssessments[0].internalRowId" /></div></td><td id="productEventRelatedNesstMethod" class=" productEventRelatedNesstMethod null template-control col-md-4 "><div class='internal' data-id="productEventRelatedNesstMethod">    <select class="form-control   select2-lazy   " name="safetyData.productEventMatrix[24].relatednessAssessments[0].method.idOrValue" data-from="causalityMethods" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[24].relatednessAssessments[0].method.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><td id="productEventRelatedNessResult" class=" productEventRelatedNessResult null template-control col-md-4 indicator-tabular"><div class='internal' data-id="productEventRelatedNessResult">    <select class="form-control   peResult  indicator-tabular select2-lazy   " name="safetyData.productEventMatrix[24].relatednessAssessments[0].result.idOrValue" data-from="causalityCategory" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="" id="safetyData.productEventMatrix[24].relatednessAssessments[0].result.idOrValue" ><option value="" selected="selected">Select</option></select>        </div></td><input type="hidden" name=safetyData.productEventMatrix[24].relatednessAssessments[0].deleted value=>                                                                                                            <td>                                                            <a href="javascript:void(0);"                                                               class="table-row-del pull-right remove-section btn-del-panel">                                                                <i class="md md-close" aria-hidden="true"></i>                                                            </a>                                                        </td>                                                                                                    </tr>                                                                                        </tbody>                                        </table>                                    </div>                                </div>                            </div>                        </div>                    </div>                </div>            </div>        </div>    </div></div>                                    </div>            </div>        </div>    </div></div>                            </div>        </div>    </div>

                                                <!-- Summary -->
                                                 
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-summary">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#summary" aria-expanded="false" class="collapsed sec-display-txt sectionTitle">                    Summary                </a>                            </h4>        </div>        <div id="summary"             class="panel-collapse collapse rxmain-container-content rxmain-container-show"             aria-expanded="false">            <div class="row pv-summary pv-sec-seperator">                <div class="col-md-12 form-pv">                    <div class="form-group">                        <div id="summaryComment" class='template-control     summaryComment col-md-12'>    <label class='control-label lbl-elipsis'>Case Description (Narrative)</label>    <div class='internal' data-id="summaryComment">        <textarea class="form-control fm-text-area  summaryComments  " data-mandatory="false" data-mandatorySet="0" name="safetyData.summary.caseDescription" maxlength="100000" rows="5" cols="100" id="safetyData.summary.caseDescription" >11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111</textarea>                <span class="maxlength-feedback"></span>            </div></div><div id="reporterComment" class='template-control     reporterComment col-md-12'>    <label class='control-label lbl-elipsis'>Reporter Comments</label>    <div class='internal' data-id="reporterComment">        <textarea class="form-control fm-text-area  summaryComments  " data-mandatory="false" data-mandatorySet="0" name="safetyData.summary.reporterComments" maxlength="20000" rows="3" cols="100" id="safetyData.summary.reporterComments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><div id="senderComment" class='template-control     senderComment col-md-12'>    <label class='control-label lbl-elipsis'>Sender Comments</label>    <div class='internal' data-id="senderComment">        <textarea class="form-control fm-text-area  summaryComments  " data-mandatory="false" data-mandatorySet="0" name="safetyData.summary.senderComments" maxlength="20000" rows="3" cols="100" id="safetyData.summary.senderComments" ></textarea>                <span class="maxlength-feedback"></span>            </div></div><div id="additionalNotes" class='template-control     additionalNotes col-md-12'>    <label class='control-label lbl-elipsis'>Additional Notes</label>    <div class='internal' data-id="additionalNotes">        <textarea class="form-control fm-text-area  Additional Notes  " data-mandatory="false" data-mandatorySet="0" name="safetyData.summary.customProperty.additionalNotes" maxlength="20000" rows="5" cols="100" id="safetyData.summary.customProperty.additionalNotes" ></textarea>                <span class="maxlength-feedback"></span>            </div></div>                    </div>                </div>                                                <div class="col-md-4 rx-col-table">                        <div class="inner-table row">                            <div class="panel-group m-t-10 m-b-5">                                <!-- Substances -->                                <div class="panel panel-default section-header inner">                                    <div class="panel-heading">                                        <h4 class="panel-title">                                            <a data-toggle="collapse"                                               data-parent="#accordion-innerSummary"                                               href="#innerSummaryDiagnosis"                                               class="sec-display-txt" aria-expanded="true">                                                Sender's Diagnosis                                            </a>                                            <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#senderDiagnosisTableSection" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#senderDiagnosisTableSection" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>                                        </h4>                                    </div>                                    <div id="innerSummaryDiagnosis"                                         class="pv-main panel-collapse collapse in rxmain-container-content rxmain-container-show p-0 inner-accordion"                                         aria-expanded="true"                                         data-templateId="innerSummaryDiagnosisTemplate" data-table="true">                                        <div class="panel-body p-0">                                            <div class="pv-relatedness pv-sec-seperator">                                                <div class="pv-inner-product-substance pv-section">                                                    <table class="table table-striped pv-inner-table m-b-0">    <thead>            <th class="pv-col-sn">#</th>        <th id='header-senderDiagnosis' class='col-md-12  true'> <label class='control-label lbl-elipsis'> Sender's Diagnosis </label></th>                <th class="pv-col-la"><a href="javascript:void(0);" class="pull-right add-table-row add-section btn-add-panel"               data-tabular="true">            <i class="fa fa-plus-square-o"></i></a></th>        </thead>    <tbody class="pv-draggable-list ui-sortable" id="senderDiagnosisTableSection">            <tr class="row-table pv-section-record ui-sortable-handle  " id="innerSummaryDiagnosis-section-0">            <td class="new-index badge-index"></td>                    <td class="col-md-12  template-control senderDiagnosis"><div class='internal' data-id="senderDiagnosis">        <div class='input-group internal inner-addon right-addon' data-id="senderDiagnosis">        <input type="text" class="form-control  singleMeddraField summaryComments  meddraBrowser  " name="safetyData.summary.senderDiagnosis[0].reactionCoded" maxlength="250" value="" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-browser-type="meddra" data-flag-target="" data-placeholder="" data-fieldId="senderDiagnosis" id="safetyData.summary.senderDiagnosis[0].reactionCoded" />                <input type="hidden" name="safetyData.summary.senderDiagnosis[0].lltCode" class="hidden-id" value="" id="safetyData.summary.senderDiagnosis[0].lltCode" /><input type="hidden" name="safetyData.summary.senderDiagnosis[0].codedWithSearchString" value="" id="safetyData.summary.senderDiagnosis[0].codedWithSearchString" /><input type="hidden" name="safetyData.summary.senderDiagnosis[0].hierarchyStorageId" value="" id="safetyData.summary.senderDiagnosis[0].hierarchyStorageId" /><input type="hidden" name="safetyData.summary.senderDiagnosis[0].reportedReaction" value="" id="safetyData.summary.senderDiagnosis[0].reportedReaction" /><input type="hidden" name="safetyData.summary.senderDiagnosis[0].internalRowId" value="19" id="safetyData.summary.senderDiagnosis[0].internalRowId" />        <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "              data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">            <i class="glyphicon glyphicon-search" ></i>        </span>    </div>    </div><input type="hidden" name=safetyData.summary.senderDiagnosis[0].deleted value=false>            <td>            <a href="javascript:void(0);" title="Remove this section"               class="table-row-del pull-right remove-section btn-del-panel">                <i class="md md-close innerSummaryDiagnosis_0" aria-hidden="true"></i>            </a>        </td>    </tr>        </tbody></table>                                                </div>                                            </div>                                        </div>                                    </div>                                </div>                            </div>                        </div>                    </div>                                        </div>        </div>    </div>
                                                <!-- attachments -->
                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-attachment">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse"                   data-parent="#accordion-case"                   href="#attachment" aria-expanded="false"                   class="collapsed sec-display-txt sectionTitle">                    Attachment(s)                </a>                <span class="pv-head-config configureFields">        <span class="pv-reorder-sec hide">        <a href="javascript:void(0);" data-target="#attachmentPanel" title="Move Record Up" data-anchordiv="" class="btn-row-up ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>        <a href="javascript:void(0);" title="Move Record Down" data-target="#attachmentPanel" data-anchordiv="" class="btn-row-down ic-xs ">            <i class="md md-arrow-back " aria-hidden="true"></i>        </a>    </span>    </span>            </h4>        </div>        <div id="attachment" data-templateId="attachmentTemplate" data-table="true"             class="panel-collapse pv-main rxmain-container-content rxmain-container-show  collapse"             aria-expanded="false">            <div class="row pv-attachment">                <div class="form-group row m-b-0">                    <div class="col-md-12 pv-section">                        <table class="table table-striped pv-inner-table m-b-0">    <thead>            <th class="pv-col-sn">#</th>        <th id='header-attachmentReceiptDate' class='col-md-2  true'> <label class='control-label lbl-elipsis'> Receipt Date </label></th><th id='header-attachmentFileType' class='col-md-2  true'> <label class='control-label lbl-elipsis'> Attachment Type </label></th><th id='header-attachmentFilePath' class='col-md-3  true'> <label class='control-label lbl-elipsis'> File Name </label></th><th id='header-attachmentProcessStatus' class='col-md-2  true'> <label class='control-label lbl-elipsis'> Process Status </label></th><th id='header-attachmentCaseVersion' class='col-md-3  true'> <label class='control-label lbl-elipsis'> Case Version </label></th><th id='header-attachmentIsProtected' class='col-md-1  true'> <label class='control-label lbl-elipsis'> Protected </label></th>                <th class="pv-col-la"><a href="javascript:void(0);" class="pull-right add-table-row add-section btn-add-panel"               data-tabular="true">            <i class="fa fa-plus-square-o"></i></a></th>        </thead>    <tbody class="pv-draggable-list ui-sortable" id="attachmentPanel">            <tr class="row-table pv-section-record ui-sortable-handle  " id="attachment-section-0">            <td class="new-index badge-index"></td>            <td id="attachmentReceiptDate" class="template-control attachmentReceiptDate  col-md-2">        <div class='internal' data-id="attachmentReceiptDate"><div class="">    <div class="datepicker internal input-group date "         data-id="attachmentReceiptDate">        <input type="text" class="form-control  allowEdit " name="safetyData.attachments[0].receiptDate" data-mandatory="false" id="safetyData.attachments[0].receiptDate" data-partialdatesallowed="0" value="15-Apr-2020 00:00:00" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.attachments[0].internalRowId" value="" id="safetyData.attachments[0].internalRowId" /></div></div></td><td id="attachmentFileType" class=" attachmentFileType null template-control col-md-2 "><div class='internal' data-id="attachmentFileType">    <select class="form-control   select2-box allowEdit select2-lazy   " name="safetyData.attachments[0].fileType" data-from="fileTypes" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="100000" id="safetyData.attachments[0].fileType" ><option value="">Select</option></select>        </div></td>    <td id="attachmentFilePath" class="col-md-3  allowEdit    attachmentFilePath ">    <div class='internal' data-id="attachmentFilePath"><div class="file-uploader" data-provides="fileupload"><input type="file" name="safetyData.attachments[0].filePath" data-mandatory="false" data-mandatorySet="0" class="file allowEdit"><div class="input-group">    <input type="text" class="form-control " disabled placeholder="Attach a file" id="attachmentFilePath"           name="safetyData.fileInputBox[-1].fileName" value="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf">        <input type="hidden" name="safetyData.attachments[0].id" value="86771" id="safetyData.attachments[0].id" /><input type="hidden" name="safetyData.attachments[0].fileName" value="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf" id="safetyData.attachments[0].fileName" /><input type="hidden" name="safetyData.attachments[0].isRedactFile" value="false" id="safetyData.attachments[0].isRedactFile" /><input type="hidden" name="safetyData.attachments[0].redactFileName" value="" id="safetyData.attachments[0].redactFileName" /><input type="hidden" name="safetyData.attachments[0].caseCountry" class="hidden-case-country" value="3" id="safetyData.attachments[0].caseCountry" />    <span class="input-group-btn ">        <button class="browse btn btn-primary btn-file-upload allowEdit"                type="button"><i                class="glyphicon glyphicon-search"></i>        </button>    </span>    <span class=" ">        <span class="pv-ic-redact ic-sm redactAttachmentSpan redactAttachment-86771 hide">                <i class="md md-alpha-r-box-outline redactOverlayIcon"></i>        </span></span></div></div>    </div></td><td id="attachmentProcessStatus" class=" attachmentProcessStatus null template-control col-md-2 "><div class='internal' data-id="attachmentProcessStatus">    <select class="form-control   select2-box allowEdit select2-lazy   " name="safetyData.attachments[0].processStatus" data-from="processStatus" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="1003" id="safetyData.attachments[0].processStatus" ><option value="">Select</option></select>        </div></td><td id="attachmentCaseVersion" class=" attachmentCaseVersion null template-control col-md-3 "><div class='internal' data-id="attachmentCaseVersion">    <select class="form-control   select2-box allowEdit   " name="safetyData.attachments[0].caseVersion" data-tabular="true" data-mandatorySet="0" data-mandatory="false" data-value="1" id="safetyData.attachments[0].caseVersion" ><option value="">Select</option></select>        </div></td>    <td id="attachmentIsProtected" class=" isProtected v-middle text-center allowEdit  template-control col-md-1  "><div class='internal checkbox checkbox-primary ' data-id="attachmentIsProtected">        <input type="hidden" name="_safetyData.attachments[0].isProtected"/>        <input type="checkbox" name="safetyData.attachments[0].isProtected" value="true" data-mandatory="false"               data-mandatorySet="0" class=" isProtected v-middle text-center allowEdit " />        <label class=""></label>        </div>            </td><input type="hidden" name=safetyData.attachments[0].deleted value=false>            <td>            <a href="javascript:void(0);" title="Remove this section"               class="table-row-del pull-right remove-section btn-del-panel">                <i class="md md-close attachment_0" aria-hidden="true"></i>            </a>        </td>    </tr>            <tr class="row-table pv-section-record ui-sortable-handle  " id="attachment-section-1">            <td class="new-index badge-index"></td>            <td id="attachmentReceiptDate" class="template-control attachmentReceiptDate  col-md-2">        <div class='internal' data-id="attachmentReceiptDate"><div class="">    <div class="datepicker internal input-group date "         data-id="attachmentReceiptDate">        <input type="text" class="form-control  allowEdit " name="safetyData.attachments[1].receiptDate" data-mandatory="false" id="safetyData.attachments[1].receiptDate" data-partialdatesallowed="0" value="15-Apr-2020 00:00:00" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.attachments[1].internalRowId" value="" id="safetyData.attachments[1].internalRowId" /></div></div></td><td id="attachmentFileType" class=" attachmentFileType null template-control col-md-2 "><div class='internal' data-id="attachmentFileType">    <select class="form-control   select2-box allowEdit select2-lazy   " name="safetyData.attachments[1].fileType" data-from="fileTypes" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="100136" id="safetyData.attachments[1].fileType" ><option value="">Select</option></select>        </div></td>    <td id="attachmentFilePath" class="col-md-3  allowEdit    attachmentFilePath ">    <div class='internal' data-id="attachmentFilePath"><div class="file-uploader" data-provides="fileupload"><input type="file" name="safetyData.attachments[1].filePath" data-mandatory="false" data-mandatorySet="0" class="file allowEdit"><div class="input-group">    <input type="text" class="form-control " disabled placeholder="Attach a file" id="attachmentFilePath"           name="safetyData.fileInputBox[-1].fileName" value="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf">        <input type="hidden" name="safetyData.attachments[1].id" value="86772" id="safetyData.attachments[1].id" /><input type="hidden" name="safetyData.attachments[1].fileName" value="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf" id="safetyData.attachments[1].fileName" /><input type="hidden" name="safetyData.attachments[1].isRedactFile" value="false" id="safetyData.attachments[1].isRedactFile" /><input type="hidden" name="safetyData.attachments[1].redactFileName" value="" id="safetyData.attachments[1].redactFileName" /><input type="hidden" name="safetyData.attachments[1].caseCountry" class="hidden-case-country" value="3" id="safetyData.attachments[1].caseCountry" />    <span class="input-group-btn ">        <button class="browse btn btn-primary btn-file-upload allowEdit"                type="button"><i                class="glyphicon glyphicon-search"></i>        </button>    </span>    <span class=" ">        <span class="pv-ic-redact ic-sm redactAttachmentSpan redactAttachment-86772 hide">                <i class="md md-alpha-r-box-outline redactOverlayIcon"></i>        </span></span></div></div>    </div></td><td id="attachmentProcessStatus" class=" attachmentProcessStatus null template-control col-md-2 "><div class='internal' data-id="attachmentProcessStatus">    <select class="form-control   select2-box allowEdit select2-lazy   " name="safetyData.attachments[1].processStatus" data-from="processStatus" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="1003" id="safetyData.attachments[1].processStatus" ><option value="">Select</option></select>        </div></td><td id="attachmentCaseVersion" class=" attachmentCaseVersion null template-control col-md-3 "><div class='internal' data-id="attachmentCaseVersion">    <select class="form-control   select2-box allowEdit   " name="safetyData.attachments[1].caseVersion" data-tabular="true" data-mandatorySet="0" data-mandatory="false" data-value="1" id="safetyData.attachments[1].caseVersion" ><option value="">Select</option></select>        </div></td>    <td id="attachmentIsProtected" class=" isProtected v-middle text-center allowEdit  template-control col-md-1  "><div class='internal checkbox checkbox-primary ' data-id="attachmentIsProtected">        <input type="hidden" name="_safetyData.attachments[1].isProtected"/>        <input type="checkbox" name="safetyData.attachments[1].isProtected" value="true" data-mandatory="false"               data-mandatorySet="0" class=" isProtected v-middle text-center allowEdit " />        <label class=""></label>        </div>            </td><input type="hidden" name=safetyData.attachments[1].deleted value=false>            <td>            <a href="javascript:void(0);" title="Remove this section"               class="table-row-del pull-right remove-section btn-del-panel">                <i class="md md-close attachment_1" aria-hidden="true"></i>            </a>        </td>    </tr>            <tr class="row-table pv-section-record ui-sortable-handle  " id="attachment-section-2">            <td class="new-index badge-index"></td>            <td id="attachmentReceiptDate" class="template-control attachmentReceiptDate  col-md-2">        <div class='internal' data-id="attachmentReceiptDate"><div class="">    <div class="datepicker internal input-group date "         data-id="attachmentReceiptDate">        <input type="text" class="form-control  allowEdit " name="safetyData.attachments[2].receiptDate" data-mandatory="false" id="safetyData.attachments[2].receiptDate" data-partialdatesallowed="0" value="15-Apr-2020 00:00:00" data-mandatorySet="0" placeholder="DD-MON-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">            <i class="md md-calendar-blank"></i>        </span>    </div>        <input type="hidden" name="safetyData.attachments[2].internalRowId" value="" id="safetyData.attachments[2].internalRowId" /></div></div></td><td id="attachmentFileType" class=" attachmentFileType null template-control col-md-2 "><div class='internal' data-id="attachmentFileType">    <select class="form-control   select2-box allowEdit select2-lazy   " name="safetyData.attachments[2].fileType" data-from="fileTypes" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="4" id="safetyData.attachments[2].fileType" ><option value="">Select</option></select>        </div></td>    <td id="attachmentFilePath" class="col-md-3  allowEdit    attachmentFilePath ">    <div class='internal' data-id="attachmentFilePath"><div class="file-uploader" data-provides="fileupload"><input type="file" name="safetyData.attachments[2].filePath" data-mandatory="false" data-mandatorySet="0" class="file allowEdit"><div class="input-group">    <input type="text" class="form-control " disabled placeholder="Attach a file" id="attachmentFilePath"           name="safetyData.fileInputBox[-1].fileName" value="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf">        <input type="hidden" name="safetyData.attachments[2].id" value="86773" id="safetyData.attachments[2].id" /><input type="hidden" name="safetyData.attachments[2].fileName" value="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf" id="safetyData.attachments[2].fileName" /><input type="hidden" name="safetyData.attachments[2].isRedactFile" value="false" id="safetyData.attachments[2].isRedactFile" /><input type="hidden" name="safetyData.attachments[2].redactFileName" value="" id="safetyData.attachments[2].redactFileName" /><input type="hidden" name="safetyData.attachments[2].caseCountry" class="hidden-case-country" value="3" id="safetyData.attachments[2].caseCountry" />    <span class="input-group-btn ">        <button class="browse btn btn-primary btn-file-upload allowEdit"                type="button"><i                class="glyphicon glyphicon-search"></i>        </button>    </span>    <span class=" ">        <span class="pv-ic-redact ic-sm redactAttachmentSpan redactAttachment-86773 hide">                <i class="md md-alpha-r-box-outline redactOverlayIcon"></i>        </span></span></div></div>    </div></td><td id="attachmentProcessStatus" class=" attachmentProcessStatus null template-control col-md-2 "><div class='internal' data-id="attachmentProcessStatus">    <select class="form-control   select2-box allowEdit select2-lazy   " name="safetyData.attachments[2].processStatus" data-from="processStatus" data-tabular="true" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-value="1003" id="safetyData.attachments[2].processStatus" ><option value="">Select</option></select>        </div></td><td id="attachmentCaseVersion" class=" attachmentCaseVersion null template-control col-md-3 "><div class='internal' data-id="attachmentCaseVersion">    <select class="form-control   select2-box allowEdit   " name="safetyData.attachments[2].caseVersion" data-tabular="true" data-mandatorySet="0" data-mandatory="false" data-value="1" id="safetyData.attachments[2].caseVersion" ><option value="">Select</option></select>        </div></td>    <td id="attachmentIsProtected" class=" isProtected v-middle text-center allowEdit  template-control col-md-1  "><div class='internal checkbox checkbox-primary ' data-id="attachmentIsProtected">        <input type="hidden" name="_safetyData.attachments[2].isProtected"/>        <input type="checkbox" name="safetyData.attachments[2].isProtected" value="true" data-mandatory="false"               data-mandatorySet="0" class=" isProtected v-middle text-center allowEdit " />        <label class=""></label>        </div>            </td><input type="hidden" name=safetyData.attachments[2].deleted value=false>            <td>            <a href="javascript:void(0);" title="Remove this section"               class="table-row-del pull-right remove-section btn-del-panel">                <i class="md md-close attachment_2" aria-hidden="true"></i>            </a>        </td>    </tr>        </tbody></table>                    </div>                </div>            </div>        </div>    </div>

                                                <div id="specialFieldContainer" name="specialFieldContainer"></div>
                                            </form>
                                            <!-- Tasks Section -->
                                            
<div id="justificationModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" id="justificationCloseButton" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title justificationComments">Case Assignment</h4>
            </div>
            <div class="modal-body">
                <div class="row assigneeUserList">
                    <div class="col-sm-6 required">
                        <label for="assigneeUserList" class="control-label lbl-elipsis">Assign To:</label>
                        <select name="assigneeUserList" id="assigneeUserList" class="form-control select2"></select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <label for="justificationModalId" class="control-label">Comments
                        </label>
                        <textarea id="justificationModalId" name="justificationComments" rows="4" cols="20" maxlength="500" class="form-control fm-text-area" ></textarea>
                        <span class="maxlength-feedback"></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="justificationModalOkButton" class="btn btn-inverse waves-effect waves-light">Ok</button>
                <button type="button" id="assignCancelButton" class="btn btn-default btn-md">Cancel</button>
               </div>
        </div>
    </div>
</div>

                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-task">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#taskSection" class="collapsed sec-display-txt sectionTitle">                    Task(s)</a>                <span class="pv-head-config configureFields">    <a href="#" class="dropdown-toggle pull-right ic-sm"       data-toggle="dropdown"><i class="md md-list" aria-hidden="true"></i></a>    <ul class="dropdown-menu field-config">                                                    <li class="field-visible checkbox checkbox-primary nowrap" data-id="taskIndex"                    data-mandatory="true">                        <input type="checkbox" data-value="#" data-id="taskIndex" data-index = "0" data-section-name="Tasks" data-class ="pv-col-xxs"/>                        <label for="taskIndex">#</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="taskTypeId"                    data-mandatory="false">                        <input type="checkbox" data-value="Task Type" data-id="taskTypeId" data-index = "1" data-section-name="Tasks" data-class ="pv-col-sm"/>                        <label for="taskTypeId">Task Type</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="assignedToId"                    data-mandatory="false">                        <input type="checkbox" data-value="Assigned To" data-id="assignedToId" data-index = "2" data-section-name="Tasks" data-class ="pv-col-md"/>                        <label for="assignedToId">Assigned To</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="description"                    data-mandatory="false">                        <input type="checkbox" data-value="Description" data-id="description" data-index = "3" data-section-name="Tasks" data-class ="pv-col-xl"/>                        <label for="description">Description</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="dueDate"                    data-mandatory="false">                        <input type="checkbox" data-value="Due Date" data-id="dueDate" data-index = "4" data-section-name="Tasks" data-class ="pv-col-sm"/>                        <label for="dueDate">Due Date</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="completionDate"                    data-mandatory="false">                        <input type="checkbox" data-value="Completion Date" data-id="completionDate" data-index = "5" data-section-name="Tasks" data-class ="pv-col-md"/>                        <label for="completionDate">Completion Date</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="priorityId"                    data-mandatory="false">                        <input type="checkbox" data-value="Priority" data-id="priorityId" data-index = "6" data-section-name="Tasks" data-class ="pv-col-sm"/>                        <label for="priorityId">Priority</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="status"                    data-mandatory="false">                        <input type="checkbox" data-value="Status" data-id="status" data-index = "7" data-section-name="Tasks" data-class =""/>                        <label for="status">Status</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="createdByUserId"                    data-mandatory="false">                        <input type="checkbox" data-value="Created By" data-id="createdByUserId" data-index = "8" data-section-name="Tasks" data-class =""/>                        <label for="createdByUserId">Created By</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="dateCreated"                    data-mandatory="false">                        <input type="checkbox" data-value="Date Created" data-id="dateCreated" data-index = "9" data-section-name="Tasks" data-class ="pv-col-sm"/>                        <label for="dateCreated">Date Created</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="tertiaryRefId"                    data-mandatory="false">                        <input type="checkbox" data-value="Intake Case #" data-id="tertiaryRefId" data-index = "10" data-section-name="Tasks" data-class =""/>                        <label for="tertiaryRefId">Intake Case #</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="secondaryRefId"                    data-mandatory="false">                        <input type="checkbox" data-value="Version" data-id="secondaryRefId" data-index = "11" data-section-name="Tasks" data-class =""/>                        <label for="secondaryRefId">Version</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="taskAction"                    data-mandatory="false">                        <input type="checkbox" data-value="Actions" data-id="taskAction" data-index = "12" data-section-name="Tasks" data-class ="pv-col-xxs"/>                        <label for="taskAction">Actions</label>                    </li>                                        </ul>    <a href="javascript:void(0);" class="pull-right btn-filter grid-filter ic-sm m-r-5"       title="Enable/Disable Filters"       data-section-id="#taskSection" data-section-name = "Tasks" data-filter-hide="true">        <i class="md md-filter" aria-hidden="true"></i>    </a>    <a href="javascript:void(0);" class="pull-right grid-refresh ic-sm m-r-5" title="Refresh"       data-section-id="#taskSection" data-section-name = "Tasks">        <i class="md md-refresh" aria-hidden="true"></i>    </a>    <a href="javascript:void(0);" class="pull-right grid-add ic-sm m-r-5"       title="Add" data-section-id="#taskSection" data-section-name = "Tasks">        <i class="md md-add" aria-hidden="true"></i>    </a></span>            </h4>        </div>        <div id="taskSection" class="panel-collapse collapse rxmain-container-content pv-grid-sec">            <div class="row pv-sec-seperator form-pv">                <div class="col-md-12">                    <div class="form-group">                        <div class="pv-caselist">    <div class="panel m-b-0">        <div class="panel-body p-0 m-0">            <div class="dataTables_scroll">                <table id="tableContainerId4cc752d0-afc5-4d9e-b360-e2bac2493e14" cellspacing="0" class="table table-striped display order-column list-table pv-list-table pv-grid-table display"></table>            </div>        </div>    </div></div><script>    var pvi = pvi || {};    pvi.dataGridObject = pvi.dataGridObject || {};    pvi.dataGridObject['Tasks'] = {        gridOptions:{            tableContainerId: 'tableContainerId4cc752d0-afc5-4d9e-b360-e2bac2493e14',            gridHeaders: [{"inputType":"javascript","mandatory":true,"className":"pv-col-xxs","name":"taskIndex","data":"taskIndex","title":"#","visible":true,"width":"60px","disable_yadcf":true,"orderable":false,"searchable":false,"htmlCode":{"function":{"arguments":"row,type,data,meta","body":"return (1 + meta.row + meta.settings._iDisplayStart);"}}},{"inputType":"textbox","mandatory":false,"className":"pv-col-sm","name":"taskTypeId","data":"taskTypeId","title":"Task Type","visible":true,"width":"100px","orderable":false,"custom_filter_type":"number","dataSource":"taskCategory","filter_type":"select","select_type":"","style_class":"form-control","select_type_options":{"width":"auto","placeholder":"Select","allowClear":true},"sort_as":"none","filter_reset_button_text":false},{"inputType":"textbox","mandatory":false,"className":"pv-col-md","name":"assignedToId","data":"assignedToId","title":"Assigned To","visible":true,"width":"150px","orderable":false,"custom_filter_type":"number","dataSource":"userDetails","filter_type":"select","select_type":"","style_class":"form-control","select_type_options":{"width":"auto","placeholder":"Select","allowClear":true},"sort_as":"none","filter_reset_button_text":false},{"inputType":"string","mandatory":false,"className":"pv-col-xl","name":"description","data":"description","title":"Description","visible":true,"width":"300px","orderable":false},{"inputType":"datepicker","mandatory":false,"className":"pv-col-sm","name":"dueDate","data":"dueDate","title":"Due Date","visible":true,"width":"100px"},{"inputType":"datepicker","mandatory":false,"className":"pv-col-md","name":"completionDate","data":"completionDate","title":"Completion Date","visible":true,"width":"120px"},{"inputType":"textbox","mandatory":false,"className":"pv-col-sm","name":"priorityId","data":"priorityId","title":"Priority","visible":true,"width":"100px","custom_filter_type":"number","dataSource":"taskPriority","filter_type":"select","select_type":"","style_class":"form-control","select_type_options":{"width":"auto","placeholder":"Select","allowClear":true},"sort_as":"none","filter_reset_button_text":false},{"inputType":"textbox","mandatory":false,"className":"","name":"status","data":"status","title":"Status","visible":true,"width":"120px","orderable":false,"custom_filter_type":"number","dataSource":"taskStatus","filter_type":"select","select_type":"","style_class":"form-control","select_type_options":{"width":"auto","placeholder":"Select","allowClear":true},"sort_as":"none","filter_reset_button_text":false},{"inputType":"text","mandatory":false,"className":"","name":"createdByUserId","data":"createdByUserId","title":"Created By","visible":false,"width":"150px","orderable":false,"custom_filter_type":"number","dataSource":"userDetails","filter_type":"select","select_type":"","style_class":"form-control","select_type_options":{"width":"auto","placeholder":"Select","allowClear":true},"sort_as":"none","filter_reset_button_text":false},{"inputType":"datepicker","mandatory":false,"className":"pv-col-sm","name":"dateCreated","data":"dateCreated","title":"Date Created","visible":false,"width":"100px"},{"inputType":"textbox","mandatory":false,"className":"","name":"tertiaryRefId","data":"tertiaryRefId","title":"Intake Case #","visible":false,"width":"120px"},{"inputType":"number","mandatory":false,"className":"","name":"secondaryRefId","data":"secondaryRefId","title":"Version","visible":false,"width":"80px","custom_filter_type":"number"},{"inputType":"javascript","mandatory":false,"className":"pv-col-xxs","name":"taskAction","data":"taskAction","title":"Actions","visible":true,"width":"60px","htmlCode":{"function":{"arguments":"row, type, data, meta","body":"return  \"<i class='md md-pencil editTask' title='Edit' aria-hidden='true'><\u002fi> <i class='md md-delete deleteTask' title='Delete' aria-hidden='true'><\u002fi>\""}},"orderable":false,"searchable":false,"disable_yadcf":true}],            sectionId: '#taskSection'        }    };</script>                    </div>                </div>            </div>        </div>    </div>

                                            <!-- Follow up query Section -->
                                                
    <div class="panel panel-default section-header rxmain-container rxmain-container-top"         id="v-fuq">        <div class="rxmain-container-row rxmain-container-header panel-heading">            <h4 class="rxmain-container-header-label">                <a data-toggle="collapse" data-parent="#accordion-case"                   href="#fuqSection" class="collapsed sec-display-txt sectionTitle">                    Follow Up Queries</a>                <span class="pv-head-config configureFields">    <a href="#" class="dropdown-toggle pull-right ic-sm"       data-toggle="dropdown"><i class="md md-list" aria-hidden="true"></i></a>    <ul class="dropdown-menu field-config">                                                    <li class="field-visible checkbox checkbox-primary nowrap" data-id="fuqIndex"                    data-mandatory="true">                        <input type="checkbox" data-value="#" data-id="fuqIndex" data-index = "0" data-section-name="Follow Up Queries" data-class ="pv-col-xxs"/>                        <label for="fuqIndex">#</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="sentTo"                    data-mandatory="false">                        <input type="checkbox" data-value="Contacted" data-id="sentTo" data-index = "1" data-section-name="Follow Up Queries" data-class =""/>                        <label for="sentTo">Contacted</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="methodId"                    data-mandatory="false">                        <input type="checkbox" data-value="Method" data-id="methodId" data-index = "2" data-section-name="Follow Up Queries" data-class =""/>                        <label for="methodId">Method</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="subject"                    data-mandatory="false">                        <input type="checkbox" data-value="Subject / Description" data-id="subject" data-index = "3" data-section-name="Follow Up Queries" data-class ="pv-col-xl"/>                        <label for="subject">Subject / Description</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="dateSent"                    data-mandatory="false">                        <input type="checkbox" data-value="Date Contacted" data-id="dateSent" data-index = "4" data-section-name="Follow Up Queries" data-class ="pv-col-sm"/>                        <label for="dateSent">Date Contacted</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="sentBy"                    data-mandatory="false">                        <input type="checkbox" data-value="Contacted By" data-id="sentBy" data-index = "5" data-section-name="Follow Up Queries" data-class =""/>                        <label for="sentBy">Contacted By</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="comments"                    data-mandatory="false">                        <input type="checkbox" data-value="Comments" data-id="comments" data-index = "6" data-section-name="Follow Up Queries" data-class =""/>                        <label for="comments">Comments</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="dateClosed"                    data-mandatory="false">                        <input type="checkbox" data-value="Date Closed" data-id="dateClosed" data-index = "7" data-section-name="Follow Up Queries" data-class ="pv-col-sm"/>                        <label for="dateClosed">Date Closed</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="tertiaryRefId"                    data-mandatory="false">                        <input type="checkbox" data-value="Intake Case #" data-id="tertiaryRefId" data-index = "8" data-section-name="Follow Up Queries" data-class =""/>                        <label for="tertiaryRefId">Intake Case #</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="secondaryRefId"                    data-mandatory="false">                        <input type="checkbox" data-value="Version" data-id="secondaryRefId" data-index = "9" data-section-name="Follow Up Queries" data-class =""/>                        <label for="secondaryRefId">Version</label>                    </li>                                                                                <li class="field-visible checkbox checkbox-primary nowrap" data-id="fuqAction"                    data-mandatory="false">                        <input type="checkbox" data-value="Actions" data-id="fuqAction" data-index = "10" data-section-name="Follow Up Queries" data-class ="pv-col-xxs"/>                        <label for="fuqAction">Actions</label>                    </li>                                        </ul>    <a href="javascript:void(0);" class="pull-right btn-filter grid-filter ic-sm m-r-5"       title="Enable/Disable Filters"       data-section-id="#fuqSection" data-section-name = "Follow Up Queries" data-filter-hide="true">        <i class="md md-filter" aria-hidden="true"></i>    </a>    <a href="javascript:void(0);" class="pull-right grid-refresh ic-sm m-r-5" title="Refresh"       data-section-id="#fuqSection" data-section-name = "Follow Up Queries">        <i class="md md-refresh" aria-hidden="true"></i>    </a>    <a href="javascript:void(0);" class="pull-right grid-add ic-sm m-r-5"       title="Add" data-section-id="#fuqSection" data-section-name = "Follow Up Queries">        <i class="md md-add" aria-hidden="true"></i>    </a></span>            </h4>        </div>        <div id="fuqSection" class="panel-collapse collapse rxmain-container-content pv-grid-sec">            <div class="row pv-sec-seperator form-pv">                <div class="col-md-12">                    <div class="form-group">                        <div class="pv-caselist">    <div class="panel m-b-0">        <div class="panel-body p-0 m-0">            <div class="dataTables_scroll">                <table id="tableContainerId728c9510-d741-408d-be65-edfac32a40c5" cellspacing="0" class="table table-striped display order-column list-table pv-list-table pv-grid-table display"></table>            </div>        </div>    </div></div><script>    var pvi = pvi || {};    pvi.dataGridObject = pvi.dataGridObject || {};    pvi.dataGridObject['Follow Up Queries'] = {        gridOptions:{            tableContainerId: 'tableContainerId728c9510-d741-408d-be65-edfac32a40c5',            gridHeaders: [{"inputType":"javascript","mandatory":true,"className":"pv-col-xxs","name":"fuqIndex","data":"fuqIndex","title":"#","visible":true,"width":"60px","orderable":false,"searchable":false,"disable_yadcf":true,"htmlCode":{"function":{"arguments":"row,type,data,meta","body":"return (1 + meta.row + meta.settings._iDisplayStart);"}}},{"inputType":"textbox","mandatory":false,"className":"","name":"sentTo","data":"sentTo","title":"Contacted","visible":true,"width":"200px"},{"inputType":"textbox","mandatory":false,"className":"","name":"methodId","data":"methodId","title":"Method","visible":true,"width":"150px","orderable":false,"custom_filter_type":"number","dataSource":"method","filter_type":"select","select_type":"","style_class":"form-control","select_type_options":{"width":"auto","placeholder":"Select","allowClear":true},"sort_as":"none","filter_reset_button_text":false},{"inputType":"string","mandatory":false,"className":"pv-col-xl","name":"subject","data":"subject","title":"Subject / Description","visible":true,"width":"300px","orderable":false,"additional_fn":true,"htmlCode":{"pre_render":true,"function":{"arguments":"row,type,data,meta","body":"return pvi.manageFuqs.appendEmailIcon(data);"}}},{"inputType":"datepicker","mandatory":false,"className":"pv-col-sm","name":"dateSent","data":"dateSent","title":"Date Contacted","visible":true,"width":"100px"},{"inputType":"textbox","mandatory":false,"className":"","name":"sentBy","data":"sentBy","title":"Contacted By","visible":true,"width":"200px"},{"inputType":"string","mandatory":false,"className":"","name":"comments","data":"comments","title":"Comments","visible":false,"width":"250px","orderable":false},{"inputType":"datepicker","mandatory":false,"className":"pv-col-sm","name":"dateClosed","data":"dateClosed","title":"Date Closed","visible":false,"width":"100px"},{"inputType":"textbox","mandatory":false,"className":"","name":"tertiaryRefId","data":"tertiaryRefId","title":"Intake Case #","visible":false,"width":"120px"},{"inputType":"number","mandatory":false,"className":"","name":"secondaryRefId","data":"secondaryRefId","title":"Version","visible":false,"width":"120px","custom_filter_type":"number"},{"inputType":"javascript","mandatory":false,"className":"pv-col-xxs","name":"fuqAction","data":"fuqAction","title":"Actions","visible":true,"width":"60px","htmlCode":{"function":{"arguments":"row, type, data, meta","body":"return  \"<i class='md md-pencil editFuq' title ='Edit' aria-hidden='true'><\u002fi> <i class='md md-delete deleteFuq' title ='Delete' aria-hidden='true'><\u002fi>\""}},"orderable":false,"searchable":false,"disable_yadcf":true}],            sectionId: '#fuqSection'        }    };</script>                    </div>                </div>            </div>        </div>    </div>
                                        </div>
                                    </div>
                                </div>
                                
                                    



    <link rel="stylesheet" href="/assets/vendor/documentViewer/attachmentViewer-manifest-d21cd5ef9afc9d23b8e3146c7832bb09.css"/>

<div class="pane ui-layout-east invisible">
    <div class="attchment-accordian">
        <div class="panel-group" id="accordion-attachment">
            
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title">Attachments
                        <span class="pv-head-config configureFields always-visible">
                            <a class="expand-all ic-sm  " title="Expand All">
                                <i class="md md-add" aria-hidden="true"></i>
                            </a>&nbsp;
                            <a target="_blank"
                               href="/caseEntry/downloadAllCaseAttachment/244399"
                               class=" download-all id-added ic-sm  " title="Download All">
                                <i class="md md-download-multiple" aria-hidden="true"></i></a>
                        </span>
                    </h4>

                </div>

                
                    <div class="panel-body inner-table card-box attachmentPanelDiv">
                        
<input type="hidden" name="attachmentViewerHealthUrl" value="http://10.100.22.240:3000" id="attachmentViewerHealthUrl" />

    <div class="panel panel-default actualViewerBar">
            <div class="panel-heading actualViewerPanelHeader attachment-panel-heading">
                
                
                    <div class="panel-title">
                            <a data-toggle="collapse"
                               data-id="attachment1"
                               aria-controls="attachment1"
                               href="#attachment1"
                               class="collapsed attachmentFile lbl-elipsis m-0"
                               data-fileName="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf"
                               data-storageId="86771"
                               style="overflow: hidden;white-space: nowrap;text-overflow: ellipsis"
                               title="Autopsy Report (C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf) - Initial">
                                <span>Autopsy Report (C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf) - Initial</span>
                            </a>

                        <span class="pv-subhead-config configureFields show-head-icon-always always-visible">
                            <a href="#attachment1"
                               class="redactAttachmentLink redactAttachment-86771 hide"
                               data-id="attachment1"
                               data-fileName="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf"
                               data-storageId="86771" title="Redacted Version">
                                <span class="pv-ic-redact ic-sm">
                                    <i class="md md-alpha-r-box-outline" ></i>
                                </span>
                            </a>
                            <a href="javascript:void(0)"
                               class="attachmentRow ic-attachment-new-tab singleAttachmentLaunch"
                               data-fileName="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf"
                               data-storageId="86771"
                               data-id="attachment1">
                                <i class="md md-launch"
                                   title="Export" aria-hidden="true"></i>
                            </a>
                            
                        </span>
                    </div>
                
             </div>
        
        
            <div id="attachment1" class="panel-collapse collapse actualViewerAttachmentDiv">
                <div class="panel-body" style="height: 670px;">
                    <div id="viewer" style="height: 100%;"><img
                            src="/../assets/vendor/spinner.gif"/>
                    </div>
                </div>
            </div>
        
    </div>

    <div class="panel panel-default actualViewerBar">
            <div class="panel-heading actualViewerPanelHeader attachment-panel-heading">
                
                
                    <div class="panel-title">
                            <a data-toggle="collapse"
                               data-id="attachment2"
                               aria-controls="attachment2"
                               href="#attachment2"
                               class="collapsed attachmentFile lbl-elipsis m-0"
                               data-fileName="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf"
                               data-storageId="86772"
                               style="overflow: hidden;white-space: nowrap;text-overflow: ellipsis"
                               title="Additional PMDA R3 fields (C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf) - Initial">
                                <span>Additional PMDA R3 fields (C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf) - Initial</span>
                            </a>

                        <span class="pv-subhead-config configureFields show-head-icon-always always-visible">
                            <a href="#attachment2"
                               class="redactAttachmentLink redactAttachment-86772 hide"
                               data-id="attachment2"
                               data-fileName="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf"
                               data-storageId="86772" title="Redacted Version">
                                <span class="pv-ic-redact ic-sm">
                                    <i class="md md-alpha-r-box-outline" ></i>
                                </span>
                            </a>
                            <a href="javascript:void(0)"
                               class="attachmentRow ic-attachment-new-tab singleAttachmentLaunch"
                               data-fileName="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf"
                               data-storageId="86772"
                               data-id="attachment2">
                                <i class="md md-launch"
                                   title="Export" aria-hidden="true"></i>
                            </a>
                            
                        </span>
                    </div>
                
             </div>
        
        
            <div id="attachment2" class="panel-collapse collapse actualViewerAttachmentDiv">
                <div class="panel-body" style="height: 670px;">
                    <div id="viewer" style="height: 100%;"><img
                            src="/../assets/vendor/spinner.gif"/>
                    </div>
                </div>
            </div>
        
    </div>

    <div class="panel panel-default actualViewerBar">
            <div class="panel-heading actualViewerPanelHeader attachment-panel-heading">
                
                
                    <div class="panel-title">
                            <a data-toggle="collapse"
                               data-id="attachment3"
                               aria-controls="attachment3"
                               href="#attachment3"
                               class="collapsed attachmentFile lbl-elipsis m-0"
                               data-fileName="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf"
                               data-storageId="86773"
                               style="overflow: hidden;white-space: nowrap;text-overflow: ellipsis"
                               title="Chest X-ray (C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf) - Initial">
                                <span>Chest X-ray (C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf) - Initial</span>
                            </a>

                        <span class="pv-subhead-config configureFields show-head-icon-always always-visible">
                            <a href="#attachment3"
                               class="redactAttachmentLink redactAttachment-86773 hide"
                               data-id="attachment3"
                               data-fileName="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf"
                               data-storageId="86773" title="Redacted Version">
                                <span class="pv-ic-redact ic-sm">
                                    <i class="md md-alpha-r-box-outline" ></i>
                                </span>
                            </a>
                            <a href="javascript:void(0)"
                               class="attachmentRow ic-attachment-new-tab singleAttachmentLaunch"
                               data-fileName="C:&#92;PVInTake&#92;4.6.0.3&#92;scripts&#92;Script1_CaseCreation&#92;cioms_scanned.pdf"
                               data-storageId="86773"
                               data-id="attachment3">
                                <i class="md md-launch"
                                   title="Export" aria-hidden="true"></i>
                            </a>
                            
                        </span>
                    </div>
                
             </div>
        
        
            <div id="attachment3" class="panel-collapse collapse actualViewerAttachmentDiv">
                <div class="panel-body" style="height: 670px;">
                    <div id="viewer" style="height: 100%;"><img
                            src="/../assets/vendor/spinner.gif"/>
                    </div>
                </div>
            </div>
        
    </div>


                    </div>
                
            </div>
        </div>
    </div>
</div>

                                
                                
                                <button type="button" class="btn btn-primary waves-effect waves-light hide" id="editFUQ">Edit FUQ</button>
                                <button type="button" class="btn btn-primary waves-effect waves-light hide" id="deleteFUQ">Delete FUQ</button>


                                <div class="clearfix"></div>
                            </div>
                            
<div class="row">
    <div class="fixed-page-bot fullcase-page-bot">
        <div class="page-bot-lt">
            <div class="col-md-12">
                
                    <button data-destinationURL=""
                            class="submitBtn btn btn-warning btn-rounded w-md waves-effect waves-light m-b-5 marg-top btn-create ">Update</button>
                
            </div>
        </div>

        <div class="pull-right page-bot-rt">
            <button type="button" data-backdrop="true"
                    class="btn pv-btn-dark-grey btn-rounded w-md waves-effect waves-light m-b-5 btn-back marg-top">
                <i class="fa fa-caret-left" aria-hidden="true"></i> Back
            </button>
            <button type="button" data-dashboardurl="http://10.100.22.243:8081/dashboard/index"
                    class="btn pv-btn-grey btn-rounded w-md waves-effect waves-light m-b-5 marg-top btn-cancel hide">
                <i class="fa fa-times" aria-hidden="true"></i> Cancel
            </button>

            <div class="cancelBtnDivClass hide"><div
                    class="clearfix"></div><br><a
                    class="btn btn-sm btn-white yes">Ok</a> <a
                    class="btn btn-sm btn-danger cancel">Cancel</a></div>

            <div class="backBtnDivClass hide"><div
                    class="clearfix"></div><br><a
                    class="btn btn-sm btn-white yes">Yes</a> <a
                    class="btn btn-sm btn-white no">No</a>
                <a class="btn btn-sm btn-danger cancel">Cancel</a></div>

            <div class="warningTemplateClass hide"><div
                    class="clearfix"></div><br><a
                    class="btn btn-sm cancel btn-success yes">Ok</a>
            </div>
        </div>
    </div>
</div>

                        </div>
                    </div>
                </div>
            </div>
            <!-- end container -->
        </div>
        <!-- end content -->
        <!-- FOOTER -->
        <!-- <footer class="footer text-right">
               2016 © RxLogix.
               </footer> -->
        <!-- End FOOTER -->
    </div>
    <!-- ============================================================== -->
    <!-- End Right content here -->
    <!-- ============================================================== -->
</div>
<div id="testTemplate-2" class="hide" data-table="true">
    


<div class="row pv-section" data-templateId="testTemplate"
     class="panel-collapse rxmain-container-content rxmain-container-show collapse pv-section"
     aria-expanded="false">
    <table class="table pv-labtest-grid-listview table-striped pv-inner-table m-b-0 hide" data-templateId="2">
        <thead>
        <tr>
            <th class="num-col">#</th>
            <th class="lt-col">
                <div class="row">
                    <div class="col-md-7">
                        <label class="control-label lbl-elipsis" title="Test Name">Test Name
                            
                            <i class="fa fa-long-arrow-down" aria-hidden="true"></i>
                            <a href="javascript:void(0);" data-tabular="true" data-target="pv-lab-test-row" data-insert="pviTestPanel" class="pv-ic addTestInTable btn-add-panel edit-lock" title="Add New Test">
                                <i class="fa fa-flask" aria-hidden="true"><sup>+</sup></i>
                            </a>
                            
                        </label>
                    </div>
                    <div class="col-md-5">
                        <label class="control-label lbl-elipsis" title="Low-High">Low-High | Unit</label>
                    </div>
                </div>
            </th>
            <th class="rt-col">
                <div class="row">
                    <div class="col-md-2 pv-labtest-col-date">
                        <label class="control-label lbl-elipsis" title="Test Date">Test Date
                            
                            <a href="javascript:void(0);" data-target="" data-insert="" title="Add Test Date" class="pv-ic addReportInTable edit-lock">
                                <i class="fa fa-calendar-plus-o" aria-hidden="true"></i>
                            </a> <i class="fa fa-long-arrow-down" aria-hidden="true"></i>
                            
                        </label>
                    </div>
                    <div class="col-md-3">
                        <label class="control-label lbl-elipsis" title="Test Result">Test Result</label>
                    </div>
                    <div class="col-md-5">
                        <label class="control-label lbl-elipsis" title="Comments">Comments</label>
                    </div>
                    <div class="pull-left"><label class="control-label lbl-elipsis" title="More Info">More Info</label></div>
                </div>
            </th>
        </tr>
        </thead>
        <tbody class="pv-draggable-list ui-sortable [intake.common.dto.Test&#64;11fec62e, intake.common.dto.Test&#64;47bc3076, intake.common.dto.Test&#64;4e1f5c6e, intake.common.dto.Test&#64;3214c79a, intake.common.dto.Test&#64;55bca840, intake.common.dto.Test&#64;73a50d01, intake.common.dto.Test&#64;47edc337, intake.common.dto.Test&#64;53d1f447, intake.common.dto.Test&#64;631fa8d5, intake.common.dto.Test&#64;38096cb2, intake.common.dto.Test&#64;11d4f4ff, intake.common.dto.Test&#64;4d7b594e, intake.common.dto.Test&#64;53bc0934, intake.common.dto.Test&#64;2023830d, intake.common.dto.Test&#64;1666f8fa, intake.common.dto.Test&#64;1406251, intake.common.dto.Test&#64;32862ee4, intake.common.dto.Test&#64;e81e852, intake.common.dto.Test&#64;2f017050, intake.common.dto.Test&#64;2dd1dd0b]" id="testTableSection">
            
            
                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-0">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                0
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[0].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[0].name.reactionCoded" value="With hydrocephalus, spina bifida, cervical region" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="With hydrocephalus, spina bifida, cervical region" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[0].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[0].name.lltCode" class="hidden-id" value="10047993" id="safetyData.tests[0].name.lltCode" /><input type="hidden" name="safetyData.tests[0].name.codedWithSearchString" value="wit" id="safetyData.tests[0].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[0].name.hierarchyStorageId" value="" id="safetyData.tests[0].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[0].name.reportedReaction" value="wit" id="safetyData.tests[0].name.reportedReaction" /><input type="hidden" name="safetyData.tests[0].internalRowId" value="16" id="safetyData.tests[0].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[0].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[0].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[0].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[0].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[0].normalLow" value="" id="safetyData.tests[0].normalLow" /><input type="hidden" name="safetyData.tests[0].normalHigh" value="" id="safetyData.tests[0].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[0].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[0].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[0].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[0].reports[0].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[0].reports[0].date.value" data-mandatory="false" id="safetyData.tests[0].reports[0].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[0].reports[0].internalRowId" value="" id="safetyData.tests[0].reports[0].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[0].reports[0].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[0].reports[0].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[0].reports[0].result.value" />
            
            <input type="hidden" name="safetyData.tests[0].reports[0].result.id" value="" id="safetyData.tests[0].reports[0].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[0].reports[0].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[0].reports[0].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[0].reports[0].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[0].reports[0].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[0].reports[0].moreInfo">
                <input type="checkbox" name="safetyData.tests[0].reports[0].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[0].reports[0].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _0" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-1">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                1
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[1].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[1].name.reactionCoded" value="Blocked tear duct congenital" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Blocked tear duct congenital" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[1].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[1].name.lltCode" class="hidden-id" value="10005276" id="safetyData.tests[1].name.lltCode" /><input type="hidden" name="safetyData.tests[1].name.codedWithSearchString" value="blo" id="safetyData.tests[1].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[1].name.hierarchyStorageId" value="" id="safetyData.tests[1].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[1].name.reportedReaction" value="blo" id="safetyData.tests[1].name.reportedReaction" /><input type="hidden" name="safetyData.tests[1].internalRowId" value="55" id="safetyData.tests[1].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[1].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[1].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[1].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[1].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[1].normalLow" value="" id="safetyData.tests[1].normalLow" /><input type="hidden" name="safetyData.tests[1].normalHigh" value="" id="safetyData.tests[1].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[1].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[1].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[1].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[1].reports[1].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[1].reports[1].date.value" data-mandatory="false" id="safetyData.tests[1].reports[1].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[1].reports[1].internalRowId" value="" id="safetyData.tests[1].reports[1].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[1].reports[1].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[1].reports[1].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[1].reports[1].result.value" />
            
            <input type="hidden" name="safetyData.tests[1].reports[1].result.id" value="" id="safetyData.tests[1].reports[1].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[1].reports[1].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[1].reports[1].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[1].reports[1].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[1].reports[1].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[1].reports[1].moreInfo">
                <input type="checkbox" name="safetyData.tests[1].reports[1].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[1].reports[1].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _1" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-2">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                2
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[2].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[2].name.reactionCoded" value="Iron binding capacity total low" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Iron binding capacity total low" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[2].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[2].name.lltCode" class="hidden-id" value="10022966" id="safetyData.tests[2].name.lltCode" /><input type="hidden" name="safetyData.tests[2].name.codedWithSearchString" value="iro" id="safetyData.tests[2].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[2].name.hierarchyStorageId" value="" id="safetyData.tests[2].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[2].name.reportedReaction" value="iro" id="safetyData.tests[2].name.reportedReaction" /><input type="hidden" name="safetyData.tests[2].internalRowId" value="58" id="safetyData.tests[2].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[2].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[2].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[2].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[2].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[2].normalLow" value="" id="safetyData.tests[2].normalLow" /><input type="hidden" name="safetyData.tests[2].normalHigh" value="" id="safetyData.tests[2].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[2].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[2].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[2].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[2].reports[2].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[2].reports[2].date.value" data-mandatory="false" id="safetyData.tests[2].reports[2].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[2].reports[2].internalRowId" value="" id="safetyData.tests[2].reports[2].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[2].reports[2].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[2].reports[2].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[2].reports[2].result.value" />
            
            <input type="hidden" name="safetyData.tests[2].reports[2].result.id" value="" id="safetyData.tests[2].reports[2].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[2].reports[2].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[2].reports[2].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[2].reports[2].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[2].reports[2].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[2].reports[2].moreInfo">
                <input type="checkbox" name="safetyData.tests[2].reports[2].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[2].reports[2].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _2" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-3">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                3
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[3].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[3].name.reactionCoded" value="Thyreostatic therapy" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Thyreostatic therapy" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[3].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[3].name.lltCode" class="hidden-id" value="10065359" id="safetyData.tests[3].name.lltCode" /><input type="hidden" name="safetyData.tests[3].name.codedWithSearchString" value="thy" id="safetyData.tests[3].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[3].name.hierarchyStorageId" value="" id="safetyData.tests[3].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[3].name.reportedReaction" value="thy" id="safetyData.tests[3].name.reportedReaction" /><input type="hidden" name="safetyData.tests[3].internalRowId" value="61" id="safetyData.tests[3].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[3].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[3].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[3].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[3].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[3].normalLow" value="" id="safetyData.tests[3].normalLow" /><input type="hidden" name="safetyData.tests[3].normalHigh" value="" id="safetyData.tests[3].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[3].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[3].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[3].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[3].reports[3].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[3].reports[3].date.value" data-mandatory="false" id="safetyData.tests[3].reports[3].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[3].reports[3].internalRowId" value="" id="safetyData.tests[3].reports[3].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[3].reports[3].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[3].reports[3].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[3].reports[3].result.value" />
            
            <input type="hidden" name="safetyData.tests[3].reports[3].result.id" value="" id="safetyData.tests[3].reports[3].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[3].reports[3].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[3].reports[3].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[3].reports[3].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[3].reports[3].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[3].reports[3].moreInfo">
                <input type="checkbox" name="safetyData.tests[3].reports[3].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[3].reports[3].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _3" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-4">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                4
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[4].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[4].name.reactionCoded" value="Neointimal hyperplasia" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Neointimal hyperplasia" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[4].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[4].name.lltCode" class="hidden-id" value="10076851" id="safetyData.tests[4].name.lltCode" /><input type="hidden" name="safetyData.tests[4].name.codedWithSearchString" value="neo" id="safetyData.tests[4].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[4].name.hierarchyStorageId" value="" id="safetyData.tests[4].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[4].name.reportedReaction" value="neo" id="safetyData.tests[4].name.reportedReaction" /><input type="hidden" name="safetyData.tests[4].internalRowId" value="64" id="safetyData.tests[4].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[4].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[4].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[4].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[4].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[4].normalLow" value="" id="safetyData.tests[4].normalLow" /><input type="hidden" name="safetyData.tests[4].normalHigh" value="" id="safetyData.tests[4].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[4].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[4].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[4].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[4].reports[4].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[4].reports[4].date.value" data-mandatory="false" id="safetyData.tests[4].reports[4].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[4].reports[4].internalRowId" value="" id="safetyData.tests[4].reports[4].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[4].reports[4].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[4].reports[4].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[4].reports[4].result.value" />
            
            <input type="hidden" name="safetyData.tests[4].reports[4].result.id" value="" id="safetyData.tests[4].reports[4].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[4].reports[4].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[4].reports[4].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[4].reports[4].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[4].reports[4].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[4].reports[4].moreInfo">
                <input type="checkbox" name="safetyData.tests[4].reports[4].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[4].reports[4].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _4" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-5">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                5
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[5].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[5].name.reactionCoded" value="Blue baby syndrome" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Blue baby syndrome" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[5].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[5].name.lltCode" class="hidden-id" value="10069412" id="safetyData.tests[5].name.lltCode" /><input type="hidden" name="safetyData.tests[5].name.codedWithSearchString" value="blue" id="safetyData.tests[5].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[5].name.hierarchyStorageId" value="" id="safetyData.tests[5].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[5].name.reportedReaction" value="blue" id="safetyData.tests[5].name.reportedReaction" /><input type="hidden" name="safetyData.tests[5].internalRowId" value="67" id="safetyData.tests[5].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[5].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[5].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[5].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[5].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[5].normalLow" value="" id="safetyData.tests[5].normalLow" /><input type="hidden" name="safetyData.tests[5].normalHigh" value="" id="safetyData.tests[5].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[5].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[5].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[5].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[5].reports[5].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[5].reports[5].date.value" data-mandatory="false" id="safetyData.tests[5].reports[5].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[5].reports[5].internalRowId" value="" id="safetyData.tests[5].reports[5].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[5].reports[5].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[5].reports[5].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[5].reports[5].result.value" />
            
            <input type="hidden" name="safetyData.tests[5].reports[5].result.id" value="" id="safetyData.tests[5].reports[5].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[5].reports[5].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[5].reports[5].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[5].reports[5].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[5].reports[5].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[5].reports[5].moreInfo">
                <input type="checkbox" name="safetyData.tests[5].reports[5].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[5].reports[5].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _5" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-6">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                6
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[6].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[6].name.reactionCoded" value="Brittle teeth" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Brittle teeth" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[6].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[6].name.lltCode" class="hidden-id" value="10006374" id="safetyData.tests[6].name.lltCode" /><input type="hidden" name="safetyData.tests[6].name.codedWithSearchString" value="teet" id="safetyData.tests[6].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[6].name.hierarchyStorageId" value="" id="safetyData.tests[6].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[6].name.reportedReaction" value="teet" id="safetyData.tests[6].name.reportedReaction" /><input type="hidden" name="safetyData.tests[6].internalRowId" value="70" id="safetyData.tests[6].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[6].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[6].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[6].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[6].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[6].normalLow" value="" id="safetyData.tests[6].normalLow" /><input type="hidden" name="safetyData.tests[6].normalHigh" value="" id="safetyData.tests[6].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[6].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[6].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[6].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[6].reports[6].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[6].reports[6].date.value" data-mandatory="false" id="safetyData.tests[6].reports[6].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[6].reports[6].internalRowId" value="" id="safetyData.tests[6].reports[6].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[6].reports[6].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[6].reports[6].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[6].reports[6].result.value" />
            
            <input type="hidden" name="safetyData.tests[6].reports[6].result.id" value="" id="safetyData.tests[6].reports[6].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[6].reports[6].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[6].reports[6].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[6].reports[6].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[6].reports[6].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[6].reports[6].moreInfo">
                <input type="checkbox" name="safetyData.tests[6].reports[6].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[6].reports[6].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _6" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-7">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                7
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[7].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[7].name.reactionCoded" value="Black colored sweating" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Black colored sweating" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[7].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[7].name.lltCode" class="hidden-id" value="10004970" id="safetyData.tests[7].name.lltCode" /><input type="hidden" name="safetyData.tests[7].name.codedWithSearchString" value="bla" id="safetyData.tests[7].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[7].name.hierarchyStorageId" value="" id="safetyData.tests[7].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[7].name.reportedReaction" value="bla" id="safetyData.tests[7].name.reportedReaction" /><input type="hidden" name="safetyData.tests[7].internalRowId" value="73" id="safetyData.tests[7].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[7].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[7].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[7].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[7].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[7].normalLow" value="" id="safetyData.tests[7].normalLow" /><input type="hidden" name="safetyData.tests[7].normalHigh" value="" id="safetyData.tests[7].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[7].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[7].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[7].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[7].reports[7].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[7].reports[7].date.value" data-mandatory="false" id="safetyData.tests[7].reports[7].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[7].reports[7].internalRowId" value="" id="safetyData.tests[7].reports[7].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[7].reports[7].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[7].reports[7].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[7].reports[7].result.value" />
            
            <input type="hidden" name="safetyData.tests[7].reports[7].result.id" value="" id="safetyData.tests[7].reports[7].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[7].reports[7].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[7].reports[7].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[7].reports[7].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[7].reports[7].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[7].reports[7].moreInfo">
                <input type="checkbox" name="safetyData.tests[7].reports[7].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[7].reports[7].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _7" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-8">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                8
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[8].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[8].name.reactionCoded" value="Fire accident" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Fire accident" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[8].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[8].name.lltCode" class="hidden-id" value="10072097" id="safetyData.tests[8].name.lltCode" /><input type="hidden" name="safetyData.tests[8].name.codedWithSearchString" value="fire" id="safetyData.tests[8].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[8].name.hierarchyStorageId" value="" id="safetyData.tests[8].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[8].name.reportedReaction" value="fire" id="safetyData.tests[8].name.reportedReaction" /><input type="hidden" name="safetyData.tests[8].internalRowId" value="76" id="safetyData.tests[8].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[8].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[8].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[8].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[8].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[8].normalLow" value="" id="safetyData.tests[8].normalLow" /><input type="hidden" name="safetyData.tests[8].normalHigh" value="" id="safetyData.tests[8].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[8].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[8].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[8].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[8].reports[8].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[8].reports[8].date.value" data-mandatory="false" id="safetyData.tests[8].reports[8].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[8].reports[8].internalRowId" value="" id="safetyData.tests[8].reports[8].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[8].reports[8].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[8].reports[8].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[8].reports[8].result.value" />
            
            <input type="hidden" name="safetyData.tests[8].reports[8].result.id" value="" id="safetyData.tests[8].reports[8].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[8].reports[8].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[8].reports[8].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[8].reports[8].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[8].reports[8].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[8].reports[8].moreInfo">
                <input type="checkbox" name="safetyData.tests[8].reports[8].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[8].reports[8].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _8" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-9">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                9
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[9].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[9].name.reactionCoded" value="Dependence addictive" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Dependence addictive" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[9].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[9].name.lltCode" class="hidden-id" value="10012336" id="safetyData.tests[9].name.lltCode" /><input type="hidden" name="safetyData.tests[9].name.codedWithSearchString" value="dep" id="safetyData.tests[9].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[9].name.hierarchyStorageId" value="" id="safetyData.tests[9].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[9].name.reportedReaction" value="dep" id="safetyData.tests[9].name.reportedReaction" /><input type="hidden" name="safetyData.tests[9].internalRowId" value="79" id="safetyData.tests[9].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[9].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[9].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[9].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[9].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[9].normalLow" value="" id="safetyData.tests[9].normalLow" /><input type="hidden" name="safetyData.tests[9].normalHigh" value="" id="safetyData.tests[9].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[9].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[9].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[9].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[9].reports[9].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[9].reports[9].date.value" data-mandatory="false" id="safetyData.tests[9].reports[9].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[9].reports[9].internalRowId" value="" id="safetyData.tests[9].reports[9].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[9].reports[9].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[9].reports[9].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[9].reports[9].result.value" />
            
            <input type="hidden" name="safetyData.tests[9].reports[9].result.id" value="" id="safetyData.tests[9].reports[9].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[9].reports[9].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[9].reports[9].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[9].reports[9].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[9].reports[9].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[9].reports[9].moreInfo">
                <input type="checkbox" name="safetyData.tests[9].reports[9].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[9].reports[9].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _9" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-10">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                10
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[10].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[10].name.reactionCoded" value="Marantic endocarditis" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Marantic endocarditis" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[10].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[10].name.lltCode" class="hidden-id" value="10058147" id="safetyData.tests[10].name.lltCode" /><input type="hidden" name="safetyData.tests[10].name.codedWithSearchString" value="mar" id="safetyData.tests[10].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[10].name.hierarchyStorageId" value="" id="safetyData.tests[10].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[10].name.reportedReaction" value="mar" id="safetyData.tests[10].name.reportedReaction" /><input type="hidden" name="safetyData.tests[10].internalRowId" value="82" id="safetyData.tests[10].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[10].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[10].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[10].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[10].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[10].normalLow" value="" id="safetyData.tests[10].normalLow" /><input type="hidden" name="safetyData.tests[10].normalHigh" value="" id="safetyData.tests[10].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[10].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[10].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[10].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[10].reports[10].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[10].reports[10].date.value" data-mandatory="false" id="safetyData.tests[10].reports[10].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[10].reports[10].internalRowId" value="" id="safetyData.tests[10].reports[10].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[10].reports[10].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[10].reports[10].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[10].reports[10].result.value" />
            
            <input type="hidden" name="safetyData.tests[10].reports[10].result.id" value="" id="safetyData.tests[10].reports[10].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[10].reports[10].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[10].reports[10].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[10].reports[10].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[10].reports[10].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[10].reports[10].moreInfo">
                <input type="checkbox" name="safetyData.tests[10].reports[10].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[10].reports[10].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _10" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-11">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                11
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[11].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[11].name.reactionCoded" value="Digestive tract X-ray NOS normal" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Digestive tract X-ray NOS normal" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[11].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[11].name.lltCode" class="hidden-id" value="10012987" id="safetyData.tests[11].name.lltCode" /><input type="hidden" name="safetyData.tests[11].name.codedWithSearchString" value="dig" id="safetyData.tests[11].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[11].name.hierarchyStorageId" value="" id="safetyData.tests[11].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[11].name.reportedReaction" value="dig" id="safetyData.tests[11].name.reportedReaction" /><input type="hidden" name="safetyData.tests[11].internalRowId" value="85" id="safetyData.tests[11].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[11].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[11].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[11].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[11].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[11].normalLow" value="" id="safetyData.tests[11].normalLow" /><input type="hidden" name="safetyData.tests[11].normalHigh" value="" id="safetyData.tests[11].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[11].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[11].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[11].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[11].reports[11].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[11].reports[11].date.value" data-mandatory="false" id="safetyData.tests[11].reports[11].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[11].reports[11].internalRowId" value="" id="safetyData.tests[11].reports[11].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[11].reports[11].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[11].reports[11].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[11].reports[11].result.value" />
            
            <input type="hidden" name="safetyData.tests[11].reports[11].result.id" value="" id="safetyData.tests[11].reports[11].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[11].reports[11].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[11].reports[11].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[11].reports[11].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[11].reports[11].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[11].reports[11].moreInfo">
                <input type="checkbox" name="safetyData.tests[11].reports[11].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[11].reports[11].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _11" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-12">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                12
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[12].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[12].name.reactionCoded" value="Tri-iodothyronine free abnormal" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Tri-iodothyronine free abnormal" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[12].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[12].name.lltCode" class="hidden-id" value="10053794" id="safetyData.tests[12].name.lltCode" /><input type="hidden" name="safetyData.tests[12].name.codedWithSearchString" value="tri" id="safetyData.tests[12].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[12].name.hierarchyStorageId" value="" id="safetyData.tests[12].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[12].name.reportedReaction" value="tri" id="safetyData.tests[12].name.reportedReaction" /><input type="hidden" name="safetyData.tests[12].internalRowId" value="88" id="safetyData.tests[12].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[12].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[12].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[12].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[12].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[12].normalLow" value="" id="safetyData.tests[12].normalLow" /><input type="hidden" name="safetyData.tests[12].normalHigh" value="" id="safetyData.tests[12].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[12].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[12].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[12].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[12].reports[12].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[12].reports[12].date.value" data-mandatory="false" id="safetyData.tests[12].reports[12].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[12].reports[12].internalRowId" value="" id="safetyData.tests[12].reports[12].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[12].reports[12].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[12].reports[12].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[12].reports[12].result.value" />
            
            <input type="hidden" name="safetyData.tests[12].reports[12].result.id" value="" id="safetyData.tests[12].reports[12].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[12].reports[12].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[12].reports[12].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[12].reports[12].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[12].reports[12].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[12].reports[12].moreInfo">
                <input type="checkbox" name="safetyData.tests[12].reports[12].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[12].reports[12].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _12" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-13">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                13
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[13].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[13].name.reactionCoded" value="TSH decrease" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="TSH decrease" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[13].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[13].name.lltCode" class="hidden-id" value="10044714" id="safetyData.tests[13].name.lltCode" /><input type="hidden" name="safetyData.tests[13].name.codedWithSearchString" value="tsh" id="safetyData.tests[13].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[13].name.hierarchyStorageId" value="" id="safetyData.tests[13].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[13].name.reportedReaction" value="tsh" id="safetyData.tests[13].name.reportedReaction" /><input type="hidden" name="safetyData.tests[13].internalRowId" value="91" id="safetyData.tests[13].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[13].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[13].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[13].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[13].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[13].normalLow" value="" id="safetyData.tests[13].normalLow" /><input type="hidden" name="safetyData.tests[13].normalHigh" value="" id="safetyData.tests[13].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[13].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[13].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[13].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[13].reports[13].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[13].reports[13].date.value" data-mandatory="false" id="safetyData.tests[13].reports[13].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[13].reports[13].internalRowId" value="" id="safetyData.tests[13].reports[13].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[13].reports[13].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[13].reports[13].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[13].reports[13].result.value" />
            
            <input type="hidden" name="safetyData.tests[13].reports[13].result.id" value="" id="safetyData.tests[13].reports[13].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[13].reports[13].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[13].reports[13].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[13].reports[13].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[13].reports[13].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[13].reports[13].moreInfo">
                <input type="checkbox" name="safetyData.tests[13].reports[13].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[13].reports[13].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _13" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-14">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                14
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[14].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[14].name.reactionCoded" value="T3 normal" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="T3 normal" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[14].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[14].name.lltCode" class="hidden-id" value="10043054" id="safetyData.tests[14].name.lltCode" /><input type="hidden" name="safetyData.tests[14].name.codedWithSearchString" value="t3" id="safetyData.tests[14].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[14].name.hierarchyStorageId" value="" id="safetyData.tests[14].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[14].name.reportedReaction" value="t3" id="safetyData.tests[14].name.reportedReaction" /><input type="hidden" name="safetyData.tests[14].internalRowId" value="94" id="safetyData.tests[14].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[14].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[14].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[14].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[14].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[14].normalLow" value="" id="safetyData.tests[14].normalLow" /><input type="hidden" name="safetyData.tests[14].normalHigh" value="" id="safetyData.tests[14].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[14].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[14].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[14].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[14].reports[14].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[14].reports[14].date.value" data-mandatory="false" id="safetyData.tests[14].reports[14].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[14].reports[14].internalRowId" value="" id="safetyData.tests[14].reports[14].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[14].reports[14].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[14].reports[14].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[14].reports[14].result.value" />
            
            <input type="hidden" name="safetyData.tests[14].reports[14].result.id" value="" id="safetyData.tests[14].reports[14].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[14].reports[14].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[14].reports[14].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[14].reports[14].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[14].reports[14].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[14].reports[14].moreInfo">
                <input type="checkbox" name="safetyData.tests[14].reports[14].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[14].reports[14].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _14" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-15">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                15
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[15].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[15].name.reactionCoded" value="Iodide intoxication" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Iodide intoxication" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[15].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[15].name.lltCode" class="hidden-id" value="10022902" id="safetyData.tests[15].name.lltCode" /><input type="hidden" name="safetyData.tests[15].name.codedWithSearchString" value="iod" id="safetyData.tests[15].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[15].name.hierarchyStorageId" value="" id="safetyData.tests[15].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[15].name.reportedReaction" value="iod" id="safetyData.tests[15].name.reportedReaction" /><input type="hidden" name="safetyData.tests[15].internalRowId" value="97" id="safetyData.tests[15].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[15].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[15].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[15].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[15].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[15].normalLow" value="" id="safetyData.tests[15].normalLow" /><input type="hidden" name="safetyData.tests[15].normalHigh" value="" id="safetyData.tests[15].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[15].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[15].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[15].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[15].reports[15].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[15].reports[15].date.value" data-mandatory="false" id="safetyData.tests[15].reports[15].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[15].reports[15].internalRowId" value="" id="safetyData.tests[15].reports[15].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[15].reports[15].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[15].reports[15].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[15].reports[15].result.value" />
            
            <input type="hidden" name="safetyData.tests[15].reports[15].result.id" value="" id="safetyData.tests[15].reports[15].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[15].reports[15].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[15].reports[15].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[15].reports[15].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[15].reports[15].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[15].reports[15].moreInfo">
                <input type="checkbox" name="safetyData.tests[15].reports[15].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[15].reports[15].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _15" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-16">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                16
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[16].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[16].name.reactionCoded" value="Flu prevention" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Flu prevention" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[16].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[16].name.lltCode" class="hidden-id" value="10016792" id="safetyData.tests[16].name.lltCode" /><input type="hidden" name="safetyData.tests[16].name.codedWithSearchString" value="flu" id="safetyData.tests[16].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[16].name.hierarchyStorageId" value="" id="safetyData.tests[16].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[16].name.reportedReaction" value="flu" id="safetyData.tests[16].name.reportedReaction" /><input type="hidden" name="safetyData.tests[16].internalRowId" value="100" id="safetyData.tests[16].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[16].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[16].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[16].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[16].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[16].normalLow" value="" id="safetyData.tests[16].normalLow" /><input type="hidden" name="safetyData.tests[16].normalHigh" value="" id="safetyData.tests[16].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[16].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[16].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[16].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[16].reports[16].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[16].reports[16].date.value" data-mandatory="false" id="safetyData.tests[16].reports[16].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[16].reports[16].internalRowId" value="" id="safetyData.tests[16].reports[16].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[16].reports[16].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[16].reports[16].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[16].reports[16].result.value" />
            
            <input type="hidden" name="safetyData.tests[16].reports[16].result.id" value="" id="safetyData.tests[16].reports[16].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[16].reports[16].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[16].reports[16].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[16].reports[16].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[16].reports[16].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[16].reports[16].moreInfo">
                <input type="checkbox" name="safetyData.tests[16].reports[16].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[16].reports[16].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _16" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-17">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                17
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[17].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[17].name.reactionCoded" value="Body image disorder" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Body image disorder" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[17].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[17].name.lltCode" class="hidden-id" value="10005892" id="safetyData.tests[17].name.lltCode" /><input type="hidden" name="safetyData.tests[17].name.codedWithSearchString" value="bod" id="safetyData.tests[17].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[17].name.hierarchyStorageId" value="" id="safetyData.tests[17].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[17].name.reportedReaction" value="bod" id="safetyData.tests[17].name.reportedReaction" /><input type="hidden" name="safetyData.tests[17].internalRowId" value="103" id="safetyData.tests[17].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[17].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[17].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[17].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[17].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[17].normalLow" value="" id="safetyData.tests[17].normalLow" /><input type="hidden" name="safetyData.tests[17].normalHigh" value="" id="safetyData.tests[17].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[17].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[17].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[17].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[17].reports[17].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[17].reports[17].date.value" data-mandatory="false" id="safetyData.tests[17].reports[17].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[17].reports[17].internalRowId" value="" id="safetyData.tests[17].reports[17].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[17].reports[17].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[17].reports[17].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[17].reports[17].result.value" />
            
            <input type="hidden" name="safetyData.tests[17].reports[17].result.id" value="" id="safetyData.tests[17].reports[17].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[17].reports[17].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[17].reports[17].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[17].reports[17].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[17].reports[17].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[17].reports[17].moreInfo">
                <input type="checkbox" name="safetyData.tests[17].reports[17].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[17].reports[17].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _17" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-18">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                18
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[18].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[18].name.reactionCoded" value="Factor V Leiden carrier" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Factor V Leiden carrier" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[18].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[18].name.lltCode" class="hidden-id" value="10075652" id="safetyData.tests[18].name.lltCode" /><input type="hidden" name="safetyData.tests[18].name.codedWithSearchString" value="den" id="safetyData.tests[18].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[18].name.hierarchyStorageId" value="" id="safetyData.tests[18].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[18].name.reportedReaction" value="den" id="safetyData.tests[18].name.reportedReaction" /><input type="hidden" name="safetyData.tests[18].internalRowId" value="106" id="safetyData.tests[18].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[18].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[18].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[18].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[18].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[18].normalLow" value="" id="safetyData.tests[18].normalLow" /><input type="hidden" name="safetyData.tests[18].normalHigh" value="" id="safetyData.tests[18].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[18].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[18].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[18].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[18].reports[18].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[18].reports[18].date.value" data-mandatory="false" id="safetyData.tests[18].reports[18].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[18].reports[18].internalRowId" value="" id="safetyData.tests[18].reports[18].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[18].reports[18].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[18].reports[18].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[18].reports[18].result.value" />
            
            <input type="hidden" name="safetyData.tests[18].reports[18].result.id" value="" id="safetyData.tests[18].reports[18].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[18].reports[18].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[18].reports[18].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[18].reports[18].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[18].reports[18].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[18].reports[18].moreInfo">
                <input type="checkbox" name="safetyData.tests[18].reports[18].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[18].reports[18].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _18" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
                    



<tr class="row-table pv-section-record ui-sortable-handle  " style="display: table-row" id="test-section-19">
    <td class="serialNo">
        
            <span class="new-index badge-index row-count">
                19
            </span>
        
        
        <div class="del-test hide">
            <a href="javascript:void(0);" title="Remove this test" class="pull-right remove-section edit-lock">
                <i class="md md-close delTestIcon" aria-hidden="true"></i>
            </a>
        </div>
        
    </td>
    <td class="testName">
        



    <div id="safetyData.tests[19].name.reactionCoded" class='col-md-7   template-control  testName'>
        <div class="input-group internal">
            <input type="text" class="form-control  singleMeddraField meddraBrowser  " name="safetyData.tests[19].name.reactionCoded" value="Yellow nail syndrome" maxlength="250" data-mandatory="false" data-mandatorySet="0" data-placement="top" data-placeholder="" data-browser-value="Yellow nail syndrome" data-browser-type="meddra" data-flag-target="" data-fieldId="testName" id="safetyData.tests[19].name.reactionCoded" />
            
            <input type="hidden" name="safetyData.tests[19].name.lltCode" class="hidden-id" value="10048244" id="safetyData.tests[19].name.lltCode" /><input type="hidden" name="safetyData.tests[19].name.codedWithSearchString" value="yellow" id="safetyData.tests[19].name.codedWithSearchString" /><input type="hidden" name="safetyData.tests[19].name.hierarchyStorageId" value="" id="safetyData.tests[19].name.hierarchyStorageId" /><input type="hidden" name="safetyData.tests[19].name.reportedReaction" value="yellow" id="safetyData.tests[19].name.reportedReaction" /><input type="hidden" name="safetyData.tests[19].internalRowId" value="109" id="safetyData.tests[19].internalRowId" />
            <span class="btn-open-medrab input-group-addon bg-primary b-0 text-white datepicker-icon  "
                  data-toggle="modal" id="safetyData.meddra.search" name="safetyData.meddra.search">
                <i class="glyphicon glyphicon-search"></i>
            </span>
        </div>
    </div>
<input type="hidden" name=safetyData.tests[19].deleted value=false>
        <div class="col-md-5 testUnits test-has-name">
            




    <div id="safetyData.tests[19].normalLowHigh" class="col-md-5 template-control  testNormalLowHigh  ">
        <div class='internal' data-id="testNormalLowHigh">
            <input type="text" class="form-control   normalHighLowValue " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[19].normalLowHigh" value="" data-initial-value="" maxlength="50" data-field-id="testNormalLowHigh" id="safetyData.tests[19].normalLowHigh" />
            
            <input type="hidden" name="safetyData.tests[19].normalLow" value="" id="safetyData.tests[19].normalLow" /><input type="hidden" name="safetyData.tests[19].normalHigh" value="" id="safetyData.tests[19].normalHigh" />
        </div>
    </div>






    <div id="safetyData.tests[19].unit.id" class=" testUnit null template-control col-md-7  ">
    
    <div class='internal' data-id="testUnit">


    <select class="form-control   select2-box testUnitField select2-lazy   " name="safetyData.tests[19].unit.id" data-from="labTestUnits" data-tabular="false" data-mandatorySet="0" data-placeholder="Select" data-mandatory="false" data-source="lab-test-unit-list" data-value="" id="safetyData.tests[19].unit.id" >
<option value="" selected="selected">Select</option>
</select>
    
    

</div></div>
        </div>
    </td>

    <td class="testReportRow testReports">
        
            <div class="row test-date-row"  data-reportNo="0">
                



    <div id="safetyData.tests[19].reports[19].date.value" class="template-control testDate  col-md-2 ">
    

<div class="">
    <div class="datepicker internal input-group date "
         data-id="testDate">
        <input type="text" class="form-control   " name="safetyData.tests[19].reports[19].date.value" data-mandatory="false" id="safetyData.tests[19].reports[19].date.value" data-partialdatesallowed="1" value="" data-mandatorySet="0" placeholder="DD-MMM-CCYY hh:mm:ss" data-precision="DD-MMM-YYYY" />
        <span type="button" class="input-group-addon bg-primary text-white b-0 datepicker-icon">
            <i class="md md-calendar-blank"></i>
        </span>
    </div>
    
    <input type="hidden" name="safetyData.tests[19].reports[19].internalRowId" value="" id="safetyData.tests[19].reports[19].internalRowId" />
</div>
</div>






    <div id="safetyData.tests[19].reports[19].result.value" class="col-md-3 template-control  testResult  ">
        <div class='internal' data-id="testResult">
            <input type="text" class="form-control   testResultInput " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[19].reports[19].result.value" value="" data-initial-value="" maxlength="2000" data-field-id="testResult" id="safetyData.tests[19].reports[19].result.value" />
            
            <input type="hidden" name="safetyData.tests[19].reports[19].result.id" value="" id="safetyData.tests[19].reports[19].result.id" />
        </div>
    </div>






    <div id="safetyData.tests[19].reports[19].comments" class="col-md-5 template-control  testComments  ">
        <div class='internal' data-id="testComments">
            <input type="text" class="form-control    " data-mandatory="false" data-mandatorySet="0" name="safetyData.tests[19].reports[19].comments" value="" data-initial-value="" maxlength="2000" data-field-id="testComments" id="safetyData.tests[19].reports[19].comments" />
            
            
        </div>
    </div>



    
        <div id="safetyData.tests[19].reports[19].moreInfo" class='col-sm-1     testMoreInfo'>
            <div class='checkbox checkbox-primary    p-t-0 ' data-id="testMoreInfo">
                <input type="hidden" name="_safetyData.tests[19].reports[19].moreInfo">
                <input type="checkbox" name="safetyData.tests[19].reports[19].moreInfo" value="true" data-mandatory="false"
                       data-mandatorySet="0" class="  "  data-search-field=""/>
                
                <label class="" for="testMoreInfo"></label>
            </div>
            
        </div>
    
<input type="hidden" name=safetyData.tests[19].reports[19].deleted value=>
                <div class="del-report">
                    <a href="javascript:void(0);" title="Remove this report" class="pull-right btn-del-panel remove-section del-test-report edit-lock">
                        <i class="md md-close delReportIcon _19" aria-hidden="true"></i>
                    </a>
                </div>
            </div>
        

    </td>
</tr>

                
            
        </tbody>
    </table>
</div>


</div>
<input type="hidden" name="isCaseEntryPage" value="true" id="isCaseEntryPage" />

<div id="justificationModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" id="justificationCloseButton" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title justificationComments">Case Assignment</h4>
            </div>
            <div class="modal-body">
                <div class="row assigneeUserList">
                    <div class="col-sm-6 required">
                        <label for="assigneeUserList" class="control-label lbl-elipsis">Assign To:</label>
                        <select name="assigneeUserList" id="assigneeUserList" class="form-control select2"></select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <label for="justificationModalId" class="control-label">Comments
                        </label>
                        <textarea id="justificationModalId" name="justificationComments" rows="4" cols="20" maxlength="500" class="form-control fm-text-area" ></textarea>
                        <span class="maxlength-feedback"></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="justificationModalOkButton" class="btn btn-inverse waves-effect waves-light">Ok</button>
                <button type="button" id="assignCancelButton" class="btn btn-default btn-md">Cancel</button>
               </div>
        </div>
    </div>
</div>

<div id="simpleJustificationModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="false" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close simpleJustificationCancelBtn" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title">Justification</h4>
            </div>
            <div class="modal-body">
                <form>
                <div class="row">
                    <div class="col-sm-12 required">
                        <div class="alert alert-danger fade in hide p-0 p-l-10 p-r-10" id="messageBox">
                            <div id="errorMessage"></div>
                        </div>
                        <label class="control-label  lbl-elipsis">Comments</label>
                        <textarea  id="simpleJustification" rows="4" cols="20" maxlength="500" name="simpleJustification" class="form-control  fm-text-area" ></textarea>
                        <span class="maxlength-feedback"></span>
                    </div>
                </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-inverse waves-effect waves-light simpleJustificationOkBtn" disabled="disabled">Ok</button>
                <button type="button" class="btn btn-default btn-md simpleJustificationCancelBtn" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<script>
    var rejectedStateId = 7;
    var finalStateId = 3;
    var activeStateId = 2;
    var closedStateId = 11;
    var referenceDataUpdateDateTime = "08/26/2020 05:44:52";
</script>
<script type="text/javascript">
    if((/MSIE \d|Trident.*rv:/.test(navigator.userAgent)) || (/Edge/.test(navigator.userAgent)))
        document.write('<script src="/assets/vendorUi/formdata.min.js"><\/script>');
</script>


   <!-- Common JS Files -->
    
    <script type="application/javascript">
        var configUpdateDateTime = "08/26/2020 05:44:52";
        var loginUser = "Load16";
        var usernameToSavePreference = "Load16";
        var loggedInUserFullName = "Load16";
        var privacyLocationsForCase = [1, 99, 73, 79];
        var corporateTimezone = "GMT";
        var userTimeZone = "Etc/GMT+12";
        var defaultTemplateId="2";
        var currentUserId="244136801";
        var suspectProductId = 29;
        var referenceDataUpdateDateTime = "08/26/2020 05:44:52";
        var priorities = [{"id":1025,"value":"P1","type":"casePriority"},{"id":1026,"value":"P2","type":"casePriority"},{"id":1027,"value":"P3","type":"casePriority"},{"id":1028,"value":"P4","type":"casePriority"},{"id":1029,"value":"P5","type":"casePriority"}];
        var loggedInUserType = "NON_LDAP";
        var passwordResetUri = "/password/resetOwnPassword";
        var authType = "Database";
        var ssoLogoutUrl = "";
        var caseJustAuthEnabled = false;
    </script>
    <script type="text/javascript" src="/assets/application-a0469687a4859320633b35ed9c5374ee.js" ></script>
    
    
        <script type="text/javascript" src="/assets/vendor/attachmentViewer-manifest-b347c0c37643c7b9e173f4b09adae617.js" ></script>
    
    <!-- Begin: Custom Page JavaScript Should Go Here -->
    
    <script type="text/javascript" src="/assets/app/case-entry/case-entry-manifest-326b4b6f7e313829e23e4a6c86b40dfb.js" ></script>

    <!-- End: Custom Page JavaScript Should Go Here -->
</body>
</html>
</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="9472781" offset="0" length="4096" />
        <PacketInfo time="9472796" offset="4096" length="16384" />
        <PacketInfo time="9472796" offset="20480" length="16384" />
        <PacketInfo time="9472812" offset="36864" length="16384" />
        <PacketInfo time="9472828" offset="53248" length="16384" />
        <PacketInfo time="9472828" offset="69632" length="8046" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>