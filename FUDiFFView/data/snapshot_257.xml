<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="257">
  <HTTPTask id="1073" hostname="10.100.22.243:8081" path="/caseEntry/fetchAllTemplates?templateId=2" url="http://10.100.22.243:8081/caseEntry/fetchAllTemplates?templateId=2" ip="10.100.22.243" port="8081" connectionId="56" origin="Primary" frame="1" startDateTime="2020-08-31T10:21:57.974+05:30" startTime="407449828" endTime="407450625">
    <QueryString>
      <HTTPDataSet>
        <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
          <ActualData>dGVtcGxhdGVJZD0y</ActualData>
        </HTTPData>
      </HTTPDataSet>
      <IsExternalData>false</IsExternalData>
    </QueryString>
    <HTTPSplittedQueryStrings>
      <HTTPHeaderEntity name="templateId" index="0">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>Mg==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
    </HTTPSplittedQueryStrings>
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTAuMTAwLjIyLjI0Mzo4MDgx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Requested-With" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>WE1MSHR0cFJlcXVlc3Q=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDM6ODA4MS9jYXNlRW50cnkvc2hvdy8yNDQ2NzU/b3BlbkFjY29yZGlvbj10cnVl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U0VTU0lPTj0yNGQ0NzBkOS0yYzIxLTQ5MTQtOTZhMC04MTRkM2IyNDc2Nzk7IEF1dGhUeXBlPURhdGFiYXNl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC9jYXNlRW50cnkvZmV0Y2hBbGxUZW1wbGF0ZXM/dGVtcGxhdGVJZD0yIEhUVFAvMS4xDQpIb3N0OiAxMC4xMDAuMjIuMjQzOjgwODENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCkFjY2VwdDogKi8qDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNClgtUmVxdWVzdGVkLVdpdGg6IFhNTEh0dHBSZXF1ZXN0DQpSZWZlcmVyOiBodHRwOi8vMTAuMTAwLjIyLjI0Mzo4MDgxL2Nhc2VFbnRyeS9zaG93LzI0NDY3NT9vcGVuQWNjb3JkaW9uPXRydWUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuOQ0KQ29va2llOiBTRVNTSU9OPTI0ZDQ3MGQ5LTJjMjEtNDkxNC05NmEwLTgxNGQzYjI0NzY3OTsgQXV0aFR5cGU9RGF0YWJhc2UNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="SESSION" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjRkNDcwZDktMmMyMS00OTE0LTk2YTAtODE0ZDNiMjQ3Njc5</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="AuthType" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RGF0YWJhc2U=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>0</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="X-Frame-Options" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>REVOWQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Application-Context" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb246cHJvZHVjdGlvbjo4MDgx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sO2NoYXJzZXQ9VVRGLTg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Transfer-Encoding" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y2h1bmtlZA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW9uLCAzMSBBdWcgMjAyMCAwNDo0OTo0MiBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIA0KWC1GcmFtZS1PcHRpb25zOiBERU5ZDQpYLUFwcGxpY2F0aW9uLUNvbnRleHQ6IGFwcGxpY2F0aW9uOnByb2R1Y3Rpb246ODA4MQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1VVEYtOA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogTW9uLCAzMSBBdWcgMjAyMCAwNDo0OTo0MiBHTVQNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>CgoKCjxkaXYgaWQ9InJlcG9ydGVyVGVtcGxhdGUiIGNsYXNzPSJoaWRlIj4KICAgIAogICAgICAgIAoKCjxkaXYgY2xhc3M9InBhbmVsIHB2LXNlY3Rpb24tcmVjb3JkIHB2LXJlcG9ydGVyIHVpLXNvcnRhYmxlLWhhbmRsZSBwYW5lbC1kZWZhdWx0ICIKICAgICBpZD0icmVwb3J0ZXItc2VjdGlvbi0wIj4KICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPgogICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPgogICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtaGVhZGVyPSJSZXBvcnRlci1TZWN0aW9uIgogICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1yZXBvcnRlciIgaHJlZj0iI3JlcG9ydGVyLXNlY3Rpb25fMCIKICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUiIGFyaWEtZXhwYW5kZWQ9InRydWUiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJhZGdlIHJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPlJlcG9ydGVyLVNlY3Rpb24KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29uZmlndXJlRmllbGRzIHB2LXN1YmhlYWQtY29uZmlnIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtcmVwb3J0ZXIiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIgogICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJyZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIF8wIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2g0PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gaW5uZXItcmVwZWF0YWJsZSIgYXJpYS1leHBhbmRlZD0idHJ1ZSIKICAgICAgICAgaWQ9InJlcG9ydGVyLXNlY3Rpb25fMCI+CiAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGZvcm0tcHYiPgogICAgICAgICAgICAgICAgCgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0icmVwb3J0ZXJUaXRsZSIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcmVwb3J0ZXJUaXRsZSAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+VGl0bGU8L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlclRpdGxlIj4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLnRpdGxlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0icmVwb3J0ZXJUaXRsZSIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLnRpdGxlIiAvPgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uaW50ZXJuYWxSb3dJZCIgLz4KICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InJlcG9ydGVyTmFtZSIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcmVwb3J0ZXJOYW1lICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GaXJzdCBOYW1lPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJOYW1lIj4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmdpdmVuTmFtZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNjAiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyTmFtZSIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmdpdmVuTmFtZSIgLz4KICAgIAogICAgCiAgICA8L2Rpdj4gPC9kaXY+CgoKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlck1pZGRsZU5hbWUiIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHJlcG9ydGVyTWlkZGxlTmFtZSAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TWlkZGxlIE5hbWU8L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlck1pZGRsZU5hbWUiPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0ubWlkZGxlTmFtZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNjAiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyTWlkZGxlTmFtZSIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLm1pZGRsZU5hbWUiIC8+CiAgICAKICAgIAogICAgPC9kaXY+IDwvZGl2PgoKCgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0icmVwb3J0ZXJGYW1pbHlOYW1lIiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICByZXBvcnRlckZhbWlseU5hbWUgICAiID4KICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgTmFtZTwvbGFiZWw+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InJlcG9ydGVyRmFtaWx5TmFtZSI+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5mYW1pbHlOYW1lIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI2MCIgZGF0YS1maWVsZC1pZD0icmVwb3J0ZXJGYW1pbHlOYW1lIiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uZmFtaWx5TmFtZSIgLz4KICAgIAogICAgCiAgICA8L2Rpdj4gPC9kaXY+CgoKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlck9yZ2FuaXphdGlvbiIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcmVwb3J0ZXJPcmdhbml6YXRpb24gICAiID4KICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk9yZ2FuaXphdGlvbjwvbGFiZWw+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InJlcG9ydGVyT3JnYW5pemF0aW9uIj4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLm9yZ2FuaXphdGlvbiIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNjAiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyT3JnYW5pemF0aW9uIiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0ub3JnYW5pemF0aW9uIiAvPgogICAgCiAgICAKICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InJlcG9ydGVyRGVwYXJ0bWVudCIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcmVwb3J0ZXJEZXBhcnRtZW50ICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EZXBhcnRtZW50PC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJEZXBhcnRtZW50Ij4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmRlcGFydG1lbnQiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjYwIiBkYXRhLWZpZWxkLWlkPSJyZXBvcnRlckRlcGFydG1lbnQiIGlkPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5kZXBhcnRtZW50IiAvPgogICAgCiAgICAKICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InJlcG9ydGVyU3RyZWV0IiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICByZXBvcnRlclN0cmVldCAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RyZWV0PC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJTdHJlZXQiPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uc3RyZWV0IiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIxMDAiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyU3RyZWV0IiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uc3RyZWV0IiAvPgogICAgCiAgICAKICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InJlcG9ydGVyQ2l0eSIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcmVwb3J0ZXJDaXR5ICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5DaXR5PC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJDaXR5Ij4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmNpdHkiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjM1IiBkYXRhLWZpZWxkLWlkPSJyZXBvcnRlckNpdHkiIGlkPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5jaXR5IiAvPgogICAgCiAgICAKICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InJlcG9ydGVyU3RhdGUiIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHJlcG9ydGVyU3RhdGUgICAiID4KICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXRlIC8gUHJvdmluY2U8L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlclN0YXRlIj4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLnN0YXRlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI0MCIgZGF0YS1maWVsZC1pZD0icmVwb3J0ZXJTdGF0ZSIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLnN0YXRlIiAvPgogICAgCiAgICAKICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InJlcG9ydGVyUG9zdGNvZGUiIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHJlcG9ydGVyUG9zdGNvZGUgICAiID4KICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlBvc3Rjb2RlPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJQb3N0Y29kZSI+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5wb3N0Y29kZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTUiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyUG9zdGNvZGUiIGlkPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5wb3N0Y29kZSIgLz4KICAgIAogICAgCiAgICA8L2Rpdj4gPC9kaXY+CgoKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlclRlbGVwaG9uZSIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcmVwb3J0ZXJUZWxlcGhvbmUgICAiID4KICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlRlbGVwaG9uZTwvbGFiZWw+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InJlcG9ydGVyVGVsZXBob25lIj4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLnRlbGVwaG9uZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMzMiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyVGVsZXBob25lIiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0udGVsZXBob25lIiAvPgogICAgCiAgICAKICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InJlcG9ydGVyRmF4IiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICByZXBvcnRlckZheCAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RmF4IE51bWJlcjwvbGFiZWw+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InJlcG9ydGVyRmF4Ij4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmZheE51bWJlciIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjYiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyRmF4IiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uZmF4TnVtYmVyIiAvPgogICAgCiAgICAKICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InJlcG9ydGVyRW1haWwiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICByZXBvcnRlckVtYWlsICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbWFpbDwvbGFiZWw+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InJlcG9ydGVyRW1haWwiPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uZW1haWwiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwMCIgZGF0YS1maWVsZC1pZD0icmVwb3J0ZXJFbWFpbCIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmVtYWlsIiAvPgogICAgCiAgICAKICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InJlcG9ydGVyQ291bnRyeSIgY2xhc3M9IiByZXBvcnRlckNvdW50cnkgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xLWhhbGYgIHJlcXVpcmVkLXNldCI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvdW50cnk8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJDb3VudHJ5Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgY291bnRyeSBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmNvdW50cnkuaWQiIGRhdGEtZnJvbT0iY291bnRyaWVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMSIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmNvdW50cnkuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgoKICAgIDxkaXYgaWQ9InJlcG9ydGVyUXVhbGlmaWNhdGlvbiIgY2xhc3M9IiByZXBvcnRlclF1YWxpZmljYXRpb24gbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xLWhhbGYgIHJlcXVpcmVkLXNldCI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlF1YWxpZmljYXRpb248L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJRdWFsaWZpY2F0aW9uIj4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0ucXVhbGlmaWNhdGlvbi5pZCIgZGF0YS1mcm9tPSJyZXBvcnRlclR5cGVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMSIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLnF1YWxpZmljYXRpb24uaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgoKICAgIDxkaXYgaWQ9InJlcG9ydGVyQ29udGFjdFR5cGUiIGNsYXNzPSIgcmVwb3J0ZXJDb250YWN0VHlwZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvbnRhY3QgVHlwZTwvbGFiZWw+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlckNvbnRhY3RUeXBlIj4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdDItYm94ICBzZWxlY3QyIG11bHRpU2VsZWN0U2VsZWN0MkZpZWxkIHdyYXBwZWQtbXVsdGlzZWxlY3QgICBoYXMtZGVmYXVsdC12YWwiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmNvbnRhY3RUeXBlcy5pZCIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IkNob29zZSIgbXVsdGlwbGU9Im11bHRpcGxlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjIwMDIiIGlkPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5jb250YWN0VHlwZXMuaWQiID4NCjxvcHRpb24gdmFsdWU9IjIwMDAiID5Db3JyZXNwb25kZW5jZSBDb250YWN0PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIyMDAxIiA+UGF0aWVudDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMjAwMiIgc2VsZWN0ZWQ9InNlbGVjdGVkIiA+UmVwb3J0ZXI8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgoKICAgIDxkaXYgaWQ9InJlcG9ydGVyQ29uc2VudFRvRGlzY2xvc2VQSUkiIGNsYXNzPSIgcmVwb3J0ZXJDb25zZW50VG9EaXNjbG9zZVBJSSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29uc2VudCB0byBkaXNjbG9zZSBQSUk8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJDb25zZW50VG9EaXNjbG9zZVBJSSI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uY29uc2VudFRvRGlzY2xvc2VQSUkuaWQiIGRhdGEtZnJvbT0iY29uc2VudFRvRGlzY2xvc2VQSUkiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uY29uc2VudFRvRGlzY2xvc2VQSUkuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMjEiID5ZZXM8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMjIiID5Obzwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgoKCgogICAgPGRpdiBpZD0icmVwb3J0ZXJDb25zZW50Rm9yRlUiIGNsYXNzPSIgcmVwb3J0ZXJDb25zZW50Rm9yRlUgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xLWhhbGYgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvbnNlbnQgZm9yIEYvVTwvbGFiZWw+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlckNvbnNlbnRGb3JGVSI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uY29uc2VudEZvckZVLmlkIiBkYXRhLWZyb209ImNvbnNlbnRGb3JGVSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5jb25zZW50Rm9yRlUuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMzEiID5ZZXM8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMzIiID5Obzwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgogICAgCiAgICAgICAgPGRpdiBpZD0icmVwb3J0ZXJQcmltYXJ5UmVwb3J0ZXIiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xLWhhbGYgICAgcmVwb3J0ZXJQcmltYXJ5UmVwb3J0ZXInPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlByaW1hcnkgU291cmNlPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAnIGRhdGEtaWQ9InJlcG9ydGVyUHJpbWFyeVJlcG9ydGVyIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnJlcG9ydGVyc1swXS5wcmltYXJ5Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0ucHJpbWFyeSIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiBwcmltYXJ5UmVwb3J0ZXIgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5wcmltYXJ5Ij48L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnJlcG9ydGVyc1swXS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgoKICAgIAo8L2Rpdj4KCjxkaXYgaWQ9ImxpdGVyYXR1cmVUZW1wbGF0ZSIgY2xhc3M9ImhpZGUiPgogICAgCgo8ZGl2IGNsYXNzPSJyb3cgcm93LXN0cmlwIHB2LWxpdGVyYXR1cmUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlIHAtYi0xMCAgIgogICAgIGlkPSJsaXRlcmF0dXJlLXNlY3Rpb24tMCI+CiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2Pgo8ZGl2IGNsYXNzPSJyb3ctYWN0aW9uIG51bS1iZyI+CiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtbGl0ZXJhdHVyZSIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iIGNsYXNzPSJwdi1pYyBpYy14cyBtLXItNSByZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwiPgogICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBfMCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgIDwvYT4KPC9kaXY+CiAgICAKICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLXQtMjAgZm9ybS1wdiBmb3JtLWhvcml6b250YWwiPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJsaXRlcmF0dXJlQXV0aG9yIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgbGl0ZXJhdHVyZUF1dGhvciAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QXV0aG9yPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ibGl0ZXJhdHVyZUF1dGhvciI+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLmxpdGVyYXR1cmVzWzBdLmF1dGhvciIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTIwIiBkYXRhLWZpZWxkLWlkPSJsaXRlcmF0dXJlQXV0aG9yIiBpZD0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5hdXRob3IiIC8+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0uaW50ZXJuYWxSb3dJZCIgLz4KICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9ImxpdGVyYXR1cmVUaXRsZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIGxpdGVyYXR1cmVUaXRsZSAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+VGl0bGU8L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJsaXRlcmF0dXJlVGl0bGUiPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS50aXRsZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjUwIiBkYXRhLWZpZWxkLWlkPSJsaXRlcmF0dXJlVGl0bGUiIGlkPSJzYWZldHlEYXRhLmxpdGVyYXR1cmVzWzBdLnRpdGxlIiAvPgogICAgCiAgICAKICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9ImxpdGVyYXR1cmVKb3VybmFsIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgbGl0ZXJhdHVyZUpvdXJuYWwgICAiID4KICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkpvdXJuYWw8L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJsaXRlcmF0dXJlSm91cm5hbCI+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLmxpdGVyYXR1cmVzWzBdLmpvdXJuYWwiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjgwIiBkYXRhLWZpZWxkLWlkPSJsaXRlcmF0dXJlSm91cm5hbCIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0uam91cm5hbCIgLz4KICAgIAogICAgCiAgICA8L2Rpdj4gPC9kaXY+CgoKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJsaXRlcmF0dXJlWWVhciIgY2xhc3M9ImNvbC1tZC0xIHRlbXBsYXRlLWNvbnRyb2wgIGxpdGVyYXR1cmVZZWFyICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5ZZWFyPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ibGl0ZXJhdHVyZVllYXIiPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS55ZWFyIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI0IiBkYXRhLWZpZWxkLWlkPSJsaXRlcmF0dXJlWWVhciIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0ueWVhciIgLz4KICAgIAogICAgCiAgICA8L2Rpdj4gPC9kaXY+CgoKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJsaXRlcmF0dXJlVm9sdW1lIiBjbGFzcz0iY29sLW1kLTEgdGVtcGxhdGUtY29udHJvbCAgbGl0ZXJhdHVyZVZvbHVtZSAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Vm9sPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ibGl0ZXJhdHVyZVZvbHVtZSI+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLmxpdGVyYXR1cmVzWzBdLnZvbCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTUiIGRhdGEtZmllbGQtaWQ9ImxpdGVyYXR1cmVWb2x1bWUiIGlkPSJzYWZldHlEYXRhLmxpdGVyYXR1cmVzWzBdLnZvbCIgLz4KICAgIAogICAgCiAgICA8L2Rpdj4gPC9kaXY+CgoKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJsaXRlcmF0dXJlUGFnZXMiIGNsYXNzPSJjb2wtbWQtMSB0ZW1wbGF0ZS1jb250cm9sICBsaXRlcmF0dXJlUGFnZXMgICAiID4KICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlBhZ2VzPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ibGl0ZXJhdHVyZVBhZ2VzIj4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0ucGFnZXMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjMwIiBkYXRhLWZpZWxkLWlkPSJsaXRlcmF0dXJlUGFnZXMiIGlkPSJzYWZldHlEYXRhLmxpdGVyYXR1cmVzWzBdLnBhZ2VzIiAvPgogICAgCiAgICAKICAgIDwvZGl2PiA8L2Rpdj4KCgoKCjxkaXYgaWQ9ImxpdGVyYXR1cmVGaWxlUGF0aCIKICAgICBjbGFzcz0nIHRlbXBsYXRlLWNvbnRyb2wgICAgbGl0ZXJhdHVyZUZpbGVQYXRoICAgbGl0ZXJhdHVyZUZpbGVQYXRoJz4KICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGJhc2ljLWxpdGVyYXR1cmUtNyBpbnRlcm5hbCIgZGF0YS1pZD0ibGl0ZXJhdHVyZUZpbGVQYXRoIj4KICAgIDxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+TGl0ZXJhdHVyZSBBcnRpY2xlPC9sYWJlbD4KCjxkaXYgY2xhc3M9ImZpbGUtdXBsb2FkZXIiIGRhdGEtcHJvdmlkZXM9ImZpbGV1cGxvYWQiPgo8aW5wdXQgdHlwZT0iZmlsZSIgbmFtZT0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5saXRlcmF0dXJlQXJ0aWNsZS5maWxlUGF0aCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9ImZpbGUgIj4KCjxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIj4KICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICIgZGlzYWJsZWQgcGxhY2Vob2xkZXI9IkF0dGFjaCBhIGZpbGUiIGlkPSJsaXRlcmF0dXJlRmlsZVBhdGgiCiAgICAgICAgICAgbmFtZT0ic2FmZXR5RGF0YS5maWxlSW5wdXRCb3hbLTFdLmZpbGVOYW1lIiB2YWx1ZT0iIj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5saXRlcmF0dXJlQXJ0aWNsZS5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0ubGl0ZXJhdHVyZUFydGljbGUuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5saXRlcmF0dXJlQXJ0aWNsZS5maWxlTmFtZSIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0ubGl0ZXJhdHVyZUFydGljbGUuZmlsZU5hbWUiIC8+CiAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuICI+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnJvd3NlIGJ0biBidG4tcHJpbWFyeSBidG4tZmlsZS11cGxvYWQgIgogICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIj48aQogICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgPC9idXR0b24+CiAgICA8L3NwYW4+CgogICAgCjwvZGl2Pgo8L2Rpdj4KCiAgICA8L2Rpdj4KICA8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLmxpdGVyYXR1cmVzWzBdLmRlbGV0ZWQgdmFsdWU9PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKCjwvZGl2PgoKPGRpdiBpZD0iZXZlbnRUZW1wbGF0ZSIgY2xhc3M9ImhpZGUiPgogICAgCiAgICAgICAgCgoKPGRpdiBjbGFzcz0icGFuZWwgcHYtc2VjdGlvbi1yZWNvcmQgcHYtZXZlbnQgdWktc29ydGFibGUtaGFuZGxlIHBhbmVsLWRlZmF1bHQgIgogICAgIGlkPSJldmVudC1zZWN0aW9uLTAiPgogICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+CiAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+CiAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS1oZWFkZXI9IkV2ZW50LVNlY3Rpb24iCiAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWV2ZW50IiBocmVmPSIjZXZlbnQtc2VjdGlvbl8wIgogICAgICAgICAgICAgICBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmFkZ2Ugcm93LWNvdW50IGJhZGdlLWluZGV4Ij48L3NwYW4+RXZlbnQtU2VjdGlvbgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb25maWd1cmVGaWVsZHMgcHYtc3ViaGVhZC1jb25maWciPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSJwdi1ldmVudCIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iCiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJlbW92ZS1zZWN0aW9uIHB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCBldmVudC1kZWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgXzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvaDQ+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiBpbm5lci1yZXBlYXRhYmxlIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIgogICAgICAgICBpZD0iZXZlbnQtc2VjdGlvbl8wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5ICI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgZm9ybS1wdiI+CiAgICAgICAgICAgICAgICAKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9ImV2ZW50UmVwb3J0ZWRSZWFjdGlvbiIgY2xhc3M9JyBjb2wtbWQtNCByZXF1aXJlZCAgdGVtcGxhdGUtY29udHJvbCAgZXZlbnRSZXBvcnRlZFJlYWN0aW9uJyA+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlcG9ydGVkIFJlYWN0aW9uPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9ImV2ZW50UmVwb3J0ZWRSZWFjdGlvbiI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGV2ZW50TmFtZUJyb3dzZXIgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1swXS5yZXBvcnRlZFJlYWN0aW9uIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnk9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSJldmVudFJlYWN0aW9uQ29kZWQiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJldmVudFJlcG9ydGVkUmVhY3Rpb24iIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5yZXBvcnRlZFJlYWN0aW9uIiAvPgogICAgICAgIAogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1swXS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIgogICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKICAgIDxkaXYgaWQ9ImV2ZW50TGFuZ3VhZ2UiIGNsYXNzPSIgZXZlbnRMYW5ndWFnZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlcG9ydGVkIExhbmd1YWdlPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50TGFuZ3VhZ2UiPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICBoYXMtZGVmYXVsdC12YWwiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLnJlcG9ydGVkTGFuZ3VhZ2UuaWQiIGRhdGEtZnJvbT0ibGFuZ3VhZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjEiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5yZXBvcnRlZExhbmd1YWdlLmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0iZXZlbnRUcmFuc2xhdGVkUmVhY3Rpb24iIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBldmVudFRyYW5zbGF0ZWRSZWFjdGlvbiAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+VHJhbnNsYXRlZCBSZWFjdGlvbjwvbGFiZWw+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50VHJhbnNsYXRlZFJlYWN0aW9uIj4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLnRyYW5zbGF0ZWRSZWFjdGlvbiIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjUwIiBkYXRhLWZpZWxkLWlkPSJldmVudFRyYW5zbGF0ZWRSZWFjdGlvbiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLnRyYW5zbGF0ZWRSZWFjdGlvbiIgLz4KICAgIAogICAgCiAgICA8L2Rpdj4gPC9kaXY+CgoKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJldmVudFJlYWN0aW9uQ29kZWQiIGNsYXNzPSJjb2wtbWQtNCB0ZW1wbGF0ZS1jb250cm9sICBldmVudFJlYWN0aW9uQ29kZWQgICAiID4KICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlYWN0aW9uIChDb2RlZCk8L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudFJlYWN0aW9uQ29kZWQiPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0ucmVhY3Rpb25Db2RlZCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjUwIiBkYXRhLWZpZWxkLWlkPSJldmVudFJlYWN0aW9uQ29kZWQiIHJlYWRvbmx5PSJyZWFkb25seSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLnJlYWN0aW9uQ29kZWQiIC8+CiAgICAKICAgIAogICAgPC9kaXY+IDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0iZXZlbnRIaWdobGlnaHRlZEJ5UmVwb3J0ZXIiIGNsYXNzPSIgZXZlbnRIaWdobGlnaHRlZEJ5UmVwb3J0ZXIgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5IaWdobGlnaHRlZCBieSBSZXBvcnRlcjwvbGFiZWw+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudEhpZ2hsaWdodGVkQnlSZXBvcnRlciI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaGlnaGxpZ2h0ZWRCeVJlcG9ydGVyLmlkIiBkYXRhLWZyb209ImhpZ2hsaWdodGVkQnlSZXBvcnRlcnMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaGlnaGxpZ2h0ZWRCeVJlcG9ydGVyLmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIxNyIgPkhpZ2hsaWdodGVkLCBOT1Qgc2VyaW91czwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMTgiID5Ob3QgaGlnaGxpZ2h0ZWQsIE5PVCBzZXJpb3VzPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIxOSIgPkhpZ2hsaWdodGVkLCBTRVJJT1VTPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIyMCIgPk5vdCBoaWdobGlnaHRlZCwgU0VSSU9VUzwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgoKCgogICAgPGRpdiBpZD0iZXZlbnRTZXJpb3VzTmVzcyIgY2xhc3M9IiBldmVudFNlcmlvdXNOZXNzIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U2VyaW91c25lc3MgQ3JpdGVyaWE8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRTZXJpb3VzTmVzcyI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3QyLWJveCAgc2VyaW91c25lc3NlcyBtdWx0aVNlbGVjdFNlbGVjdDJGaWVsZCB3cmFwcGVkLW11bHRpc2VsZWN0ICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1swXS5zZXJpb3VzbmVzc2VzLmlkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iQ2hvb3NlIiBtdWx0aXBsZT0ibXVsdGlwbGUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0uc2VyaW91c25lc3Nlcy5pZCIgPg0KPG9wdGlvbiB2YWx1ZT0iMSIgPkRlYXRoPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIyIiA+TGlmZSBUaHJlYXRlbmluZzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMyIgPkhvc3BpdGFsaXphdGlvbjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNCIgPkRpc2FibGluZzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNSIgPkNvbmdlbml0YWwgQW5vbWFseTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNiIgPk90aGVyIE1lZGljYWxseSBJbXBvcnRhbnQgQ29uZGl0aW9uPC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L2Rpdj4KCgoKICAgIDxkaXYgaWQ9ImV2ZW50U3RhcnREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBldmVudFN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RhcnQgRGF0ZTwvbGFiZWw+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJldmVudFN0YXJ0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLnN0YXJ0RGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5zdGFydERhdGUuZm9ybWF0IiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKICAgIDxkaXYgaWQ9ImV2ZW50RW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgZXZlbnRFbmREYXRlICBjb2wtbWQtMiAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJldmVudEVuZERhdGUiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1swXS5lbmREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5lbmREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0uZW5kRGF0ZS5mb3JtYXQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9ImV2ZW50RHVyYXRpb24iIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBldmVudER1cmF0aW9uICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EdXJhdGlvbjwvbGFiZWw+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50RHVyYXRpb24iPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uZHVyYXRpb24udmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9ImV2ZW50RHVyYXRpb24iIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5kdXJhdGlvbi52YWx1ZSIgLz4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uZHVyYXRpb24uaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5kdXJhdGlvbi5pZCIgLz4KICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9ImV2ZW50T3V0Y29tZXMiIGNsYXNzPSIgZXZlbnRPdXRjb21lcyBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk91dGNvbWU8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRPdXRjb21lcyI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0ub3V0Y29tZS5pZCIgZGF0YS1mcm9tPSJvdXRjb21lcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5vdXRjb21lLmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L2Rpdj4KCgoKCiAgICA8ZGl2IGlkPSJldmVudE1lZGljYWxseUNvbmZpcm1lZCIgY2xhc3M9IiBldmVudE1lZGljYWxseUNvbmZpcm1lZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk1lZGljYWxseSBDb25maXJtZWQ8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRNZWRpY2FsbHlDb25maXJtZWQiPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLm1lZGljYWxseUNvbmZpcm1lZC5pZCIgZGF0YS1mcm9tPSJtZWRpY2FsbHlDb25maXJtZWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0ubWVkaWNhbGx5Q29uZmlybWVkLmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIyMSIgPlllczwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMjIiID5Obzwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgoKCgogICAgPGRpdiBpZD0iZXZlbnRDb3VudHJ5IiBjbGFzcz0iIGV2ZW50Q291bnRyeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvdW50cnk8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRDb3VudHJ5Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgY291bnRyeSBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmNvdW50cnkuaWQiIGRhdGEtZnJvbT0iY291bnRyaWVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLmNvdW50cnkuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgogICAgPGRpdiBpZD0iZXZlbnRIb3NwaXRhbGl6YXRpb25TdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGV2ZW50SG9zcGl0YWxpemF0aW9uU3RhcnREYXRlICBjb2wtbWQtMiAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Ib3NwaXRhbGl6YXRpb24gU3RhcnQgRGF0ZTwvbGFiZWw+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJldmVudEhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGFsbG93RGF0ZVdpdGhvdXRUaW1lICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaG9zcGl0YWxpemF0aW9uU3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5ob3NwaXRhbGl6YXRpb25TdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaG9zcGl0YWxpemF0aW9uU3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLmhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZS5mb3JtYXQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgogICAgPGRpdiBpZD0iZXZlbnRIb3NwaXRhbGl6YXRpb25FbmREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBldmVudEhvc3BpdGFsaXphdGlvbkVuZERhdGUgIGNvbC1tZC0yICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkhvc3BpdGFsaXphdGlvbiBFbmQgRGF0ZTwvbGFiZWw+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJldmVudEhvc3BpdGFsaXphdGlvbkVuZERhdGUiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBhbGxvd0RhdGVXaXRob3V0VGltZSAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmhvc3BpdGFsaXphdGlvbkVuZERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLmhvc3BpdGFsaXphdGlvbkVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaG9zcGl0YWxpemF0aW9uRW5kRGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5ob3NwaXRhbGl6YXRpb25FbmREYXRlLmZvcm1hdCIgLz4KPC9kaXY+CjwvZGl2PgoKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLmV2ZW50c1swXS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgoKICAgIAo8L2Rpdj4KCjx0YWJsZSBpZD0iYXR0YWNobWVudFRlbXBsYXRlIiBjbGFzcz0iaGlkZSIgZGF0YS10YWJsZT0idHJ1ZSI+CiAgICAKCgo8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgaWQ9ImF0dGFjaG1lbnQtc2VjdGlvbiI+CiAgICAKICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCI+PC90ZD4KICAgIAoKICAgIAoKCgogICAgPHRkIGlkPSJhdHRhY2htZW50UmVjZWlwdERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGF0dGFjaG1lbnRSZWNlaXB0RGF0ZSAgY29sLW1kLTIiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJhdHRhY2htZW50UmVjZWlwdERhdGUiPgoKPGRpdiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiCiAgICAgICAgIGRhdGEtaWQ9ImF0dGFjaG1lbnRSZWNlaXB0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGFsbG93RWRpdCAiIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0ucmVjZWlwdERhdGUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0ucmVjZWlwdERhdGUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMCIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz4KPC9kaXY+CjwvZGl2PjwvdGQ+CgoKCgoKPHRkIGlkPSJhdHRhY2htZW50RmlsZVR5cGUiIGNsYXNzPSIgYXR0YWNobWVudEZpbGVUeXBlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJhdHRhY2htZW50RmlsZVR5cGUiPgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IGFsbG93RWRpdCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0uZmlsZVR5cGUiIGRhdGEtZnJvbT0iZmlsZVR5cGVzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5maWxlVHlwZSIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC90ZD4KCgogICAgPHRkIGlkPSJhdHRhY2htZW50RmlsZVBhdGgiIGNsYXNzPSJjb2wtbWQtMyAgYWxsb3dFZGl0ICAgIGF0dGFjaG1lbnRGaWxlUGF0aCAiPgogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImF0dGFjaG1lbnRGaWxlUGF0aCI+CjxkaXYgY2xhc3M9ImZpbGUtdXBsb2FkZXIiIGRhdGEtcHJvdmlkZXM9ImZpbGV1cGxvYWQiPgo8aW5wdXQgdHlwZT0iZmlsZSIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5maWxlUGF0aCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9ImZpbGUgYWxsb3dFZGl0Ij4KCjxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIj4KICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICIgZGlzYWJsZWQgcGxhY2Vob2xkZXI9IkF0dGFjaCBhIGZpbGUiIGlkPSJhdHRhY2htZW50RmlsZVBhdGgiCiAgICAgICAgICAgbmFtZT0ic2FmZXR5RGF0YS5maWxlSW5wdXRCb3hbLTFdLmZpbGVOYW1lIiB2YWx1ZT0iIj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0uaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5maWxlTmFtZSIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0uZmlsZU5hbWUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5pc1JlZGFjdEZpbGUiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLmlzUmVkYWN0RmlsZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLnJlZGFjdEZpbGVOYW1lIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5yZWRhY3RGaWxlTmFtZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLmNhc2VDb3VudHJ5IiBjbGFzcz0iaGlkZGVuLWNhc2UtY291bnRyeSIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0uY2FzZUNvdW50cnkiIC8+CiAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuICI+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnJvd3NlIGJ0biBidG4tcHJpbWFyeSBidG4tZmlsZS11cGxvYWQgYWxsb3dFZGl0IgogICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIj48aQogICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgPC9idXR0b24+CiAgICA8L3NwYW4+CgogICAgPHNwYW4gY2xhc3M9IiAiPgogICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1yZWRhY3QgaWMtc20gcmVkYWN0QXR0YWNobWVudFNwYW4gcmVkYWN0QXR0YWNobWVudC0gaGlkZSI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYWxwaGEtci1ib3gtb3V0bGluZSByZWRhY3RPdmVybGF5SWNvbiI+PC9pPgogICAgICAgIDwvc3Bhbj4KPC9zcGFuPgoKPC9kaXY+CjwvZGl2PgoKICAgIDwvZGl2PjwvdGQ+CgoKCgo8dGQgaWQ9ImF0dGFjaG1lbnRQcm9jZXNzU3RhdHVzIiBjbGFzcz0iIGF0dGFjaG1lbnRQcm9jZXNzU3RhdHVzIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJhdHRhY2htZW50UHJvY2Vzc1N0YXR1cyI+CgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggYWxsb3dFZGl0IHNlbGVjdDItbGF6eSAgIGhhcy1kZWZhdWx0LXZhbCIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5wcm9jZXNzU3RhdHVzIiBkYXRhLWZyb209InByb2Nlc3NTdGF0dXMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIxMDAxIiBpZD0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5wcm9jZXNzU3RhdHVzIiA+DQo8b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC90ZD4KCgoKPHRkIGlkPSJhdHRhY2htZW50Q2FzZVZlcnNpb24iIGNsYXNzPSIgYXR0YWNobWVudENhc2VWZXJzaW9uIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMyAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJhdHRhY2htZW50Q2FzZVZlcnNpb24iPgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IGFsbG93RWRpdCAgICIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5jYXNlVmVyc2lvbiIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLmNhc2VWZXJzaW9uIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L3RkPgoKICAgIDx0ZCBpZD0iYXR0YWNobWVudElzUHJvdGVjdGVkIiBjbGFzcz0iIGlzUHJvdGVjdGVkIHYtbWlkZGxlIHRleHQtY2VudGVyIGFsbG93RWRpdCAgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMSAgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICcgZGF0YS1pZD0iYXR0YWNobWVudElzUHJvdGVjdGVkIj4KICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5pc1Byb3RlY3RlZCIvPgogICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5pc1Byb3RlY3RlZCIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIKICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgaXNQcm90ZWN0ZWQgdi1taWRkbGUgdGV4dC1jZW50ZXIgYWxsb3dFZGl0ICIgLz4KICAgICAgICA8bGFiZWwgY2xhc3M9IiI+PC9sYWJlbD4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5kZWxldGVkIHZhbHVlPT4KICAgIAogICAgICAgIDx0ZD4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iCiAgICAgICAgICAgICAgIGNsYXNzPSJ0YWJsZS1yb3ctZGVsIHB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gYnRuLWRlbC1wYW5lbCI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgXzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3RkPgogICAgCjwvdHI+Cgo8L3RhYmxlPgoKPHRhYmxlIGlkPSJzdHVkeVJlZ0luZm9UZW1wbGF0ZSIgY2xhc3M9ImhpZGUiIGRhdGEtdGFibGU9InRydWUiPgogICAgCgoKPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIGlkPSJzdHVkeVJlZ0luZm8tdGVtcGxhdGUiPgogICAgCiAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXgiPjwvdGQ+CiAgICAKCiAgICAKCgoKCiAgICA8dGQgaWQ9InN0dWR5UmVnaXN0cmF0aW9uTnVtYmVyIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgc3R1ZHlSZWdpc3RyYXRpb25OdW1iZXIgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ic3R1ZHlSZWdpc3RyYXRpb25OdW1iZXIiPgogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEuc3R1ZHkucmVnaXN0cmF0aW9uc1swXS5udW1iZXIiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJzdHVkeVJlZ2lzdHJhdGlvbk51bWJlciIgaWQ9InNhZmV0eURhdGEuc3R1ZHkucmVnaXN0cmF0aW9uc1swXS5udW1iZXIiIC8+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuc3R1ZHkucmVnaXN0cmF0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5zdHVkeS5yZWdpc3RyYXRpb25zWzBdLmludGVybmFsUm93SWQiIC8+CiAgICA8L2Rpdj48L3RkPgoKCgoKCjx0ZCBpZD0ic3R1ZHlDZW50ZXJDb3VudHJ5IiBjbGFzcz0iIHN0dWR5Q2VudGVyQ291bnRyeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ic3R1ZHlDZW50ZXJDb3VudHJ5Ij4KCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBjb3VudHJ5IHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5zdHVkeS5yZWdpc3RyYXRpb25zWzBdLmNvdW50cnkuaWQiIGRhdGEtZnJvbT0iY291bnRyaWVzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5zdHVkeS5yZWdpc3RyYXRpb25zWzBdLmNvdW50cnkuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnN0dWR5LnJlZ2lzdHJhdGlvbnNbMF0uZGVsZXRlZCB2YWx1ZT0+CiAgICAKICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIgogICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIF8wIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC90ZD4KICAgIAo8L3RyPgoKPC90YWJsZT4KCjxkaXYgaWQ9InBhdGllbnRNZWRIaXN0b3J5VGVtcGxhdGUiIGNsYXNzPSJoaWRlIj4KICAgIAoKPGRpdiBjbGFzcz0icm93IHJvdy1zdHJpcCBwdi1tZWQtaGlzdG9yeSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgcC1iLTEwICAiCiAgICAgaWQ9InBhdGllbnRNZWRIaXN0b3J5LXNlY3Rpb24tMCI+CiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2Pgo8ZGl2IGNsYXNzPSJyb3ctYWN0aW9uIG51bS1iZyI+CiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtbWVkLWhpc3RvcnkiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiBjbGFzcz0icHYtaWMgaWMteHMgbS1yLTUgcmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIj4KICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgXzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICA8L2E+CjwvZGl2PgogICAgCiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiIGNsYXNzPScgY29sLW1kLTMgICB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50TWVkaWNhbEhpc3RvcnknID4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TWVkaWNhbCBIaXN0b3J5PC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkucmVhY3Rpb25Db2RlZCIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIC8+CiAgICAgICAgCiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5tZWRpY2FsSGlzdG9yeS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uaW50ZXJuYWxSb3dJZCIgLz4KICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giID48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RhcnQgRGF0ZTwvbGFiZWw+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlTdGFydERhdGUiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5zdGFydERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4KICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uc3RhcnREYXRlLmZvcm1hdCIgLz4KPC9kaXY+CjwvZGl2PgoKCgoKCiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlFbmREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwYXRpZW50TWVkaWNhbEhpc3RvcnlFbmREYXRlICBjb2wtbWQtMiAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlFbmREYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4KICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmVuZERhdGUuZm9ybWF0IiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIiBjbGFzcz0iIHBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmcgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db250aW51aW5nPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmciPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmNvbnRpbnVpbmciIGRhdGEtZnJvbT0iY29udGludWluZ3MiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uY29udGludWluZyIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMjMiID5ZZXM8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjI0IiA+Tm88L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKICAgIAogICAgICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnkiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0zICAgIHBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnknPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZhbWlseSBIaXN0b3J5PC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAnIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnkiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmZhbWlseUhpc3RvcnkiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5mYW1pbHlIaXN0b3J5IiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmZhbWlseUhpc3RvcnkiPjwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIAoKPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sICAgICBwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyBjb2wtbWQtMTInPgoKICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29tbWVudHM8L2xhYmVsPgoKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyI+CiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uY29tbWVudHMiIG1heGxlbmd0aD0iMjAwMCIgcm93cz0iMiIgY29scz0iMTAwIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uY29tbWVudHMiID48L3RleHRhcmVhPgogICAgICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmRlbGV0ZWQgdmFsdWU9PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKCjwvZGl2PgoKPGRpdiBpZD0icGF0aWVudERydWdIaXN0b3J5VGVtcGxhdGUiIGNsYXNzPSJoaWRlIj4KICAgIAoKPGRpdiBjbGFzcz0icm93IHJvdy1zdHJpcCBwdi1kcnVnLWhpc3RvcnkgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlIHAtYi0xMCAgIgogICAgIGlkPSJwYXRpZW50RHJ1Z0hpc3Rvcnktc2VjdGlvbi0wIj4KICAgIAogICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj48c3BhbiBjbGFzcz0icm93LWNvdW50IGJhZGdlLWluZGV4Ij48L3NwYW4+PC9kaXY+CjxkaXYgY2xhc3M9InJvdy1hY3Rpb24gbnVtLWJnIj4KICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSJwdi1kcnVnLWhpc3RvcnkiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiBjbGFzcz0icHYtaWMgaWMteHMgbS1yLTUgcmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIj4KICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgXzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICA8L2E+CjwvZGl2PgogICAgCiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgCgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeU5hbWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50UGFzdERydWdIaXN0b3J5TmFtZSAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RHJ1ZyBOYW1lPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeU5hbWUiPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdOYW1lLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtZmllbGQtaWQ9InBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlOYW1lIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdOYW1lLnZhbHVlIiAvPgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z05hbWUuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z05hbWUuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uaW50ZXJuYWxSb3dJZCIgLz4KICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgogICAgPGRpdiBpZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeVN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcGF0aWVudFBhc3REcnVnSGlzdG9yeVN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RhcnQgRGF0ZTwvbGFiZWw+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJwYXRpZW50UGFzdERydWdIaXN0b3J5U3RhcnREYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4KICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uc3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5zdGFydERhdGUuZm9ybWF0IiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKICAgIDxkaXYgaWQ9InBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlFbmREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwYXRpZW50UGFzdERydWdIaXN0b3J5RW5kRGF0ZSAgY29sLW1kLTIgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RW5kIERhdGU8L2xhYmVsPgogICAgCgo8ZGl2IGNsYXNzPSIiPgogICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIKICAgICAgICAgZGF0YS1pZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeUVuZERhdGUiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmVuZERhdGUuZm9ybWF0IiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlEcnVnSW5kaWNhdGlvbiIgY2xhc3M9JyBjb2wtbWQtMyAgIHRlbXBsYXRlLWNvbnRyb2wgIHBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlEcnVnSW5kaWNhdGlvbicgPgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EcnVnIEluZGljYXRpb248L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeURydWdJbmRpY2F0aW9uIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z0luZGljYXRpb24ucmVhY3Rpb25Db2RlZCIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlEcnVnSW5kaWNhdGlvbiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5yZWFjdGlvbkNvZGVkIiAvPgogICAgICAgIAogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z0luZGljYXRpb24ucmVwb3J0ZWRSZWFjdGlvbiIgLz4KICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giID48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJwYXRpZW50UGFzdERydWdIaXN0b3J5RHJ1Z1JlYWN0aW9uIiBjbGFzcz0nIGNvbC1tZC0zICAgdGVtcGxhdGUtY29udHJvbCAgcGF0aWVudFBhc3REcnVnSGlzdG9yeURydWdSZWFjdGlvbicgPgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EcnVnIFJlYWN0aW9uPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlEcnVnUmVhY3Rpb24iPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnUmVhY3Rpb24ucmVhY3Rpb25Db2RlZCIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlEcnVnUmVhY3Rpb24iIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLnJlYWN0aW9uQ29kZWQiIC8+CiAgICAgICAgCiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnUmVhY3Rpb24uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLnJlcG9ydGVkUmVhY3Rpb24iIC8+CiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIgogICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgPC9kaXY+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRlbGV0ZWQgdmFsdWU9PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKCjwvZGl2PgoKPGRpdiBpZD0icGFyZW50TWVkSGlzdG9yeVRlbXBsYXRlIiBjbGFzcz0iaGlkZSI+CiAgICAKCjxkaXYgY2xhc3M9InJvdyByb3ctc3RyaXAgcGFyZW50TWVkSGlzdG9yeS1zZWN0aW9uIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSBwLWItMTAgICIKICAgICBpZD0icGFyZW50TWVkSGlzdG9yeS1zZWN0aW9uLTAiPgogICAgCiAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPjxzcGFuIGNsYXNzPSJyb3ctY291bnQgYmFkZ2UtaW5kZXgiPjwvc3Bhbj48L2Rpdj4KPGRpdiBjbGFzcz0icm93LWFjdGlvbiBudW0tYmciPgogICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9InBhcmVudE1lZEhpc3Rvcnktc2VjdGlvbiIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iIGNsYXNzPSJwdi1pYyBpYy14cyBtLXItNSByZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwiPgogICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBfMCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgIDwvYT4KPC9kaXY+CiAgICAKICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLXQtMjAgZm9ybS1wdiBmb3JtLWhvcml6b250YWwiPgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InBhcmVudE1lZGljYWxIaXN0b3J5IiBjbGFzcz0nIGNvbC1tZC0zICAgdGVtcGxhdGUtY29udHJvbCAgcGFyZW50TWVkaWNhbEhpc3RvcnknID4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TWVkaWNhbCBIaXN0b3J5PC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InBhcmVudE1lZGljYWxIaXN0b3J5Ij4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIG1heGxlbmd0aD0iMjUwIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwYXJlbnRNZWRpY2FsSGlzdG9yeSIgaWQ9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkucmVhY3Rpb25Db2RlZCIgLz4KICAgICAgICAKICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5tZWRpY2FsSGlzdG9yeS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIgogICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgogICAgPGRpdiBpZD0icGFyZW50TWVkaWNhbEhpc3RvcnlTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhcmVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlICBjb2wtbWQtMiAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5TdGFydCBEYXRlPC9sYWJlbD4KICAgIAoKPGRpdiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiCiAgICAgICAgIGRhdGEtaWQ9InBhcmVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5zdGFydERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uc3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uc3RhcnREYXRlLmZvcm1hdCIgLz4KPC9kaXY+CjwvZGl2PgoKCgoKCiAgICA8ZGl2IGlkPSJwYXJlbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhcmVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSAgY29sLW1kLTIgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RW5kIERhdGU8L2xhYmVsPgogICAgCgo8ZGl2IGNsYXNzPSIiPgogICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIKICAgICAgICAgZGF0YS1pZD0icGFyZW50TWVkaWNhbEhpc3RvcnlFbmREYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5lbmREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uZW5kRGF0ZS5mb3JtYXQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InBhcmVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyIgY2xhc3M9IiBwYXJlbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmcgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db250aW51aW5nPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhcmVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5jb250aW51aW5nIiBkYXRhLWZyb209ImNvbnRpbnVpbmdzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uY29udGludWluZyIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMjMiID5ZZXM8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjI0IiA+Tm88L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2Pgo8ZGl2IGlkPSJwYXJlbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCAgICAgcGFyZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyBjb2wtbWQtMTInPgoKICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29tbWVudHM8L2xhYmVsPgoKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXJlbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIj4KICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmNvbW1lbnRzIiBtYXhsZW5ndGg9IjIwMDAiIHJvd3M9IjIiIGNvbHM9IjEwMCIgaWQ9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uY29tbWVudHMiID48L3RleHRhcmVhPgogICAgICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uZGVsZXRlZCB2YWx1ZT0+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgoKPC9kaXY+CgoKPGRpdiBpZD0icGFyZW50RHJ1Z0hpc3RvcnlUZW1wbGF0ZSIgY2xhc3M9ImhpZGUiPgogICAgCgo8ZGl2IGNsYXNzPSJyb3cgcm93LXN0cmlwIHB2LWRydWctaGlzdG9yeS1wYXJlbnQgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlIHAtYi0xMCAgIgogICAgIGlkPSJwYXJlbnREcnVnSGlzdG9yeS1zZWN0aW9uLTAiPgogICAgCiAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPjxzcGFuIGNsYXNzPSJyb3ctY291bnQgYmFkZ2UtaW5kZXgiPjwvc3Bhbj48L2Rpdj4KPGRpdiBjbGFzcz0icm93LWFjdGlvbiBudW0tYmciPgogICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9InB2LWRydWctaGlzdG9yeS1wYXJlbnQiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiBjbGFzcz0icHYtaWMgaWMteHMgbS1yLTUgcmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIj4KICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgXzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICA8L2E+CjwvZGl2PgogICAgCiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgCgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0icGFyZW50UGFzdERydWdIaXN0b3J5TmFtZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHBhcmVudFBhc3REcnVnSGlzdG9yeU5hbWUgICAiID4KICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRydWcgTmFtZTwvbGFiZWw+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhcmVudFBhc3REcnVnSGlzdG9yeU5hbWUiPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z05hbWUudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1maWVsZC1pZD0icGFyZW50UGFzdERydWdIaXN0b3J5TmFtZSIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdOYW1lLnZhbHVlIiAvPgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnTmFtZS5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdOYW1lLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5pbnRlcm5hbFJvd0lkIiAvPgogICAgPC9kaXY+IDwvZGl2PgoKCgoKCiAgICA8ZGl2IGlkPSJwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhcmVudFBhc3REcnVnSGlzdG9yeVN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RhcnQgRGF0ZTwvbGFiZWw+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlTdGFydERhdGUiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5zdGFydERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4KICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uc3RhcnREYXRlLmZvcm1hdCIgLz4KPC9kaXY+CjwvZGl2PgoKCgoKCiAgICA8ZGl2IGlkPSJwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlFbmREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlFbmREYXRlICBjb2wtbWQtMiAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlFbmREYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4KICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmVuZERhdGUuZm9ybWF0IiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InBhcmVudFBhc3REcnVnSGlzdG9yeURydWdJbmRpY2F0aW9uIiBjbGFzcz0nIGNvbC1tZC0zICAgdGVtcGxhdGUtY29udHJvbCAgcGFyZW50UGFzdERydWdIaXN0b3J5RHJ1Z0luZGljYXRpb24nID4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RHJ1ZyBJbmRpY2F0aW9uPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InBhcmVudFBhc3REcnVnSGlzdG9yeURydWdJbmRpY2F0aW9uIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5yZWFjdGlvbkNvZGVkIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtZmllbGRJZD0icGFyZW50UGFzdERydWdIaXN0b3J5RHJ1Z0luZGljYXRpb24iIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5yZWFjdGlvbkNvZGVkIiAvPgogICAgICAgIAogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z0luZGljYXRpb24ucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLnJlcG9ydGVkUmVhY3Rpb24iIC8+CiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIgogICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0icGFyZW50UGFzdERydWdIaXN0b3J5RHJ1Z1JlYWN0aW9uIiBjbGFzcz0nIGNvbC1tZC0zICAgdGVtcGxhdGUtY29udHJvbCAgcGFyZW50UGFzdERydWdIaXN0b3J5RHJ1Z1JlYWN0aW9uJyA+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRydWcgUmVhY3Rpb248L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0icGFyZW50UGFzdERydWdIaXN0b3J5RHJ1Z1JlYWN0aW9uIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnUmVhY3Rpb24ucmVhY3Rpb25Db2RlZCIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InBhcmVudFBhc3REcnVnSGlzdG9yeURydWdSZWFjdGlvbiIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5yZWFjdGlvbkNvZGVkIiAvPgogICAgICAgIAogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnUmVhY3Rpb24ucmVwb3J0ZWRSZWFjdGlvbiIgLz4KICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giID48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICA8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kZWxldGVkIHZhbHVlPT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCgo8L2Rpdj4KCjxkaXYgaWQ9InByb2R1Y3REb3NlVGVtcGxhdGUiIGNsYXNzPSJoaWRlIj4KICAgIAoKPGRpdiBjbGFzcz0icm93IHJvdy1zdHJpcCBwdi1wcm9kdWN0RG9zZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgcC1iLTEwICAiCiAgICAgaWQ9InByb2R1Y3REb3NlLXNlY3Rpb24tMCI+CiAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2Pgo8ZGl2IGNsYXNzPSJyb3ctYWN0aW9uIG51bS1iZyI+CiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtcHJvZHVjdERvc2UiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiBjbGFzcz0icHYtaWMgaWMteHMgbS1yLTUgcmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIj4KICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgXzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICA8L2E+CjwvZGl2PgogICAgCiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgCgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0icHJvZHVjdERvc2VJbmZvcm1hdGlvbiIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdERvc2VJbmZvcm1hdGlvbiAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RG9zZTwvbGFiZWw+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlSW5mb3JtYXRpb24iPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjgiIGRhdGEtdW5pdExpc3Q9ImRvc2FnZS11bml0LWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kb3NlLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI4IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RG9zZUluZm9ybWF0aW9uIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRvc2UudmFsdWUiIC8+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kb3NlLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRvc2UuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uaW50ZXJuYWxSb3dJZCIgLz4KICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlRnJlcXVlbmN5IiBjbGFzcz0iIHByb2R1Y3REb3NlRnJlcXVlbmN5IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMS1oYWxmICAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GcmVxdWVuY3k8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VGcmVxdWVuY3kiPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5mcmVxdWVuY3kuaWQiIGRhdGEtZnJvbT0iZG9zYWdlRnJlcXVlbmN5IiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5mcmVxdWVuY3kuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgogICAgPGRpdiBpZD0icHJvZHVjdERvc2VTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHByb2R1Y3REb3NlU3RhcnREYXRlICBjb2wtbWQtMS1oYWxmICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPgogICAgCgo8ZGl2IGNsYXNzPSIiPgogICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIKICAgICAgICAgZGF0YS1pZD0icHJvZHVjdERvc2VTdGFydERhdGUiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgogICAgPGRpdiBpZD0icHJvZHVjdERvc2VFbmREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwcm9kdWN0RG9zZUVuZERhdGUgIGNvbC1tZC0xLWhhbGYgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RW5kIERhdGU8L2xhYmVsPgogICAgCgo8ZGl2IGNsYXNzPSIiPgogICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIKICAgICAgICAgZGF0YS1pZD0icHJvZHVjdERvc2VFbmREYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5lbmREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5lbmREYXRlLmZvcm1hdCIgLz4KPC9kaXY+CjwvZGl2PgoKCgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0icHJvZHVjdERvc2VEdXJhdGlvbiIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdERvc2VEdXJhdGlvbiAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RHVyYXRpb248L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZUR1cmF0aW9uIj4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VEdXJhdGlvbiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi52YWx1ZSIgLz4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmR1cmF0aW9uLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmR1cmF0aW9uLmlkIiAvPgogICAgPC9kaXY+IDwvZGl2PgoKCgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0icHJvZHVjdERvc2VCYXRjaE51bWJlciIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdERvc2VCYXRjaE51bWJlciAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QmF0Y2gvTG90IE51bWJlcjwvbGFiZWw+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlQmF0Y2hOdW1iZXIiPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmJhdGNoTnVtYmVyIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIzNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VCYXRjaE51bWJlciIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5iYXRjaE51bWJlciIgLz4KICAgIAogICAgCiAgICA8L2Rpdj4gPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZVJvdXRlIiBjbGFzcz0iIHByb2R1Y3REb3NlUm91dGUgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xLWhhbGYgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJvdXRlPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlUm91dGUiPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5yb3V0ZS5pZE9yVmFsdWUiIGRhdGEtdGFnPSJ0cnVlIiBkYXRhLWZyb209InJvdXRlIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5yb3V0ZS5pZE9yVmFsdWUiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgoKICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlUGFyZW50Um91dGUiIGNsYXNzPSIgcHJvZHVjdERvc2VQYXJlbnRSb3V0ZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UGFyZW50IFJvdXRlPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlUGFyZW50Um91dGUiPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5wYXJlbnRSb3V0ZS5pZE9yVmFsdWUiIGRhdGEtdGFnPSJ0cnVlIiBkYXRhLWZyb209InJvdXRlIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5wYXJlbnRSb3V0ZS5pZE9yVmFsdWUiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlRGVzY3JpcHRpb24iIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RG9zZURlc2NyaXB0aW9uICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Eb3NlIERlc2NyaXB0aW9uPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VEZXNjcmlwdGlvbiI+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZGVzY3JpcHRpb24iIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3REb3NlRGVzY3JpcHRpb24iIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZGVzY3JpcHRpb24iIC8+CiAgICAKICAgIAogICAgPC9kaXY+IDwvZGl2PgoKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZGVsZXRlZCB2YWx1ZT0+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgoKPC9kaXY+Cgo8dGFibGUgaWQ9InByb2R1Y3RTdWJzdGFuY2VzVGVtcGxhdGUiIGNsYXNzPSJoaWRlIiBkYXRhLXRhYmxlPSJ0cnVlIj4KICAgIAoKCjx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBpZD0icHJvZHVjdFN1YnN0YW5jZXMtc2VjdGlvbiI+CiAgICAKICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCI+PC90ZD4KICAgIAoKICAgIAoKCgo8dGQgaWQ9InByb2R1Y3RJbmdyZWRpZW50cyIgY2xhc3M9IiBwcm9kdWN0SW5ncmVkaWVudHMgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmdyZWRpZW50cyI+CgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1hamF4IHdyYXBwZWQtbXVsdGlzZWxlY3QgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uaW5ncmVkaWVudHNbMF0ubmFtZS5pZCIgZGF0YS1mcm9tPSIiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXVybD0iL2Nhc2VFbnRyeS9zZWFyY2hJbmdyZWRpZW50cyIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5pbmdyZWRpZW50c1swXS5uYW1lLmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5pbmdyZWRpZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5pbmdyZWRpZW50c1swXS5pbnRlcm5hbFJvd0lkIiAvPgoKPC9kaXY+PC90ZD4KCgoKCiAgICA8dGQgaWQ9ImluZ3JlZGllbnREb3NhZ2VVbml0IiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgaW5ncmVkaWVudERvc2FnZVVuaXQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iaW5ncmVkaWVudERvc2FnZVVuaXQiPgogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSIxMCIgZGF0YS11bml0TGlzdD0ic3RyZW5ndGgtdW5pdC1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIxMCIgZGF0YS1maWVsZC1pZD0iaW5ncmVkaWVudERvc2FnZVVuaXQiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLnZhbHVlIiAvPgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5pbmdyZWRpZW50c1swXS5zdHJlbmd0aC5pZCIgLz4KICAgIDwvZGl2PjwvdGQ+Cgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdHNbMF0uaW5ncmVkaWVudHNbMF0uZGVsZXRlZCB2YWx1ZT0+CiAgICAKICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIgogICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIF8iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3RkPgogICAgCjwvdHI+Cgo8L3RhYmxlPgoKPHRhYmxlIGlkPSJwcm9kdWN0SW5kaWNhdGlvblRlbXBsYXRlIiBjbGFzcz0iaGlkZSIgZGF0YS10YWJsZT0idHJ1ZSI+CiAgICAKCgo8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgaWQ9InByb2R1Y3RJbmRpY2F0aW9uLXNlY3Rpb24iPgogICAgCiAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXgiPjwvdGQ+CiAgICAKCiAgICAKCgoKICAgIAogICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTYgIHRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdEluZGljYXRpb25SZXBvcnRlZCI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uUmVwb3J0ZWQiPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0icHJvZHVjdEluZGljYXRpb25SZXBvcnRlZCI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgLz4KICAgICAgICAKICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucHJvZHVjdEluZGljYXRpb25zWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiAvPgogICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCiAgICA8dGQgaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0SW5kaWNhdGlvbkNvZGVkICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiPgogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucHJvZHVjdEluZGljYXRpb25zWzBdLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwMDAiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIHJlYWRvbmx5PSJyZWFkb25seSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucHJvZHVjdEluZGljYXRpb25zWzBdLnJlYWN0aW9uQ29kZWQiIC8+CiAgICAKICAgIAogICAgPC9kaXY+PC90ZD4KCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uZGVsZXRlZCB2YWx1ZT0+CiAgICAKICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIgogICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIF8iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3RkPgogICAgCjwvdHI+Cgo8L3RhYmxlPgoKPHRhYmxlIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUZW1wbGF0ZSIgY2xhc3M9ImhpZGUiIGRhdGEtdGFibGU9InRydWUiPgogICAgCgoKPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnQtc2VjdGlvbiI+CiAgICAKICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCI+PC90ZD4KICAgIAoKICAgIAoKCgo8dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSI+CgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiAvPgoKPC9kaXY+PC90ZD4KCgoKPHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiPgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvdGQ+CgoKCjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00IGluZGljYXRvci10YWJ1bGFyIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiPgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHBlUmVzdWx0ICBpbmRpY2F0b3ItdGFidWxhciBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uZGVsZXRlZCB2YWx1ZT0+CiAgICAKICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIgogICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIF8iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3RkPgogICAgCjwvdHI+Cgo8L3RhYmxlPgoKPHRhYmxlIGlkPSJkZWF0aENhdXNlVGVtcGxhdGUiIGNsYXNzPSJoaWRlIiBkYXRhLXRhYmxlPSJ0cnVlIj4KICAgIAoKCjx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBpZD0iZGVhdGhDYXVzZS1zZWN0aW9uIj4KICAgIAogICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4Ij48L3RkPgogICAgCgogICAgCgoKCjx0ZCBpZD0icGF0aWVudERlYXRoQ2F1c2VUeXBlIiBjbGFzcz0iIHBhdGllbnREZWF0aENhdXNlVHlwZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudERlYXRoQ2F1c2VUeXBlIj4KCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhDYXVzZXNbMF0uY2F1c2VUeXBlLmlkIiBkYXRhLWZyb209ImNhdXNlVHlwZXMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmNhdXNlVHlwZS5pZCIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMjgiID5BdXRvcHN5IERldGVybWluZWQgQ2F1c2U8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjI3IiA+RGVhdGggQ2F1c2U8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmludGVybmFsUm93SWQiIC8+Cgo8L2Rpdj48L3RkPgoKCgogICAgCiAgICAgICAgPHRkIGNsYXNzPSJjb2wtbWQtNCAgdGVtcGxhdGUtY29udHJvbCBwYXRpZW50RGVhdGhSZXBvcnRlZENhdXNlIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudERlYXRoUmVwb3J0ZWRDYXVzZSI+CiAgICAKICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJwYXRpZW50RGVhdGhSZXBvcnRlZENhdXNlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLnJlcG9ydGVkUmVhY3Rpb24iIG1heGxlbmd0aD0iMjUwIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSJwYXRpZW50RGVhdGhDb2RlZENhdXNlIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtZmllbGRJZD0icGF0aWVudERlYXRoUmVwb3J0ZWRDYXVzZSIgaWQ9InNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhDYXVzZXNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgLz4KICAgICAgICAKICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5kZWF0aERldGFpbC5kZWF0aENhdXNlc1swXS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhDYXVzZXNbMF0uaGllcmFyY2h5U3RvcmFnZUlkIiAvPgogICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCiAgICA8dGQgaWQ9InBhdGllbnREZWF0aENvZGVkQ2F1c2UiIGNsYXNzPSJjb2wtbWQtNCB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50RGVhdGhDb2RlZENhdXNlICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhdGllbnREZWF0aENvZGVkQ2F1c2UiPgogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhDYXVzZXNbMF0ucmVhY3Rpb25Db2RlZCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTAwMCIgZGF0YS1maWVsZC1pZD0icGF0aWVudERlYXRoQ29kZWRDYXVzZSIgcmVhZG9ubHk9InJlYWRvbmx5IiBpZD0ic2FmZXR5RGF0YS5kZWF0aERldGFpbC5kZWF0aENhdXNlc1swXS5yZWFjdGlvbkNvZGVkIiAvPgogICAgCiAgICAKICAgIDwvZGl2PjwvdGQ+Cgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhDYXVzZXNbMF0uZGVsZXRlZCB2YWx1ZT0+CiAgICAKICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIgogICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIF8iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L3RkPgogICAgCjwvdHI+Cgo8L3RhYmxlPgoKPHRhYmxlIGlkPSJyZWZlcmVuY2VzVGVtcGxhdGUiIGNsYXNzPSJoaWRlIiBkYXRhLXRhYmxlPSJ0cnVlIj4KICAgIAoKCjx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBpZD0icmVmZXJlbmNlcy1zZWN0aW9uIj4KICAgIAogICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4Ij48L3RkPgogICAgCgogICAgCgoKCjx0ZCBpZD0icmVmZXJlbmNlVHlwZSIgY2xhc3M9IiByZWZlcmVuY2VUeXBlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZWZlcmVuY2VUeXBlIj4KCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBhbGxvd0VkaXQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnJlZmVyZW5jZXNbMF0ucmVmZXJlbmNlVHlwZS5pZCIgZGF0YS1mcm9tPSJyZWZlcmVuY2VUeXBlcyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucmVmZXJlbmNlc1swXS5yZWZlcmVuY2VUeXBlLmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5yZWZlcmVuY2VzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnJlZmVyZW5jZXNbMF0uaW50ZXJuYWxSb3dJZCIgLz4KCjwvZGl2PjwvdGQ+CgoKCgogICAgPHRkIGlkPSJyZWZlcmVuY2VJZCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHJlZmVyZW5jZUlkICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InJlZmVyZW5jZUlkIj4KICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBhbGxvd0VkaXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnJlZmVyZW5jZXNbMF0uaWQiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwMCIgZGF0YS1maWVsZC1pZD0icmVmZXJlbmNlSWQiIGlkPSJzYWZldHlEYXRhLnJlZmVyZW5jZXNbMF0uaWQiIC8+CiAgICAKICAgIAogICAgPC9kaXY+PC90ZD4KCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5yZWZlcmVuY2VzWzBdLmRlbGV0ZWQgdmFsdWU9PgogICAgCiAgICAgICAgPHRkPgogICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIKICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBfIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC90ZD4KICAgIAo8L3RyPgoKPC90YWJsZT4KCjx0YWJsZSBpZD0iaW5uZXJTdW1tYXJ5RGlhZ25vc2lzVGVtcGxhdGUiIGNsYXNzPSJoaWRlIiBkYXRhLXRhYmxlPSJ0cnVlIj4KICAgIAoKCjx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBpZD0iaW5uZXJTdW1tYXJ5RGlhZ25vc2lzLXNlY3Rpb24iPgogICAgCiAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXgiPjwvdGQ+CiAgICAKCiAgICAKCgoKICAgIAogICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTEyICB0ZW1wbGF0ZS1jb250cm9sIHNlbmRlckRpYWdub3NpcyI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InNlbmRlckRpYWdub3NpcyI+CiAgICAKICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJzZW5kZXJEaWFnbm9zaXMiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBzdW1tYXJ5Q29tbWVudHMgIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS5zdW1tYXJ5LnNlbmRlckRpYWdub3Npc1swXS5yZWFjdGlvbkNvZGVkIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtZmllbGRJZD0ic2VuZGVyRGlhZ25vc2lzIiBpZD0ic2FmZXR5RGF0YS5zdW1tYXJ5LnNlbmRlckRpYWdub3Npc1swXS5yZWFjdGlvbkNvZGVkIiAvPgogICAgICAgIAogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJEaWFnbm9zaXNbMF0ubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJEaWFnbm9zaXNbMF0ubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnN1bW1hcnkuc2VuZGVyRGlhZ25vc2lzWzBdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJEaWFnbm9zaXNbMF0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJEaWFnbm9zaXNbMF0uaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5zdW1tYXJ5LnNlbmRlckRpYWdub3Npc1swXS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5zdW1tYXJ5LnNlbmRlckRpYWdub3Npc1swXS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5zdW1tYXJ5LnNlbmRlckRpYWdub3Npc1swXS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJEaWFnbm9zaXNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJEaWFnbm9zaXNbMF0uaW50ZXJuYWxSb3dJZCIgLz4KICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giID48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICA8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnN1bW1hcnkuc2VuZGVyRGlhZ25vc2lzWzBdLmRlbGV0ZWQgdmFsdWU9PgogICAgCiAgICAgICAgPHRkPgogICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIKICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBfIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC90ZD4KICAgIAo8L3RyPgoKPC90YWJsZT4KCjx0YWJsZSBpZD0ibGFiVGVzdERhdGVURFRlbXBsYXRlIiBjbGFzcz0iaGlkZSIgZGF0YS10YWJsZT0idHJ1ZSI+CiAgICAKICAgIDx0ZCBjbGFzcz0idGVzdC1kYXRlLWNvbCI+CiAgICAgICAgPGRpdiBjbGFzcz0idGVzdC1kYXRlLWlubmVyIHRlc3Qtbm8tZGF0YSI+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJhZGQtdGVzdC1pYyI+PGkgY2xhc3M9Im1kIG1kLWFkZCI+PC9pPjwvYT4KICAgICAgICAgICAgCgoKCgogICAgPGRpdiBpZD0idGVzdERhdGUiIGNsYXNzPSJjb2wtbWQtMTAgdGVtcGxhdGUtY29udHJvbCAgdGVzdERhdGUgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3REYXRlIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGhpZGUgdGVzdERhdGUgaGlkZSAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5kYXRlLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0RGF0ZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5kYXRlLnZhbHVlIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLmRhdGUuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0uZGF0ZS5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0uZGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0uZGF0ZS5mb3JtYXQiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InRlc3RSZXN1bHQiIGNsYXNzPSJjb2wtbWQtMTAgdGVtcGxhdGUtY29udHJvbCAgdGVzdFJlc3VsdCAgIj4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFJlc3VsdCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBoaWRlIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0ucmVzdWx0LnZhbHVlIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5yZXN1bHQuaWQiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InRlc3RNb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0yICAgICB0ZXN0TW9yZUluZm8nPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IGhpZGUgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLm1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iaGlkZSAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIAoKPGRpdiBpZD0idGVzdENvbW1lbnRzIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCAgICAgdGVzdENvbW1lbnRzIGNvbC1tZC0xMic+CgogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+CiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhIGhpZGUgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5jb21tZW50cyIgbWF4bGVuZ3RoPSIyMDAwIiByb3dzPSIyIiBjb2xzPSIxMDAiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0uY29tbWVudHMiID48L3RleHRhcmVhPgogICAgICAgIAogICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4KICAgICAgICAKICAgIDwvZGl2Pgo8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5kZWxldGVkIHZhbHVlPT4KICAgICAgICA8L2Rpdj4KICAgIDwvdGQ+CgoKPC90YWJsZT4KCjx0YWJsZSBpZD0ibGFiVGVzdE5hbWVURFRlbXBsYXRlIiBjbGFzcz0iaGlkZSIgZGF0YS10YWJsZT0idHJ1ZSI+CiAgICA8dGQgY2xhc3M9InRlc3QtbmFtZS1jb2wiPgogICAgPGRpdiBjbGFzcz0idGVzdC1oYXMtbmFtZSI+CiAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJ0ZXN0TmFtZSIgY2xhc3M9J2NvbC1tZC0xMiAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4KICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCiAgICA8ZGl2IGlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5vcm1hbExvd0hpZ2giIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ubm9ybWFsSGlnaCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ubm9ybWFsSGlnaCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0idGVzdFVuaXQiIGNsYXNzPSIgdGVzdFVuaXQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnVuaXQuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1swXS5kZWxldGVkIHZhbHVlPT4KICAgIDwvZGl2Pgo8L3RkPgoKPC90YWJsZT4KCjx0YWJsZSBpZD0ibGFiVGVzdERhdGVUSFRlbXBsYXRlIiBjbGFzcz0iaGlkZSIgZGF0YS10YWJsZT0idHJ1ZSI+CiAgICA8dGggY2xhc3M9InRlc3QtZGF0ZS1jb2wiPgogICAgPGRpdiBjbGFzcz0iY29sLXhzLTExIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXN0RGF0ZUhlYWRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW5wdXQtZ3JvdXAgZGF0ZSBpbnRlcm5hbCI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCB0ZXN0U2VjdGlvbkRhdGVQaWNrZXIiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgZGF0YS1wcmVjaXNpb249IkNDWVkiIHZhbHVlPSIiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgaWQ9InNhZmV0eURhdGEudGVzdERhdGVzIiBuYW1lPSJzYWZldHlEYXRhLnRlc3REYXRlcyI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3REYXRlcy5mb3JtYXQiIGlkPSJzYWZldHlEYXRhLnRlc3REYXRlcy5mb3JtYXQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3REYXRlcy5kYXRlIiBpZD0ic2FmZXR5RGF0YS50ZXN0RGF0ZXMuZGF0ZSI+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xIG5vLXBhZGRpbmciPgogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJ0YWJsZS1jb2x1bW4tZGVsIHB2LWljIj48aSBjbGFzcz0ibWQgbWQtY2xvc2UiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPgogICAgPC9kaXY+CjwvdGg+CjwvdGFibGU+Cgo8dGFibGUgaWQ9ImxhYlRlc3ROYW1lVEhUZW1wbGF0ZSIgY2xhc3M9ImhpZGUiIGRhdGEtdGFibGU9InRydWUiPgogICAgPHRoIGNsYXNzPSJ0ZXN0LW5hbWUtY29sIj4KICAgIDxkaXYgY2xhc3M9InB1bGwtbGVmdCI+CiAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWxvbmctYXJyb3ctZG93biIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtbGFiLXRlc3Qtcm93IiBkYXRhLWluc2VydD0icHZpVGVzdFBhbmVsIiBjbGFzcz0iIGFkZF9yb3dfYXR0YWNoIHB2LWljIiB0aXRsZT0iQWRkIE5ldyBUZXN0Ij4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWZsYXNrIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PHN1cD4rPC9zdXA+PC9pPgogICAgICAgIDwvYT4KCiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPgogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIiIGRhdGEtaW5zZXJ0PSIiIHRpdGxlPSJBZGQgVGVzdCBEYXRlIiBjbGFzcz0icHYtaWMgcHYtYWRkLXRlc3QtZGF0ZSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jYWxlbmRhci1wbHVzLW8iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgPC9hPiA8aSBjbGFzcz0iZmEgZmEtbG9uZy1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgIDwvZGl2Pgo8L3RoPgo8L3RhYmxlPgoKPGRpdiBpZD0iZXZlbnRQRU1hdHJpeFRlbXBsYXRlIiBjbGFzcz0iaGlkZSBub3RTb3J0YWJsZUlubmVyVGFibGUiPgogICAgCgoKPGRpdiBjbGFzcz0icm93IHB2LXByb2R1Y3QtZXZlbnQtbWV0cml4IHB2LXNlY3Rpb24tcmVjb3JkIGV2ZW50UEVUZW1wbGF0ZSByb3ctc3RyaXAgbS0wIHAtbC0xMCBwLXItNSBwLWItMTAgICAiCiAgICAgZGF0YS1ldmVudC1yb3ctaWQ9IiIKICAgICBpZD0icHJvZHVjdEV2ZW50TWF0cml4LXNlY3Rpb24tMCIgZGF0YS1wZXJzaXN0ZWQ9InRydWUiPgoKICAgIAogICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvdy1jb3VudCI+MTwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIAoKCiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IHJ4LWNvbC10YWJsZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUiPgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIGNvbC1tZC0xMiBldmVudCIgaWQ9ImV2ZW50TmFtZVBFTSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV2ZW50TmFtZUhlYWRlclBFIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWljLWluZGljYXRvciI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICAKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GaXJzdCBEb3NlIEludGVydmFsPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLmZpcnN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLmludGVybmFsUm93SWQiIC8+CiAgICA8L2Rpdj4gPC9kaXY+CgoKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TGFzdCBEb3NlIEludGVydmFsPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCI+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ubGFzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIC8+CiAgICA8L2Rpdj4gPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlY2hhbGxlbmdlPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIj4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5yZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJyZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVjaGFsbGVuZ2UuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgoKICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudERlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RGVjaGFsbGVuZ2U8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLmRlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209ImRlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5kZWNoYWxsZW5nZS5pZCIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5wcm9kdWN0SW50ZXJuYWxJZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5ldmVudEludGVybmFsSWQgdmFsdWU9PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0uZGVsZXRlZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5wcm9kdWN0SWQgdmFsdWU9PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0uZXZlbnRJZCB2YWx1ZT0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IHJlbGF0ZWRuZXNzQXNzZXNtZW50IHJ4LWNvbC10YWJsZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLXRhYmxlIG0tdC0xMCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudF8wIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRlZG5lc3MgQXNzZXNzbWVudHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4KICAgIAogICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPgogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzBfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8wXyIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgIDwvYT4KICAgIDwvc3Bhbj4KICAgIAo8L3NwYW4+CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzAiIGRhdGEtdGVtcGxhdGVJZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGVtcGxhdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJsZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgcC0wIGlubmVyLWFjY29yZGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1yZWxhdGVkbmVzcyBwdi1zZWMtc2VwZXJhdG9yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTb3VyY2UgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTWV0aG9kIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUmVzdWx0IDwvbGFiZWw+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFidWxhcj0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIGlubmVyLXJlcGVhdGFibGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMF8iPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBpbm5lci1yZXBlYXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIHJlbGF0ZWRuZXNzUm93IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8wXy1zZWN0aW9uLTAiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4Ij4xPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKCgo8dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSI+CgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiAvPgoKPC9kaXY+PC90ZD4KCgoKPHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiPgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvdGQ+CgoKCjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00IGluZGljYXRvci10YWJ1bGFyIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiPgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHBlUmVzdWx0ICBpbmRpY2F0b3ItdGFidWxhciBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uZGVsZXRlZCB2YWx1ZT0+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjwvZGl2PgoKPGRpdiBpZD0icHJvZHVjdFBFTWF0cml4VGVtcGxhdGUiIGNsYXNzPSJoaWRlIG5vdFNvcnRhYmxlSW5uZXJUYWJsZSI+CiAgICAKCjxkaXYgY2xhc3M9InJvdyBwdi1zZWN0aW9uLXJlY29yZCBwYW5lbCBwcm9kdWN0UEVUZW1wbGF0ZSAiIGRhdGEtcHJvZHVjdC1yb3ctaWQ9IiIgZGF0YS1wZXJzaXN0ZWQgPSAidHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCBpbm5lci1yZXBlYXRhYmxlIiBpZD0iYWNjb3JkaW9uLWlubmVyUHJvZEV2ZW50TWF0cml4XzAiPgogICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgbS1iLTAgZXZlbnRDb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgaWQ9InByb2R1Y3ROYW1lUEVNIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWlubmVyUHJvZEV2ZW50TWF0cml4IiBocmVmPSIjcHZQRU1fMCIKICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHJvZHVjdE5hbWVIZWFkZXJQRSBpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCBjb2xsYXBzZWQiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9InB2UEVNXzAiIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBpbm5lci1yZXBlYXRhYmxlIGNvbGxhcHNlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgc3R5bGU9ImhlaWdodDogMCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5IHNob3J0LWZpZWxkIHAtMCBldmVudC1jb250YWluZXItZGl2Ij4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KPC9kaXY+Cgo8L2Rpdj4KCjxkaXYgaWQ9InByb2R1Y3RzVGVtcGxhdGUiIGNsYXNzPSJoaWRlIG5vdFNvcnRhYmxlSW5uZXJUYWJsZSI+CiAgICAKCgoKCiAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAiIGlkPSJwcm9kdWN0LXNlY3Rpb24tMCI+CiAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+CiAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPgogICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWhlYWRlcj0icHJvZHVjdC1zZWN0aW9uIiBkYXRhLXBhcmVudD0iI3Byb2R1Y3Qtc2VjdGlvbiIKICAgICAgICAgICAgICAgICAgIGhyZWY9IiNwcm9kdWN0LXNlY3Rpb25fMCIgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUiCiAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4KCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSByb3ctY291bnQgYmFkZ2UtaW5kZXgiPjAxPC9zcGFuPnByb2R1Y3Qtc2VjdGlvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29uZmlndXJlRmllbGRzIHB2LXN1YmhlYWQtY29uZmlnIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gcHJvZHVjdC1kZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIF8wIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9oND4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBpZD0icHJvZHVjdC1zZWN0aW9uXzAiIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiBpbm5lci1yZXBlYXRhYmxlIHByb2R1Y3Qtc2VjIgogICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgdWktbmVzdGVkLXNvcnRhYmxlLWhhbmRsZSAiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIGZvcm0tcHYiPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0TGljZW5zZSIgY2xhc3M9JyBjb2wtbWQtNCByZXF1aXJlZCAgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdExpY2Vuc2UnID4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UHJvZHVjdCBOYW1lPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InByb2R1Y3RMaWNlbnNlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBwcm9kdWN0TmFtZUJyb3dzZXIgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ubGljZW5zZS52YWx1ZSIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXR5cGU9InByb2R1Y3QiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InByb2R1Y3RMaWNlbnNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5saWNlbnNlLnZhbHVlIiAvPgogICAgICAgIAogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ubGljZW5zZS5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ubGljZW5zZS5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmlkIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIgogICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnNlYXJjaCI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zYWdlRm9ybSIgY2xhc3M9IiBwcm9kdWN0RG9zYWdlRm9ybSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRvc2FnZSBGb3JtPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NhZ2VGb3JtIj4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2FnZUZvcm0uaWQiIGRhdGEtZnJvbT0iZG9zYWdlRm9ybSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2FnZUZvcm0uaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgoKICAgIDxkaXYgaWQ9InByb2R1Y3RSb2xlIiBjbGFzcz0iIHByb2R1Y3RSb2xlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiByZXF1aXJlZCAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Sb2xlPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RSb2xlIj4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgcHJvZHVjdFJvbGVJZCBzZWxlY3QyLWxhenkgICBoYXMtZGVmYXVsdC12YWwiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucm9sZS5pZCIgZGF0YS1mcm9tPSJyb2xlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9InRydWUiIGRhdGEtdmFsdWU9IjI5IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5yb2xlLmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgoKCgogICAgPGRpdiBpZD0icHJvZHVjdE9idGFpbkNvdW50cnkiIGNsYXNzPSIgcHJvZHVjdE9idGFpbkNvdW50cnkgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5PYnRhaW4gQ291bnRyeTwvbGFiZWw+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0T2J0YWluQ291bnRyeSI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIGNvdW50cnkgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLm9idGFpbkNvdW50cnkuaWQiIGRhdGEtZnJvbT0iY291bnRyaWVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ub2J0YWluQ291bnRyeS5pZCIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0icHJvZHVjdEF1dGhOdW1iZXIiIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0QXV0aE51bWJlciAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QXV0aC4gTnVtYmVyPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEF1dGhOdW1iZXIiPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5hdXRoTnVtYmVyIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIzNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEF1dGhOdW1iZXIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmF1dGhOdW1iZXIiIC8+CiAgICAKICAgIAogICAgPC9kaXY+IDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0icHJvZHVjdEF1dGhDb3VudHJ5IiBjbGFzcz0iIHByb2R1Y3RBdXRoQ291bnRyeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkF1dGguIENvdW50cnk8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEF1dGhDb3VudHJ5Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgY291bnRyeSBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uYXV0aENvdW50cnkuaWQiIGRhdGEtZnJvbT0iY291bnRyaWVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uYXV0aENvdW50cnkuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgoKICAgIDxkaXYgaWQ9InByb2R1Y3RNYW51ZmFjdHVyZXIiIGNsYXNzPSIgcHJvZHVjdE1hbnVmYWN0dXJlciBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkF1dGguIEhvbGRlcjwvbGFiZWw+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0TWFudWZhY3R1cmVyIj4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmF1dGhIb2xkZXIuaWRPclZhbHVlIiBkYXRhLXRhZz0idHJ1ZSIgZGF0YS1mcm9tPSJtYW51ZmFjdHVyZXJzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uYXV0aEhvbGRlci5pZE9yVmFsdWUiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InByb2R1Y3RDdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbiIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RDdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbiAgICIgPgogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q3VtdWxhdGl2ZSBEb3NlIHRvIEZpcnN0IFJlYWN0aW9uPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uIj4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSIxMCIgZGF0YS11bml0TGlzdD0iZG9zYWdlLXVuaXQtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5jdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbi52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTAiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RDdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uY3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24udmFsdWUiIC8+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uY3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24uaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uLmlkIiAvPgogICAgPC9kaXY+IDwvZGl2PgoKCgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FeHBvc3VyZSBHZXN0YXRpb24gUGVyaW9kPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kIj4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSIzIiBkYXRhLXVuaXRMaXN0PSJnZXN0YXRpb24tcGVyaW9kLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZXhwb3N1cmVHZXN0YXRpb25QZXJpb2QudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjMiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFeHBvc3VyZUdlc3RhdGlvblBlcmlvZCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZXhwb3N1cmVHZXN0YXRpb25QZXJpb2QudmFsdWUiIC8+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZXhwb3N1cmVHZXN0YXRpb25QZXJpb2QuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kLmlkIiAvPgogICAgPC9kaXY+IDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0icHJvZHVjdEFjdGlvblRha2VuIiBjbGFzcz0iIHByb2R1Y3RBY3Rpb25UYWtlbiBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkFjdGlvbiBUYWtlbjwvbGFiZWw+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0QWN0aW9uVGFrZW4iPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uYWN0aW9uVGFrZW4uaWQiIGRhdGEtZnJvbT0iYWN0aW9uVGFrZW4iIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5hY3Rpb25UYWtlbi5pZCIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgoKCiAgICA8ZGl2IGlkPSJwcm9kdWN0RXhwaXJhdGlvbkRhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHByb2R1Y3RFeHBpcmF0aW9uRGF0ZSAgY29sLW1kLTIgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RXhwaXJhdGlvbiBEYXRlPC9sYWJlbD4KICAgIAoKPGRpdiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiCiAgICAgICAgIGRhdGEtaWQ9InByb2R1Y3RFeHBpcmF0aW9uRGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGZ1dHVyZURhdGVzQWxsb3dlZCBhbGxvd0RhdGVXaXRob3V0VGltZSAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZXhwaXJhdGlvbkRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZXhwaXJhdGlvbkRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5leHBpcmF0aW9uRGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmV4cGlyYXRpb25EYXRlLmZvcm1hdCIgLz4KPC9kaXY+CjwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0icHJvZHVjdFJlcGxhY2VtZW50UmVxdWlyZWQiIGNsYXNzPSIgcHJvZHVjdFJlcGxhY2VtZW50UmVxdWlyZWQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZXBsYWNlbWVudCBSZXF1aXJlZDwvbGFiZWw+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0UmVwbGFjZW1lbnRSZXF1aXJlZCI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5yZXBsYWNlbWVudFJlcXVpcmVkLmlkIiBkYXRhLWZyb209InJlcGxhY2VtZW50UmVxdWlyZWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5yZXBsYWNlbWVudFJlcXVpcmVkLmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIxMDIzIiA+WWVzPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIxMDI0IiA+Tm88L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgoKCgoKICAgIDxkaXYgaWQ9InByb2R1Y3RSZXR1cm5SZXF1aXJlZCIgY2xhc3M9IiBwcm9kdWN0UmV0dXJuUmVxdWlyZWQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZXR1cm4gUmVxdWlyZWQ8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdFJldHVyblJlcXVpcmVkIj4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnJldHVyblJlcXVpcmVkLmlkIiBkYXRhLWZyb209InJldHVyblJlcXVpcmVkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucmV0dXJuUmVxdWlyZWQuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMzMiID5ZZXM8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMzQiID5Obzwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgoKCgogICAgPGRpdiBpZD0icHJvZHVjdFJlZnVuZFJlcXVlc3RlZCIgY2xhc3M9IiBwcm9kdWN0UmVmdW5kUmVxdWVzdGVkIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVmdW5kIFJlcXVlc3RlZDwvbGFiZWw+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0UmVmdW5kUmVxdWVzdGVkIj4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnJlZnVuZFJlcXVlc3RlZC5pZCIgZGF0YS1mcm9tPSJyZWZ1bmRSZXF1ZXN0ZWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5yZWZ1bmRSZXF1ZXN0ZWQuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMzUiID5ZZXM8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMzYiID5Obzwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgogICAgCiAgICAgICAgPGRpdiBpZD0icHJvZHVjdEJsaW5kZWQiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAgIHByb2R1Y3RCbGluZGVkJz4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5CbGluZGVkPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAnIGRhdGEtaWQ9InByb2R1Y3RCbGluZGVkIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnByb2R1Y3RzWzBdLmJsaW5kZWQiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmJsaW5kZWQiIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5ibGluZGVkIj48L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAKCgoKCgogICAgPGRpdiBpZD0icHJvZHVjdEFkZGxuRHJ1Z0luZm9ybWF0aW9uIiBjbGFzcz0iIHByb2R1Y3RBZGRsbkRydWdJbmZvcm1hdGlvbiBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEyICAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BZGQmIzM5O2wgRHJ1ZyBJbmZvPC9sYWJlbD4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RBZGRsbkRydWdJbmZvcm1hdGlvbiI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3QyLWJveCAgbXVsdGlTZWxlY3RTZWxlY3QyRmllbGQgd3JhcHBlZC1tdWx0aXNlbGVjdCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5hZGRpdGlvbmFsRHJ1Z0luZm8uaWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJDaG9vc2UiIG11bHRpcGxlPSJtdWx0aXBsZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmFkZGl0aW9uYWxEcnVnSW5mby5pZCIgPg0KPG9wdGlvbiB2YWx1ZT0iMzMiID5Db3VudGVyZmVpdDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMzQiID5PdmVyZG9zZTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMzUiID5EcnVnIHRha2VuIGJ5IHRoZSBmYXRoZXI8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjM2IiA+RHJ1ZyB0YWtlbiBiZXlvbmQgZXhwaXJ5IGRhdGU8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjM3IiA+QmF0Y2ggYW5kIGxvdCB0ZXN0ZWQgYW5kIGZvdW5kIHdpdGhpbiBzcGVjaWZpY2F0aW9uczwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMzgiID5CYXRjaCBhbmQgbG90IHRlc3RlZCBhbmQgZm91bmQgbm90IHdpdGhpbiBzcGVjaWZpY2F0aW9uczwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMzkiID5NZWRpY2F0aW9uIGVycm9yPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI0MCIgPk1pc3VzZTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNDEiID5BYnVzZTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNDIiID5PY2N1cGF0aW9uYWwgZXhwb3N1cmU8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjQzIiA+T2ZmIGxhYmVsIHVzZTwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CjxkaXYgaWQ9InByb2R1Y3RBZGRpdGlvbmFsRHJ1Z0luZm9Ob3RlcyIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgICAgIHByb2R1Y3RBZGRpdGlvbmFsRHJ1Z0luZm9Ob3RlcyBjb2wtbWQtMTInPgoKICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QWRkJiMzOTtsIERydWcgSW5mbyBOb3RlczwvbGFiZWw+CgogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RBZGRpdGlvbmFsRHJ1Z0luZm9Ob3RlcyI+CiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5hZGRpdGlvbmFsRHJ1Z0luZm9Ob3RlcyIgbWF4bGVuZ3RoPSIyMDAwIiByb3dzPSIyIiBjb2xzPSIxMDAiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmFkZGl0aW9uYWxEcnVnSW5mb05vdGVzIiA+PC90ZXh0YXJlYT4KICAgICAgICAKICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+CiAgICAgICAgCiAgICA8L2Rpdj4KPC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRlbGV0ZWQgdmFsdWU9PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8IS0tIFN1YiBTZWN0aW9ucyBQcm9kdWN0cyAtLT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIGlubmVyU2VjdGlvblRhYmxlICI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIGlubmVyLXJlcGVhdGFibGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1pbm5lclByb2R1Y3RzXzBfIj4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBTdWJzdGFuY2VzIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgcngtY29sLXRhYmxlIG92ZXJyaWRlLWNvbC1wYWRkaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2R1Y3RzXzBfIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdFN1YnN0YW5jZXNfMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1pbm5lclByb2R1Y3RzXzBfIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdWJzdGFuY2UocykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+CiAgICAKICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI2FjY29yZGlvbi1wcm9kdWN0LWlubmVyc3Vic3RhbmNlXzBfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI2FjY29yZGlvbi1wcm9kdWN0LWlubmVyc3Vic3RhbmNlXzBfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgPC9hPgogICAgPC9zcGFuPgogICAgCjwvc3Bhbj4KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0U3Vic3RhbmNlc18wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlbXBsYXRlSWQ9InByb2R1Y3RTdWJzdGFuY2VzVGVtcGxhdGUiIGRhdGEtdGFibGU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlICBpbm5lci1yZXBlYXRhYmxlIGlubmVyLWFjY29yZGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IgcGFuZWwtYm9keSBwLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1pbm5lci1wcm9kdWN0LXN1YnN0YW5jZSBwdi1zZWN0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkIGNsYXNzPSJ1bmhpZ2hsaWdodFNlY3Rpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RJbmdyZWRpZW50cycgY2xhc3M9J2NvbC1tZC02ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTmFtZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItaW5ncmVkaWVudERvc2FnZVVuaXQnIGNsYXNzPSdjb2wtbWQtNiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFN0cmVuZ3RoIDwvbGFiZWw+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YWJ1bGFyPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cy1zcXVhcmUtbyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBjbGFzcz0icHYtZHJhZ2dhYmxlLWxpc3QgaW5uZXItcmVwZWF0YWJsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1wcm9kdWN0LWlubmVyc3Vic3RhbmNlXzBfIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBpbm5lci1yZXBlYXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InByb2R1Y3RTdWJzdGFuY2VzXzBfLXNlY3Rpb24tMCI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXgiPjE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKCgo8dGQgaWQ9InByb2R1Y3RJbmdyZWRpZW50cyIgY2xhc3M9IiBwcm9kdWN0SW5ncmVkaWVudHMgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmdyZWRpZW50cyI+CgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1hamF4IHdyYXBwZWQtbXVsdGlzZWxlY3QgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uaW5ncmVkaWVudHNbMF0ubmFtZS5pZCIgZGF0YS1mcm9tPSIiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXVybD0iL2Nhc2VFbnRyeS9zZWFyY2hJbmdyZWRpZW50cyIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5pbmdyZWRpZW50c1swXS5uYW1lLmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5pbmdyZWRpZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5pbmdyZWRpZW50c1swXS5pbnRlcm5hbFJvd0lkIiAvPgoKPC9kaXY+PC90ZD4KCgoKCiAgICA8dGQgaWQ9ImluZ3JlZGllbnREb3NhZ2VVbml0IiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgaW5ncmVkaWVudERvc2FnZVVuaXQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iaW5ncmVkaWVudERvc2FnZVVuaXQiPgogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSIxMCIgZGF0YS11bml0TGlzdD0ic3RyZW5ndGgtdW5pdC1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIxMCIgZGF0YS1maWVsZC1pZD0iaW5ncmVkaWVudERvc2FnZVVuaXQiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLnZhbHVlIiAvPgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5pbmdyZWRpZW50c1swXS5zdHJlbmd0aC5pZCIgLz4KICAgIDwvZGl2PjwvdGQ+Cgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdHNbMF0uaW5ncmVkaWVudHNbMF0uZGVsZXRlZCB2YWx1ZT0+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kIG1kLWNsb3NlIHByb2R1Y3RTdWJzdGFuY2VzXzAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49InRydWUiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFByb2R1Y3QgSW5kaWNhdGlvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IHJ4LWNvbC10YWJsZSBvdmVycmlkZS1jb2wtcGFkZGluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24taW5uZXJQcm9kdWN0c18wXyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1pbm5lclByb2R1Y3RzXzBfIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdEluZGljYXRpb25fMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZHVjdCBJbmRpY2F0aW9uKHMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPgogICAgCiAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+CiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNhY2NvcmRpb24tcHJvZHVjdC1pbm5lcmluZGljYXRpb25fMF8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJpbmRpY2F0aW9uXzBfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgPC9hPgogICAgPC9zcGFuPgogICAgCjwvc3Bhbj4KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0SW5kaWNhdGlvbl8wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlbXBsYXRlSWQ9InByb2R1Y3RJbmRpY2F0aW9uVGVtcGxhdGUiIGRhdGEtdGFibGU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlICBpbm5lci1yZXBlYXRhYmxlIGlubmVyLWFjY29yZGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IgcGFuZWwtYm9keSBwLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1pbm5lci1wcm9kdWN0LWluZGljYXRpb24gcHYtc2VjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0idW5oaWdobGlnaHRTZWN0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSdoZWFkZXItcHJvZHVjdEluZGljYXRpb25SZXBvcnRlZCcgY2xhc3M9J2NvbC1tZC02ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gSW5kaWNhdGlvbiAoUmVwb3J0ZWQpIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0SW5kaWNhdGlvbkNvZGVkJyBjbGFzcz0nY29sLW1kLTYgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBJbmRpY2F0aW9uIChDb2RlZCkgPC9sYWJlbD48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhYnVsYXI9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBhZGQtdGFibGUtcm93IGFkZC1zZWN0aW9uIGJ0bi1hZGQtcGFuZWwiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCBpbm5lci1yZXBlYXRhYmxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJpbmRpY2F0aW9uXzBfIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgIHB2LXNlY3Rpb24tcmVjb3JkIGlubmVyLXJlcGVhdGFibGUgdWktc29ydGFibGUtaGFuZGxlICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icHJvZHVjdEluZGljYXRpb25fMF8tc2VjdGlvbi0wIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXgiPjE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKCgogICAgCiAgICAgICAgPHRkIGNsYXNzPSJjb2wtbWQtNiAgdGVtcGxhdGUtY29udHJvbCBwcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEluZGljYXRpb25SZXBvcnRlZCI+CiAgICAKICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJwcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5yZXBvcnRlZFJlYWN0aW9uIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0icHJvZHVjdEluZGljYXRpb25Db2RlZCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InByb2R1Y3RJbmRpY2F0aW9uUmVwb3J0ZWQiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5yZXBvcnRlZFJlYWN0aW9uIiAvPgogICAgICAgIAogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucHJvZHVjdEluZGljYXRpb25zWzBdLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucHJvZHVjdEluZGljYXRpb25zWzBdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucHJvZHVjdEluZGljYXRpb25zWzBdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucHJvZHVjdEluZGljYXRpb25zWzBdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIgogICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKICAgIDx0ZCBpZD0icHJvZHVjdEluZGljYXRpb25Db2RlZCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RJbmRpY2F0aW9uQ29kZWQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEluZGljYXRpb25Db2RlZCI+CiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVhY3Rpb25Db2RlZCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTAwMCIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEluZGljYXRpb25Db2RlZCIgcmVhZG9ubHk9InJlYWRvbmx5IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVhY3Rpb25Db2RlZCIgLz4KICAgIAogICAgCiAgICA8L2Rpdj48L3RkPgoKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5kZWxldGVkIHZhbHVlPT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0YWJsZS1yb3ctZGVsIHB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gYnRuLWRlbC1wYW5lbCI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdEluZGljYXRpb25fMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBEb3NlIEluZm9ybWF0aW9uICAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLWItMCBvdmVycmlkZS1jb2wtcGFkZGluZy1mdWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCByeG1haW4tY29udGFpbmVyIHNlY3Rpb24taGVhZGVyIGlubmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmcgcnhtYWluLWNvbnRhaW5lci1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWlubmVyUHJvZHVjdHNfMF8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c18wXyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3Byb2R1Y3REb3NlXzAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjb2xsYXBzZWQgaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvc2UgSW5mb3JtYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+CiAgICAKICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI3B2aUlubmVyUHJvZHVjdERvc2VSZWNvcmRzXzBfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIjcHJvZHVjdERvc2VfMF8iIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3B2aUlubmVyUHJvZHVjdERvc2VSZWNvcmRzXzBfIiBkYXRhLWFuY2hvcmRpdj0iI3Byb2R1Y3REb3NlXzBfIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgPC9hPgogICAgPC9zcGFuPgogICAgCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIKICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBidG4tYWRkLXBhbmVsIGJ0bi1hZGRyb3ctdG9wIGljLXNtIHB2LWFkZC1yb3ciIGRhdGEtaW5uZXItc2VjPSJ0cnVlIgogICAgICAgICAgIGRhdGEtdGFidWxhcj0iaW5uZXIiIHRpdGxlPSJBZGQgYW5vdGhlciBzZWN0aW9uIgogICAgICAgICAgIGRhdGEtdGFyZ2V0PSJwdi1pbm5lclByb2R1Y3REb3NlIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFkZCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICA8L2E+CiAgICAKPC9zcGFuPgoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlXzAiIGRhdGEtdGVtcGxhdGVJZD0icHJvZHVjdERvc2VUZW1wbGF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgIGlubmVyLXJlcGVhdGFibGUgaW5uZXItYWNjb3JkaW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lcmRvc2UtY29udGFpbmVyIHB2LWRyYWdnYWJsZS1saXN0IHB2LXNlY3Rpb24gdWktc29ydGFibGUgaW5uZXItcmVwZWF0YWJsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwdmlJbm5lclByb2R1Y3REb3NlUmVjb3Jkc18wXyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXNlY3Rpb24tcmVjb3JkIGlubmVyLXJlcGVhdGFibGUgcHYtaW5uZXJQcm9kdWN0RG9zZSBwLTEwIHVpLXNvcnRhYmxlLWhhbmRsZSBwLWItMTAgcm93IHJvdy1zdHJpcCAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InByb2R1Y3REb3NlXzBfLXNlY3Rpb24tMCI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2Pgo8ZGl2IGNsYXNzPSJyb3ctYWN0aW9uIG51bS1iZyI+CiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iIiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgY2xhc3M9InB2LWljIGljLXhzIG0tci01IHJlbW92ZS1zZWN0aW9uIHB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCI+CiAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIF8wIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgPC9hPgo8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLXQtMjAgbS1iLTEwIGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUluZm9ybWF0aW9uIiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RG9zZUluZm9ybWF0aW9uICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Eb3NlPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VJbmZvcm1hdGlvbiI+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iOCIgZGF0YS11bml0TGlzdD0iZG9zYWdlLXVuaXQtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRvc2UudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjgiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3REb3NlSW5mb3JtYXRpb24iIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZG9zZS52YWx1ZSIgLz4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRvc2UuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZG9zZS5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiAvPgogICAgPC9kaXY+IDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0icHJvZHVjdERvc2VGcmVxdWVuY3kiIGNsYXNzPSIgcHJvZHVjdERvc2VGcmVxdWVuY3kgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xLWhhbGYgICI+CiAgICAKICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZyZXF1ZW5jeTwvbGFiZWw+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZUZyZXF1ZW5jeSI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmZyZXF1ZW5jeS5pZCIgZGF0YS1mcm9tPSJkb3NhZ2VGcmVxdWVuY3kiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmZyZXF1ZW5jeS5pZCIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgoKCiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZVN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdERvc2VTdGFydERhdGUgIGNvbC1tZC0xLWhhbGYgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RhcnQgRGF0ZTwvbGFiZWw+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJwcm9kdWN0RG9zZVN0YXJ0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5zdGFydERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5zdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLnN0YXJ0RGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLmZvcm1hdCIgLz4KPC9kaXY+CjwvZGl2PgoKCgoKCiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHByb2R1Y3REb3NlRW5kRGF0ZSAgY29sLW1kLTEtaGFsZiAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJwcm9kdWN0RG9zZUVuZERhdGUiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUuZm9ybWF0IiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUR1cmF0aW9uIiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RG9zZUR1cmF0aW9uICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EdXJhdGlvbjwvbGFiZWw+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlRHVyYXRpb24iPgogICAgCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmR1cmF0aW9uLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RG9zZUR1cmF0aW9uIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmR1cmF0aW9uLnZhbHVlIiAvPgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZHVyYXRpb24uaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZHVyYXRpb24uaWQiIC8+CiAgICA8L2Rpdj4gPC9kaXY+CgoKCgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUJhdGNoTnVtYmVyIiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RG9zZUJhdGNoTnVtYmVyICAgIiA+CiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5CYXRjaC9Mb3QgTnVtYmVyPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VCYXRjaE51bWJlciI+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uYmF0Y2hOdW1iZXIiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjM1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RG9zZUJhdGNoTnVtYmVyIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmJhdGNoTnVtYmVyIiAvPgogICAgCiAgICAKICAgIDwvZGl2PiA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlUm91dGUiIGNsYXNzPSIgcHJvZHVjdERvc2VSb3V0ZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4KICAgIAogICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Um91dGU8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VSb3V0ZSI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLnJvdXRlLmlkT3JWYWx1ZSIgZGF0YS10YWc9InRydWUiIGRhdGEtZnJvbT0icm91dGUiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLnJvdXRlLmlkT3JWYWx1ZSIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgoKCgogICAgPGRpdiBpZD0icHJvZHVjdERvc2VQYXJlbnRSb3V0ZSIgY2xhc3M9IiBwcm9kdWN0RG9zZVBhcmVudFJvdXRlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMS1oYWxmICAiPgogICAgCiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5QYXJlbnQgUm91dGU8L2xhYmVsPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VQYXJlbnRSb3V0ZSI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLnBhcmVudFJvdXRlLmlkT3JWYWx1ZSIgZGF0YS10YWc9InRydWUiIGRhdGEtZnJvbT0icm91dGUiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLnBhcmVudFJvdXRlLmlkT3JWYWx1ZSIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0icHJvZHVjdERvc2VEZXNjcmlwdGlvbiIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlRGVzY3JpcHRpb24gICAiID4KICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRvc2UgRGVzY3JpcHRpb248L2xhYmVsPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZURlc2NyaXB0aW9uIj4KICAgIAogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kZXNjcmlwdGlvbiIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VEZXNjcmlwdGlvbiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kZXNjcmlwdGlvbiIgLz4KICAgIAogICAgCiAgICA8L2Rpdj4gPC9kaXY+Cgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgo8L2Rpdj4KPGRpdiBpZD0iYXR0YWNobWVudFZpZXdlclJpZ2h0UGFuZWwiIGNsYXNzPSJoaWRlIj4KICAgIAoKPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBhY3R1YWxWaWV3ZXJCYXIiPgogICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyBhY3R1YWxWaWV3ZXJQYW5lbEhlYWRlciBhdHRhY2htZW50LXBhbmVsLWhlYWRpbmciPgogICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlICI+CiAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS1pZD0iYXR0YWNobWVudDEiIGFyaWEtY29udHJvbHM9ImF0dGFjaG1lbnQxIiBocmVmPSIjYXR0YWNobWVudDEiCiAgICAgICAgICAgICAgIGNsYXNzPSJjb2xsYXBzZWQgYXR0YWNobWVudEZpbGUgbGJsLWVsaXBzaXMgbS0wIiBkYXRhLWZpbGVuYW1lPSJhYWFhLTEtMS5wZGYiIGRhdGEtc3RvcmFnZWlkPSIzNTAiIHRpdGxlPSIiPgogICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICA8L2E+CgogICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtc3ViaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIHNob3ctaGVhZC1pY29uLWFsd2F5cyBhbHdheXMtdmlzaWJsZSI+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0icmVkYWN0QXR0YWNobWVudExpbmsgaGlkZSIKICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9ImF0dGFjaG1lbnQiCiAgICAgICAgICAgICAgICAgICBkYXRhLWZpbGVOYW1lPSIiCiAgICAgICAgICAgICAgICAgICBkYXRhLXN0b3JhZ2VJZD0iIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaWMtcmVkYWN0IGljLXNtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFscGhhLXItYm94LW91dGxpbmUiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICBjbGFzcz0icGlpIGhpZGUiCiAgICAgICAgICAgICAgICAgICBkYXRhLWlkPSJhdHRhY2htZW50Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaWMtcmVkYWN0IHB2LWljLXBpaSBwdi1vdmVybGF5LWljb24iIHRpdGxlPSJQSUkiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtbG9jayBpYy1vdmVybGF5Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iYXR0YWNobWVudFJvdyBpYy1hdHRhY2htZW50LW5ldy10YWIgc2luZ2xlQXR0YWNobWVudExhdW5jaCIgIGRhdGEtZmlsZW5hbWU9ImFhYWEtMS0xLnBkZiIgZGF0YS1zdG9yYWdlaWQ9IjM1MCI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWxhdW5jaCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIAogICAgICAgIDxkaXYgaWQ9ImF0dGFjaG1lbnQiIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBhY3R1YWxWaWV3ZXJBdHRhY2htZW50RGl2Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSIgc3R5bGU9ImhlaWdodDogNjcwcHg7Ij4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InZpZXdlciIgc3R5bGU9ImhlaWdodDogMTAwJTsiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvLi4vYXNzZXRzL3ZlbmRvci9zcGlubmVyLmdpZiIvPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgCjwvZGl2PgoKPC9kaXY+</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="407450625" offset="0" length="4096" />
        <PacketInfo time="407450640" offset="4096" length="10524" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>