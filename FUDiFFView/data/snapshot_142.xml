<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="142">
  <HTTPTask id="753" hostname="10.100.22.243:8081" path="/caseEntry/show/244701?templateId=" url="http://10.100.22.243:8081/caseEntry/show/244701?templateId=" ip="10.100.22.243" port="8081" connectionId="33" origin="Primary" frame="1" startDateTime="2020-08-31T10:21:50.439+05:30" startTime="407326484" endTime="407329062">
    <QueryString>
      <HTTPDataSet>
        <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
          <ActualData>dGVtcGxhdGVJZD0=</ActualData>
        </HTTPData>
      </HTTPDataSet>
      <IsExternalData>false</IsExternalData>
    </QueryString>
    <HTTPSplittedQueryStrings>
      <HTTPHeaderEntity name="templateId" index="0">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData />
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
    </HTTPSplittedQueryStrings>
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTAuMTAwLjIyLjI0Mzo4MDgx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Upgrade-Insecure-Requests" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzEwLjEwMC4yMi4yNDM6ODA4MS9jYXNlRW50cnkvc2hvdy8yNDQ2NzU/b3BlbkFjY29yZGlvbj10cnVl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U0VTU0lPTj0yNGQ0NzBkOS0yYzIxLTQ5MTQtOTZhMC04MTRkM2IyNDc2Nzk7IEF1dGhUeXBlPURhdGFiYXNl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC9jYXNlRW50cnkvc2hvdy8yNDQ3MDE/dGVtcGxhdGVJZD0gSFRUUC8xLjENCkhvc3Q6IDEwLjEwMC4yMi4yNDM6ODA4MQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpBY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOQ0KUmVmZXJlcjogaHR0cDovLzEwLjEwMC4yMi4yNDM6ODA4MS9jYXNlRW50cnkvc2hvdy8yNDQ2NzU/b3BlbkFjY29yZGlvbj10cnVlDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCkNvb2tpZTogU0VTU0lPTj0yNGQ0NzBkOS0yYzIxLTQ5MTQtOTZhMC04MTRkM2IyNDc2Nzk7IEF1dGhUeXBlPURhdGFiYXNlDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="SESSION" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjRkNDcwZDktMmMyMS00OTE0LTk2YTAtODE0ZDNiMjQ3Njc5</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="AuthType" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RGF0YWJhc2U=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>0</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="X-Frame-Options" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>REVOWQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Application-Context" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb246cHJvZHVjdGlvbjo4MDgx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGUsIG5vLXN0b3Jl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Pragma" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sO2NoYXJzZXQ9VVRGLTg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Language" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Transfer-Encoding" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Y2h1bmtlZA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW9uLCAzMSBBdWcgMjAyMCAwNDo0Nzo0MCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIA0KWC1GcmFtZS1PcHRpb25zOiBERU5ZDQpYLUFwcGxpY2F0aW9uLUNvbnRleHQ6IGFwcGxpY2F0aW9uOnByb2R1Y3Rpb246ODA4MQ0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlDQpQcmFnbWE6IG5vLWNhY2hlDQpDb250ZW50LVR5cGU6IHRleHQvaHRtbDtjaGFyc2V0PVVURi04DQpDb250ZW50LUxhbmd1YWdlOiBlbg0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogTW9uLCAzMSBBdWcgMjAyMCAwNDo0Nzo0MCBHTVQNCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>CjwhZG9jdHlwZSBodG1sPgo8aHRtbCBsYW5nPSJlbiIgY2xhc3M9Im5vLWpzIj4KPGhlYWQ+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1VVEYtOCIvPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIi8+CiAgICA8bWV0YSBIVFRQLUVRVUlWPSJQcmFnbWEiIENPTlRFTlQ9Im5vLWNhY2hlIj4KICAgIDxtZXRhIEhUVFAtRVFVSVY9IkNhY2hlLUNvbnRyb2wiIENPTlRFTlQ9Im5vLWNhY2hlIj4KCiAgICA8dGl0bGU+UFYgSW50YWtlIC0gRnVsbCBDYXNlIEVudHJ5PC90aXRsZT4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSIvPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSIvYXNzZXRzL3ZlbmRvci9mYXZpY29uXzEuaWNvIj4KCiAgICAKICAgIAogICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiLz4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsaW5pdGlhbC1zY2FsZT0xLCBtYXhpbXVtLXNjYWxlPTEsIHVzZXItc2NhbGFibGU9bm8iLz4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSIvPgogICAgPG1ldGEgbmFtZT0ibGF5b3V0IiBjb250ZW50PSJtYWluIi8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9hc3NldHMvYXBwL2Nhc2UtZW50cnkvY2FzZS1lbnRyeS1tYW5pZmVzdC0wNjkxMDA4ZTYxNjMwMmJlMDg3YTc3ZjBjNGY2YmMyYS5jc3MiLz4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9hc3NldHMvYXBwbGljYXRpb24tMTNhMWRkYWUyNjdiN2I2YTMyZDEyY2ZiMWFjOThlNDMuY3NzIi8+CiAgICAKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9hc3NldHMvdmVuZG9yVWkvanF1ZXJ5L2pxdWVyeS0yLjIuNC1lNzJlNmU5N2RhNWZkOTUyMDc5YzMzYzQxNTc0MWZjNi5qcyIgPjwvc2NyaXB0PgoKICAgICAgICA8bWV0YSBuYW1lPSJfY3NyZiIgY29udGVudD0iZWJiMmI5MjEtOTA1ZS00ZDEzLWJlZGItZGQ1MDJmMTU0MWJlIi8+CiAgICAgICAgPG1ldGEgbmFtZT0iX2NzcmZfaGVhZGVyIiBjb250ZW50PSJYLUNTUkYtVE9LRU4iLz4KICAgICAgICA8bWV0YSBuYW1lPSJfY3NyZl9wYXJhbWV0ZXIiIGNvbnRlbnQ9Il9jc3JmIi8+CgoKPC9oZWFkPgo8Ym9keSBjbGFzcz0id2lkZXNjcmVlbiBmaXhlZC1sZWZ0LXZvaWQiPgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2Fzc2V0cy9VSUNvbnN0YW50cy1lZTM1ODdhYjQwZDQ3YjhiZWQxNzM4MTRlY2Y1YTBiZS5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvYXNzZXRzL2NvbW1vbi9jaGFuZ2UtdGhlbWUtNmViZDVmMDU5NzliYzY0ZGZlMmQ2ZjEwYjNlM2IzZGIuanMiID48L3NjcmlwdD4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYXBwQ29uZmlnVXJsIiB2YWx1ZT0iaHR0cDovLzEwLjEwMC4yMi4yNDM6ODA4MS9jb25maWcvYXBwQ29uZmlnIiBpZD0iYXBwQ29uZmlnVXJsIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhdHRhY2htZW50Vmlld2VyVXJsIiB2YWx1ZT0iaHR0cDovLzEwLjEwMC4yMi4yNDM6ODA4MS9jYXNlRW50cnkvZmV0Y2hEb2N1bWVudCIgaWQ9ImF0dGFjaG1lbnRWaWV3ZXJVcmwiIC8+Cgo8ZGl2IGlkPSJ3cmFwcGVyIiBjbGFzcz0iZm9yY2VkIGVubGFyZ2VkIj4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN1cnJlbnRUaW1lc3RhbXAiIHZhbHVlPSIiIGlkPSJjdXJyZW50VGltZXN0YW1wIiAvPgogICAgPCEtLSBUb3AgQmFyLS0+CiAgICA8ZGl2IGNsYXNzPSJ0b3BiYXIiPg0KICAgIDxkaXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiI+DQogICAgICAgIDxkaXYgY2xhc3M9InB1bGwtbGVmdCI+DQogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidXR0b24tbWVudS1tb2JpbGUgb3Blbi1sZWZ0IHdhdmVzLWVmZmVjdCI+DQogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLW1lbnUiPjwvaT4NCiAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNsZWFyZml4Ij48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2IGhpZGRlbi14cyI+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9IiMiIGNsYXNzPSJ3YXZlcy1lZmZlY3QiPjxkaXYgY2xhc3M9InRleHQtbGVmdCI+PGEgaHJlZj0iLyIgY2xhc3M9IkxvZ28iPjxpbWcgc3JjPSIvYXNzZXRzL1BWSW50YWtlLTI0MWFlNDY4MDhmMzUxNWYyYmUxYzBjODhlZTA3NzNiLnBuZyIgY2xhc3M9InB2TG9nbyIgYWx0PSJQVi1Mb2dvIi8+PC9hPjwvZGl2PjwvYT48L2xpPg0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGk+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovLzEwLjEwMC4yMi4zNDo4MDgzLyIgY2xhc3M9IndhdmVzLWVmZmVjdCI+UFZBZG1pbjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2IG5hdmJhci1yaWdodCBwdWxsLXJpZ2h0Ij4NCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im0tdC0yMCI+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJ0ZXh0LXdoaXRlIj5Mb2FkMTAxIChMb2FkMTAxKTwvaDU+DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcm9wZG93biBoaWRkZW4teHMgaGlkZGVuIj4NCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgZGF0YS10YXJnZXQ9IiMiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUgd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0Ig0KICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtZXhwYW5kZWQ9InRydWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLW5vdGlmaWNhdGlvbnMiPjwvaT4gPHNwYW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYmFkZ2UgYmFkZ2UteHMgYmFkZ2UtcGluayI+Mzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRleHQtY2VudGVyIG5vdGlmaS10aXRsZSI+Tm90aWZpY2F0aW9uPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1ncm91cCBuaWNlc2Nyb2xsIG5vdGlmaWNhdGlvbi1saXN0Ij4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSIgdGV4dC1yaWdodCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbD48Yj5TZWUgYWxsIG5vdGlmaWNhdGlvbnM8L2I+PC9zbWFsbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KDQogICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRyb3Bkb3duIGhpZGRlbi14cyI+DQogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJ3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQiIGRhdGEtdGFyZ2V0PSIjIg0KICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCINCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImRyb3Bkb3duIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1zZXR0aW5ncyI+PC9pPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51Ij4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJjb250cm9sUGFuZWwiIGNsYXNzPSJoaWRkZW4iPjxhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0gaHR0cDovLzEwLjEwMC4yMi4zNDo4MDgzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWRtaW5pc3RyYXRpb248L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkaXZpZGVyIj48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9Im1lbnVQcmVmZXJlbmNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSAvcHJlZmVyZW5jZT48aSBjbGFzcz0ibWQgbWQtc2V0dGluZ3MiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJlZmVyZW5jZXMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkaXZpZGVyIj48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSByZWw9Im5vb3BlbmVyIiBocmVmPSIvaGVscCIgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtaGVscCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGl2aWRlciI+PC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wYXNzd29yZC9yZXNldE93blBhc3N3b3JkIiBpZD0iTUktcmVzZXQtcGFzc3dvcmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtbG9jay1yZXNldCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFuZ2UgUGFzc3dvcmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nL2xvZ291dCcgY2xhc3M9Jyc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1leGl0LXRvLWFwcCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dvdXQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICA8L3VsPg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KPHNjcmlwdD4NCiAgICBpZiAoKHRydWUpKSB7DQogICAgICAgIExPQURfVEhFTUVfVVJMID0gIi9wcmVmZXJlbmNlL2xvYWRUaGVtZSI7DQogICAgfQ0KICAgIGlmICgodHJ1ZSkpIHsNCiAgICAgICAgVVBEQVRFX1RIRU1FX1VSTCA9ICIvcHJlZmVyZW5jZS91cGRhdGVUaGVtZSINCiAgICB9DQo8L3NjcmlwdD4NCg0KCiAgICA8IS0tIExlZnQgU2lkZWJhciAtLT4KICAgIDxkaXYgY2xhc3M9ImxlZnQgc2lkZS1tZW51Ij4NCiAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLWlubmVyIHNsaW1zY3JvbGxsZWZ0Ij4NCiAgICAgICAgPGRpdiBpZD0ic2lkZWJhci1tZW51Ij4NCiAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhc19zdWIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvIiBjbGFzcz0id2F2ZXMtZWZmZWN0IHdhdmVzLXByaW1hcnkgc2lkZS1pY29uICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtZGFzaGJvYXJkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RGFzaGJvYXJkPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhc19zdWIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhc19zdWIiPgogICAgPGEgaHJlZj0nIycgY2xhc3M9J3dhdmVzLWVmZmVjdCB3YXZlcy1wcmltYXJ5IHNpZGUtaWNvbic+CiAgICAgICAgPGkgY2xhc3M9J2ZhIGZhLXBlbmNpbC1zcXVhcmUnIGFyaWEtaGlkZGVuPSd0cnVlJz48L2k+CiAgICAgICAgPHNwYW4+TmV3IENhc2U8L3NwYW4+PC9hPgogICAgPHNwYW4gY2xhc3M9J21lbnUtYXJyb3cnPjwvc3Bhbj4KICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCI+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jYXNlRW50cnkvaW5kZXg/dGVtcGxhdGVJZD0xIiBjbGFzcz0id2F2ZXMtZWZmZWN0IHdhdmVzLXByaW1hcnkgc2lkZS1pY29uIj4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj5CYXNpYyBDYXNlIEVudHJ5PC9zcGFuPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvY2FzZUVudHJ5L2luZGV4P3RlbXBsYXRlSWQ9MiIgY2xhc3M9IndhdmVzLWVmZmVjdCB3YXZlcy1wcmltYXJ5IHNpZGUtaWNvbiI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+RnVsbCBDYXNlIEVudHJ5PC9zcGFuPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGFzX3N1YiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJ3YXZlcy1lZmZlY3Qgd2F2ZXMtcHJpbWFyeSBzaWRlLWljb24gIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1teS1saWJyYXJ5LWFkZCBjcmVhdGUtZm9sbG93LXVwIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+TmV3IEZvbGxvdyBVcDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJoYXNfc3ViIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2R1cGxpY2F0ZS9zZWFyY2giIGNsYXNzPSJ3YXZlcy1lZmZlY3Qgd2F2ZXMtcHJpbWFyeSBzaWRlLWljb24gIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zZWFyY2giIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TZWFyY2ggQ2FzZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJoYXNfc3ViIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Nhc2UvbGlzdCIgY2xhc3M9IndhdmVzLWVmZmVjdCB3YXZlcy1wcmltYXJ5IHNpZGUtaWNvbiAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWxpc3QiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DYXNlIExpc3Q8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaGFzX3N1YiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9pbnRha2UvcXVldWUiIGNsYXNzPSJ3YXZlcy1lZmZlY3Qgd2F2ZXMtcHJpbWFyeSBzaWRlLWljb24gIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1teS1saWJyYXJ5LWJvb2tzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+SW50YWtlIFF1ZXVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imhhc19zdWIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvdGFzay9tYW5hZ2VtZW50IiBjbGFzcz0id2F2ZXMtZWZmZWN0IHdhdmVzLXByaW1hcnkgc2lkZS1pY29uICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xpcGJvYXJkLXRleHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UYXNrczwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L3VsPg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJjbGVhcmZpeCI+PC9kaXY+DQogICAgPC9kaXY+DQo8L2Rpdj4KCiAgICA8ZGl2IGlkPSJwdmlNb2RhbEZvbGxvd1VwIiBjbGFzcz0ibW9kYWwgZmFkZSIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0ibXlNb2RhbExhYmVsIiBhcmlhLWhpZGRlbj0iZmFsc2UiIGRhdGEtYmFja2Ryb3A9InN0YXRpYyIgZGF0YS1rZXlib2FyZD0iZmFsc2UiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLW1kIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UgZm9sbG93VXBDYW5jZWxCdG4iIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj7DlzwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSI+RW50ZXIgQ2FzZSAjPC9oND4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIgZmFkZSBpbiBoaWRlIHAtMCBwLWwtMTAgcC1yLTEwIiBpZD0ibWVzc2FnZUJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJlcnJvck1lc3NhZ2UiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwiPkNyZWF0ZSBGb2xsb3ctVXAgZm9yIEluaXRpYWwgQ2FzZSAjPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiAgaWQ9InBhcmVudENhc2VJZCIgY2xhc3M9ImNhc2VOdW1iZXIiIG5hbWU9InN1Ym1pc3Npb25DYXNlTnVtYmVyIiBjbGFzcz0iZm9ybS1jb250cm9sIiBtYXhsZW5ndGg9IjUwIi8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBwdi1idG4tZ3JleSB3YXZlcy1lZmZlY3QgZm9sbG93VXBDYW5jZWxCdG4iIGRhdGEtZGlzbWlzcz0ibW9kYWwiPkNhbmNlbDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJmb2xsb3dVcE9rQnRuIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCI+T2s8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0icmVwb3J0TW9kYWwiIHJvbGU9ImRpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+JnRpbWVzOzwvYnV0dG9uPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZpbGVUeXBlIGg0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9kYWwtdGl0bGUgWE1MZmlsZU5hbWUgaDQiPjwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZTJiWE1MRGV0YWlsIGhpZGUiPjxwcmUgY2xhc3M9InhtbENvbnRlbnQiIGxhbmc9InhtbCI+PC9wcmU+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiIGRhdGEtZGlzbWlzcz0ibW9kYWwiPkNsb3NlPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgPGRpdiBpZD0icHZpU3BsaXRNb2RhbCIgY2xhc3M9Im1vZGFsIGZhZGUiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9Im15TW9kYWxMYWJlbCIKICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSBidG4tc3BsaXQtY2FuY2VsIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+w5c8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiPlNwbGl0PC9oND4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHNwbGl0LXN0ZXAxIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwiPkhvdyBtYW55IGNhc2VzIGRvIHlvdSB3YW50IHRvIHNwbGl0IHRoaXMgY2FzZSBpbnRvPzwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTgiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ic3BsaXRDYXNlQ291bnQiIGNsYXNzPSJzcGxpdElucHV0IGNvbC1zbS0yIiBtYXhsZW5ndGg9IjQiIHZhbHVlPSIiIGlkPSJzcGxpdENhc2VDb3VudCIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBzcGxpdC1zdGVwMiBoaWRlIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgc3BsaXQtdGFibGUgcHYtaW5uZXItdGFibGUgbS1iLTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImNvbC1tZC05Ij5GaWxlIE5hbWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iY29sLW1kLTMiPkNhc2UgTnVtYmVyPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibnVtIj4xPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3QyIHNlbGVjdDItYm94IG11bHRpU2VsZWN0U2VsZWN0MkZpZWxkIGV4aXN0aW5nLWNhc2Utc2VsZWN0IHNlbGVjdC1zcGxpdCIgaWQ9ImNhc2UtYXR0YWNobWVudHNbMF0iIG5hbWU9ImNhc2UtYXR0YWNobWVudHNbMF0iIG11bHRpcGxlPSJtdWx0aXBsZSIgZGF0YS12YWx1ZT0iIiA+DQo8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZXhpc3RpbmctY2FzZS1udW1iZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiPjxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCBleGlzdGluZy1jYXNlLW51bSI+PC9sYWJlbD48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHNwbGl0LW5vLWF0dGFjaG1lbnQgaGlkZSIgc3R5bGU9J3RleHQtYWxpZ246IGNlbnRlcjsnPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNwbGl0LWJvdC1idG4xIj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCB3YXZlcy1lZmZlY3Qgc3BsaXQtY2FuY2VsIiBkYXRhLWRpc21pc3M9Im1vZGFsIj5DYW5jZWw8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9InN1Ym1pc3Npb25TcGxpdE1vZGFsT2tCdG4xIiBjbGFzcz0iYnRuIGJ0bi1pbnZlcnNlIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCIgPk9rPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3BsaXQtYm90LWJ0bjIgaGlkZSI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgd2F2ZXMtZWZmZWN0IGJ0bi1zcGxpdC1jYW5jZWwiIGRhdGEtZGlzbWlzcz0ibW9kYWwiPkNhbmNlbDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0ic3VibWlzc2lvblNwbGl0TW9kYWxDcmVhdGVCdG4iIGNsYXNzPSJidG4gYnRuLWludmVyc2Ugd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0IiA+Q3JlYXRlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3BsaXQtYm90LWJ0MyBoaWRlIj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9InN1Ym1pc3Npb25TcGxpdE1vZGFsT2tCdG4yIiBjbGFzcz0iYnRuIGJ0bi1pbnZlcnNlIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCIgPk9rPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3BsaXQtYm90LWJ0bjQgaGlkZSB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWludmVyc2Ugd2F2ZXMtZWZmZWN0IiBpZD0ic3VibWlzc2lvblNwbGl0VUlEaWFsb2dNb2RhbENhbmNlbEJ0dG4yIiBkYXRhLWRpc21pc3M9Im1vZGFsIj5PazwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNwbGl0LWJvdC1idG41IGhpZGUgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1pbnZlcnNlIHdhdmVzLWVmZmVjdCIgaWQ9InNwbGl0U3VibWlzc2lvbkRvbmUiIGRhdGEtZGlzbWlzcz0ibW9kYWwiPk9rPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPHRhYmxlIGNsYXNzPSJzcGxpdC1yb3cgaGlkZSI+CiAgICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im51bSBzcGxpdC1jb3VudCI+PC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3QyIHNlbGVjdDItYm94IG11bHRpU2VsZWN0U2VsZWN0MkZpZWxkIHNlbGVjdC1zcGxpdCIgbmFtZT0iY2FzZS1hdHRhY2htZW50c1swXSIgaWQ9ImNhc2UtYXR0YWNobWVudHNbMF0iIG11bHRpcGxlPSJtdWx0aXBsZSIgPg0KPC9zZWxlY3Q+CiAgICAgICAgPC90ZD4KICAgICAgICA8dGQgY2xhc3M9ImludGFrZUNhc2VOdW0iPgogICAgICAgICAgICA8YT48bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbm90RGVmaW5lZFlldCI+Tm90IERlZmluZWQgWWV0PC9sYWJlbD48L2E+CiAgICAgICAgPC90ZD4KICAgICAgPC90cj4KICAgIDwvdGFibGU+CjwvZGl2PgogICAgPGRpdiBpZD0iY29weUNhc2VNb2RhbCIgZGF0YS1jdXN0b20tY2xhc3M9IiIgZGF0YS1oYXMtY29uZmlybS1idXR0b249ImZhbHNlIgogICAgIGRhdGEtYWxsb3ctb3V0c2lkZS1jbGljaz0iZmFsc2UiIGRhdGEtaGFzLWRvbmUtZnVuY3Rpb249ImZhbHNlIiBkYXRhLWFuaW1hdGlvbj0ibm9uZSIgZGF0YS10aW1lcj0ibnVsbCIKICAgICBzdHlsZT0iZGlzcGxheTogbm9uZTsgbWFyZ2luLXRvcDogLTE3MHB4OyI+CiAgICA8ZGl2IGNsYXNzPSJzYS1pY29uIHNhLWVycm9yIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgogICAgICAgIDxzcGFuIGNsYXNzPSJzYS14LW1hcmsiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ic2EtbGluZSBzYS1sZWZ0Ij48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzYS1saW5lIHNhLXJpZ2h0Ij48L3NwYW4+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ic2EtaWNvbiBzYS13YXJuaW5nIHB1bHNlV2FybmluZyIgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyI+CiAgICAgICAgPHNwYW4gY2xhc3M9InNhLWJvZHkgcHVsc2VXYXJuaW5nSW5zIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNhLWRvdCBwdWxzZVdhcm5pbmdJbnMiPjwvc3Bhbj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InNhLWljb24gc2EtaW5mbyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJzYS1pY29uIHNhLXN1Y2Nlc3MiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+CiAgICAgICAgPHNwYW4gY2xhc3M9InNhLWxpbmUgc2EtdGlwIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNhLWxpbmUgc2EtbG9uZyI+PC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJzYS1wbGFjZWhvbGRlciI+PC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InNhLWZpeCI+PC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJzYS1pY29uIHNhLWN1c3RvbSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2Rpdj4KCiAgICA8aDIgY2xhc3M9ImFsZXJ0LXR5cGUiPldhcm5pbmc8L2gyPgoKICAgIDxwIHN0eWxlPSJkaXNwbGF5OiBibG9jazsiIGNsYXNzPSJkaXNwbGF5LW1lc3NhZ2UiPjwvcD4KICAgIDxmaWVsZHNldD4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgdGFiaW5kZXg9IjMiIHBsYWNlaG9sZGVyPSIiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJzYS1pbnB1dC1lcnJvciI+PC9kaXY+CiAgICA8L2ZpZWxkc2V0PgoKICAgIDxkaXYgY2xhc3M9InNhLWVycm9yLWNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiI+ITwvZGl2PgoKICAgICAgICA8cD5Ob3QgdmFsaWQhPC9wPgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ic2EtYnV0dG9uLWNvbnRhaW5lciI+CgogICAgICAgIDxkaXYgY2xhc3M9InNhLWNvbmZpcm0tYnV0dG9uLWNvbnRhaW5lciI+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImNvbmZpcm0gYnRuLWNvbmZpcm0gdy14cyBmaXJzdC1idG4iIHRhYmluZGV4PSIxIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Ij5ZZXM8L2J1dHRvbj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhLWJhbGwtZmFsbCI+CiAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InNhLWNvbmZpcm0tYnV0dG9uLWNvbnRhaW5lciI+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImNvbmZpcm0gYnRuLXJlamVjdCB3LXhzIHNlY29uZC1idG4iIHRhYmluZGV4PSIxIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Ij5ObzwvYnV0dG9uPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGEtYmFsbC1mYWxsIj4KICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj48L2Rpdj48L2Rpdj4KCiAgICA8ZGl2IGlkPSJzcGxpdENvbmZpcm1Nb2RhbCIgZGF0YS1jdXN0b20tY2xhc3M9IiIgZGF0YS1oYXMtY29uZmlybS1idXR0b249ImZhbHNlIgogICAgIGRhdGEtYWxsb3ctb3V0c2lkZS1jbGljaz0iZmFsc2UiIGRhdGEtaGFzLWRvbmUtZnVuY3Rpb249ImZhbHNlIiBkYXRhLWFuaW1hdGlvbj0ibm9uZSIgZGF0YS10aW1lcj0ibnVsbCIKICAgICBzdHlsZT0iZGlzcGxheTogbm9uZTsgbWFyZ2luLXRvcDogLTE3MHB4OyI+CiAgICA8ZGl2IGNsYXNzPSJzYS1pY29uIHNhLWVycm9yIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgogICAgICAgIDxzcGFuIGNsYXNzPSJzYS14LW1hcmsiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ic2EtbGluZSBzYS1sZWZ0Ij48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzYS1saW5lIHNhLXJpZ2h0Ij48L3NwYW4+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ic2EtaWNvbiBzYS13YXJuaW5nIHB1bHNlV2FybmluZyIgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyI+CiAgICAgICAgPHNwYW4gY2xhc3M9InNhLWJvZHkgcHVsc2VXYXJuaW5nSW5zIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNhLWRvdCBwdWxzZVdhcm5pbmdJbnMiPjwvc3Bhbj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InNhLWljb24gc2EtaW5mbyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJzYS1pY29uIHNhLXN1Y2Nlc3MiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+CiAgICAgICAgPHNwYW4gY2xhc3M9InNhLWxpbmUgc2EtdGlwIj48L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InNhLWxpbmUgc2EtbG9uZyI+PC9zcGFuPgoKICAgICAgICA8ZGl2IGNsYXNzPSJzYS1wbGFjZWhvbGRlciI+PC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InNhLWZpeCI+PC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJzYS1pY29uIHNhLWN1c3RvbSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2Rpdj4KCiAgICA8aDIgY2xhc3M9ImFsZXJ0LXR5cGUiPldhcm5pbmc8L2gyPgoKICAgIDxwIHN0eWxlPSJkaXNwbGF5OiBibG9jazsiIGNsYXNzPSJkaXNwbGF5LW1lc3NhZ2UiPjwvcD4KICAgIDxmaWVsZHNldD4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgdGFiaW5kZXg9IjMiIHBsYWNlaG9sZGVyPSIiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJzYS1pbnB1dC1lcnJvciI+PC9kaXY+CiAgICA8L2ZpZWxkc2V0PgoKICAgIDxkaXYgY2xhc3M9InNhLWVycm9yLWNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiI+ITwvZGl2PgoKICAgICAgICA8cD5Ob3QgdmFsaWQhPC9wPgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ic2EtYnV0dG9uLWNvbnRhaW5lciI+CgogICAgICAgIDxkaXYgY2xhc3M9InNhLWNvbmZpcm0tYnV0dG9uLWNvbnRhaW5lciI+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImNvbmZpcm0gYnRuLWNvbmZpcm0gdy14cyBmaXJzdC1idG4iIHRhYmluZGV4PSIxIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Ij5ZZXM8L2J1dHRvbj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhLWJhbGwtZmFsbCI+CiAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InNhLWNvbmZpcm0tYnV0dG9uLWNvbnRhaW5lciI+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImNvbmZpcm0gYnRuLXJlamVjdCB3LXhzIHNlY29uZC1idG4iIHRhYmluZGV4PSIxIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Ij5ObzwvYnV0dG9uPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGEtYmFsbC1mYWxsIj4KICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj48L2Rpdj48L2Rpdj4KCiAgICA8IS0tIE1vZGFsIC0tPgo8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0iYXR0YWNobWVudE1vZGFsIiByb2xlPSJkaWFsb2ciPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4KCiAgICAgICAgPCEtLSBNb2RhbCBjb250ZW50LS0+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIj4mdGltZXM7PC9idXR0b24+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIiBpZD0iYXR0YWNobWVudE1vZGFsSGVhZGVyIj48L2g0PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSBzcGlubmVyIiBpZD0ibW9kYWxCb2R5RGF0YSI+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJ2aWV3ZXIiIHN0eWxlPSJ3aWR0aDoxMDAlOyI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIDwvZGl2Pgo8L2Rpdj4KICAgIA0KPGRpdiBpZD0idGFza01vZGFsIiBjbGFzcz0ibW9kYWwgZmFkZSIgZGF0YS1iYWNrZHJvcD0ic3RhdGljIiBkYXRhLWtleWJvYXJkPSJmYWxzZSI+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj7DlzwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiPkNyZWF0ZSBUYXNrPC9oND4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgPGZvcm0gaWQ9InRhc2tGb3JtIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtZGFuZ2VyIGZhZGUgaW4gaGlkZSBwLTAgcC1sLTEwIHAtci0xMCIgaWQ9Im1lc3NhZ2VCb3giPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJlcnJvck1lc3NhZ2UiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS00IHJlcXVpcmVkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InRhc2tUeXBlSWQiIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIj5UYXNrIFR5cGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0idGFza1R5cGVJZCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBuYW1lPSJ0YXNrVHlwZUlkIiBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdDItYm94IiA+DQo8b3B0aW9uIHZhbHVlPSIxMDAwMTIiID5DYXNlIE51bGxpZmljYXRpb248L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMDAxOCIgPlRhc2sxMTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMTAwMDE5IiA+dGFzazEyPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIxMDAwMTQiID5RdWVyeSBBY3Rpb248L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMDAxNSIgPlRlc3QgUUEgMjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMTAwMDE2IiA+SG9zcGl0YWxpemF0aW9uIERhdGVzPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIxMDAwMTciID5Ib3NwaXRhbCBEaXNjaGFyZ2UgU3VtbWFyeTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMSIgPkNhc2U8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjIiID5MZXR0ZXI8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjMiID5FeHBlZGl0ZWQgUmVwb3J0PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI0IiA+UGVyaW9kaWMgUmVwb3J0PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI1IiA+TG9jYWwgRXZlbnQ8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMDAwMCIgPlVuYmxpZGluZyBBcHByb3ZhbDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMTAwMDA4IiA+T3RoZXI8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjEwMDAwMiIgPlRlc3RfUE1EQSBGYXggcmVwb3J0PC9vcHRpb24+DQo8L3NlbGVjdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icHJpb3JpdHlJZCI+UHJpb3JpdHk8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJwcmlvcml0eUlkIiBuYW1lPSJwcmlvcml0eUlkIiBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdDItYm94IiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiID4NCjxvcHRpb24gdmFsdWU9IjEiID5IaWdoPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIyIiA+TWVkaXVtPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIzIiA+TG93PC9vcHRpb24+DQo8L3NlbGVjdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCByZXF1aXJlZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJhc3NpZ25lZFRvSWQiIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIj5Bc3NpZ25lZCBUbzwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJhc3NpZ25lZFRvSWQiIG5hbWU9ImFzc2lnbmVkVG9JZCIgY2xhc3M9ImZvcm0tY29udHJvbCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0Ij48L3NlbGVjdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgbS10LTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZHVlRGF0ZSI+RHVlIERhdGU8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBmdXR1cmVEYXRlc0FsbG93ZWQiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgbmFtZT0iZHVlRGF0ZSIgaWQ9ImR1ZURhdGUiIHBsYWNlaG9sZGVyPSJEdWUgRGF0ZSIgdmFsdWU9IiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgbS10LTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY29tcGxldGlvbkRhdGUiPkNvbXBsZXRpb24gRGF0ZTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIG5hbWU9ImNvbXBsZXRpb25EYXRlIiBpZD0idGFza0NvbXBsZXRpb25EYXRlIiBwbGFjZWhvbGRlcj0iQ29tcGxldGlvbiBEYXRlIiB2YWx1ZT0iIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBtLXQtNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzdGF0dXMiPlN0YXR1czwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJ0YXNrU3RhdHVzIiBuYW1lPSJzdGF0dXNJZCIgY2xhc3M9InNlbGVjdDItYm94IGZvcm0tY29udHJvbCIgPg0KPG9wdGlvbiB2YWx1ZT0iMSIgPk5ldzwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMiIgPkluIFByb2dyZXNzPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIzIiA+TmVlZCBDbGFyaWZpY2F0aW9uPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI0IiA+Q2xvc2VkPC9vcHRpb24+DQo8L3NlbGVjdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiByZXF1aXJlZCBtLXQtNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkZXNjcmlwdGlvbiIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkRlc2NyaXB0aW9uPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0iZGVzY3JpcHRpb24iIG5hbWU9ImRlc2NyaXB0aW9uIiByb3dzPSI4IiBjb2xzPSIyMCIgbWF4bGVuZ3RoPSI0MDAwIiBjbGFzcz0iZm9ybS1jb250cm9sIG0tYi01IiA+PC90ZXh0YXJlYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBtLXQtNSBoaWRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkludGFrZSBDYXNlIE51bWJlcjwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImNhc2UtaWQiIG5hbWU9InByaW1hcnlSZWZJZCIgdmFsdWU9IiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgbS10LTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+SW50YWtlIENhc2UgTnVtYmVyPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iY2FzZS1udW1iZXIiIG5hbWU9InRlcnRpYXJ5UmVmSWQiIHZhbHVlPSIiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS00IG0tdC01Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIj5WZXJzaW9uPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0iY2FzZS12ZXJzaW9uIiBuYW1lPSJzZWNvbmRhcnlSZWZJZCIgdmFsdWU9IiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0yIG0tdC01Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkVtYWlsIEFsZXJ0PC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0idGFzay1lbWFpbC1hbGVydCIgbmFtZT0iIiB2YWx1ZT0idHJ1ZSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0YXNrLWVtYWlsLWFsZXJ0Ij48L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMiBoaWRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPlNNUyBBbGVydDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InRhc2stc21zLWFsZXJ0IiAgdmFsdWU9InRydWUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0iIj48L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgbS10LTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyIgaWQ9ImNyZWF0ZWRfdXBkYXRlZF9lbGUiPkNyZWF0ZWQgQnk8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YXNrTWFuYWdlckNyZWF0ZWRCeVVzZXJuYW1lIj5Mb2FkMTAxPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS00IG0tdC01Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkRhdGUgQ3JlYXRlZDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRhc2stZGF0ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0idGFza0lkIiBuYW1lPSJ0YXNrSWQiIHZhbHVlPSIiIC8+DQogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJjb3VudHJ5SWQiIG5hbWU9ImNvdW50cnlJZCIgdmFsdWU9IiIgLz4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImZvdXJ0aFJlZklkIiBuYW1lPSJmb3VydGhSZWZJZCIgdmFsdWU9IiIgLz4NCiAgICAgICAgICAgICAgICA8L2Zvcm0+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJ0YXNrLWNhbmNlbC1idG4iIGNsYXNzPSJidG4gcHYtYnRuLWdyZXkgd2F2ZXMtZWZmZWN0Ij5DYW5jZWw8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9InRhc2stc2F2ZS1idG4iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0Ij5DcmVhdGU8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9InRhc2stdXBkYXRlLWJ0biIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSB3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQgaGlkZSI+VXBkYXRlPC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2Rpdj4KICAgIA0KPGRpdiBpZD0icHZpTW9kYWxGb2xsb3dVcFF1ZXJ5IiBjbGFzcz0ibW9kYWwgZmFkZSIgZGF0YS1iYWNrZHJvcD0ic3RhdGljIiBkYXRhLWtleWJvYXJkPSJmYWxzZSIgc3R5bGU9InBvc2l0aW9uOiByZWxhdGl2ZTsiPg0KICAgIDxkaXYgY2xhc3M9ImZvbGxvdy11cC1tb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nIG1vZGFsLWxnIiBzdHlsZT0icG9zaXRpb246IGZpeGVkOyI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIEZVUUNhbmNlbEJ0biIgaWQ9ImZvbGxvd1VwUXVlcnlDbG9zZUJ0biIgYXJpYS1oaWRkZW49InRydWUiPsOXPC9idXR0b24+DQogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSBoZWFkaW5nIGFkZEhlYWRpbmciPkZvbGxvdy1VcCBRdWVyeTwvaDQ+DQogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSBoZWFkaW5nIGhpZGUgZWRpdEhlYWRpbmciPkVkaXQgRm9sbG93LXVwIFF1ZXJ5PC9oND4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGlkPSJmb2xsb3dVcFF1ZXJ5Rm9ybSIgZW5jdHlwZT0ibXVsdGlwYXJ0L2Zvcm0tZGF0YSIgbWV0aG9kPSJwb3N0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRob2QgY29sLW1kLTEwIHJlcXVpcmVkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im1ldGhvZCIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbS10LTUgbGJsLWVsaXBzaXMiPk1ldGhvZCA8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0ibWV0aG9kIiBuYW1lPSJtZXRob2RJZCIgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3QyIiA+DQo8b3B0aW9uIHZhbHVlPSIxIiA+RW1haWw8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjIiID5GYXg8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjMiID5MZXR0ZXI8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjQiID5QaG9uZSBDYWxsPC9vcHRpb24+DQo8L3NlbGVjdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0yIG0tdC0zMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnRlcm5hbCBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IHRvZ2dsZUNDIGNhcmJvbkNvcHkgbS1yLTEwIGNoZWNrYm94LWlubGluZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJjY1RvZ2dsZSIgY2xhc3M9ImNjVG9nZ2xlIiB0eXBlPSJjaGVja2JveCIgbmFtZT0iY2NUb2dnbGUiIHZhbHVlPSJ0cnVlIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY2NUb2dnbGUiIGNsYXNzPSJjb250cm9sLWxhYmVsIj5DQyA8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnRlcm5hbCBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IHRvZ2dsZUJDQyBibGluZENhcmJvbkNvcHkgY2hlY2tib3gtaW5saW5lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImJjY1RvZ2dsZSIgY2xhc3M9ImJjY1RvZ2dsZSIgdHlwZT0iY2hlY2tib3giIG5hbWU9ImJjY1RvZ2dsZSIgdmFsdWU9InRydWUiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJiY2NUb2dnbGUiIGNsYXNzPSJjb250cm9sLWxhYmVsIj5CQ0MgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLXQtMTAgZm9sbG93VXBSZXBvcnRlcnMgdG8gbWFpbFJlY2VpdmVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIHJlcXVpcmVkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImZvbGxvd1VwUmVwb3J0ZXJzIiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+VG8gPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImZvbGxvd1VwUmVwb3J0ZXJzIiBjbGFzcz0ibGJsLXJlcXVpcmVkIGZvcm0tY29udHJvbCAgc2VsZWN0MiBzZWxlY3QyLWJveCB3cmFwcGVkLW11bHRpc2VsZWN0IHNlbGVjdC1zcGxpdCBjdXN0b21WYWx1ZU11bHRpU2VsZWN0MiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0ic2VudFRvIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZT0ibXVsdGlwbGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBzZW50VG9Qb3N0YWxNYWlsIG0tdC0xMCByZXF1aXJlZCBoaWRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InNlbnRUb1Bvc3RhbE1haWwiIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIj5UbyA8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPSJzZW50VG9Qb3N0YWxNYWlsIiBuYW1lPSJzZW50VG9Qb3N0YWxNYWlsIiByb3dzPSIxIiBjb2xzPSIyMCIgbWF4bGVuZ3RoPSIxMDAwIiBjbGFzcz0iZm9ybS1jb250cm9sIGZtLXRleHQtYXJlYSBwLXQtMCIgPjwvdGV4dGFyZWE+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNjRGl2IiBjbGFzcz0iY2MgY2FyYm9uQ29weSBtLXQtMTAgcm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImNjIiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+Q0M8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iY2MiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNlbGVjdDIgc2VsZWN0Mi1ib3ggd3JhcHBlZC1tdWx0aXNlbGVjdCBzZWxlY3Qtc3BsaXQgY3VzdG9tVmFsdWVNdWx0aVNlbGVjdDIiIG5hbWU9ImNjIiBtdWx0aXBsZT0ibXVsdGlwbGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYmNjRGl2IiBjbGFzcz0iYmNjIGJsaW5kQ2FyYm9uQ29weSBtLXQtMTAgcm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImJjYyIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkJDQzwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJiY2MiIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0MiBzZWxlY3QyLWJveCB3cmFwcGVkLW11bHRpc2VsZWN0IHNlbGVjdC1zcGxpdCBjdXN0b21WYWx1ZU11bHRpU2VsZWN0MiIgbmFtZT0iYmNjIiBtdWx0aXBsZT0ibXVsdGlwbGUiPjwvc2VsZWN0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImVtYWlsVGVtcGxhdGUgbS10LTEwIHJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJlbWFpbFRlbXBsYXRlIiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+VGVtcGxhdGUgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImVtYWlsVGVtcGxhdGUiIG5hbWU9ImVtYWlsVGVtcGxhdGUiIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0Mi1ib3giID4NCjwvc2VsZWN0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLXQtMTAgbWFpbFN1YmplY3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJqZWN0IGNvbC1tZC0xMiByZXF1aXJlZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzdWJqZWN0IiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+U3ViamVjdCA8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPSJzdWJqZWN0IiBuYW1lPSJzdWJqZWN0IiByb3dzPSIxIiBjb2xzPSIyMCIgbWF4bGVuZ3RoPSIxMDAwIiBjbGFzcz0iZm9ybS1jb250cm9sIGZtLXRleHQtYXJlYSBwLXQtMCIgPjwvdGV4dGFyZWE+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG0tdC0xMCBtYWlsQm9keSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsRlVRTXNnIGNvbC1tZC0xMiByZXF1aXJlZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJtb2RhbEZVUU1zZyIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPk1lc3NhZ2UgPHNwYW4gY2xhc3M9ImZhIGZhLXF1ZXN0aW9uLWNpcmNsZSAiIHN0eWxlPSJjb2xvcjojMDAwMEZGO2N1cnNvcjogcG9pbnRlcjsiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+PC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0ibW9kYWxGVVFNc2ciIG5hbWU9ImJvZHkiIHJvd3M9IjE1IiBjb2xzPSIyMCIgbWF4bGVuZ3RoPSIxMDAwMCIgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgaGlkZSIgPjwvdGV4dGFyZWE+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibm9uRW1haWwgaGlkZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBzZW50VG9Ob25FbWFpbCBtLXQtMTAgcmVxdWlyZWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzZW50VG9Ob25FbWFpbCIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkNvbnRhY3RlZCA8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0ic2VudFRvTm9uRW1haWwiIG5hbWU9InNlbnRUb05vbkVtYWlsIiByb3dzPSIxIiBjb2xzPSIyMCIgbWF4bGVuZ3RoPSIxMDAwIiBjbGFzcz0iZm9ybS1jb250cm9sIGZtLXRleHQtYXJlYSBwLXQtMCIgPjwvdGV4dGFyZWE+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1heGxlbmd0aC1mZWVkYmFjayI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgZGVzY3JpcHRpb24gbS10LTEwIHJlcXVpcmVkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGVzY3JpcHRpb24iIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIj5EZXNjcmlwdGlvbiA8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0iRlVfZGVzY3JpcHRpb24iIG5hbWU9ImRlc2NyaXB0aW9uIiByb3dzPSIxIiBjb2xzPSIyMCIgbWF4bGVuZ3RoPSIxMDAwIiBjbGFzcz0iZm9ybS1jb250cm9sIGZtLXRleHQtYXJlYSBwLXQtMCIgPjwvdGV4dGFyZWE+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1heGxlbmd0aC1mZWVkYmFjayI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbS10LTEwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVTZW50IGNvbC1tZC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkYXRlU2VudCIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkRhdGUgQ29udGFjdGVkPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlU2VudCBkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgbmFtZT0iZGF0ZVNlbnQiIGlkPSJkYXRlU2VudCIgcGxhY2Vob2xkZXI9IkRhdGUgQ29udGFjdGVkIiB2YWx1ZT0iIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VudEJ5Tm9uRW1haWwgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InNlbnRCeU5vbkVtYWlsIiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+Q29udGFjdGVkIEJ5IDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJzZW50QnlOb25FbWFpbCIgbmFtZT0ic2VudEJ5Tm9uRW1haWwiIHZhbHVlPSIiIG1heGxlbmd0aD0iMTAwMCIgY2xhc3M9ImZvcm0tY29udHJvbCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZUNsb3NlZCBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0ZUNsb3NlZCIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkRhdGUgQ2xvc2VkPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlQ2xvc2VkIGRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiBuYW1lPSJkYXRlQ2xvc2VkIiBpZD0iZGF0ZUNsb3NlZCIgcGxhY2Vob2xkZXI9IkRhdGUgQ2xvc2VkIiB2YWx1ZT0iIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGNvbW1lbnRzIG0tdC0xMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImNvbW1lbnRzIiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+Q29tbWVudHMgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9ImNvbW1lbnRzIiBuYW1lPSJjb21tZW50cyIgcm93cz0iOCIgY29scz0iMjAiIG1heGxlbmd0aD0iNDAwMCIgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEiID48L3RleHRhcmVhPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnRzIGZpbGVOYW1lIG0tdC0xMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImNvbC1tZC0xIj4jPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJjb2wtbWQtMTEgIHRydWUiPiA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkF0dGFjaG1lbnRzIDwvbGFiZWw+PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC1hdHRhY2htZW50IiBkYXRhLXRhYnVsYXI9InRydWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIiBpZD0iYXR0YWNobWVudFNlY3Rpb24tZm9sbG93VXAiIHN0eWxlPSIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSBoaWRlIGRlbGV0ZWQiIGRhdGEtaWQgPSAiIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXgiPjA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgcHYtY29sLWF0dGFjaG1lbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImF0dGFjaG1lbnRSb3cgbS1yLTEwIiBkYXRhLWRlbGV0ZWQ9ImZhbHNlIiBkYXRhLWZpbGVuYW1lPSIiIGRhdGEtc3RvcmFnZWlkPSIiIGRhdGEtcmVkYWN0PSJmYWxzZSIgPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgY2xhc3M9InB1bGwtcmlnaHQgZGVsZXRlLWF0dGFjaG1lbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlIiBzdHlsZT0iIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCI+MTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnRlcm5hbCIgZGF0YS1pZD0iYXR0YWNobWVudEZpbGVQYXRoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpbGUtdXBsb2FkZXIiIGRhdGEtcHJvdmlkZXM9ImZpbGV1cGxvYWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJmaWxlIiBuYW1lPSJmb2xsb3dVcFF1ZXJ5LmF0dGFjaG1lbnRzWzBdLmZpbGUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlzZXQ9IjAiIGNsYXNzPSJmaWxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIGZpbGVOYW1lIiBkaXNhYmxlZD0iIiBwbGFjZWhvbGRlcj0iQXR0YWNoIGEgZmlsZSIgdmFsdWU9IiIgbmFtZT0iZm9sbG93VXBRdWVyeS5hdHRhY2htZW50c1swXS5maWxlTmFtZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1idG4gIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJyb3dzZSBidG4gYnRuLXByaW1hcnkgYnRuLWZpbGUtdXBsb2FkIiB0eXBlPSJidXR0b24iPjxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iIGNsYXNzPSJwdWxsLXJpZ2h0IGRlbGV0ZS1hdHRhY2htZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbW1lbnRzRW1haWwgaGlkZSBtLXQtMTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJjb21tZW50c0VtYWlsIiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+Q29tbWVudHM8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9ImNvbW1lbnRzRW1haWwiIG5hbWU9ImNvbW1lbnRzIiByb3dzPSIxMCIgY29scz0iMjAiIG1heGxlbmd0aD0iNTAwIiBjbGFzcz0iZm9ybS1jb250cm9sIGZtLXRleHQtYXJlYSIgPjwvdGV4dGFyZWE+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVDb250YWN0ZWRQb3N0YWxNYWlsIGhpZGUgIG0tdC0xMCBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkYXRlQ29udGFjdGVkUG9zdGFsTWFpbCIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkRhdGUgQ29udGFjdGVkPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZUNvbnRhY3RlZFBvc3RhbE1haWwgZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgbmFtZT0iZGF0ZUNvbnRhY3RlZFBvc3RhbE1haWwiIGlkPSJkYXRlQ29udGFjdGVkUG9zdGFsTWFpbCIgcGxhY2Vob2xkZXI9IkRhdGUgQ29udGFjdGVkIiB2YWx1ZT0iIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWN0ZWRQb3N0YWxNYWlsICBoaWRlICBtLXQtMTAgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY29udGFjdGVkUG9zdGFsTWFpbCIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkNvbnRhY3RlZCBCeSA8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJjb250YWN0ZWRQb3N0YWxNYWlsIiBuYW1lPSJjb250YWN0ZWRQb3N0YWxNYWlsIiB2YWx1ZT0iIiBtYXhsZW5ndGg9IjEwMDAiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlQ2xvc2VkRW1haWwgaGlkZSAgbS10LTEwIGNvbC1tZC00IGRyb3B1cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkYXRlQ2xvc2VkRW1haWwiIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIj5EYXRlIENsb3NlZDwvbGFiZWw+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIG5hbWU9ImRhdGVDbG9zZWQiIGlkPSJkYXRlQ2xvc2VkRW1haWwiIHBsYWNlaG9sZGVyPSJEYXRlIENsb3NlZCIgdmFsdWU9IiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJmb2xsb3dVcFF1ZXJ5SWQiIG5hbWU9ImZvbGxvd1VwUXVlcnlJZCIgdmFsdWU9IiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0icHJpbWFyeVJlZklkIiBuYW1lPSJwcmltYXJ5UmVmSWQiIHZhbHVlPSIiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9InNlY29uZGFyeVJlZklkIiBuYW1lPSJzZWNvbmRhcnlSZWZJZCIgdmFsdWU9IiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0idGVydGlhcnlSZWZJZCIgbmFtZT0idGVydGlhcnlSZWZJZCIgdmFsdWU9IiIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0ibWF4RmlsZVNpemUiIG5hbWU9Im1heEZpbGVTaXplIiB2YWx1ZT0iNSIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBpZD0iZW1haWxIZWxwTW9kYWwiIGNsYXNzPSJtb2RhbCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciPg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1tZCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9ImVtYWlsSGVscENsb3NlIiBjbGFzcz0iY2xvc2UiIGFyaWEtaGlkZGVuPSJ0cnVlIj7DlzwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUgZW1haWxIZWxwIj5GaWVsZCB0YWdzIHN1cHBvcnRlZCBpbiBlLW1haWwgYm9keSBhbmQgc3ViamVjdDwvaDQ+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCIgaWQ9InBsYWNlaG9sZGVyVGFibGUiPg0KICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iY29sLW1kLTEiPiM8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJjb2wtbWQtMyI+IDxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyIgPiBQbGFjZWhvbGRlciA8L2xhYmVsPjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImNvbC1tZC04Ij4gPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIj4gSGVscCBUZXh0IDwvbGFiZWw+PC90aD4NCiAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InByaW1hcnkiPjx0ZD4xPC90ZD48dGQ+W0ludGFrZSBDYXNlICNdPC90ZD48dGQ+IEludGFrZSBDYXNlIE51bWJlcjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icHJpbWFyeSI+PHRkPjI8L3RkPjx0ZD5bVmVyc2lvbl08L3RkPjx0ZD4gVmVyc2lvbiBvZiB0aGUgQ2FzZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icHJpbWFyeSI+PHRkPjM8L3RkPjx0ZD5bRmlyc3QgUmVjZWlwdCBEYXRlXTwvdGQ+PHRkPiBGaXJzdCBSZWNlaXB0IERhdGUgb2YgdGhlIENhc2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InByaW1hcnkiPjx0ZD40PC90ZD48dGQ+W0ZVIFJlY2VpcHQgRGF0ZV08L3RkPjx0ZD4gRlUgUmVjZWlwdCBEYXRlIG9mIHRoZSBDYXNlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJwcmltYXJ5Ij48dGQ+NTwvdGQ+PHRkPltQcmltYXJ5IFJlcG9ydGVyXTwvdGQ+PHRkPiBOYW1lIG9mIHRoZSBQcmltYXJ5IFJlcG9ydGVyIGluIGZvcm1hdCAmbHQ7Rmlyc3QgTmFtZSZndDsgJmx0O01pZGRsZSBOYW1lJmd0OyAmbHQ7TGFzdCBOYW1lJmd0OzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icHJpbWFyeSI+PHRkPjY8L3RkPjx0ZD5bUGF0aWVudCBJbml0aWFsc108L3RkPjx0ZD4gTmFtZSAvIEluaXRpYWxzIG9mIHRoZSBQYXRpZW50PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJwcmltYXJ5Ij48dGQ+NzwvdGQ+PHRkPltBZ2VdPC90ZD48dGQ+IEFnZSBvZiB0aGUgUGF0aWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icHJpbWFyeSI+PHRkPjg8L3RkPjx0ZD5bR2VuZGVyXTwvdGQ+PHRkPiBHZW5kZXIgb2YgdGhlIFBhdGllbnQgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJwcmltYXJ5Ij48dGQ+OTwvdGQ+PHRkPltQcmltYXJ5IFN1c3BlY3QgUHJvZHVjdF08L3RkPjx0ZD4gTmFtZSBvZiB0aGUgUHJpbWFyeSBTdXNwZWN0IFByb2R1Y3QgaW4gZm9ybWF0ICZsdDtUcmFkZSBOYW1lJmd0OyAoJmx0O0dlbmVyaWMgTmFtZSZndDspIGlmIFByb2R1Y3QgaXMgY29kZWQgZWxzZSBzaGFsbCBkaXNwbGF5IHRoZSBQcm9kdWN0IE5hbWU8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InByaW1hcnkiPjx0ZD4xMDwvdGQ+PHRkPltQcmltYXJ5IEV2ZW50XTwvdGQ+PHRkPiBSZXBvcnRlZCBSZWFjdGlvbiBmb3IgZmlyc3QgZXZlbnQgaW4gdGhlIGNhc2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJlbWFpbEhlbHBPayIgY2xhc3M9ImJ0biBwdi1idG4tZ3JleSB3YXZlcy1lZmZlY3QgZW1haWxIZWxwLW9rLWJ0biIgPk9rPC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gcHYtYnRuLWRhcmstZ3JleSB3YXZlcy1lZmZlY3QiIGlkPSJGVVFSZXNldEJ0biI+UmVzZXQ8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBwdi1idG4tZ3JleSB3YXZlcy1lZmZlY3QgRlVRQ2FuY2VsQnRuIiBpZD0iRlVRQ2FuY2VsQnRuIj5DYW5jZWw8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSB3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQiIGlkPSJGVVFTZW5kIj5TZW5kPC9idXR0b24+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gcHYtYnRuLWdyZXkgd2F2ZXMtZWZmZWN0IGZvbGxvd1VwQ2xvc2VCdG4gaGlkZSIgaWQ9ImZ1cUNsb3NlIj5DbG9zZTwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCBmb2xsb3dVcFVwZGF0ZUJ0biBoaWRlIiBpZD0iZnVxVXBkYXRlIj5VcGRhdGU8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8YSBpZD0idGVtcERvd25sb2FkIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImhpZGUiPjwvYT4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQoNCgoKICAgIAo8ZGl2IGlkPSJwcm9kdWN0LWJyb3dzZXItY29udGFpbmVyIiBjbGFzcz0icHZiLWNvbnRhaW5lciI+PC9kaXY+Cgo8ZGl2IGlkPSJzdHVkeS1icm93c2VyLWNvbnRhaW5lciIgY2xhc3M9InB2Yi1jb250YWluZXIiPjwvZGl2PgoKPGRpdiBpZD0ibWVkZHJhLWJyb3dzZXItY29udGFpbmVyIiBjbGFzcz0icHZiLWNvbnRhaW5lciI+PC9kaXY+Cgo8ZGl2IGNsYXNzPSJoaWRlIiBpZD0iZXZlbnRDb2RlZEljb25EaXZJZCI+PGkgY2xhc3M9ImZhIHB1bGwtcmlnaHQgbS10LTEwIHdoaXRlLXRvb2x0aXAgZXZlbnRDb2RlZEZsYWciPjwvaT48L2Rpdj4KPGRpdiBjbGFzcz0ic3dlZXQtYWxlcnQtbW9kYWwiIGRhdGEtY3VzdG9tLWNsYXNzPSIiIGRhdGEtaGFzLWNhbmNlbC1idXR0b249InRydWUiIGRhdGEtaGFzLWNvbmZpcm0tYnV0dG9uPSJmYWxzZSIKICAgICBkYXRhLWFsbG93LW91dHNpZGUtY2xpY2s9ImZhbHNlIiBkYXRhLWhhcy1kb25lLWZ1bmN0aW9uPSJmYWxzZSIgZGF0YS1hbmltYXRpb249Im5vbmUiIGRhdGEtdGltZXI9Im51bGwiCiAgICAgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IG1hcmdpbi10b3A6IC0xNzBweDsiPgogICAgPGRpdiBjbGFzcz0ic2EtaWNvbiBzYS1lcnJvciIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4KICAgICAgICA8c3BhbiBjbGFzcz0ic2EteC1tYXJrIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNhLWxpbmUgc2EtbGVmdCI+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ic2EtbGluZSBzYS1yaWdodCI+PC9zcGFuPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InNhLWljb24gc2Etd2FybmluZyBwdWxzZVdhcm5pbmciIHN0eWxlPSJkaXNwbGF5OiBibG9jazsiPgogICAgICAgIDxzcGFuIGNsYXNzPSJzYS1ib2R5IHB1bHNlV2FybmluZ0lucyI+PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJzYS1kb3QgcHVsc2VXYXJuaW5nSW5zIj48L3NwYW4+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJzYS1pY29uIHNhLWluZm8iIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PC9kaXY+CgogICAgPGRpdiBjbGFzcz0ic2EtaWNvbiBzYS1zdWNjZXNzIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgogICAgICAgIDxzcGFuIGNsYXNzPSJzYS1saW5lIHNhLXRpcCI+PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJzYS1saW5lIHNhLWxvbmciPjwvc3Bhbj4KCiAgICAgICAgPGRpdiBjbGFzcz0ic2EtcGxhY2Vob2xkZXIiPjwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJzYS1maXgiPjwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0ic2EtaWNvbiBzYS1jdXN0b20iIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PC9kaXY+CgogICAgPGgyIGNsYXNzPSJhbGVydC10eXBlIj5XYXJuaW5nPC9oMj4KCiAgICA8cCBzdHlsZT0iZGlzcGxheTogYmxvY2s7IiBjbGFzcz0iZGlzcGxheS1tZXNzYWdlIj48L3A+CiAgICA8ZmllbGRzZXQ+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIHRhYmluZGV4PSIzIiBwbGFjZWhvbGRlcj0iIj4KCiAgICAgICAgPGRpdiBjbGFzcz0ic2EtaW5wdXQtZXJyb3IiPjwvZGl2PgogICAgPC9maWVsZHNldD4KCiAgICA8ZGl2IGNsYXNzPSJzYS1lcnJvci1jb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Imljb24iPiE8L2Rpdj4KCiAgICAgICAgPHA+Tm90IHZhbGlkITwvcD4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9InNhLWJ1dHRvbi1jb250YWluZXIiPgogICAgICAgIDxidXR0b24gY2xhc3M9ImNhbmNlbCBmaXJzdC1idG4gYnRuLWNhbmNlbCB3LXhzIiB0YWJpbmRleD0iMiIKICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IGJveC1zaGFkb3c6IG5vbmU7Ij5DYW5jZWw8L2J1dHRvbj4KCiAgICAgICAgPGRpdiBjbGFzcz0ic2EtY29uZmlybS1idXR0b24tY29udGFpbmVyIj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iY29uZmlybSBidG4tY29uZmlybSB3LXhzIiB0YWJpbmRleD0iMSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij5PSzwvYnV0dG9uPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGEtYmFsbC1mYWxsIj4KICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0ic2EtY29uZmlybS1idXR0b24tY29udGFpbmVyIj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iY29uZmlybSBidG4tY29uZmlybSB3LXhzIHNlY29uZC1idG4iIHRhYmluZGV4PSIxIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Ij5ZZXM8L2J1dHRvbj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhLWJhbGwtZmFsbCI+CiAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InNhLWNvbmZpcm0tYnV0dG9uLWNvbnRhaW5lciI+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImNvbmZpcm0gYnRuLXJlamVjdCB3LXhzIHRoaXJkLWJ0biIgdGFiaW5kZXg9IjEiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiPk5vPC9idXR0b24+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYS1iYWxsLWZhbGwiPgogICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PjwvZGl2PjwvZGl2PgoKCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNlcnZlclRpbWVzdGFtcFVSTCIgdmFsdWU9Imh0dHA6Ly8xMC4xMDAuMjIuMjQzOjgwODEvY29uZmlnL2xvYWRTZXJ2ZXJUaW1lIiBpZD0ic2VydmVyVGltZXN0YW1wVVJMIiAvPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0ic2VydmVyVGltZXN0YW1wIi8+CjxkaXYgaWQ9InB2LWp1c3RpZmljYXRpb24tbW9kYWwiIGNsYXNzPSJtb2RhbCBmYWRlIiBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9Imp1c3RpZmljYXRpb25Nb2RhbExhYmVsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIGF0dGFjaG1lbnRVcGxvYWRNb2RlbCIgaWQ9ImF0dGFjaG1lbnRVcGxvYWRNb2RlbCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciCiAgICAgYXJpYS1oaWRkZW49InRydWUiIGRhdGEtZmlsZU5hbWVBdHRyaWJ1dGU9IiI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdXJyZW50QXR0YWNobWVudE5hbWUiIHZhbHVlPSIiIGlkPSJjdXJyZW50QXR0YWNobWVudE5hbWUiIC8+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYnV0dG9uPgoKICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiPlVwZGF0ZSBBdHRhY2htZW50PC9oND4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgIDxwPkRvIHlvdSB3YW50IHRvIHJlcGxhY2UgdGhlIG9yaWdpbmFsIGZpbGUgb3IgcHJvdmlkZSB0aGUgZWRpdGVkIGNvcHk/PC9wPgogICAgICAgICAgICAgICAgPGZvcm0+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyYWRpby1pbmxpbmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIG5hbWU9ImF0dGFjaG1lbnRfdHlwZV9yZWRhY3QiIHZhbHVlPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIFJlcGxhY2UgT3JpZ2luYWwKICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icmFkaW8taW5saW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJhdHRhY2htZW50X3R5cGVfcmVkYWN0IiB2YWx1ZT0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEVkaXRlZCBDb3B5CiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iYXR0YWNobWVudE1vZGVsU3VibWl0QnV0dG9uIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXNlY29uZGFyeSI+CiAgICAgICAgICAgICAgICAgICAgT2sKICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iYXR0YWNobWVudE1vZGVsRGlzbWlzc0J1dHRvbiIgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkiIGRhdGEtZGlzbWlzcz0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgIENhbmNlbDwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgaWQ9ImVtYWlsQ29udGVudGZ1cU1vZGFsIiBjbGFzcz0ibW9kYWwgZmFkZSIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0ibXlNb2RhbExhYmVsIiBhcmlhLWhpZGRlbj0iZmFsc2UiIGRhdGEtYmFja2Ryb3A9InN0YXRpYyIgZGF0YS1rZXlib2FyZD0iZmFsc2UiPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UgZW1haWxDb250ZW50TW9kYWxDYW5jZWxCdG4iIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj7DlzwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSI+Rm9sbG93IFVwIFF1ZXJ5IEluZm9ybWF0aW9uPC9oND4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgcmVxdWlyZWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJlbWFpbE1ldGhvZCIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPk1ldGhvZCA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJlbWFpbE1ldGhvZCIgbmFtZT0iZW1haWxNZXRob2QiIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0MiIgZGlzYWJsZWQ9ImRpc2FibGVkIiA+DQo8b3B0aW9uIHZhbHVlPSIxIiA+RW1haWw8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjIiID5GYXg8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjMiID5MZXR0ZXI8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjQiID5QaG9uZSBDYWxsPC9vcHRpb24+DQo8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgcmVxdWlyZWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJlbWFpbFNlbnRUbyIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPlRvIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImVtYWlsU2VudFRvIiBjbGFzcz0ibGJsLXJlcXVpcmVkIGZvcm0tY29udHJvbCAgc2VsZWN0MiBzZWxlY3QyLWJveCBtdWx0aVNlbGVjdFNlbGVjdDJGaWVsZCB3cmFwcGVkLW11bHRpc2VsZWN0IHNlbGVjdC1zcGxpdCBjdXN0b21WYWx1ZU11bHRpU2VsZWN0MiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9ImVtYWlsU2VudFRvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGU9Im11bHRpcGxlIiBkaXNhYmxlZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZW1haWxDY1ZhbHVlIiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+Q0M8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSJlbWFpbENjVmFsdWUiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNlbGVjdDIgc2VsZWN0Mi1ib3ggd3JhcHBlZC1tdWx0aXNlbGVjdCBzZWxlY3Qtc3BsaXQgY3VzdG9tVmFsdWVNdWx0aVNlbGVjdDIiIG5hbWU9ImVtYWlsQ2NWYWx1ZSIgbXVsdGlwbGU9Im11bHRpcGxlIiBkaXNhYmxlZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZW1haWxCY2NWYWx1ZSIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkJDQzwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImVtYWlsQmNjVmFsdWUiIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0MiBzZWxlY3QyLWJveCB3cmFwcGVkLW11bHRpc2VsZWN0IHNlbGVjdC1zcGxpdCBjdXN0b21WYWx1ZU11bHRpU2VsZWN0MiIgbmFtZT0iZW1haWxCY2NWYWx1ZSIgbXVsdGlwbGU9Im11bHRpcGxlIiBkaXNhYmxlZD48L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZW1haWxUZW1wbGF0ZVZhbHVlIiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+VGVtcGxhdGUgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iZW1haWxUZW1wbGF0ZVZhbHVlIiBuYW1lPSJlbWFpbFRlbXBsYXRlVmFsdWUiIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0Mi1ib3giIGRpc2FibGVkPSJkaXNhYmxlZCIgPg0KPC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiByZXF1aXJlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImVtYWlsU3ViamVjdFZhbHVlIiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+U3ViamVjdCA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9ImVtYWlsU3ViamVjdFZhbHVlIiBuYW1lPSJlbWFpbFN1YmplY3RWYWx1ZSIgcm93cz0iMSIgY29scz0iMjAiIG1heGxlbmd0aD0iMTAwMCIgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgcC10LTAiIGRpc2FibGVkPSJkaXNhYmxlZCIgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWxGVVFNc2cgY29sLW1kLTEyIHJlcXVpcmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZW1haWxDb250ZW50TWVzc2FnZSIgY2xhc3M9ImNvbnRyb2wtbGFiZWwiPkVtYWlsIENvbnRlbnQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9ImVtYWlsQ29udGVudE1lc3NhZ2UiIG5hbWU9ImVtYWlsQ29udGVudE1lc3NhZ2UiIGNvbHM9IjEwMCIgcm93cz0iMTUiIGNsYXNzPSJmb3JtLWNvbnRyb2wgaGlkZSIgZGlzYWJsZWQ+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG0tdC0xMCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIj5BdHRhY2htZW50czwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIHB2LWNvbC1hdHRhY2htZW50IiBpZD0iZW1haWxDb250ZW50QXR0YWNobWVudHMiPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9InB2LWVtYWlsQ29udGVudENsb3NlIiBjbGFzcz0iYnRuIHB2LWJ0bi1ncmV5IHdhdmVzLWVmZmVjdCIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+Q2xvc2U8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgoKICAgIAoKPGRpdiBjbGFzcz0icHYtbG9hZGVyLWJnIiBzdHlsZT0iZGlzcGxheTpibG9jayI+CiAgICA8ZGl2IGNsYXNzPSJsb2FkZXIiPgogICAgICAgIDxzdmcgY2xhc3M9ImNpcmN1bGFyIiB2aWV3Qm94PSIyNSAyNSA1MCA1MCI+CiAgICAgICAgICAgIDxjaXJjbGUgY2xhc3M9InBhdGgiIGN4PSI1MCIgY3k9IjUwIiByPSIyMCIgZmlsbD0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIyIiBzdHJva2UtbWl0ZXJsaW1pdD0iMTAiLz4KICAgICAgICA8L3N2Zz4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgaWQ9ImFjdGlvbi12aWV3cy1jb25maWciIGRhdGEtaGlkZS1jbGFzcz0iZmNlSGlkZUFjdGlvbiI+PC9kaXY+CjxkaXYgY2xhc3M9ImNvbnRlbnQtcGFnZSI+CiAgICA8IS0tIFN0YXJ0IGNvbnRlbnQgLS0+CiAgICA8ZGl2IGNsYXNzPSJjb250ZW50IHAtci0wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgcC1yLTAiPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtZnVsbGNhc2UtdHJlZXZpZXcgIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tdG9nZ2xlLXRyZWV2aWV3Ij4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0icHYtdHJlZS1pY3RvcCB0b2dnbGUtdHJlZS1wYW5lbCIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlRvZ2dsZSBUcmVlIFZpZXciPjxpIGNsYXNzPSJtZCBtZC1jaGV2cm9uLWxlZnQiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InB2LXRyZWUtaWN0b3AgdG9nZ2xlLXRyZWUtbm9kZXMiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJUb2dnbGUgQWxsIE5vZGVzIj48aSBjbGFzcz0ibWQgbWQtYXJyb3ctZXhwYW5kIj48L2k+PC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBpZD0idHJlZVZpZXdJZCI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtZnVsbGNhc2UtY29udGFpbmVyIj4KCiAgICAgICAgICAgICAgICA8IS0tIFBhZ2UtVGl0bGUgLS0+CiAgICAgICAgICAgICAgICAKCjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiPgogICAgICAgIDxkaXYgY2xhc3M9InBhZ2UtdGl0bGUtYm94Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZml4ZWQtcGFnZS1oZWFkIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhZ2UtaGVhZC1sdCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29sLW1kLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJwdmktcmVhZE9ubHktaW5kaWNhdG9yIiBjbGFzcz0iaGlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1wZW5jaWwtb2ZmIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5JbnRha2UgQ2FzZSBOdW1iZXI8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBpZD0iaW50YWtlQ2FzZU51bWJlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwMjAwODAwNDAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2wtbWQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PlZlcnNpb248L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBpZD0iY2FzZVZlcnNpb24iIGNsYXNzPSJkcm9wZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9IndhdmVzLWxpZ2h0IGRyb3Bkb3duLXRvZ2dsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgZGF0YS1jYXNlLXZlcnNpb249IjIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNhc2UtdmVyc2lvbi1kaXNwbGF5PSJGb2xsb3ctVXAgIyAxIj5Gb2xsb3ctVXAgIyAxPHNwYW4gY2xhc3M9ImNhcmV0Ij48L3NwYW4+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IG5hdmlnYXRlQXdheUV2ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icHYtY2FzZVZlcnNpb24tbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIyNDQ2NzU/dGVtcGxhdGVJZD0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jYXNlLWlkPSIyNDQ2NzUiIGRhdGEtY2FzZS12ZXJzaW9uPSIxLjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jYXNlLXZlcnNpb24tZGlzcGxheT0iSW5pdGlhbCI+SW5pdGlhbDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb2wtbWQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PlN0YXRlPC9oNT48aDQgaWQ9ImNhc2VTdGF0ZU5hbWUiPk5ldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1pbmZvLWNpcmNsZSBtb3JlLW9wdGlvbiBoaWRkZW4iIGlkPSJzdGF0ZUNoYW5nZUNvbW1lbnQiIGRhdGEtY29udGVudD0iIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvbC1tZC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QXNzaWduZWQgVG88L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibGJsdG9wLWFzc2lnbmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBpZD0iYXNzaWduZWVJZExpbmsiIGNsYXNzPSJtYW5hZ2VBc3NpZ25Vc2VyIGxibC1lbGlwc2lzIGxibC1lbGlwc2lzLWlubGluZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvYWQyOAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD0iYXNzaWduU2VsZWN0IiBjbGFzcz0iZGlzcGxheVVzZXJMaXN0IGZvcm0tY29udHJvbCBzZWxlY3QyIGhpZGUiIGRpc2FibGVkPjwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgaWQ9ImFzc2lnbmVkVG9Mb2dUb3BCYXIiIGNsYXNzPSJmYSBmYS1pbmZvLWNpcmNsZSBwdi1jYXNlQXNzaWduLWxvZyBoaWRkZW4iIGRhdGEtY29udGVudD0idHJ1ZSIgZGF0YS1pZD0iMjQ0NzAxIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29sLW1kLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+UHJpb3JpdHk8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHJpb3JpdHlCdG4iIGNsYXNzPSJidG4gYmFkZ2UgcG9wLWljUDQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1wcmlvcml0eSIgZGF0YS1wcmlvcml0eS1zZWxlY3QtaWQ9IjI0NDcwMSI+UDQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGlkPSJwcmlvcml0eUxvZyIgY2xhc3M9Im1kIG1kLWluZm9ybWF0aW9uIHB2LXByaW9yaXR5LWxvZyBoaWRlIiBkYXRhLWNvbnRlbnQ9IkF1dG8tY2FsY3VsYXRlZCIgZGF0YS1pZD0iMjQ0NzAxIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CgoKCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdWxsLXJpZ2h0IHBhZ2UtaGVhZC1ydCB0ZXh0LXJpZ2h0IiBpZD0idmlld0FjdGlvbkNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2YmFyLW5hdiBwdi1pbmxpbmUtY3RhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBwdi1pYy1jaGVja2JveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX2Vhc3RQYW5lbFRvZ2dsZSIgLz48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImVhc3RQYW5lbFRvZ2dsZSIgdmFsdWU9IiIgaWQ9ImVhc3RQYW5lbFRvZ2dsZSIgZGF0YS16b25lPSJlYXN0IiAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJlYXN0UGFuZWxUb2dnbGUiIGNsYXNzPSJjdXItcG9pbnRlciIgdGl0bGU9IkRpc3BsYXkgQXR0YWNobWVudHMiPjxpIGNsYXNzPSJtZCBtZC1hdHRhY2htZW50IG1kLWxnIj48L2k+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGlkPSJhc3NpZ25lZFRvTG9nTW9kYWwiIGNsYXNzPSJtb2RhbCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciPgogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj7DlzwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSByZExvZyI+Q2FzZSBBc3NpZ25tZW50IExvZzwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgcHYtY2FzZWxpc3QgY2FzZWxpc3RyZWNvcmRzICI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtc2VjLWJnIHBhbmVsLWJvZHkgbS0wIHAtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGFUYWJsZXNfc2Nyb2xsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBkaXNwbGF5IG9yZGVyLWNvbHVtbiBsaXN0LXRhYmxlIHB2LWxpc3QtdGFibGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFzc2lnbmVkVG9Mb2dUYWJsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPiM8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbSI+QXNzaWduZWQgQnk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbSI+QXNzaWduZWQgVG88L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1tZCI+VGltZXN0YW1wPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvbW1lbnRzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gcHYtYnRuLWdyZXkgd2F2ZXMtZWZmZWN0IGFzc2lnbmVkVG8tT2stYnRuIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc21pc3M9Im1vZGFsIj5PazwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm94LXRyYW5zcGFyZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNwbGl0Q29udGVudCIgY2xhc3M9InB2LWN1c3RvbS1zY3JvbGxiYXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmUgdWktbGF5b3V0LWNlbnRlciIgaWQ9ImNvbW1vbkRhdGFFbGVtZW50cyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY291bnRyaWVzLWN1cnJlbnQtdXNlci1wcml2YWN5LWxvY2F0aW9uPSJbXSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYWxsLWNvdW50cmllcy1pbi1wcml2YWN5LWxvY2F0aW9uPSJbMSwgOTksIDczLCA3OV0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LWJveCBjb2wtbGctMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtZGlzbWlzc2libGUgZm9yY2VMaW5lV3JhcCBoaWRlIiByb2xlPSJhbGVydCIgaWQ9ImFsZXJ0Q29udGFpbmVyIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNhc2VTdGF0ZSIgdmFsdWU9Ik5ldyIgZGlzYWJsZWQ9ImRpc2FibGVkIiBpZD0iY2FzZVN0YXRlIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY2FzZVN0YXRlLmlkIiB2YWx1ZT0iMSIgaWQ9ImNhc2VTdGF0ZS5pZCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InBhZ2VUeXBlSWQiIHZhbHVlPSIzIiBpZD0icGFnZVR5cGVJZCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImxhdGVzdFZlcnNpb24iIGlkPSJsYXRlc3RWZXJzaW9uIiB2YWx1ZT0idHJ1ZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNhc2VWZXJzaW9uIiB2YWx1ZT0iMiIgaWQ9ImNhc2VWZXJzaW9uIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibG9ja2VkQnlVc2VyIiB2YWx1ZT0iIiBpZD0ibG9ja2VkQnlVc2VyIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY2FzZU51bWJlckRlZmF1bHRWYWx1ZSIgdmFsdWU9Ik4vQSIgaWQ9ImNhc2VOdW1iZXJEZWZhdWx0VmFsdWUiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhdHRhY2htZW50Vmlld2VyUHJvdmlkZXIiIHZhbHVlPSJBY2N1c29mdCIgaWQ9ImF0dGFjaG1lbnRWaWV3ZXJQcm92aWRlciIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNvdXJjZURhdGFiYXNlSWQiIHZhbHVlPSIxIiBpZD0ic291cmNlRGF0YWJhc2VJZCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRlZmF1bHRSZXBvcnRlckNvbnRhY3RUeXBlIiB2YWx1ZT0iMjAwMiIgaWQ9ImRlZmF1bHRSZXBvcnRlckNvbnRhY3RUeXBlIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNDb25zZW50Rm9yRnUiIGlkPSJpc0NvbnNlbnRGb3JGdSIgdmFsdWU9IjEwMzEiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKPGRpdiBpZD0ianVzdGlmaWNhdGlvbk1vZGFsIiBjbGFzcz0ibW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1tZCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBpZD0ianVzdGlmaWNhdGlvbkNsb3NlQnV0dG9uIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+w5c8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUganVzdGlmaWNhdGlvbkNvbW1lbnRzIj5DYXNlIEFzc2lnbm1lbnQ8L2g0PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgYXNzaWduZWVVc2VyTGlzdCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYgcmVxdWlyZWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJhc3NpZ25lZVVzZXJMaXN0IiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+QXNzaWduIFRvOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iYXNzaWduZWVVc2VyTGlzdCIgaWQ9ImFzc2lnbmVlVXNlckxpc3QiIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0MiI+PC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ianVzdGlmaWNhdGlvbk1vZGFsSWQiIGNsYXNzPSJjb250cm9sLWxhYmVsIj5Db21tZW50cwogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9Imp1c3RpZmljYXRpb25Nb2RhbElkIiBuYW1lPSJqdXN0aWZpY2F0aW9uQ29tbWVudHMiIHJvd3M9IjQiIGNvbHM9IjIwIiBtYXhsZW5ndGg9IjUwMCIgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEiID48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9Imp1c3RpZmljYXRpb25Nb2RhbE9rQnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1pbnZlcnNlIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCI+T2s8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0iYXNzaWduQ2FuY2VsQnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGJ0bi1tZCI+Q2FuY2VsPC9idXR0b24+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIiBpZD0iYWNjb3JkaW9uLWNhc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvY2FzZUVudHJ5L3VwZGF0ZSIgbWV0aG9kPSJwb3N0IiBjbGFzcz0iZmNlRm9ybSBmaWVsZERlZkZvcm0iIHJvbGU9ImZvcm0iIGVuY3R5cGU9Im11bHRpcGFydC9mb3JtLWRhdGEiID4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImlkIiB2YWx1ZT0iMjQ0NzAxIiBpZD0iaWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InByaW9yaXR5SnVzdGlmaWNhdGlvbiIgaWQ9Imp1c3RpZmljYXRpb24iIHZhbHVlPSJBdXRvLWNhbGN1bGF0ZWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InRlbXBsYXRlSWQiIHZhbHVlPSIyIiBpZD0idGVtcGxhdGVJZCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2hvd0FsbEFjY29yZGlvbiIgaWQ9InNob3dBbGxBY2NvcmRpb24iIHZhbHVlPSJmYWxzZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNEaWZmVmlld01vZGUiIGlkPSJpc0RpZmZWaWV3TW9kZSIgdmFsdWU9ImZhbHNlIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsYXN0U2VxdWVuY2VOdW1iZXIiIHZhbHVlPSIxMzgiIGlkPSJsYXN0U2VxdWVuY2VOdW1iZXIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im1lZERyYUhpZXJhcmNoeU1hcCIgdmFsdWU9IiIgaWQ9Im1lZERyYUhpZXJhcmNoeU1hcCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icHJpb3JpdHkuaWQiIHZhbHVlPSIxMDI4IiBpZD0iY2FzZVByaW9yaXR5SWQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gR2VuZXJhbCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIHJ4bWFpbi1jb250YWluZXIgcnhtYWluLWNvbnRhaW5lci10b3AiICAgICAgICAgaWQ9InYtZ2VuZXJhbCI+ICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciBwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICA8aDQgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj4gICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1jYXNlIiAgICAgICAgICAgICAgICAgICBocmVmPSIjZ2VuZXJhbENhc2VJbmZvIiBjbGFzcz0iY29sbGFwc2VkIHNlYy1kaXNwbGF5LXR4dCBzZWN0aW9uVGl0bGUiPiAgICAgICAgICAgICAgICAgICAgR2VuZXJhbCAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbmZpZ3VyZUZpZWxkcyBwdi1oZWFkLWNvbmZpZyc+PGEgaHJlZj0iIyIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSBwdWxsLXJpZ2h0IGljLXNtIiAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPjxpIGNsYXNzPSJtZCBtZC1saXN0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT4gICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IGZpZWxkLWNvbmZpZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0ic2FmZXR5RGF0YVNvdXJjZVR5cGUiICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJTb3VyY2UiIGRhdGEtaWQ9InNhZmV0eURhdGFTb3VyY2VUeXBlIiBkYXRhLWluZGV4ID0gIjAiIGRhdGEtc2VjdGlvbi1uYW1lPSJHZW5lcmFsIiBkYXRhLWNsYXNzID0ic2VsZWN0Mi1ib3ggc291cmNlVHlwZSIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InNhZmV0eURhdGFTb3VyY2VUeXBlIj5Tb3VyY2U8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0iY2xhc3NpZmljYXRpb24iICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iQ2F0ZWdvcnkiIGRhdGEtaWQ9ImNsYXNzaWZpY2F0aW9uIiBkYXRhLWluZGV4ID0gIjEiIGRhdGEtc2VjdGlvbi1uYW1lPSJHZW5lcmFsIiBkYXRhLWNsYXNzID0ic2VsZWN0MiBtdWx0aVNlbGVjdFNlbGVjdDJGaWVsZCB3cmFwcGVkLW11bHRpc2VsZWN0Ii8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY2xhc3NpZmljYXRpb24iPkNhdGVnb3J5PC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9InNhZmV0eURhdGFSZWNlaXB0RGF0ZSIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IkZpcnN0IFJlY2VpcHQgRGF0ZSIgZGF0YS1pZD0ic2FmZXR5RGF0YVJlY2VpcHREYXRlIiBkYXRhLWluZGV4ID0gIjIiIGRhdGEtc2VjdGlvbi1uYW1lPSJHZW5lcmFsIiBkYXRhLWNsYXNzID0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic2FmZXR5RGF0YVJlY2VpcHREYXRlIj5GaXJzdCBSZWNlaXB0IERhdGU8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0ibW9zdFJlY2VudFJlY2VpcHREYXRlIiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iRlUgUmVjZWlwdCBEYXRlIiBkYXRhLWlkPSJtb3N0UmVjZW50UmVjZWlwdERhdGUiIGRhdGEtaW5kZXggPSAiMyIgZGF0YS1zZWN0aW9uLW5hbWU9IkdlbmVyYWwiIGRhdGEtY2xhc3MgPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJtb3N0UmVjZW50UmVjZWlwdERhdGUiPkZVIFJlY2VpcHQgRGF0ZTwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJzYWZldHlEYXRhQ2VudHJhbFJlY2VpcHREYXRlIiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IkNlbnRyYWwgUmVjZWlwdCBEYXRlIiBkYXRhLWlkPSJzYWZldHlEYXRhQ2VudHJhbFJlY2VpcHREYXRlIiBkYXRhLWluZGV4ID0gIjQiIGRhdGEtc2VjdGlvbi1uYW1lPSJHZW5lcmFsIiBkYXRhLWNsYXNzID0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic2FmZXR5RGF0YUNlbnRyYWxSZWNlaXB0RGF0ZSI+Q2VudHJhbCBSZWNlaXB0IERhdGU8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0iY2FzZUNvdW50cnkiICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJDYXNlIENvdW50cnkiIGRhdGEtaWQ9ImNhc2VDb3VudHJ5IiBkYXRhLWluZGV4ID0gIjUiIGRhdGEtc2VjdGlvbi1uYW1lPSJHZW5lcmFsIiBkYXRhLWNsYXNzID0iY291bnRyeSBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJjYXNlQ291bnRyeSI+Q2FzZSBDb3VudHJ5PC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9InZlbmRvcklkIiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IkNhc2UgUHJvY2Vzc2luZyBVbml0IiBkYXRhLWlkPSJ2ZW5kb3JJZCIgZGF0YS1pbmRleCA9ICI2IiBkYXRhLXNlY3Rpb24tbmFtZT0iR2VuZXJhbCIgZGF0YS1jbGFzcyA9ImF1dG9Qb3B1bGF0ZVNpbmdsZVZhbHVlIi8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idmVuZG9ySWQiPkNhc2UgUHJvY2Vzc2luZyBVbml0PC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9InNlbmRlclR5cGUiICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iU2VuZGVyIFR5cGUiIGRhdGEtaWQ9InNlbmRlclR5cGUiIGRhdGEtaW5kZXggPSAiNyIgZGF0YS1zZWN0aW9uLW5hbWU9IkdlbmVyYWwiIGRhdGEtY2xhc3MgPSJzZWxlY3QyLWxhenkiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzZW5kZXJUeXBlIj5TZW5kZXIgVHlwZTwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJzZW5kZXJOYW1lIiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IlNlbmRlciBOYW1lIiBkYXRhLWlkPSJzZW5kZXJOYW1lIiBkYXRhLWluZGV4ID0gIjgiIGRhdGEtc2VjdGlvbi1uYW1lPSJHZW5lcmFsIiBkYXRhLWNsYXNzID0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic2VuZGVyTmFtZSI+U2VuZGVyIE5hbWU8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0ic2VuZGVyRW1haWwiICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iU2VuZGVyIEVtYWlsIiBkYXRhLWlkPSJzZW5kZXJFbWFpbCIgZGF0YS1pbmRleCA9ICI5IiBkYXRhLXNlY3Rpb24tbmFtZT0iR2VuZXJhbCIgZGF0YS1jbGFzcyA9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InNlbmRlckVtYWlsIj5TZW5kZXIgRW1haWw8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0iY2FzZUR1ZURhdGUiICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iRHVlIERhdGUiIGRhdGEtaWQ9ImNhc2VEdWVEYXRlIiBkYXRhLWluZGV4ID0gIjEwIiBkYXRhLXNlY3Rpb24tbmFtZT0iR2VuZXJhbCIgZGF0YS1jbGFzcyA9ImZ1dHVyZURhdGVzQWxsb3dlZCBhbGxvd0RhdGVXaXRob3V0VGltZSIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImNhc2VEdWVEYXRlIj5EdWUgRGF0ZTwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJzYWZldHlEYXRhTG9jYWxTdWJtaXNzaW9uRHVlRGF0ZSIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJMb2NhbCBTdWJtaXNzaW9uIER1ZSBEYXRlIiBkYXRhLWlkPSJzYWZldHlEYXRhTG9jYWxTdWJtaXNzaW9uRHVlRGF0ZSIgZGF0YS1pbmRleCA9ICIxMSIgZGF0YS1zZWN0aW9uLW5hbWU9IkdlbmVyYWwiIGRhdGEtY2xhc3MgPSJmdXR1cmVEYXRlc0FsbG93ZWQgYWxsb3dFZGl0Ii8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic2FmZXR5RGF0YUxvY2FsU3VibWlzc2lvbkR1ZURhdGUiPkxvY2FsIFN1Ym1pc3Npb24gRHVlIERhdGU8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0ic2FmZXR5RGF0YUxvY2FsU3VibWlzc2lvbkRhdGUiICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iTG9jYWwgU3VibWlzc2lvbiBEYXRlIiBkYXRhLWlkPSJzYWZldHlEYXRhTG9jYWxTdWJtaXNzaW9uRGF0ZSIgZGF0YS1pbmRleCA9ICIxMiIgZGF0YS1zZWN0aW9uLW5hbWU9IkdlbmVyYWwiIGRhdGEtY2xhc3MgPSJhbGxvd0VkaXQiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzYWZldHlEYXRhTG9jYWxTdWJtaXNzaW9uRGF0ZSI+TG9jYWwgU3VibWlzc2lvbiBEYXRlPC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9InZlcnNpb24iICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iVmVyc2lvbiBUeXBlIiBkYXRhLWlkPSJ2ZXJzaW9uIiBkYXRhLWluZGV4ID0gIjEzIiBkYXRhLXNlY3Rpb24tbmFtZT0iR2VuZXJhbCIgZGF0YS1jbGFzcyA9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InZlcnNpb24iPlZlcnNpb24gVHlwZTwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJ2ZXJzaW9uVHlwZSIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJWZXJzaW9uIERpc3Bvc2l0aW9uIiBkYXRhLWlkPSJ2ZXJzaW9uVHlwZSIgZGF0YS1pbmRleCA9ICIxNCIgZGF0YS1zZWN0aW9uLW5hbWU9IkdlbmVyYWwiIGRhdGEtY2xhc3MgPSJzZWxlY3QyLWJveCIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InZlcnNpb25UeXBlIj5WZXJzaW9uIERpc3Bvc2l0aW9uPC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9InZlcnNpb25Db21tZW50IiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IlZlcnNpb24gQ29tbWVudHMiIGRhdGEtaWQ9InZlcnNpb25Db21tZW50IiBkYXRhLWluZGV4ID0gIjE1IiBkYXRhLXNlY3Rpb24tbmFtZT0iR2VuZXJhbCIgZGF0YS1jbGFzcyA9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InZlcnNpb25Db21tZW50Ij5WZXJzaW9uIENvbW1lbnRzPC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+PC9kaXY+ICAgICAgICAgICAgPC9oND4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBpZD0iZ2VuZXJhbENhc2VJbmZvIiAgICAgICAgICAgICBjbGFzcz0icGFuZWwtY29sbGFwc2UgY29sbGFwc2UgcnhtYWluLWNvbnRhaW5lci1jb250ZW50Ij4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtZ2VuZXJhbCBwdi1zZWMtc2VwZXJhdG9yIGZvcm0tcHYiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBwdi10b3AtZGF0ZXBpY2tlci1zZWMiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhU291cmNlVHlwZSIgY2xhc3M9IiBzYWZldHlEYXRhU291cmNlVHlwZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgcmVxdWlyZWQgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlNvdXJjZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ic2FmZXR5RGF0YVNvdXJjZVR5cGUiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzb3VyY2VUeXBlICAgIiBuYW1lPSJzYWZldHlEYXRhLnNvdXJjZVR5cGUuaWQiIGRhdGEtZnJvbT0ic291cmNlVHlwZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJ0cnVlIiBkYXRhLXZhbHVlPSIzIiBpZD0ic2FmZXR5RGF0YS5zb3VyY2VUeXBlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMDAxMSIgPkF1dG9tYXRpb25fUFZEPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMDAxNCIgPkNsaW5pY2FsIFRyaWFsPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjYiID5Db21wYXNzaW9uYXRlIFVzZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDAwMDMiID5MaXRlcmF0dXJlIE1hcmtldGVkPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMDAwMiIgPkxpdGVyYXR1cmUgU3R1ZHk8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMSIgPkxpdGVyYXR1cmUtdXA8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAiID5Ob24tSW50ZXJ2ZW50aW9uYWwgU3R1ZHk8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iOSIgPk5vbi1TcG9uc29yZWQgVHJpYWw8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iOCIgPk5vdCBBdmFpbGFibGUgdG8gU2VuZGVyPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjciID5PdGhlcjwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI1IiA+UG9zdCBNYXJrZXRpbmcgU3Vydi48L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMiIgPlJlZ3VsYXRvcnkgQXV0aG9yaXR5PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMDAwMSIgPlJlcG9ydCBGcm9tIFN0dWR5PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMDAxMiIgPlNvbGljaXRlZCBDYXNlPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQiID5TcG9uc29yZWQgVHJpYWw8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMyIgc2VsZWN0ZWQ9InNlbGVjdGVkIiA+U3BvbnRhbmVvdXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTEiID5TdGltdWxhdGVkIFNwb250YW5lb3VzPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9ImNsYXNzaWZpY2F0aW9uIiBjbGFzcz0iIGNsYXNzaWZpY2F0aW9uIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMyAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNhdGVnb3J5PC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJjbGFzc2lmaWNhdGlvbiI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3QyLWJveCAgc2VsZWN0MiBtdWx0aVNlbGVjdFNlbGVjdDJGaWVsZCB3cmFwcGVkLW11bHRpc2VsZWN0ICAgIiBuYW1lPSJzYWZldHlEYXRhLmNsYXNzaWZpY2F0aW9ucy5pZCIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IkNob29zZSIgbXVsdGlwbGU9Im11bHRpcGxlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9Ils1Nl0iIGlkPSJzYWZldHlEYXRhLmNsYXNzaWZpY2F0aW9ucy5pZCIgPg08b3B0aW9uIHZhbHVlPSI1NiIgc2VsZWN0ZWQ9InNlbGVjdGVkIiA+QUUgQ2FzZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI1OSIgPkxlZ2FsPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjU4IiA+TWVkaWNhbCBJbnF1aXJ5PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMzAiID5Ob24tVmFsaWQgQUU8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNTciID5QUUM8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YVJlY2VpcHREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBzYWZldHlEYXRhUmVjZWlwdERhdGUgIGNvbC1tZC0zIHJlcXVpcmVkIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZpcnN0IFJlY2VpcHQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0ic2FmZXR5RGF0YVJlY2VpcHREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnJlY2VpcHREYXRlIiBkYXRhLW1hbmRhdG9yeT0idHJ1ZSIgaWQ9InNhZmV0eURhdGEucmVjZWlwdERhdGUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMCIgdmFsdWU9IjAxLUFwci0yMDIwIDAwOjAwOjAwIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9Im1vc3RSZWNlbnRSZWNlaXB0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgbW9zdFJlY2VudFJlY2VpcHREYXRlICBjb2wtbWQtMyByZXF1aXJlZCI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GVSBSZWNlaXB0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9Im1vc3RSZWNlbnRSZWNlaXB0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5tb3N0UmVjZW50UmVjZWlwdERhdGUiIGRhdGEtbWFuZGF0b3J5PSJ0cnVlIiBpZD0ic2FmZXR5RGF0YS5tb3N0UmVjZW50UmVjZWlwdERhdGUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMCIgdmFsdWU9IjI3LUF1Zy0yMDIwIDEzOjM0OjQ2IiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IiIgZGF0YS1wcmVjaXNpb249IiIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YUNlbnRyYWxSZWNlaXB0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgc2FmZXR5RGF0YUNlbnRyYWxSZWNlaXB0RGF0ZSAgY29sLW1kLTMgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNlbnRyYWwgUmVjZWlwdCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJzYWZldHlEYXRhQ2VudHJhbFJlY2VpcHREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLmNlbnRyYWxSZWNlaXB0RGF0ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5jZW50cmFsUmVjZWlwdERhdGUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMCIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJjYXNlQ291bnRyeSIgY2xhc3M9IiBjYXNlQ291bnRyeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgcmVxdWlyZWQgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNhc2UgQ291bnRyeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iY2FzZUNvdW50cnkiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBjb3VudHJ5IHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0iY2FzZUNvdW50cnkuaWQiIGRhdGEtZnJvbT0iY291bnRyaWVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0idHJ1ZSIgZGF0YS12YWx1ZT0iMyIgaWQ9ImNhc2VDb3VudHJ5LmlkIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InZlbmRvcklkIiBjbGFzcz0iIHZlbmRvcklkIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMyAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNhc2UgUHJvY2Vzc2luZyBVbml0PC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ2ZW5kb3JJZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIGF1dG9Qb3B1bGF0ZVNpbmdsZVZhbHVlICAgIiBuYW1lPSJ2ZW5kb3IuaWQiIGRhdGEtZnJvbT0idmVuZG9yc0ZvckN1cnJlbnRVc2VyIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjI0MDIxOTg4MyIgaWQ9InZlbmRvci5pZCIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzMjI2OTY5MDEiID5OZXd0ZXN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjI0MDIxODEzNSIgPlBlcmYxPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjI0MDIxOTg4MyIgc2VsZWN0ZWQ9InNlbGVjdGVkIiA+VW5pdDE8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzA0NTQxMTkyIiA+Vk1JPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InNlbmRlclR5cGUiIGNsYXNzPSIgc2VuZGVyVHlwZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5TZW5kZXIgVHlwZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ic2VuZGVyVHlwZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5zZW5kZXJUeXBlLmlkIiBkYXRhLWZyb209InNlbmRlclR5cGVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuc2VuZGVyVHlwZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0ic2VuZGVyTmFtZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHNlbmRlck5hbWUgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U2VuZGVyIE5hbWU8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InNlbmRlck5hbWUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEuc2VuZGVyTmFtZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTAwIiBkYXRhLWZpZWxkLWlkPSJzZW5kZXJOYW1lIiBpZD0ic2FmZXR5RGF0YS5zZW5kZXJOYW1lIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJzZW5kZXJFbWFpbCIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHNlbmRlckVtYWlsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlNlbmRlciBFbWFpbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ic2VuZGVyRW1haWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEuc2VuZGVyRW1haWwiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwMCIgZGF0YS1maWVsZC1pZD0ic2VuZGVyRW1haWwiIGlkPSJzYWZldHlEYXRhLnNlbmRlckVtYWlsIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0iY2FzZUR1ZURhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGNhc2VEdWVEYXRlICBjb2wtbWQtMyAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RHVlIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9ImNhc2VEdWVEYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBmdXR1cmVEYXRlc0FsbG93ZWQgYWxsb3dEYXRlV2l0aG91dFRpbWUgIiBuYW1lPSJkdWVEYXRlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJkdWVEYXRlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjAiIHZhbHVlPSIwMy1TZXAtMjAyMCAyMzo1OTo1OSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImR1ZURhdGVKdXN0aWZpY2F0aW9uIiB2YWx1ZT0iQXV0by1jYWxjdWxhdGVkIiBpZD0iZHVlRGF0ZUp1c3RpZmljYXRpb24iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZHVlRGF0ZU1hbnVhbCIgdmFsdWU9ImZhbHNlIiBpZD0iZHVlRGF0ZU1hbnVhbCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YUxvY2FsU3VibWlzc2lvbkR1ZURhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHNhZmV0eURhdGFMb2NhbFN1Ym1pc3Npb25EdWVEYXRlICBjb2wtbWQtMyAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TG9jYWwgU3VibWlzc2lvbiBEdWUgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0ic2FmZXR5RGF0YUxvY2FsU3VibWlzc2lvbkR1ZURhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGZ1dHVyZURhdGVzQWxsb3dlZCBhbGxvd0VkaXQgIiBuYW1lPSJzYWZldHlEYXRhLmxvY2FsU3VibWlzc2lvbkR1ZURhdGUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEubG9jYWxTdWJtaXNzaW9uRHVlRGF0ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIwIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGFMb2NhbFN1Ym1pc3Npb25EYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBzYWZldHlEYXRhTG9jYWxTdWJtaXNzaW9uRGF0ZSAgY29sLW1kLTMgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxvY2FsIFN1Ym1pc3Npb24gRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0ic2FmZXR5RGF0YUxvY2FsU3VibWlzc2lvbkRhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGFsbG93RWRpdCAiIG5hbWU9InNhZmV0eURhdGEubG9jYWxTdWJtaXNzaW9uRGF0ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5sb2NhbFN1Ym1pc3Npb25EYXRlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0idmVyc2lvbiIgY2xhc3M9IiB2ZXJzaW9uIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMyAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlZlcnNpb24gVHlwZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idmVyc2lvbiI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0iY2FzZVZlcnNpb25UeXBlLmlkIiBkYXRhLWZyb209ImNhc2VWZXJzaW9ucyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSI2MSIgaWQ9ImNhc2VWZXJzaW9uVHlwZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI2MCIgPkluaXRpYWw8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNjEiIHNlbGVjdGVkPSJzZWxlY3RlZCIgPkZvbGxvdyBVcDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJ2ZXJzaW9uVHlwZSIgY2xhc3M9IiB2ZXJzaW9uVHlwZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5WZXJzaW9uIERpc3Bvc2l0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ2ZXJzaW9uVHlwZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94ICAgIiBuYW1lPSJ2ZXJzaW9uVHlwZS5pZCIgZGF0YS1mcm9tPSJ2ZXJzaW9uVHlwZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0idmVyc2lvblR5cGUuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMyIgPlJlcG9ydGFibGU8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTQiID5Ob24tcmVwb3J0YWJsZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxNSIgPkFtZW5kbWVudDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxNiIgPk51bGxpZmljYXRpb248L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJ2ZXJzaW9uQ29tbWVudCIgY2xhc3M9ImNvbC1tZC05IHRlbXBsYXRlLWNvbnRyb2wgIHZlcnNpb25Db21tZW50ICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlZlcnNpb24gQ29tbWVudHM8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InZlcnNpb25Db21tZW50Ij4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJ2ZXJzaW9uQ29tbWVudCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idmVyc2lvbkNvbW1lbnQiIGlkPSJ2ZXJzaW9uQ29tbWVudCIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1hc3NpZ25lZS5pZCB2YWx1ZT0yNDQxNzE3MjA+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci10YWJsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWNjb3JkaW9uLWlubmVyUmVmZXJlbmNlcyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUmVmZXJlbmNlcyAtLT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclJlZmVyZW5jZXMiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNyZWZlcmVuY2VzIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic2VjLWRpc3BsYXktdHh0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlZmVyZW5jZShzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNyZWZlcmVuY2VUYWJsZVNlY3Rpb24iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNyZWZlcmVuY2VUYWJsZVNlY3Rpb24iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InJlZmVyZW5jZXMiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIHNlY3Rpb24taGVhZGVyIGlubmVyIGluIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgcC0wIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZW1wbGF0ZUlkPSJyZWZlcmVuY2VzVGVtcGxhdGUiIGRhdGEtdGFibGU9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IgcGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1pbm5lci1wcm9kdWN0LXN1YnN0YW5jZSBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgIDx0aGVhZD4gICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICA8dGggaWQ9J2hlYWRlci1yZWZlcmVuY2VUeXBlJyBjbGFzcz0nY29sLW1kLTYgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBSZWZlcmVuY2UgVHlwZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcmVmZXJlbmNlSWQnIGNsYXNzPSdjb2wtbWQtNiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFJlZmVyZW5jZSBJRCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj48YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0icHVsbC1yaWdodCBhZGQtdGFibGUtcm93IGFkZC1zZWN0aW9uIGJ0bi1hZGQtcGFuZWwiICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cy1zcXVhcmUtbyI+PC9pPjwvYT48L3RoPiAgICAgICAgPC90aGVhZD4gICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSIgaWQ9InJlZmVyZW5jZVRhYmxlU2VjdGlvbiI+ICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIGlkPSJyZWZlcmVuY2VzLXNlY3Rpb24tMCI+ICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXgiPjwvdGQ+ICAgICAgICA8dGQgaWQ9InJlZmVyZW5jZVR5cGUiIGNsYXNzPSIgcmVmZXJlbmNlVHlwZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVmZXJlbmNlVHlwZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IGFsbG93RWRpdCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucmVmZXJlbmNlc1swXS5yZWZlcmVuY2VUeXBlLmlkIiBkYXRhLWZyb209InJlZmVyZW5jZVR5cGVzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5yZWZlcmVuY2VzWzBdLnJlZmVyZW5jZVR5cGUuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucmVmZXJlbmNlc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMiIgaWQ9InNhZmV0eURhdGEucmVmZXJlbmNlc1swXS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvdGQ+ICAgIDx0ZCBpZD0icmVmZXJlbmNlSWQiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICByZWZlcmVuY2VJZCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZWZlcmVuY2VJZCI+ICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBhbGxvd0VkaXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnJlZmVyZW5jZXNbMF0uaWQiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwMCIgZGF0YS1maWVsZC1pZD0icmVmZXJlbmNlSWQiIGlkPSJzYWZldHlEYXRhLnJlZmVyZW5jZXNbMF0uaWQiIC8+ICAgICAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucmVmZXJlbmNlc1swXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgcmVmZXJlbmNlc18wIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvdGQ+ICAgIDwvdHI+ICAgICAgICA8L3Rib2R5PjwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBTdHVkeSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIHJ4bWFpbi1jb250YWluZXIgcnhtYWluLWNvbnRhaW5lci10b3Agdi1zdHVkeSBoaWRlIHN0dWR5U2VjIiAgICAgICAgIGlkPSJ2LXN0dWR5Ij4gICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIHBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgIDxoNCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPiAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtaGVhZGVyPSJTdHVkeS1TZWN0aW9uIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1jYXNlIiAgICAgICAgICAgICAgICAgICBocmVmPSIjc3R1ZHkiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBjbGFzcz0iY29sbGFwc2VkIHNlYy1kaXNwbGF5LXR4dCBzZWN0aW9uVGl0bGUiPiAgICAgICAgICAgICAgICAgICAgU3R1ZHk8c3Bhbj48c3Bhbj48L3NwYW4+PC9zcGFuPiAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgaWQ9InN0dWR5IiAgICAgICAgICAgICBjbGFzcz0iIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3ciICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1zdHVkeS1jb250YWluZXIiPiAgICA8ZGl2IGNsYXNzPSJyb3cgZm9ybS1wdiBwdi1zdHVkeSI+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic3R1ZHlOdW1iZXIiIGNsYXNzPScgY29sLW1kLTQgcmVxdWlyZWQgIHRlbXBsYXRlLWNvbnRyb2wgIHN0dWR5TnVtYmVyJyA+ICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3R1ZHkgTnVtYmVyPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJzdHVkeU51bWJlciI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIG5hbWU9InNhZmV0eURhdGEuc3R1ZHkubnVtYmVyIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnk9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdHlwZT0ic3R1ZHkiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InN0dWR5TnVtYmVyIiBpZD0ic2FmZXR5RGF0YS5zdHVkeS5udW1iZXIiIC8+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuc3R1ZHkuaWQiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnN0dWR5LmlkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5zdHVkeS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEuc3R1ZHkuc2VhcmNoIj4gICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giID48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic3R1ZHlUeXBlIiBjbGFzcz0iIHN0dWR5VHlwZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5TdHVkeSBUeXBlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJzdHVkeVR5cGUiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEuc3R1ZHkuc3R1ZHlUeXBlLmlkIiBkYXRhLWZyb209InN0dWR5VHlwZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5zdHVkeS5zdHVkeVR5cGUuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDAwMTMiID5BdXRvbWF0aW9uX1BWRDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDAwMTEiID5BdXRvbWF0aW9uX1BWRDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDAwMTIiID5BdXRvbWF0aW9uX1BWRDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxIiA+Q2xpbmljYWwgVHJpYWw8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAwMDA1IiA+ZmViX3N0dWR5dHlwZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyIiA+SW5kaXZpZHVhbCBQYXRpZW50IFVzZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDAwMDYiID5tYXJfc3R1ZHl0eXBlPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjMiID5PdGhlciBTdHVkaWVzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMDAwMyIgPlRlc3RfU3R1ZHk8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJzdHVkeU5hbWUiIGNsYXNzPSJjb2wtbWQtNCB0ZW1wbGF0ZS1jb250cm9sICBzdHVkeU5hbWUgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TmFtZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ic3R1ZHlOYW1lIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnN0dWR5Lm5hbWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InN0dWR5TmFtZSIgaWQ9InNhZmV0eURhdGEuc3R1ZHkubmFtZSIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5uZXItdGFibGUiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIGJhc2ljLXN0dWR5LTQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWNjb3JkaW9uLWlubmVyU3R1ZHkiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWlubmVyU3R1ZHkiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNzdHVkeVJlZ0luZm8iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWMtZGlzcGxheS10eHQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0dWR5IFJlZ2lzdHJhdGlvbiBJbmZvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI3N0dWR5UmVnaXN0ZXJhdGlvblRhYmxlU2VjdGlvbiIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyAiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3N0dWR5UmVnaXN0ZXJhdGlvblRhYmxlU2VjdGlvbiIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyAiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic3R1ZHlSZWdJbmZvIiBjbGFzcz0icHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHAtMCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSIgZGF0YS10ZW1wbGF0ZUlkPSJzdHVkeVJlZ0luZm9UZW1wbGF0ZSIgZGF0YS10YWJsZT0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciBwYW5lbC1ib2R5IHAtMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgPHRoZWFkPiAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4gICAgICAgIDx0aCBpZD0naGVhZGVyLXN0dWR5UmVnaXN0cmF0aW9uTnVtYmVyJyBjbGFzcz0nY29sLW1kLTYgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBSZWdpc3RyYXRpb24gTnVtYmVyIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1zdHVkeUNlbnRlckNvdW50cnknIGNsYXNzPSdjb2wtbWQtNiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IENvdW50cnkgPC9sYWJlbD48L3RoPiAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+PGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIiAgICAgICAgICAgICAgIGRhdGEtdGFidWxhcj0idHJ1ZSI+ICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT48L2E+PC90aD4gICAgICAgIDwvdGhlYWQ+ICAgIDx0Ym9keSBjbGFzcz0icHYtZHJhZ2dhYmxlLWxpc3QgdWktc29ydGFibGUiIGlkPSJzdHVkeVJlZ2lzdGVyYXRpb25UYWJsZVNlY3Rpb24iPiAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBpZD0ic3R1ZHlSZWdJbmZvLXNlY3Rpb24tMDAiPiAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4Ij48L3RkPiAgICAgICAgICAgIDx0ZCBpZD0ic3R1ZHlSZWdpc3RyYXRpb25OdW1iZXIiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBzdHVkeVJlZ2lzdHJhdGlvbk51bWJlciAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJzdHVkeVJlZ2lzdHJhdGlvbk51bWJlciI+ICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnN0dWR5LnJlZ2lzdHJhdGlvbnNbMF0ubnVtYmVyIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0ic3R1ZHlSZWdpc3RyYXRpb25OdW1iZXIiIGlkPSJzYWZldHlEYXRhLnN0dWR5LnJlZ2lzdHJhdGlvbnNbMF0ubnVtYmVyIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5zdHVkeS5yZWdpc3RyYXRpb25zWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIzIiBpZD0ic2FmZXR5RGF0YS5zdHVkeS5yZWdpc3RyYXRpb25zWzBdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PjwvdGQ+PHRkIGlkPSJzdHVkeUNlbnRlckNvdW50cnkiIGNsYXNzPSIgc3R1ZHlDZW50ZXJDb3VudHJ5IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJzdHVkeUNlbnRlckNvdW50cnkiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBjb3VudHJ5IHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5zdHVkeS5yZWdpc3RyYXRpb25zWzBdLmNvdW50cnkuaWQiIGRhdGEtZnJvbT0iY291bnRyaWVzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5zdHVkeS5yZWdpc3RyYXRpb25zWzBdLmNvdW50cnkuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnN0dWR5LnJlZ2lzdHJhdGlvbnNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIF8wIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvdGQ+ICAgIDwvdHI+ICAgICAgICA8L3Rib2R5PjwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PgoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUmVwb3J0ZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciByeG1haW4tY29udGFpbmVyIHJ4bWFpbi1jb250YWluZXItdG9wIiAgICAgICAgIGlkPSJ2LXJlcG9ydGVyIj4gICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIHBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgIDxoNCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPiAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWNhc2UiICAgICAgICAgICAgICAgICAgIGhyZWY9IiNyZXBvcnRlciIgYXJpYS1leHBhbmRlZD0iZmFsc2UiICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjb2xsYXBzZWQgc2VjLWRpc3BsYXktdHh0IHNlY3Rpb25UaXRsZSI+ICAgICAgICAgICAgICAgICAgICBSZXBvcnRlcihzKSAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNhY2NvcmRpb24tcmVwb3J0ZXIiIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNhY2NvcmRpb24tcmVwb3J0ZXIiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWFkZC1wYW5lbCBidG4tYWRkcm93LXRvcCBpYy1zbSAiIGRhdGEtaW5uZXItc2VjPSIiICAgICAgICAgICBkYXRhLXRhYnVsYXI9ImZhbHNlIiB0aXRsZT0iQWRkIGFub3RoZXIgc2VjdGlvbiIgICAgICAgICAgIGRhdGEtdGFyZ2V0PSJwdmktcmVwb3J0ZXIiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hZGQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgICAgICAgICA8L2g0PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlciIgZGF0YS10ZW1wbGF0ZUlkPSJyZXBvcnRlclRlbXBsYXRlIiAgICAgICAgICAgICBjbGFzcz0icGFuZWwtY29sbGFwc2UgcHYtbWFpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93ICBjb2xsYXBzZSIgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUgbS1iLTAgcm93Ij4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIHNob3J0LWZpZWxkIHB2LWRyYWdnYWJsZS1saXN0IHB2LXNlY3Rpb24gbS1iLTAiICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24tcmVwb3J0ZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHB2LXNlY3Rpb24tcmVjb3JkIHB2LXJlcG9ydGVyIHVpLXNvcnRhYmxlLWhhbmRsZSBwYW5lbC1kZWZhdWx0ICIgICAgIGlkPSJyZXBvcnRlci1zZWN0aW9uLTAiPiAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS1oZWFkZXI9IlJlcG9ydGVyLVNlY3Rpb24iICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24tcmVwb3J0ZXIiIGhyZWY9IiNyZXBvcnRlci1zZWN0aW9uXzAiICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSByb3ctY291bnQgYmFkZ2UtaW5kZXgiPjwvc3Bhbj5SZXBvcnRlci1TZWN0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29uZmlndXJlRmllbGRzIHB2LXN1YmhlYWQtY29uZmlnIj4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSJwdi1yZXBvcnRlciIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsICI+ICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIHJlcG9ydGVyXzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgPC9kaXY+ICAgIDxkaXYgY2xhc3M9InBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIGlubmVyLXJlcGVhdGFibGUiIGFyaWEtZXhwYW5kZWQ9InRydWUiICAgICAgICAgaWQ9InJlcG9ydGVyLXNlY3Rpb25fMCI+ICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5ICI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBmb3JtLXB2Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icmVwb3J0ZXJUaXRsZSIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcmVwb3J0ZXJUaXRsZSAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5UaXRsZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJUaXRsZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0udGl0bGUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJyZXBvcnRlclRpdGxlIiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0udGl0bGUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNCIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlck5hbWUiIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHJlcG9ydGVyTmFtZSAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GaXJzdCBOYW1lPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlck5hbWUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmdpdmVuTmFtZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNjAiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyTmFtZSIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmdpdmVuTmFtZSIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icmVwb3J0ZXJNaWRkbGVOYW1lIiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICByZXBvcnRlck1pZGRsZU5hbWUgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TWlkZGxlIE5hbWU8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InJlcG9ydGVyTWlkZGxlTmFtZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0ubWlkZGxlTmFtZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNjAiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyTWlkZGxlTmFtZSIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLm1pZGRsZU5hbWUiIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InJlcG9ydGVyRmFtaWx5TmFtZSIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcmVwb3J0ZXJGYW1pbHlOYW1lICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgTmFtZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJGYW1pbHlOYW1lIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5mYW1pbHlOYW1lIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI2MCIgZGF0YS1maWVsZC1pZD0icmVwb3J0ZXJGYW1pbHlOYW1lIiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uZmFtaWx5TmFtZSIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icmVwb3J0ZXJPcmdhbml6YXRpb24iIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHJlcG9ydGVyT3JnYW5pemF0aW9uICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk9yZ2FuaXphdGlvbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJPcmdhbml6YXRpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLm9yZ2FuaXphdGlvbiIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNjAiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyT3JnYW5pemF0aW9uIiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0ub3JnYW5pemF0aW9uIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlckRlcGFydG1lbnQiIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHJlcG9ydGVyRGVwYXJ0bWVudCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EZXBhcnRtZW50PC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlckRlcGFydG1lbnQiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmRlcGFydG1lbnQiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjYwIiBkYXRhLWZpZWxkLWlkPSJyZXBvcnRlckRlcGFydG1lbnQiIGlkPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5kZXBhcnRtZW50IiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlclN0cmVldCIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcmVwb3J0ZXJTdHJlZXQgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RyZWV0PC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlclN0cmVldCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uc3RyZWV0IiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIxMDAiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyU3RyZWV0IiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uc3RyZWV0IiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlckNpdHkiIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHJlcG9ydGVyQ2l0eSAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5DaXR5PC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlckNpdHkiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmNpdHkiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjM1IiBkYXRhLWZpZWxkLWlkPSJyZXBvcnRlckNpdHkiIGlkPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5jaXR5IiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlclN0YXRlIiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICByZXBvcnRlclN0YXRlICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXRlIC8gUHJvdmluY2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InJlcG9ydGVyU3RhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLnN0YXRlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI0MCIgZGF0YS1maWVsZC1pZD0icmVwb3J0ZXJTdGF0ZSIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLnN0YXRlIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlclBvc3Rjb2RlIiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICByZXBvcnRlclBvc3Rjb2RlICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlBvc3Rjb2RlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlclBvc3Rjb2RlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5wb3N0Y29kZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTUiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyUG9zdGNvZGUiIGlkPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5wb3N0Y29kZSIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icmVwb3J0ZXJUZWxlcGhvbmUiIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHJlcG9ydGVyVGVsZXBob25lICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlRlbGVwaG9uZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJUZWxlcGhvbmUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLnRlbGVwaG9uZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMzMiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyVGVsZXBob25lIiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0udGVsZXBob25lIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlckZheCIgY2xhc3M9ImNvbC1tZC0xLWhhbGYgdGVtcGxhdGUtY29udHJvbCAgcmVwb3J0ZXJGYXggICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RmF4IE51bWJlcjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJGYXgiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmZheE51bWJlciIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjYiIGRhdGEtZmllbGQtaWQ9InJlcG9ydGVyRmF4IiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uZmF4TnVtYmVyIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJyZXBvcnRlckVtYWlsIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgcmVwb3J0ZXJFbWFpbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbWFpbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJFbWFpbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uZW1haWwiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwMCIgZGF0YS1maWVsZC1pZD0icmVwb3J0ZXJFbWFpbCIgaWQ9InNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmVtYWlsIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icmVwb3J0ZXJDb3VudHJ5IiBjbGFzcz0iIHJlcG9ydGVyQ291bnRyeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgcmVxdWlyZWQtc2V0Ij4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvdW50cnk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InJlcG9ydGVyQ291bnRyeSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIGNvdW50cnkgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5jb3VudHJ5LmlkIiBkYXRhLWZyb209ImNvdW50cmllcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjEiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIzIiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uY291bnRyeS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJyZXBvcnRlclF1YWxpZmljYXRpb24iIGNsYXNzPSIgcmVwb3J0ZXJRdWFsaWZpY2F0aW9uIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMS1oYWxmICByZXF1aXJlZC1zZXQiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UXVhbGlmaWNhdGlvbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icmVwb3J0ZXJRdWFsaWZpY2F0aW9uIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0ucXVhbGlmaWNhdGlvbi5pZCIgZGF0YS1mcm9tPSJyZXBvcnRlclR5cGVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMSIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjQiIGlkPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5xdWFsaWZpY2F0aW9uLmlkIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InJlcG9ydGVyQ29udGFjdFR5cGUiIGNsYXNzPSIgcmVwb3J0ZXJDb250YWN0VHlwZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db250YWN0IFR5cGU8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InJlcG9ydGVyQ29udGFjdFR5cGUiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0Mi1ib3ggIHNlbGVjdDIgbXVsdGlTZWxlY3RTZWxlY3QyRmllbGQgd3JhcHBlZC1tdWx0aXNlbGVjdCAgICIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uY29udGFjdFR5cGVzLmlkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iQ2hvb3NlIiBtdWx0aXBsZT0ibXVsdGlwbGUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iWzIwMDJdIiBpZD0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uY29udGFjdFR5cGVzLmlkIiA+DTxvcHRpb24gdmFsdWU9IjIwMDAiID5Db3JyZXNwb25kZW5jZSBDb250YWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIwMDEiID5QYXRpZW50PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIwMDIiIHNlbGVjdGVkPSJzZWxlY3RlZCIgPlJlcG9ydGVyPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InJlcG9ydGVyQ29uc2VudFRvRGlzY2xvc2VQSUkiIGNsYXNzPSIgcmVwb3J0ZXJDb25zZW50VG9EaXNjbG9zZVBJSSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvbnNlbnQgdG8gZGlzY2xvc2UgUElJPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlckNvbnNlbnRUb0Rpc2Nsb3NlUElJIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5jb25zZW50VG9EaXNjbG9zZVBJSS5pZCIgZGF0YS1mcm9tPSJjb25zZW50VG9EaXNjbG9zZVBJSSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5jb25zZW50VG9EaXNjbG9zZVBJSS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMjEiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAyMiIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InJlcG9ydGVyQ29uc2VudEZvckZVIiBjbGFzcz0iIHJlcG9ydGVyQ29uc2VudEZvckZVIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMS1oYWxmICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29uc2VudCBmb3IgRi9VPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJyZXBvcnRlckNvbnNlbnRGb3JGVSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0uY29uc2VudEZvckZVLmlkIiBkYXRhLWZyb209ImNvbnNlbnRGb3JGVSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnJlcG9ydGVyc1swXS5jb25zZW50Rm9yRlUuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDMxIiA+WWVzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMzIiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InJlcG9ydGVyUHJpbWFyeVJlcG9ydGVyIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMS1oYWxmICAgIHJlcG9ydGVyUHJpbWFyeVJlcG9ydGVyJz4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlByaW1hcnkgU291cmNlPC9sYWJlbD4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICcgZGF0YS1pZD0icmVwb3J0ZXJQcmltYXJ5UmVwb3J0ZXIiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0ucHJpbWFyeSI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0ucHJpbWFyeSIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iIHByaW1hcnlSZXBvcnRlciAiIGNoZWNrZWQgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0ic2FmZXR5RGF0YS5yZXBvcnRlcnNbMF0ucHJpbWFyeSI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucmVwb3J0ZXJzWzBdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBsaXRlcmF0dXJlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgcnhtYWluLWNvbnRhaW5lciByeG1haW4tY29udGFpbmVyLXRvcCIgICAgICAgICBpZD0idi1saXRlcmF0dXJlIj4gICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIHBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgIDxoNCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPiAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWNhc2UiICAgICAgICAgICAgICAgICAgIGhyZWY9IiNsaXRlcmF0dXJlIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIHNlYy1kaXNwbGF5LXR4dCBzZWN0aW9uVGl0bGUiPiAgICAgICAgICAgICAgICAgICAgTGl0ZXJhdHVyZShzKSAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNwdkRyYWdSZWNvcmRMaXRlcmF0dXJlIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzICI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcHZEcmFnUmVjb3JkTGl0ZXJhdHVyZSIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyAiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBidG4tYWRkLXBhbmVsIGJ0bi1hZGRyb3ctdG9wIGljLXNtICIgZGF0YS1pbm5lci1zZWM9IiIgICAgICAgICAgIGRhdGEtdGFidWxhcj0iZmFsc2UiIHRpdGxlPSJBZGQgYW5vdGhlciBzZWN0aW9uIiAgICAgICAgICAgZGF0YS10YXJnZXQ9InB2aS1saXRlcmF0dXJlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYWRkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgPC9oND4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBpZD0ibGl0ZXJhdHVyZSIgZGF0YS10ZW1wbGF0ZUlkPSJsaXRlcmF0dXJlVGVtcGxhdGUiICAgICAgICAgICAgIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBwdi1tYWluIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgY29sbGFwc2UiICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1saXRlcmF0dXJlLWNvbnRhaW5lciBwdi1kcmFnZ2FibGUtbGlzdCBwdi1zZWN0aW9uIiBpZD0icHZEcmFnUmVjb3JkTGl0ZXJhdHVyZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHJvdy1zdHJpcCBwdi1saXRlcmF0dXJlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSBwLWItMTAgICIgICAgIGlkPSJsaXRlcmF0dXJlLXNlY3Rpb24tMCI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPjxzcGFuIGNsYXNzPSJyb3ctY291bnQgYmFkZ2UtaW5kZXgiPjwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPSJyb3ctYWN0aW9uIG51bS1iZyI+ICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSJwdi1saXRlcmF0dXJlIiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgY2xhc3M9InB2LWljIGljLXhzIG0tci01IHJlbW92ZS1zZWN0aW9uIHB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCI+ICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgbGl0ZXJhdHVyZV8wIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICA8L2E+PC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4gICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImxpdGVyYXR1cmVBdXRob3IiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICBsaXRlcmF0dXJlQXV0aG9yICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkF1dGhvcjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ibGl0ZXJhdHVyZUF1dGhvciI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5hdXRob3IiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEyMCIgZGF0YS1maWVsZC1pZD0ibGl0ZXJhdHVyZUF1dGhvciIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0uYXV0aG9yIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNSIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9ImxpdGVyYXR1cmVUaXRsZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIGxpdGVyYXR1cmVUaXRsZSAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5UaXRsZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ibGl0ZXJhdHVyZVRpdGxlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLmxpdGVyYXR1cmVzWzBdLnRpdGxlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtZmllbGQtaWQ9ImxpdGVyYXR1cmVUaXRsZSIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0udGl0bGUiIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9ImxpdGVyYXR1cmVKb3VybmFsIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgbGl0ZXJhdHVyZUpvdXJuYWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Sm91cm5hbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ibGl0ZXJhdHVyZUpvdXJuYWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0uam91cm5hbCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iODAiIGRhdGEtZmllbGQtaWQ9ImxpdGVyYXR1cmVKb3VybmFsIiBpZD0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5qb3VybmFsIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJsaXRlcmF0dXJlWWVhciIgY2xhc3M9ImNvbC1tZC0xIHRlbXBsYXRlLWNvbnRyb2wgIGxpdGVyYXR1cmVZZWFyICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlllYXI8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImxpdGVyYXR1cmVZZWFyIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLmxpdGVyYXR1cmVzWzBdLnllYXIiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjQiIGRhdGEtZmllbGQtaWQ9ImxpdGVyYXR1cmVZZWFyIiBpZD0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS55ZWFyIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJsaXRlcmF0dXJlVm9sdW1lIiBjbGFzcz0iY29sLW1kLTEgdGVtcGxhdGUtY29udHJvbCAgbGl0ZXJhdHVyZVZvbHVtZSAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Wb2w8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImxpdGVyYXR1cmVWb2x1bWUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0udm9sIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIxNSIgZGF0YS1maWVsZC1pZD0ibGl0ZXJhdHVyZVZvbHVtZSIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0udm9sIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJsaXRlcmF0dXJlUGFnZXMiIGNsYXNzPSJjb2wtbWQtMSB0ZW1wbGF0ZS1jb250cm9sICBsaXRlcmF0dXJlUGFnZXMgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UGFnZXM8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImxpdGVyYXR1cmVQYWdlcyI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5wYWdlcyIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMzAiIGRhdGEtZmllbGQtaWQ9ImxpdGVyYXR1cmVQYWdlcyIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0ucGFnZXMiIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PjxkaXYgaWQ9ImxpdGVyYXR1cmVGaWxlUGF0aCIgICAgIGNsYXNzPScgdGVtcGxhdGUtY29udHJvbCAgICBsaXRlcmF0dXJlRmlsZVBhdGggICBsaXRlcmF0dXJlRmlsZVBhdGgnPiAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBiYXNpYy1saXRlcmF0dXJlLTcgaW50ZXJuYWwiIGRhdGEtaWQ9ImxpdGVyYXR1cmVGaWxlUGF0aCI+ICAgIDxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+TGl0ZXJhdHVyZSBBcnRpY2xlPC9sYWJlbD48ZGl2IGNsYXNzPSJmaWxlLXVwbG9hZGVyIiBkYXRhLXByb3ZpZGVzPSJmaWxldXBsb2FkIj48aW5wdXQgdHlwZT0iZmlsZSIgbmFtZT0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5saXRlcmF0dXJlQXJ0aWNsZS5maWxlUGF0aCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9ImZpbGUgIj48ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+ICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICIgZGlzYWJsZWQgcGxhY2Vob2xkZXI9IkF0dGFjaCBhIGZpbGUiIGlkPSJsaXRlcmF0dXJlRmlsZVBhdGgiICAgICAgICAgICBuYW1lPSJzYWZldHlEYXRhLmZpbGVJbnB1dEJveFstMV0uZmlsZU5hbWUiIHZhbHVlPSIiPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5saXRlcmF0dXJlQXJ0aWNsZS5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0ubGl0ZXJhdHVyZUFydGljbGUuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5saXRlcmF0dXJlQXJ0aWNsZS5maWxlTmFtZSIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEubGl0ZXJhdHVyZXNbMF0ubGl0ZXJhdHVyZUFydGljbGUuZmlsZU5hbWUiIC8+ICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1idG4gIj4gICAgICAgIDxidXR0b24gY2xhc3M9ImJyb3dzZSBidG4gYnRuLXByaW1hcnkgYnRuLWZpbGUtdXBsb2FkICIgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIj48aSAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giPjwvaT4gICAgICAgIDwvYnV0dG9uPiAgICA8L3NwYW4+ICAgIDwvZGl2PjwvZGl2PiAgICA8L2Rpdj4gIDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5saXRlcmF0dXJlc1swXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1QYXRpZW50IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgcnhtYWluLWNvbnRhaW5lciByeG1haW4tY29udGFpbmVyLXRvcCIgICAgICAgICBpZD0idi1wYXRpZW50Ij4gICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIHBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgIDxoNCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPiAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWNhc2UiICAgICAgICAgICAgICAgICAgIGhyZWY9IiNwYXRpZW50RGV0YWlsIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBzZWMtZGlzcGxheS10eHQgaW5uZXIgc2VjdGlvblRpdGxlIj4gICAgICAgICAgICAgICAgICAgIFBhdGllbnQgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGlkPSJwYXRpZW50RGV0YWlsIiAgICAgICAgICAgICBjbGFzcz0icHYtc2VjdGlvbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSAgcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyIgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdi1wYXRpZW50IGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgcm93Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYXRpZW50TmFtZSIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIHBhdGllbnROYW1lICByZXF1aXJlZC1zZXQgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk5hbWUgLyBJbml0aWFsczwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudE5hbWUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjMiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5uYW1lIiB2YWx1ZT0iTG9hZDE2IiBkYXRhLWluaXRpYWwtdmFsdWU9IkxvYWQxNiIgbWF4bGVuZ3RoPSI2MCIgZGF0YS1maWVsZC1pZD0icGF0aWVudE5hbWUiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubmFtZSIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icGF0aWVudFBhdGllbnRJZCIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIHBhdGllbnRQYXRpZW50SWQgIHJlcXVpcmVkLXNldCAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UGF0aWVudCBJRDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudFBhdGllbnRJZCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgcGF0aWVudFBhdGllbnRJZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjMiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5wYXRpZW50SWQiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwIiBkYXRhLWZpZWxkLWlkPSJwYXRpZW50UGF0aWVudElkIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhdGllbnRJZCIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICA8ZGl2IGlkPSJwYXRpZW50QWdlIiBjbGFzcz0iY29sLW1kLTQgdGVtcGxhdGUtY29udHJvbCAgcGF0aWVudEFnZSAgcmVxdWlyZWQtc2V0ICIgPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIj4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5ET0IvIEFnZS8gR3JvdXAgPC9sYWJlbD4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhdGllbnRBZ2UiPiAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgcGF0aWVudEFnZSAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIzIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQuYWdlLnZhbHVlIiB2YWx1ZT0iNTUiIG1heGxlbmd0aD0iMTAwMCIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5hZ2UudmFsdWUiIC8+ICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQuYWdlLmlkIiB2YWx1ZT0iNSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5hZ2UuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LmFnZS5hZ2VUeXBlIiB2YWx1ZT0iUEFUSUVOVF9PTl9TRVRfQUdFIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LmFnZS5hZ2VUeXBlIiAvPiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1idG4gaW5uZXItaW5wdXQtZ3JvdXAtY2hlY2tib3ggdHJ1ZSI+ICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImxibC1lbGlwc2lzIj5GZXR1czwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBidG4tZGVmYXVsdCBidG4tY2hrYm94ICI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQuZmV0dXMiIGlkPSJwYXRpZW50RmV0dXMiIHZhbHVlPSJ0cnVlIiAgY2xhc3M9InBhdGllbnRGZXR1cyAiIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiI+PC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRHZW5kZXIiIGNsYXNzPSIgcGF0aWVudEdlbmRlciBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgIHJlcXVpcmVkLXNldCI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5HZW5kZXI8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhdGllbnRHZW5kZXIiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5nZW5kZXIuaWQiIGRhdGEtZnJvbT0iZ2VuZGVycyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjMiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIxIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LmdlbmRlci5pZCIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDAwMDQiID5BZGRlZE5ldzwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDAwMDAiID5Db25maWRlbnQ8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAwMDAzIiA+Q29weUNvbmY8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMiIgPkZlbWFsZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxIiBzZWxlY3RlZD0ic2VsZWN0ZWQiID5NYWxlPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQiID5VTks8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudExtcERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRMbXBEYXRlICBjb2wtbWQtMiByZXF1aXJlZC1zZXQiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TE1QIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhdGllbnRMbXBEYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubG1wRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LmxtcERhdGUudmFsdWUiIGRhdGEtZGF0ZWZvcm1hdD0iZGQtTU1NLXl5eXkiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IjAxLUFwci0yMDIwIiBkYXRhLW1hbmRhdG9yeVNldD0iMyIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubG1wRGF0ZS5mb3JtYXQiIHZhbHVlPSJkZC1NTU0teXl5eSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5sbXBEYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj48ZGl2IGlkPSJwYXRpZW50V2VpZ2h0IiBjbGFzcz0nY29sLW1kLTIgIHJlcXVpcmVkLXNldCB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50V2VpZ2h0Jz4gICAgPGRpdiBjbGFzcz0ibm8tdHh0LW92ZXJmbG93IGlucHV0LWdyb3VwIGludGVybmFsIiBkYXRhLWlkPSJwYXRpZW50V2VpZ2h0Ij4gICAgICAgIDxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+V2VpZ2h0PC9sYWJlbD4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjMiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC53ZWlnaHQiIHZhbHVlPSI1NS4wIiBtYXhsZW5ndGg9IjYiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQud2VpZ2h0IiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImlucHV0LWdyb3VwLWJ0biBpbm5lci1pbnB1dC1ncm91cCB1bml0Ij4gICAgICAgICAgICA8bGFiZWw+VW5pdDwvbGFiZWw+ICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQud2VpZ2h0VW5pdC5pZCIgZGF0YS12YWx1ZT0iNDQiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgY2xhc3M9ImJ0biBmb3JtLWNvbnRyb2wgc2VsZWN0MiBudWxsIGhhcy1kZWZhdWx0LXZhbCAiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQud2VpZ2h0VW5pdC5pZCIgPg08b3B0aW9uIHZhbHVlPSI0NCIgPktnczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI0NSIgPkxiczwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+PC9kaXY+PGRpdiBpZD0icGF0aWVudEhlaWdodCIgY2xhc3M9J2NvbC1tZC0yICByZXF1aXJlZC1zZXQgdGVtcGxhdGUtY29udHJvbCAgcGF0aWVudEhlaWdodCc+ICAgIDxkaXYgY2xhc3M9Im5vLXR4dC1vdmVyZmxvdyBpbnB1dC1ncm91cCBpbnRlcm5hbCIgZGF0YS1pZD0icGF0aWVudEhlaWdodCI+ICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkhlaWdodDwvbGFiZWw+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIzIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQuaGVpZ2h0IiB2YWx1ZT0iMTY1LjAiIG1heGxlbmd0aD0iMyIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5oZWlnaHQiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuIGlubmVyLWlucHV0LWdyb3VwIHVuaXQiPiAgICAgICAgICAgIDxsYWJlbD5Vbml0PC9sYWJlbD4gICAgICAgICAgICA8c2VsZWN0IG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5oZWlnaHRVbml0LmlkIiBkYXRhLXZhbHVlPSI0NiIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBjbGFzcz0iYnRuIGZvcm0tY29udHJvbCBzZWxlY3QyIG51bGwgaGFzLWRlZmF1bHQtdmFsICIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5oZWlnaHRVbml0LmlkIiA+DTxvcHRpb24gdmFsdWU9IjQ2IiA+Q21zPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQ3IiA+SW5jaGVzPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwYXRpZW50R3BSZWNvcmROdW1iZXIiIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50R3BSZWNvcmROdW1iZXIgIHJlcXVpcmVkLXNldCAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+R1AgUmVjb3JkICM8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhdGllbnRHcFJlY29yZE51bWJlciI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMyIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LmdwUmVjb3JkTnVtYmVyIiB2YWx1ZT0iM0FCQ0QiIGRhdGEtaW5pdGlhbC12YWx1ZT0iM0FCQ0QiIG1heGxlbmd0aD0iMjAiIGRhdGEtZmllbGQtaWQ9InBhdGllbnRHcFJlY29yZE51bWJlciIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5ncFJlY29yZE51bWJlciIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icGF0aWVudFNwZWNpYWxpc3RSZWNvcmROdW1iZXIiIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50U3BlY2lhbGlzdFJlY29yZE51bWJlciAgcmVxdWlyZWQtc2V0ICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5TcGVjaWFsaXN0IFJlY29yZCAjPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50U3BlY2lhbGlzdFJlY29yZE51bWJlciI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMyIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnNwZWNpYWxpc3RSZWNvcmROdW1iZXIiIHZhbHVlPSIzQUJDRCIgZGF0YS1pbml0aWFsLXZhbHVlPSIzQUJDRCIgbWF4bGVuZ3RoPSIyMCIgZGF0YS1maWVsZC1pZD0icGF0aWVudFNwZWNpYWxpc3RSZWNvcmROdW1iZXIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQuc3BlY2lhbGlzdFJlY29yZE51bWJlciIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icGF0aWVudEhvc3BpdGFsUmVjb3JkTnVtYmVyIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgcGF0aWVudEhvc3BpdGFsUmVjb3JkTnVtYmVyICByZXF1aXJlZC1zZXQgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkhvc3BpdGFsIFJlY29yZCAjPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50SG9zcGl0YWxSZWNvcmROdW1iZXIiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjMiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5ob3NwaXRhbFJlY29yZE51bWJlciIgdmFsdWU9IjNBQkNEIiBkYXRhLWluaXRpYWwtdmFsdWU9IjNBQkNEIiBtYXhsZW5ndGg9IjIwIiBkYXRhLWZpZWxkLWlkPSJwYXRpZW50SG9zcGl0YWxSZWNvcmROdW1iZXIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQuaG9zcGl0YWxSZWNvcmROdW1iZXIiIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRDb25jb21pdGFudFRoZXJhcGllcyIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICAgcGF0aWVudENvbmNvbWl0YW50VGhlcmFwaWVzJz4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvbmNvbWl0YW50IFRoZXJhcGllczwvbGFiZWw+ICAgICAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAnIGRhdGEtaWQ9InBhdGllbnRDb25jb21pdGFudFRoZXJhcGllcyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnBhdGllbnQuY29uY29taXRhbnRUaGVyYXBpZXMiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5jb25jb21pdGFudFRoZXJhcGllcyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJzYWZldHlEYXRhLnBhdGllbnQuY29uY29taXRhbnRUaGVyYXBpZXMiPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudEFkZGl0aW9uYWxSZWxldmFudE1lZGljYWxIaXN0b3J5IiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCAgICAgcGF0aWVudEFkZGl0aW9uYWxSZWxldmFudE1lZGljYWxIaXN0b3J5IGNvbC1tZC0xMic+ICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QWRkJiMzOTtsIFJlbGV2YW50IE1lZGljYWwgSGlzdG9yeTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50QWRkaXRpb25hbFJlbGV2YW50TWVkaWNhbEhpc3RvcnkiPiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LmFkZGl0aW9uYWxSZWxldmFudE1lZGljYWxIaXN0b3J5IiBtYXhsZW5ndGg9IjEwMDAwIiByb3dzPSIyIiBjb2xzPSIxMDAiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQuYWRkaXRpb25hbFJlbGV2YW50TWVkaWNhbEhpc3RvcnkiID48L3RleHRhcmVhPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUgbS10LTUiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1pbm5lclBhdGllbnQiPiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRGVhdGggRGV0YWlscyAtLT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIiBpZD0icGF0aWVudERlYXRoRGV0YWlsQ29udGFpbmVyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyBwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclBhdGllbnQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcGF0aWVudERlYXRoRGV0YWlsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBzZWMtZGlzcGxheS10eHQgY2hpbGRTZWN0aW9uVGl0bGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVhdGggRGV0YWlscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnREZWF0aERldGFpbCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYXRpZW50RGVhdGhEZXRhaWxEZWF0aERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnREZWF0aERldGFpbERlYXRoRGF0ZSAgY29sLW1kLTYgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRlYXRoIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhdGllbnREZWF0aERldGFpbERlYXRoRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5kZWF0aERldGFpbC5kZWF0aERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhEYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhEYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhEYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudERlYXRoRGV0YWlsQXV0b3BzeURvbmUiIGNsYXNzPSIgcGF0aWVudERlYXRoRGV0YWlsQXV0b3BzeURvbmUgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QXV0b3BzeSBEb25lPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50RGVhdGhEZXRhaWxBdXRvcHN5RG9uZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5kZWF0aERldGFpbC5hdXRvcHN5RG9uZSIgZGF0YS1mcm9tPSJhdXRvcHN5RG9uZSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmF1dG9wc3lEb25lIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjUiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjYiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci10YWJsZSBjb2wtbWQtMTIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWlubmVyUGF0RGVhdGhDYXVzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI2RlYXRoQ2F1c2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzZWMtZGlzcGxheS10eHQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVhdGggQ2F1c2UocykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcGF0aWVudERlYXRoVGFibGVTZWN0aW9uIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzICI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcGF0aWVudERlYXRoVGFibGVTZWN0aW9uIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzICI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJkZWF0aENhdXNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlbXBsYXRlSWQ9ImRlYXRoQ2F1c2VUZW1wbGF0ZSIgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gcnhtYWluLWNvbnRhaW5lci1jb250ZW50ICByeG1haW4tY29udGFpbmVyLXNob3cgcC0wIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciBwYW5lbC1ib2R5IHAtMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgPHRoZWFkPiAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4gICAgICAgIDx0aCBpZD0naGVhZGVyLXBhdGllbnREZWF0aENhdXNlVHlwZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gQ2F1c2UgVHlwZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcGF0aWVudERlYXRoUmVwb3J0ZWRDYXVzZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gQ2F1c2UgKFJlcG9ydGVkKSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcGF0aWVudERlYXRoQ29kZWRDYXVzZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gQ2F1c2UgKENvZGVkKSA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj48YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0icHVsbC1yaWdodCBhZGQtdGFibGUtcm93IGFkZC1zZWN0aW9uIGJ0bi1hZGQtcGFuZWwiICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cy1zcXVhcmUtbyI+PC9pPjwvYT48L3RoPiAgICAgICAgPC90aGVhZD4gICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSIgaWQ9InBhdGllbnREZWF0aFRhYmxlU2VjdGlvbiI+ICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIGlkPSJkZWF0aENhdXNlLXNlY3Rpb24tMCI+ICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXgiPjwvdGQ+ICAgICAgICA8dGQgaWQ9InBhdGllbnREZWF0aENhdXNlVHlwZSIgY2xhc3M9IiBwYXRpZW50RGVhdGhDYXVzZVR5cGUgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhdGllbnREZWF0aENhdXNlVHlwZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5kZWF0aERldGFpbC5kZWF0aENhdXNlc1swXS5jYXVzZVR5cGUuaWQiIGRhdGEtZnJvbT0iY2F1c2VUeXBlcyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhDYXVzZXNbMF0uY2F1c2VUeXBlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjgiID5BdXRvcHN5IERldGVybWluZWQgQ2F1c2U8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjciID5EZWF0aCBDYXVzZTwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhDYXVzZXNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjYiIGlkPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD4gICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC00ICB0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnREZWF0aFJlcG9ydGVkQ2F1c2UiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50RGVhdGhSZXBvcnRlZENhdXNlIj4gICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJwYXRpZW50RGVhdGhSZXBvcnRlZENhdXNlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhDYXVzZXNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9InBhdGllbnREZWF0aENvZGVkQ2F1c2UiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwYXRpZW50RGVhdGhSZXBvcnRlZENhdXNlIiBpZD0ic2FmZXR5RGF0YS5kZWF0aERldGFpbC5kZWF0aENhdXNlc1swXS5yZXBvcnRlZFJlYWN0aW9uIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5kZWF0aERldGFpbC5kZWF0aENhdXNlc1swXS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhDYXVzZXNbMF0uaGllcmFyY2h5U3RvcmFnZUlkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8dGQgaWQ9InBhdGllbnREZWF0aENvZGVkQ2F1c2UiIGNsYXNzPSJjb2wtbWQtNCB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50RGVhdGhDb2RlZENhdXNlICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhdGllbnREZWF0aENvZGVkQ2F1c2UiPiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5kZWF0aERldGFpbC5kZWF0aENhdXNlc1swXS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIxMDAwIiBkYXRhLWZpZWxkLWlkPSJwYXRpZW50RGVhdGhDb2RlZENhdXNlIiByZWFkb25seT0icmVhZG9ubHkiIGlkPSJzYWZldHlEYXRhLmRlYXRoRGV0YWlsLmRlYXRoQ2F1c2VzWzBdLnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEuZGVhdGhEZXRhaWwuZGVhdGhDYXVzZXNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlYXRoQ2F1c2VfMCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICA8L2E+ICAgICAgICA8L3RkPiAgICA8L3RyPiAgICAgICAgPC90Ym9keT48L3RhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBhdGllbnQgTWVkaWNhbCBIaXN0b3J5IERldGFpbHMtLT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiIGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250YWluZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmcgcnhtYWluLWNvbnRhaW5lci1yb3ciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWlubmVyUGF0aWVudCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNwYXRpZW50TWVkSGlzdG9yeSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjb2xsYXBzZWQgc2VjLWRpc3BsYXktdHh0IGNoaWxkU2VjdGlvblRpdGxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lZGljYWwgSGlzdG9yeSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI3B2RHJhZ2lubmVyUGF0aWVudE1lZGljYWxIaXN0b3J5IiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzICI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcHZEcmFnaW5uZXJQYXRpZW50TWVkaWNhbEhpc3RvcnkiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWFkZC1wYW5lbCBidG4tYWRkcm93LXRvcCBpYy1zbSBwdi1hZGQtcm93IiBkYXRhLWlubmVyLXNlYz0idHJ1ZSIgICAgICAgICAgIGRhdGEtdGFidWxhcj0iaW5uZXIiIHRpdGxlPSJBZGQgYW5vdGhlciBzZWN0aW9uIiAgICAgICAgICAgZGF0YS10YXJnZXQ9InB2LW1lZC1oaXN0b3J5Ij4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYWRkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icGF0aWVudE1lZEhpc3RvcnkiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlbXBsYXRlSWQ9InBhdGllbnRNZWRIaXN0b3J5VGVtcGxhdGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHB2LXNlY3Rpb24gdWktc29ydGFibGUiIGlkPSJwdkRyYWdpbm5lclBhdGllbnRNZWRpY2FsSGlzdG9yeSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcm93LXN0cmlwIHB2LW1lZC1oaXN0b3J5IHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSBwLWItMTAgICIgICAgIGlkPSJwYXRpZW50TWVkSGlzdG9yeS1zZWN0aW9uLTAiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj48c3BhbiBjbGFzcz0icm93LWNvdW50IGJhZGdlLWluZGV4Ij48L3NwYW4+PC9kaXY+PGRpdiBjbGFzcz0icm93LWFjdGlvbiBudW0tYmciPiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtbWVkLWhpc3RvcnkiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiBjbGFzcz0icHYtaWMgaWMteHMgbS1yLTUgcmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIj4gICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBwYXRpZW50TWVkSGlzdG9yeV8wIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICA8L2E+PC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4gICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSIgY2xhc3M9JyBjb2wtbWQtMyAgIHRlbXBsYXRlLWNvbnRyb2wgIHBhdGllbnRNZWRpY2FsSGlzdG9yeScgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk1lZGljYWwgSGlzdG9yeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Ij4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIG1heGxlbmd0aD0iMjUwIiB2YWx1ZT0iQ2hpbGxzIGFuZCBmZXZlciIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXZhbHVlPSJDaGlsbHMgYW5kIGZldmVyIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5tZWRpY2FsSGlzdG9yeS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5tZWRpY2FsSGlzdG9yeS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMDg1MzMiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5tZWRpY2FsSGlzdG9yeS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9ImZldmVyIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5tZWRpY2FsSGlzdG9yeS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iZmV2ZXIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5tZWRpY2FsSGlzdG9yeS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSI3IiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giID48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwYXRpZW50TWVkaWNhbEhpc3RvcnlTdGFydERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5TdGFydCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlTdGFydERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLnN0YXJ0RGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5zdGFydERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlFbmREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwYXRpZW50TWVkaWNhbEhpc3RvcnlFbmREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RW5kIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uZW5kRGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5lbmREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyIgY2xhc3M9IiBwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvbnRpbnVpbmc8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmciPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmNvbnRpbnVpbmciIGRhdGEtZnJvbT0iY29udGludWluZ3MiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uY29udGludWluZyIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIzIiA+WWVzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjI0IiA+Tm88L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlGYW1pbHlIaXN0b3J5IiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMyAgICBwYXRpZW50TWVkaWNhbEhpc3RvcnlGYW1pbHlIaXN0b3J5Jz4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZhbWlseSBIaXN0b3J5PC9sYWJlbD4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICcgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RmFtaWx5SGlzdG9yeSI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5mYW1pbHlIaXN0b3J5Ij4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1swXS5mYW1pbHlIaXN0b3J5IiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmZhbWlseUhpc3RvcnkiPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sICAgICBwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyBjb2wtbWQtMTInPiAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvbW1lbnRzPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIj4gICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0iZm9ybS1jb250cm9sIGZtLXRleHQtYXJlYSAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmNvbW1lbnRzIiBtYXhsZW5ndGg9IjIwMDAiIHJvd3M9IjIiIGNvbHM9IjEwMCIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmNvbW1lbnRzIiA+PC90ZXh0YXJlYT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1heGxlbmd0aC1mZWVkYmFjayI+PC9zcGFuPiAgICAgICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyByb3ctc3RyaXAgcHYtbWVkLWhpc3RvcnkgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlIHAtYi0xMCAgIiAgICAgaWQ9InBhdGllbnRNZWRIaXN0b3J5LXNlY3Rpb24tMSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPjxzcGFuIGNsYXNzPSJyb3ctY291bnQgYmFkZ2UtaW5kZXgiPjwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPSJyb3ctYWN0aW9uIG51bS1iZyI+ICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSJwdi1tZWQtaGlzdG9yeSIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iIGNsYXNzPSJwdi1pYyBpYy14cyBtLXItNSByZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIHBhdGllbnRNZWRIaXN0b3J5XzEiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgIDwvYT48L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLXQtMjAgZm9ybS1wdiBmb3JtLWhvcml6b250YWwiPiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5IiBjbGFzcz0nIGNvbC1tZC0zICAgdGVtcGxhdGUtY29udHJvbCAgcGF0aWVudE1lZGljYWxIaXN0b3J5JyA+ICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TWVkaWNhbCBIaXN0b3J5PC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMV0ubWVkaWNhbEhpc3RvcnkucmVhY3Rpb25Db2RlZCIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSJEYXJrIHJlZGRpc2ggbWFjdWxlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdmFsdWU9IkRhcmsgcmVkZGlzaCBtYWN1bGUiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzFdLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzFdLm1lZGljYWxIaXN0b3J5LmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDAxMTg2MiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzFdLm1lZGljYWxIaXN0b3J5LmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMV0ubWVkaWNhbEhpc3RvcnkuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0icmVkZCIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzFdLm1lZGljYWxIaXN0b3J5LmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1sxXS5tZWRpY2FsSGlzdG9yeS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1sxXS5tZWRpY2FsSGlzdG9yeS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMV0ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9InJlZGQiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1sxXS5tZWRpY2FsSGlzdG9yeS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzFdLmludGVybmFsUm93SWQiIHZhbHVlPSIyMSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzFdLmludGVybmFsUm93SWQiIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcGF0aWVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RhcnQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1sxXS5zdGFydERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzFdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1sxXS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMV0uc3RhcnREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkVuZCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlFbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1sxXS5lbmREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1sxXS5lbmREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzFdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMV0uZW5kRGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmciIGNsYXNzPSIgcGF0aWVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db250aW51aW5nPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1sxXS5jb250aW51aW5nIiBkYXRhLWZyb209ImNvbnRpbnVpbmdzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzFdLmNvbnRpbnVpbmciID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyMyIgPlllczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyNCIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RmFtaWx5SGlzdG9yeSIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgICAgcGF0aWVudE1lZGljYWxIaXN0b3J5RmFtaWx5SGlzdG9yeSc+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GYW1pbHkgSGlzdG9yeTwvbGFiZWw+ICAgICAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAnIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnkiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMV0uZmFtaWx5SGlzdG9yeSI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMV0uZmFtaWx5SGlzdG9yeSIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1sxXS5mYW1pbHlIaXN0b3J5Ij48L2xhYmVsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCAgICAgcGF0aWVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMgY29sLW1kLTEyJz4gICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db21tZW50czwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyI+ICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1sxXS5jb21tZW50cyIgbWF4bGVuZ3RoPSIyMDAwIiByb3dzPSIyIiBjb2xzPSIxMDAiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1sxXS5jb21tZW50cyIgPjwvdGV4dGFyZWE+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4gICAgICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzFdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcm93LXN0cmlwIHB2LW1lZC1oaXN0b3J5IHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSBwLWItMTAgICIgICAgIGlkPSJwYXRpZW50TWVkSGlzdG9yeS1zZWN0aW9uLTIiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj48c3BhbiBjbGFzcz0icm93LWNvdW50IGJhZGdlLWluZGV4Ij48L3NwYW4+PC9kaXY+PGRpdiBjbGFzcz0icm93LWFjdGlvbiBudW0tYmciPiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtbWVkLWhpc3RvcnkiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiBjbGFzcz0icHYtaWMgaWMteHMgbS1yLTUgcmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIj4gICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBwYXRpZW50TWVkSGlzdG9yeV8yIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICA8L2E+PC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4gICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSIgY2xhc3M9JyBjb2wtbWQtMyAgIHRlbXBsYXRlLWNvbnRyb2wgIHBhdGllbnRNZWRpY2FsSGlzdG9yeScgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk1lZGljYWwgSGlzdG9yeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Ij4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzJdLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIG1heGxlbmd0aD0iMjUwIiB2YWx1ZT0iR3VtIGJsdWUgbGluZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXZhbHVlPSJHdW0gYmx1ZSBsaW5lIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1syXS5tZWRpY2FsSGlzdG9yeS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1syXS5tZWRpY2FsSGlzdG9yeS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMTg3NzIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1syXS5tZWRpY2FsSGlzdG9yeS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzJdLm1lZGljYWxIaXN0b3J5LmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9ImJsdWUiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1syXS5tZWRpY2FsSGlzdG9yeS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMl0ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMl0ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzJdLm1lZGljYWxIaXN0b3J5LnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJibHVlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMl0ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1syXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMjIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1syXS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMl0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1syXS5zdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMl0uc3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzJdLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMl0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMl0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1syXS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzJdLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIiBjbGFzcz0iIHBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmcgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29udGludWluZzwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMl0uY29udGludWluZyIgZGF0YS1mcm9tPSJjb250aW51aW5ncyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1syXS5jb250aW51aW5nIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjMiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjQiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnkiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0zICAgIHBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnknPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RmFtaWx5IEhpc3Rvcnk8L2xhYmVsPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlGYW1pbHlIaXN0b3J5Ij4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzJdLmZhbWlseUhpc3RvcnkiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzJdLmZhbWlseUhpc3RvcnkiIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMl0uZmFtaWx5SGlzdG9yeSI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgICAgIHBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIGNvbC1tZC0xMic+ICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29tbWVudHM8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMiPiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMl0uY29tbWVudHMiIG1heGxlbmd0aD0iMjAwMCIgcm93cz0iMiIgY29scz0iMTAwIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbMl0uY29tbWVudHMiID48L3RleHRhcmVhPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1syXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHJvdy1zdHJpcCBwdi1tZWQtaGlzdG9yeSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgcC1iLTEwICAiICAgICBpZD0icGF0aWVudE1lZEhpc3Rvcnktc2VjdGlvbi0zIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9InJvdy1hY3Rpb24gbnVtLWJnIj4gICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9InB2LW1lZC1oaXN0b3J5IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgY2xhc3M9InB2LWljIGljLXhzIG0tci01IHJlbW92ZS1zZWN0aW9uIHB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCI+ICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgcGF0aWVudE1lZEhpc3RvcnlfMyIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPjwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIG0tdC0yMCBmb3JtLXB2IGZvcm0taG9yaXpvbnRhbCI+ICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiIGNsYXNzPScgY29sLW1kLTMgICB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50TWVkaWNhbEhpc3RvcnknID4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5NZWRpY2FsIEhpc3Rvcnk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5tZWRpY2FsSGlzdG9yeS5yZWFjdGlvbkNvZGVkIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IkdyZWVuIGRpc2NvbG9yYXRpb24gb2Ygc2tpbiIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXZhbHVlPSJHcmVlbiBkaXNjb2xvcmF0aW9uIG9mIHNraW4iIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzNdLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzNdLm1lZGljYWxIaXN0b3J5LmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA3MDgwNyIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzNdLm1lZGljYWxIaXN0b3J5LmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbM10ubWVkaWNhbEhpc3RvcnkuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iZ3JlZSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzNdLm1lZGljYWxIaXN0b3J5LmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5tZWRpY2FsSGlzdG9yeS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5tZWRpY2FsSGlzdG9yeS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbM10ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9ImdyZWUiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5tZWRpY2FsSGlzdG9yeS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzNdLmludGVybmFsUm93SWQiIHZhbHVlPSIyMyIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzNdLmludGVybmFsUm93SWQiIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcGF0aWVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RhcnQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5zdGFydERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzNdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbM10uc3RhcnREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkVuZCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlFbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5lbmREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5lbmREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzNdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbM10uZW5kRGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmciIGNsYXNzPSIgcGF0aWVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db250aW51aW5nPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5jb250aW51aW5nIiBkYXRhLWZyb209ImNvbnRpbnVpbmdzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzNdLmNvbnRpbnVpbmciID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyMyIgPlllczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyNCIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RmFtaWx5SGlzdG9yeSIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgICAgcGF0aWVudE1lZGljYWxIaXN0b3J5RmFtaWx5SGlzdG9yeSc+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GYW1pbHkgSGlzdG9yeTwvbGFiZWw+ICAgICAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAnIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnkiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbM10uZmFtaWx5SGlzdG9yeSI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbM10uZmFtaWx5SGlzdG9yeSIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5mYW1pbHlIaXN0b3J5Ij48L2xhYmVsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCAgICAgcGF0aWVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMgY29sLW1kLTEyJz4gICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db21tZW50czwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyI+ICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5jb21tZW50cyIgbWF4bGVuZ3RoPSIyMDAwIiByb3dzPSIyIiBjb2xzPSIxMDAiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1szXS5jb21tZW50cyIgPjwvdGV4dGFyZWE+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4gICAgICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzNdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcm93LXN0cmlwIHB2LW1lZC1oaXN0b3J5IHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSBwLWItMTAgICIgICAgIGlkPSJwYXRpZW50TWVkSGlzdG9yeS1zZWN0aW9uLTQiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj48c3BhbiBjbGFzcz0icm93LWNvdW50IGJhZGdlLWluZGV4Ij48L3NwYW4+PC9kaXY+PGRpdiBjbGFzcz0icm93LWFjdGlvbiBudW0tYmciPiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtbWVkLWhpc3RvcnkiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiBjbGFzcz0icHYtaWMgaWMteHMgbS1yLTUgcmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIj4gICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBwYXRpZW50TWVkSGlzdG9yeV80IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICA8L2E+PC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4gICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSIgY2xhc3M9JyBjb2wtbWQtMyAgIHRlbXBsYXRlLWNvbnRyb2wgIHBhdGllbnRNZWRpY2FsSGlzdG9yeScgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk1lZGljYWwgSGlzdG9yeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Ij4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzRdLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIG1heGxlbmd0aD0iMjUwIiB2YWx1ZT0iYmx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXZhbHVlPSJibHVlIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s0XS5tZWRpY2FsSGlzdG9yeS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s0XS5tZWRpY2FsSGlzdG9yeS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0ubWVkaWNhbEhpc3RvcnkubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s0XS5tZWRpY2FsSGlzdG9yeS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s0XS5tZWRpY2FsSGlzdG9yeS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzRdLm1lZGljYWxIaXN0b3J5LnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJibHVlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s0XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMjQiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s0XS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s0XS5zdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0uc3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzRdLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s0XS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzRdLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIiBjbGFzcz0iIHBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmcgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29udGludWluZzwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0uY29udGludWluZyIgZGF0YS1mcm9tPSJjb250aW51aW5ncyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s0XS5jb250aW51aW5nIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjMiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjQiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnkiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0zICAgIHBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnknPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RmFtaWx5IEhpc3Rvcnk8L2xhYmVsPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlGYW1pbHlIaXN0b3J5Ij4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzRdLmZhbWlseUhpc3RvcnkiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzRdLmZhbWlseUhpc3RvcnkiIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0uZmFtaWx5SGlzdG9yeSI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgICAgIHBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIGNvbC1tZC0xMic+ICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29tbWVudHM8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMiPiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0uY29tbWVudHMiIG1heGxlbmd0aD0iMjAwMCIgcm93cz0iMiIgY29scz0iMTAwIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNF0uY29tbWVudHMiID48L3RleHRhcmVhPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s0XS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHJvdy1zdHJpcCBwdi1tZWQtaGlzdG9yeSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgcC1iLTEwICAiICAgICBpZD0icGF0aWVudE1lZEhpc3Rvcnktc2VjdGlvbi01Ij4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9InJvdy1hY3Rpb24gbnVtLWJnIj4gICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9InB2LW1lZC1oaXN0b3J5IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgY2xhc3M9InB2LWljIGljLXhzIG0tci01IHJlbW92ZS1zZWN0aW9uIHB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCI+ICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgcGF0aWVudE1lZEhpc3RvcnlfNSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPjwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIG0tdC0yMCBmb3JtLXB2IGZvcm0taG9yaXpvbnRhbCI+ICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiIGNsYXNzPScgY29sLW1kLTMgICB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50TWVkaWNhbEhpc3RvcnknID4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5NZWRpY2FsIEhpc3Rvcnk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5tZWRpY2FsSGlzdG9yeS5yZWFjdGlvbkNvZGVkIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IlNraW4gYmFjdGVyaWFsIGluZmVjdGlvbiIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXZhbHVlPSJTa2luIGJhY3RlcmlhbCBpbmZlY3Rpb24iIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzVdLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzVdLm1lZGljYWxIaXN0b3J5LmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA1Mjg5MSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzVdLm1lZGljYWxIaXN0b3J5LmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNV0ubWVkaWNhbEhpc3RvcnkuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0ic2tpbiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzVdLm1lZGljYWxIaXN0b3J5LmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5tZWRpY2FsSGlzdG9yeS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5tZWRpY2FsSGlzdG9yeS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNV0ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9InNraW4iIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5tZWRpY2FsSGlzdG9yeS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzVdLmludGVybmFsUm93SWQiIHZhbHVlPSIyNSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzVdLmludGVybmFsUm93SWQiIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcGF0aWVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RhcnQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5zdGFydERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzVdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNV0uc3RhcnREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkVuZCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlFbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5lbmREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5lbmREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzVdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNV0uZW5kRGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmciIGNsYXNzPSIgcGF0aWVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db250aW51aW5nPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5jb250aW51aW5nIiBkYXRhLWZyb209ImNvbnRpbnVpbmdzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzVdLmNvbnRpbnVpbmciID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyMyIgPlllczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyNCIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RmFtaWx5SGlzdG9yeSIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgICAgcGF0aWVudE1lZGljYWxIaXN0b3J5RmFtaWx5SGlzdG9yeSc+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GYW1pbHkgSGlzdG9yeTwvbGFiZWw+ICAgICAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAnIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnkiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNV0uZmFtaWx5SGlzdG9yeSI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNV0uZmFtaWx5SGlzdG9yeSIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5mYW1pbHlIaXN0b3J5Ij48L2xhYmVsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCAgICAgcGF0aWVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMgY29sLW1kLTEyJz4gICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db21tZW50czwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyI+ICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5jb21tZW50cyIgbWF4bGVuZ3RoPSIyMDAwIiByb3dzPSIyIiBjb2xzPSIxMDAiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s1XS5jb21tZW50cyIgPjwvdGV4dGFyZWE+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4gICAgICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzVdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcm93LXN0cmlwIHB2LW1lZC1oaXN0b3J5IHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSBwLWItMTAgICIgICAgIGlkPSJwYXRpZW50TWVkSGlzdG9yeS1zZWN0aW9uLTYiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj48c3BhbiBjbGFzcz0icm93LWNvdW50IGJhZGdlLWluZGV4Ij48L3NwYW4+PC9kaXY+PGRpdiBjbGFzcz0icm93LWFjdGlvbiBudW0tYmciPiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtbWVkLWhpc3RvcnkiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiBjbGFzcz0icHYtaWMgaWMteHMgbS1yLTUgcmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIj4gICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBwYXRpZW50TWVkSGlzdG9yeV82IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICA8L2E+PC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4gICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSIgY2xhc3M9JyBjb2wtbWQtMyAgIHRlbXBsYXRlLWNvbnRyb2wgIHBhdGllbnRNZWRpY2FsSGlzdG9yeScgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk1lZGljYWwgSGlzdG9yeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Ij4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzZdLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIG1heGxlbmd0aD0iMjUwIiB2YWx1ZT0iU2tpbiBjYW5kaWRhIE5PUyIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXZhbHVlPSJTa2luIGNhbmRpZGEgTk9TIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s2XS5tZWRpY2FsSGlzdG9yeS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s2XS5tZWRpY2FsSGlzdG9yeS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwNDA4MDkiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s2XS5tZWRpY2FsSGlzdG9yeS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzZdLm1lZGljYWxIaXN0b3J5LmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9InNraW4iIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s2XS5tZWRpY2FsSGlzdG9yeS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNl0ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNl0ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzZdLm1lZGljYWxIaXN0b3J5LnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJza2luIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNl0ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s2XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMjYiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s2XS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNl0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s2XS5zdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNl0uc3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzZdLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNl0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNl0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s2XS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzZdLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIiBjbGFzcz0iIHBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmcgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29udGludWluZzwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNl0uY29udGludWluZyIgZGF0YS1mcm9tPSJjb250aW51aW5ncyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s2XS5jb250aW51aW5nIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjMiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjQiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnkiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0zICAgIHBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnknPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RmFtaWx5IEhpc3Rvcnk8L2xhYmVsPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlGYW1pbHlIaXN0b3J5Ij4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzZdLmZhbWlseUhpc3RvcnkiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzZdLmZhbWlseUhpc3RvcnkiIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNl0uZmFtaWx5SGlzdG9yeSI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgICAgIHBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIGNvbC1tZC0xMic+ICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29tbWVudHM8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMiPiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNl0uY29tbWVudHMiIG1heGxlbmd0aD0iMjAwMCIgcm93cz0iMiIgY29scz0iMTAwIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbNl0uY29tbWVudHMiID48L3RleHRhcmVhPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s2XS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHJvdy1zdHJpcCBwdi1tZWQtaGlzdG9yeSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgcC1iLTEwICAiICAgICBpZD0icGF0aWVudE1lZEhpc3Rvcnktc2VjdGlvbi03Ij4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9InJvdy1hY3Rpb24gbnVtLWJnIj4gICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9InB2LW1lZC1oaXN0b3J5IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgY2xhc3M9InB2LWljIGljLXhzIG0tci01IHJlbW92ZS1zZWN0aW9uIHB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCI+ICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgcGF0aWVudE1lZEhpc3RvcnlfNyIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPjwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIG0tdC0yMCBmb3JtLXB2IGZvcm0taG9yaXpvbnRhbCI+ICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiIGNsYXNzPScgY29sLW1kLTMgICB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50TWVkaWNhbEhpc3RvcnknID4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5NZWRpY2FsIEhpc3Rvcnk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s3XS5tZWRpY2FsSGlzdG9yeS5yZWFjdGlvbkNvZGVkIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IlNraW4gJmFtcDsgc3ViY3V0YW5lb3VzIHRpc3N1ZSBhYnNjZXNzIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdmFsdWU9IlNraW4gJmFtcDsgc3ViY3V0YW5lb3VzIHRpc3N1ZSBhYnNjZXNzIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s3XS5tZWRpY2FsSGlzdG9yeS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s3XS5tZWRpY2FsSGlzdG9yeS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwNDA3ODQiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s3XS5tZWRpY2FsSGlzdG9yeS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzddLm1lZGljYWxIaXN0b3J5LmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9InNraW4iIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s3XS5tZWRpY2FsSGlzdG9yeS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbN10ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbN10ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzddLm1lZGljYWxIaXN0b3J5LnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJza2luIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbN10ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s3XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMjciIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s3XS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbN10uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s3XS5zdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbN10uc3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzddLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbN10uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbN10uZW5kRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s3XS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzddLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIiBjbGFzcz0iIHBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmcgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29udGludWluZzwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbN10uY29udGludWluZyIgZGF0YS1mcm9tPSJjb250aW51aW5ncyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s3XS5jb250aW51aW5nIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjMiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjQiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnkiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0zICAgIHBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnknPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RmFtaWx5IEhpc3Rvcnk8L2xhYmVsPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlGYW1pbHlIaXN0b3J5Ij4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzddLmZhbWlseUhpc3RvcnkiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzddLmZhbWlseUhpc3RvcnkiIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbN10uZmFtaWx5SGlzdG9yeSI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgICAgIHBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIGNvbC1tZC0xMic+ICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29tbWVudHM8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMiPiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbN10uY29tbWVudHMiIG1heGxlbmd0aD0iMjAwMCIgcm93cz0iMiIgY29scz0iMTAwIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbN10uY29tbWVudHMiID48L3RleHRhcmVhPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s3XS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHJvdy1zdHJpcCBwdi1tZWQtaGlzdG9yeSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgcC1iLTEwICAiICAgICBpZD0icGF0aWVudE1lZEhpc3Rvcnktc2VjdGlvbi04Ij4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9InJvdy1hY3Rpb24gbnVtLWJnIj4gICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9InB2LW1lZC1oaXN0b3J5IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgY2xhc3M9InB2LWljIGljLXhzIG0tci01IHJlbW92ZS1zZWN0aW9uIHB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCI+ICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgcGF0aWVudE1lZEhpc3RvcnlfOCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPjwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIG0tdC0yMCBmb3JtLXB2IGZvcm0taG9yaXpvbnRhbCI+ICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiIGNsYXNzPScgY29sLW1kLTMgICB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50TWVkaWNhbEhpc3RvcnknID4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5NZWRpY2FsIEhpc3Rvcnk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5tZWRpY2FsSGlzdG9yeS5yZWFjdGlvbkNvZGVkIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IlNraW4gYmFjdGVyaWFsIGluZmVjdGlvbiIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXZhbHVlPSJTa2luIGJhY3RlcmlhbCBpbmZlY3Rpb24iIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzhdLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzhdLm1lZGljYWxIaXN0b3J5LmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA1Mjg5MSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzhdLm1lZGljYWxIaXN0b3J5LmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOF0ubWVkaWNhbEhpc3RvcnkuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0ic2tpbiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzhdLm1lZGljYWxIaXN0b3J5LmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5tZWRpY2FsSGlzdG9yeS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5tZWRpY2FsSGlzdG9yeS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOF0ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9InNraW4iIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5tZWRpY2FsSGlzdG9yeS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzhdLmludGVybmFsUm93SWQiIHZhbHVlPSIyOCIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzhdLmludGVybmFsUm93SWQiIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcGF0aWVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RhcnQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5zdGFydERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzhdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOF0uc3RhcnREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkVuZCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlFbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5lbmREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5lbmREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzhdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOF0uZW5kRGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmciIGNsYXNzPSIgcGF0aWVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db250aW51aW5nPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5jb250aW51aW5nIiBkYXRhLWZyb209ImNvbnRpbnVpbmdzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzhdLmNvbnRpbnVpbmciID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyMyIgPlllczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyNCIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RmFtaWx5SGlzdG9yeSIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgICAgcGF0aWVudE1lZGljYWxIaXN0b3J5RmFtaWx5SGlzdG9yeSc+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GYW1pbHkgSGlzdG9yeTwvbGFiZWw+ICAgICAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAnIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnkiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOF0uZmFtaWx5SGlzdG9yeSI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOF0uZmFtaWx5SGlzdG9yeSIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5mYW1pbHlIaXN0b3J5Ij48L2xhYmVsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCAgICAgcGF0aWVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMgY29sLW1kLTEyJz4gICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db21tZW50czwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyI+ICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5jb21tZW50cyIgbWF4bGVuZ3RoPSIyMDAwIiByb3dzPSIyIiBjb2xzPSIxMDAiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s4XS5jb21tZW50cyIgPjwvdGV4dGFyZWE+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4gICAgICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzhdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcm93LXN0cmlwIHB2LW1lZC1oaXN0b3J5IHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSBwLWItMTAgICIgICAgIGlkPSJwYXRpZW50TWVkSGlzdG9yeS1zZWN0aW9uLTkiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj48c3BhbiBjbGFzcz0icm93LWNvdW50IGJhZGdlLWluZGV4Ij48L3NwYW4+PC9kaXY+PGRpdiBjbGFzcz0icm93LWFjdGlvbiBudW0tYmciPiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtbWVkLWhpc3RvcnkiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiBjbGFzcz0icHYtaWMgaWMteHMgbS1yLTUgcmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIj4gICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBwYXRpZW50TWVkSGlzdG9yeV85IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICA8L2E+PC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIGZvcm0tcHYgZm9ybS1ob3Jpem9udGFsIj4gICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeSIgY2xhc3M9JyBjb2wtbWQtMyAgIHRlbXBsYXRlLWNvbnRyb2wgIHBhdGllbnRNZWRpY2FsSGlzdG9yeScgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk1lZGljYWwgSGlzdG9yeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Ij4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzldLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIG1heGxlbmd0aD0iMjUwIiB2YWx1ZT0iUmFzaCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXZhbHVlPSJSYXNoIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnkiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s5XS5tZWRpY2FsSGlzdG9yeS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s5XS5tZWRpY2FsSGlzdG9yeS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMzc4NDQiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s5XS5tZWRpY2FsSGlzdG9yeS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzldLm1lZGljYWxIaXN0b3J5LmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9InJhc2giIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s5XS5tZWRpY2FsSGlzdG9yeS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOV0ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOV0ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzldLm1lZGljYWxIaXN0b3J5LnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJyYXNoIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOV0ubWVkaWNhbEhpc3RvcnkucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s5XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMjkiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s5XS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOV0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s5XS5zdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOV0uc3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzldLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOV0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOV0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s5XS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzldLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIiBjbGFzcz0iIHBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmcgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29udGludWluZzwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOV0uY29udGludWluZyIgZGF0YS1mcm9tPSJjb250aW51aW5ncyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s5XS5jb250aW51aW5nIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjMiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjQiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnkiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0zICAgIHBhdGllbnRNZWRpY2FsSGlzdG9yeUZhbWlseUhpc3RvcnknPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RmFtaWx5IEhpc3Rvcnk8L2xhYmVsPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgJyBkYXRhLWlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlGYW1pbHlIaXN0b3J5Ij4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzldLmZhbWlseUhpc3RvcnkiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5tZWRpY2FsSGlzdG9yaWVzWzldLmZhbWlseUhpc3RvcnkiIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOV0uZmFtaWx5SGlzdG9yeSI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwYXRpZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgICAgIHBhdGllbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIGNvbC1tZC0xMic+ICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q29tbWVudHM8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGF0aWVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMiPiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOV0uY29tbWVudHMiIG1heGxlbmd0aD0iMjAwMCIgcm93cz0iMiIgY29scz0iMTAwIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50Lm1lZGljYWxIaXN0b3JpZXNbOV0uY29tbWVudHMiID48L3RleHRhcmVhPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnBhdGllbnQubWVkaWNhbEhpc3Rvcmllc1s5XS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUGF0aWVudCBQYXN0IERydWcgSGlzdG9yeSAtLT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiIGlkPSJwYXRpZW50UGFzdERydWdIaXN0b3J5Q29udGFpbmVyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIHJ4bWFpbi1jb250YWluZXItcm93Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclBhdGllbnQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcGF0aWVudERydWdIaXN0b3J5IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBzZWMtZGlzcGxheS10eHQgY2hpbGRTZWN0aW9uVGl0bGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFzdCBEcnVnIEhpc3RvcnkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNwdkRyYWdpbm5lclBhdGllbnRQYXN0RHJ1Z0hpc3RvcnkiIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNwdkRyYWdpbm5lclBhdGllbnRQYXN0RHJ1Z0hpc3RvcnkiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWFkZC1wYW5lbCBidG4tYWRkcm93LXRvcCBpYy1zbSBwdi1hZGQtcm93IiBkYXRhLWlubmVyLXNlYz0idHJ1ZSIgICAgICAgICAgIGRhdGEtdGFidWxhcj0iaW5uZXIiIHRpdGxlPSJBZGQgYW5vdGhlciBzZWN0aW9uIiAgICAgICAgICAgZGF0YS10YXJnZXQ9InB2aS1kcnVnLWhpc3RvcnkiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hZGQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYXRpZW50RHJ1Z0hpc3RvcnkiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlbXBsYXRlSWQ9InBhdGllbnREcnVnSGlzdG9yeVRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCBwdi1zZWN0aW9uIHVpLXNvcnRhYmxlIiBpZD0icHZEcmFnaW5uZXJQYXRpZW50UGFzdERydWdIaXN0b3J5Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyByb3ctc3RyaXAgcHYtZHJ1Zy1oaXN0b3J5ICBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgcC1iLTEwICAiICAgICBpZD0icGF0aWVudERydWdIaXN0b3J5LXNlY3Rpb24tMCI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPjxzcGFuIGNsYXNzPSJyb3ctY291bnQgYmFkZ2UtaW5kZXgiPjwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPSJyb3ctYWN0aW9uIG51bS1iZyI+ICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSJwdi1kcnVnLWhpc3RvcnkgIiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgY2xhc3M9InB2LWljIGljLXhzIG0tci01IHJlbW92ZS1zZWN0aW9uIHB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCI+ICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgcGF0aWVudERydWdIaXN0b3J5XzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgIDwvYT48L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLXQtMjAgZm9ybS1wdiBmb3JtLWhvcml6b250YWwiPiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeU5hbWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICBwYXRpZW50UGFzdERydWdIaXN0b3J5TmFtZSAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EcnVnIE5hbWU8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlOYW1lIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z05hbWUudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1maWVsZC1pZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeU5hbWUiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z05hbWUudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z05hbWUuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z05hbWUuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSI4IiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeVN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcGF0aWVudFBhc3REcnVnSGlzdG9yeVN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlTdGFydERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5zdGFydERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5zdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLnN0YXJ0RGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uc3RhcnREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeUVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlFbmREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RW5kIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlFbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlEcnVnSW5kaWNhdGlvbiIgY2xhc3M9JyBjb2wtbWQtMyAgIHRlbXBsYXRlLWNvbnRyb2wgIHBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlEcnVnSW5kaWNhdGlvbicgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRydWcgSW5kaWNhdGlvbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeURydWdJbmRpY2F0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5yZWFjdGlvbkNvZGVkIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtZmllbGRJZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeURydWdJbmRpY2F0aW9uIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z0luZGljYXRpb24ucmVwb3J0ZWRSZWFjdGlvbiIgLz4gICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giID48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwYXRpZW50UGFzdERydWdIaXN0b3J5RHJ1Z1JlYWN0aW9uIiBjbGFzcz0nIGNvbC1tZC0zICAgdGVtcGxhdGUtY29udHJvbCAgcGF0aWVudFBhc3REcnVnSGlzdG9yeURydWdSZWFjdGlvbicgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRydWcgUmVhY3Rpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InBhdGllbnRQYXN0RHJ1Z0hpc3RvcnlEcnVnUmVhY3Rpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5yZWFjdGlvbkNvZGVkIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtZmllbGRJZD0icGF0aWVudFBhc3REcnVnSGlzdG9yeURydWdSZWFjdGlvbiIgaWQ9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnUmVhY3Rpb24ucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGF0aWVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnUmVhY3Rpb24uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXRpZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLnJlcG9ydGVkUmVhY3Rpb24iIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgPC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnBhdGllbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1QYXJlbnQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciByeG1haW4tY29udGFpbmVyIHJ4bWFpbi1jb250YWluZXItdG9wIiAgICAgICAgIGlkPSJ2LXBhcmVudCI+ICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciBwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICA8aDQgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj4gICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1jYXNlIiAgICAgICAgICAgICAgICAgICBocmVmPSIjcGFyZW50RGV0YWlsIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBzZWMtZGlzcGxheS10eHQgc2VjdGlvblRpdGxlIj4gICAgICAgICAgICAgICAgICAgIFBhcmVudCAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgaWQ9InBhcmVudERldGFpbCIgICAgICAgICAgICAgY2xhc3M9InBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3ciICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtcGFyZW50IGZvcm0tcHYiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByb3cgZm9ybS1ob3Jpem9udGFsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYXJlbnROYW1lIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgcGFyZW50TmFtZSAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5OYW1lIC8gSW5pdGlhbHM8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhcmVudE5hbWUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucGFyZW50Lm5hbWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjYwIiBkYXRhLWZpZWxkLWlkPSJwYXJlbnROYW1lIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQubmFtZSIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icGFyZW50QWdlIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgcGFyZW50QWdlICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRhdGUgb2YgQmlydGgvIEFnZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icGFyZW50QWdlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBwYXJlbnRBZ2UgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5hZ2UudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwMDAiIGRhdGEtZmllbGQtaWQ9InBhcmVudEFnZSIgaWQ9InNhZmV0eURhdGEucGFyZW50LmFnZS52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50LmFnZS5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50LmFnZS5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PjxkaXYgaWQ9InBhcmVudFdlaWdodCIgY2xhc3M9J2NvbC1tZC0yICAgdGVtcGxhdGUtY29udHJvbCAgcGFyZW50V2VpZ2h0Jz4gICAgPGRpdiBjbGFzcz0ibm8tdHh0LW92ZXJmbG93IGlucHV0LWdyb3VwIGludGVybmFsIiBkYXRhLWlkPSJwYXJlbnRXZWlnaHQiPiAgICAgICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIj5XZWlnaHQ8L2xhYmVsPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQud2VpZ2h0IiB2YWx1ZT0iIiBtYXhsZW5ndGg9IjYiIGlkPSJzYWZldHlEYXRhLnBhcmVudC53ZWlnaHQiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuIGlubmVyLWlucHV0LWdyb3VwIHVuaXQiPiAgICAgICAgICAgIDxsYWJlbD5Vbml0PC9sYWJlbD4gICAgICAgICAgICA8c2VsZWN0IG5hbWU9InNhZmV0eURhdGEucGFyZW50LndlaWdodFVuaXQuaWQiIGRhdGEtdmFsdWU9IjQ0IiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGNsYXNzPSJidG4gZm9ybS1jb250cm9sIHNlbGVjdDIgbnVsbCBoYXMtZGVmYXVsdC12YWwgIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQud2VpZ2h0VW5pdC5pZCIgPg08b3B0aW9uIHZhbHVlPSI0NCIgPktnczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI0NSIgPkxiczwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+PC9kaXY+PGRpdiBpZD0icGFyZW50SGVpZ2h0IiBjbGFzcz0nY29sLW1kLTIgICB0ZW1wbGF0ZS1jb250cm9sICBwYXJlbnRIZWlnaHQnPiAgICA8ZGl2IGNsYXNzPSJuby10eHQtb3ZlcmZsb3cgaW5wdXQtZ3JvdXAgaW50ZXJuYWwiIGRhdGEtaWQ9InBhcmVudEhlaWdodCI+ICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkhlaWdodDwvbGFiZWw+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5oZWlnaHQiIHZhbHVlPSIiIG1heGxlbmd0aD0iMyIgaWQ9InNhZmV0eURhdGEucGFyZW50LmhlaWdodCIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1idG4gaW5uZXItaW5wdXQtZ3JvdXAgdW5pdCI+ICAgICAgICAgICAgPGxhYmVsPlVuaXQ8L2xhYmVsPiAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQuaGVpZ2h0VW5pdC5pZCIgZGF0YS12YWx1ZT0iNDYiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgY2xhc3M9ImJ0biBmb3JtLWNvbnRyb2wgc2VsZWN0MiBudWxsIGhhcy1kZWZhdWx0LXZhbCAiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5oZWlnaHRVbml0LmlkIiA+DTxvcHRpb24gdmFsdWU9IjQ2IiA+Q21zPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQ3IiA+SW5jaGVzPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icGFyZW50R2VuZGVyIiBjbGFzcz0iIHBhcmVudEdlbmRlciBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5HZW5kZXI8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhcmVudEdlbmRlciI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQuZ2VuZGVyLmlkIiBkYXRhLWZyb209ImdlbmRlcnMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQuZ2VuZGVyLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAwMDA0IiA+QWRkZWROZXc8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAwMDAwIiA+Q29uZmlkZW50PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMDAwMyIgPkNvcHlDb25mPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIiID5GZW1hbGU8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMSIgPk1hbGU8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNCIgPlVOSzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwYXJlbnRMbXBEYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwYXJlbnRMbXBEYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TE1QIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhcmVudExtcERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEucGFyZW50LmxtcERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucGFyZW50LmxtcERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQubG1wRGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5sbXBEYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj48ZGl2IGlkPSJwYXJlbnRBZGRpdGlvbmFsUmVsZXZhbnRNZWRpY2FsSGlzdG9yeSIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgICAgIHBhcmVudEFkZGl0aW9uYWxSZWxldmFudE1lZGljYWxIaXN0b3J5IGNvbC1tZC0xMic+ICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QWRkJiMzOTtsIFJlbGV2YW50IE1lZGljYWwgSGlzdG9yeTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXJlbnRBZGRpdGlvbmFsUmVsZXZhbnRNZWRpY2FsSGlzdG9yeSI+ICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5hZGRpdGlvbmFsUmVsZXZhbnRNZWRpY2FsSGlzdG9yeSIgbWF4bGVuZ3RoPSIxMDAwMCIgcm93cz0iMiIgY29scz0iMTAwIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQuYWRkaXRpb25hbFJlbGV2YW50TWVkaWNhbEhpc3RvcnkiID48L3RleHRhcmVhPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUgbS10LTUiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIiBpZD0iYWNjb3JkaW9uLWlubmVyUGFyZW50Ij4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIHBhcmVudCBNZWRpY2FsIEhpc3RvcnkgRGV0YWlscwkgLS0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciIgaWQ9InBhcmVudE1lZGljYWxIaXN0b3J5Q29udGFpbmVyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIHJ4bWFpbi1jb250YWluZXItcm93Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclBhcmVudCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNwYXJlbnRNZWRIaXN0b3J5IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBzZWMtZGlzcGxheS10eHQgY2hpbGRTZWN0aW9uVGl0bGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGFyZW50IE1lZGljYWwgSGlzdG9yeSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI3B2RHJhZ2lubmVyUGFyZW50TWVkaWNhbEhpc3RvcnkiIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNwdkRyYWdpbm5lclBhcmVudE1lZGljYWxIaXN0b3J5IiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzICI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1hZGQtcGFuZWwgYnRuLWFkZHJvdy10b3AgaWMtc20gcHYtYWRkLXJvdyIgZGF0YS1pbm5lci1zZWM9InRydWUiICAgICAgICAgICBkYXRhLXRhYnVsYXI9ImlubmVyIiB0aXRsZT0iQWRkIGFub3RoZXIgc2VjdGlvbiIgICAgICAgICAgIGRhdGEtdGFyZ2V0PSJwdmktbWVkLWhpc3RvcnktcGFyZW50Ij4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYWRkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icGFyZW50TWVkSGlzdG9yeSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVtcGxhdGVJZD0icGFyZW50TWVkSGlzdG9yeVRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHB2LXNlY3Rpb24gdWktc29ydGFibGUiIGlkPSJwdkRyYWdpbm5lclBhcmVudE1lZGljYWxIaXN0b3J5Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyByb3ctc3RyaXAgcHYtbWVkLWhpc3RvcnktcGFyZW50IHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSBwLWItMTAgICIgICAgIGlkPSJwYXJlbnRNZWRIaXN0b3J5LXNlY3Rpb24tMCI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPjxzcGFuIGNsYXNzPSJyb3ctY291bnQgYmFkZ2UtaW5kZXgiPjwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPSJyb3ctYWN0aW9uIG51bS1iZyI+ICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSJwdi1tZWQtaGlzdG9yeS1wYXJlbnQiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiBjbGFzcz0icHYtaWMgaWMteHMgbS1yLTUgcmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIj4gICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBwYXJlbnRNZWRIaXN0b3J5XzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgIDwvYT48L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLXQtMjAgZm9ybS1wdiBmb3JtLWhvcml6b250YWwiPiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icGFyZW50TWVkaWNhbEhpc3RvcnkiIGNsYXNzPScgY29sLW1kLTMgICB0ZW1wbGF0ZS1jb250cm9sICBwYXJlbnRNZWRpY2FsSGlzdG9yeScgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk1lZGljYWwgSGlzdG9yeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0icGFyZW50TWVkaWNhbEhpc3RvcnkiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5tZWRpY2FsSGlzdG9yeS5yZWFjdGlvbkNvZGVkIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtZmllbGRJZD0icGFyZW50TWVkaWNhbEhpc3RvcnkiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLm1lZGljYWxIaXN0b3J5LmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0ubWVkaWNhbEhpc3RvcnkuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5tZWRpY2FsSGlzdG9yeS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5tZWRpY2FsSGlzdG9yeS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5tZWRpY2FsSGlzdG9yeS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjkiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmludGVybmFsUm93SWQiIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InBhcmVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwYXJlbnRNZWRpY2FsSGlzdG9yeVN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhcmVudE1lZGljYWxIaXN0b3J5U3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5zdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5zdGFydERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwYXJlbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHBhcmVudE1lZGljYWxIaXN0b3J5RW5kRGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkVuZCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJwYXJlbnRNZWRpY2FsSGlzdG9yeUVuZERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5lbmREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uZW5kRGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwYXJlbnRNZWRpY2FsSGlzdG9yeUNvbnRpbnVpbmciIGNsYXNzPSIgcGFyZW50TWVkaWNhbEhpc3RvcnlDb250aW51aW5nIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvbnRpbnVpbmc8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhcmVudE1lZGljYWxIaXN0b3J5Q29udGludWluZyI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5jb250aW51aW5nIiBkYXRhLWZyb209ImNvbnRpbnVpbmdzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50Lm1lZGljYWxIaXN0b3JpZXNbMF0uY29udGludWluZyIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIzIiA+WWVzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjI0IiA+Tm88L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48ZGl2IGlkPSJwYXJlbnRNZWRpY2FsSGlzdG9yeUNvbW1lbnRzIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCAgICAgcGFyZW50TWVkaWNhbEhpc3RvcnlDb21tZW50cyBjb2wtbWQtMTInPiAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvbW1lbnRzPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InBhcmVudE1lZGljYWxIaXN0b3J5Q29tbWVudHMiPiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5jb21tZW50cyIgbWF4bGVuZ3RoPSIyMDAwIiByb3dzPSIyIiBjb2xzPSIxMDAiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5tZWRpY2FsSGlzdG9yaWVzWzBdLmNvbW1lbnRzIiA+PC90ZXh0YXJlYT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1heGxlbmd0aC1mZWVkYmFjayI+PC9zcGFuPiAgICAgICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wYXJlbnQubWVkaWNhbEhpc3Rvcmllc1swXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gcGFyZW50IFBhc3QgRHJ1ZyBIaXN0b3J5IC0tPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiIGlkPSJwYXJlbnREcnVnSGlzdG9yeUNvbnRhaW5lciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyByeG1haW4tY29udGFpbmVyLXJvdyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24taW5uZXJQYXJlbnQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcGFyZW50RHJ1Z0hpc3RvcnkiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIHNlYy1kaXNwbGF5LXR4dCBjaGlsZFNlY3Rpb25UaXRsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJlbnQgUGFzdCBEcnVnIEhpc3RvcnkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNwdkRyYWdpbm5lclBhcmVudFBhc3REcnVnSGlzdG9yeSIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyAiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3B2RHJhZ2lubmVyUGFyZW50UGFzdERydWdIaXN0b3J5IiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzICI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1hZGQtcGFuZWwgYnRuLWFkZHJvdy10b3AgaWMtc20gcHYtYWRkLXJvdyIgZGF0YS1pbm5lci1zZWM9InRydWUiICAgICAgICAgICBkYXRhLXRhYnVsYXI9ImlubmVyIiB0aXRsZT0iQWRkIGFub3RoZXIgc2VjdGlvbiIgICAgICAgICAgIGRhdGEtdGFyZ2V0PSJwdmktZHJ1Zy1oaXN0b3J5LXBhcmVudCI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFkZCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhcmVudERydWdIaXN0b3J5IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZW1wbGF0ZUlkPSJwYXJlbnREcnVnSGlzdG9yeVRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCBwdi1zZWN0aW9uIHVpLXNvcnRhYmxlIiBpZD0icHZEcmFnaW5uZXJQYXJlbnRQYXN0RHJ1Z0hpc3RvcnkiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHJvdy1zdHJpcCBwdi1kcnVnLWhpc3RvcnktcGFyZW50IHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSBwLWItMTAgICIgICAgIGlkPSJwYXJlbnREcnVnSGlzdG9yeS1zZWN0aW9uLTAiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj48c3BhbiBjbGFzcz0icm93LWNvdW50IGJhZGdlLWluZGV4Ij48L3NwYW4+PC9kaXY+PGRpdiBjbGFzcz0icm93LWFjdGlvbiBudW0tYmciPiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtZHJ1Zy1oaXN0b3J5LXBhcmVudCIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iIGNsYXNzPSJwdi1pYyBpYy14cyBtLXItNSByZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIHBhcmVudERydWdIaXN0b3J5XzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgIDwvYT48L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLXQtMjAgZm9ybS1wdiBmb3JtLWhvcml6b250YWwiPiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icGFyZW50UGFzdERydWdIaXN0b3J5TmFtZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHBhcmVudFBhc3REcnVnSGlzdG9yeU5hbWUgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RHJ1ZyBOYW1lPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlOYW1lIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnTmFtZS52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjUwIiBkYXRhLWZpZWxkLWlkPSJwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlOYW1lIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z05hbWUudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnTmFtZS5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdOYW1lLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMCIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icGFyZW50UGFzdERydWdIaXN0b3J5U3RhcnREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlTdGFydERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5TdGFydCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlTdGFydERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLnN0YXJ0RGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5zdGFydERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlFbmREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlFbmREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RW5kIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InBhcmVudFBhc3REcnVnSGlzdG9yeUVuZERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZW5kRGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5lbmREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlEcnVnSW5kaWNhdGlvbiIgY2xhc3M9JyBjb2wtbWQtMyAgIHRlbXBsYXRlLWNvbnRyb2wgIHBhcmVudFBhc3REcnVnSGlzdG9yeURydWdJbmRpY2F0aW9uJyA+ICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RHJ1ZyBJbmRpY2F0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJwYXJlbnRQYXN0RHJ1Z0hpc3RvcnlEcnVnSW5kaWNhdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5yZWFjdGlvbkNvZGVkIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtZmllbGRJZD0icGFyZW50UGFzdERydWdIaXN0b3J5RHJ1Z0luZGljYXRpb24iIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z0luZGljYXRpb24ubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z0luZGljYXRpb24uaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z0luZGljYXRpb24uaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdJbmRpY2F0aW9uLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnSW5kaWNhdGlvbi5yZXBvcnRlZFJlYWN0aW9uIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InBhcmVudFBhc3REcnVnSGlzdG9yeURydWdSZWFjdGlvbiIgY2xhc3M9JyBjb2wtbWQtMyAgIHRlbXBsYXRlLWNvbnRyb2wgIHBhcmVudFBhc3REcnVnSGlzdG9yeURydWdSZWFjdGlvbicgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRydWcgUmVhY3Rpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InBhcmVudFBhc3REcnVnSGlzdG9yeURydWdSZWFjdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnUmVhY3Rpb24ucmVhY3Rpb25Db2RlZCIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InBhcmVudFBhc3REcnVnSGlzdG9yeURydWdSZWFjdGlvbiIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnUmVhY3Rpb24ubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnUmVhY3Rpb24uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kcnVnUmVhY3Rpb24uaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucGFyZW50LnBhc3REcnVnSGlzdG9yaWVzWzBdLmRydWdSZWFjdGlvbi5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wYXJlbnQucGFzdERydWdIaXN0b3JpZXNbMF0uZHJ1Z1JlYWN0aW9uLnJlcG9ydGVkUmVhY3Rpb24iIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgPC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnBhcmVudC5wYXN0RHJ1Z0hpc3Rvcmllc1swXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQcm9kdWN0cyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIHJ4bWFpbi1jb250YWluZXIgcnhtYWluLWNvbnRhaW5lci10b3AiICAgICAgICAgaWQ9InYtcHJvZHVjdHMiPiAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1yb3cgcnhtYWluLWNvbnRhaW5lci1oZWFkZXIgcGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgPGg0IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+ICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24tY2FzZSIgICAgICAgICAgICAgICAgICAgaHJlZj0iI3Byb2R1Y3QiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBjbGFzcz0iY29sbGFwc2VkIHNlYy1kaXNwbGF5LXR4dCBzZWN0aW9uVGl0bGUiPiAgICAgICAgICAgICAgICAgICAgUHJvZHVjdChzKSAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNhY2NvcmRpb24tcHJvZHVjdCIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyAiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI2FjY29yZGlvbi1wcm9kdWN0IiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzICI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1hZGQtcGFuZWwgYnRuLWFkZHJvdy10b3AgaWMtc20gIiBkYXRhLWlubmVyLXNlYz0iIiAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJmYWxzZSIgdGl0bGU9IkFkZCBhbm90aGVyIHNlY3Rpb24iICAgICAgICAgICBkYXRhLXRhcmdldD0icHZpLXByb2R1Y3QiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hZGQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgICAgICAgICA8L2g0PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0IiBkYXRhLXRlbXBsYXRlSWQ9InByb2R1Y3RzVGVtcGxhdGUiICAgICAgICAgICAgIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBwdi1tYWluIGNvbGxhcHNlIHByb2R1Y3Qtc2VjIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3ciICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtcHJvZHVjdCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUgbS1iLTAgcm93Ij4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIHB2LXNlY3Rpb24gbS1iLTAgcHYtbmVzdGVkLWRyYWdnYWJsZS1saXN0IiBpZD0icHJvZHVjdC1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICIgaWQ9InByb2R1Y3Qtc2VjdGlvbi0wIj4gICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtaGVhZGVyPSJQcm9kdWN0LVNlY3Rpb24iIGRhdGEtcGFyZW50PSIjcHJvZHVjdC1zZWN0aW9uIiAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdC1zZWN0aW9uXzAiIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSByb3ctY291bnQgYmFkZ2UtaW5kZXgiPjE8L3NwYW4+UHJvZHVjdC1TZWN0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbmZpZ3VyZUZpZWxkcyBwdi1zdWJoZWFkLWNvbmZpZyI+ICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBwcm9kdWN0LWRlbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBwcm9kdWN0XzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgaWQ9InByb2R1Y3Qtc2VjdGlvbl8wIiBjbGFzcz0icGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gaW5uZXItcmVwZWF0YWJsZSBwcm9kdWN0LXNlYyIgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSB1aS1uZXN0ZWQtc29ydGFibGUtaGFuZGxlICI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBmb3JtLXB2Ij4gICAgICAgICAgICAgICAgICAgIDxkaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RMaWNlbnNlIiBjbGFzcz0nIGNvbC1tZC00IHJlcXVpcmVkICB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0TGljZW5zZScgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlByb2R1Y3QgTmFtZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0icHJvZHVjdExpY2Vuc2UiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgcHJvZHVjdE5hbWVCcm93c2VyICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmxpY2Vuc2UudmFsdWUiIG1heGxlbmd0aD0iMjUwIiB2YWx1ZT0iUnggQ0lTUExBVElOIElEIiBkYXRhLW1hbmRhdG9yeT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci12YWx1ZT0iUnggQ0lTUExBVElOIElEIiBkYXRhLWJyb3dzZXItdHlwZT0icHJvZHVjdCIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtZmllbGRJZD0icHJvZHVjdExpY2Vuc2UiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmxpY2Vuc2UudmFsdWUiIC8+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ubGljZW5zZS5pZCIgdmFsdWU9IjEwMDM4MSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ubGljZW5zZS5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmlkIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMjcxIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnNlYXJjaCI+ICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3REb3NhZ2VGb3JtIiBjbGFzcz0iIHByb2R1Y3REb3NhZ2VGb3JtIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRvc2FnZSBGb3JtPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zYWdlRm9ybSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NhZ2VGb3JtLmlkIiBkYXRhLWZyb209ImRvc2FnZUZvcm0iIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iNDgwIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NhZ2VGb3JtLmlkIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RSb2xlIiBjbGFzcz0iIHByb2R1Y3RSb2xlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiByZXF1aXJlZCAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Um9sZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdFJvbGUiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBwcm9kdWN0Um9sZUlkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5yb2xlLmlkIiBkYXRhLWZyb209InJvbGVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0idHJ1ZSIgZGF0YS12YWx1ZT0iMjkiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnJvbGUuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdE9idGFpbkNvdW50cnkiIGNsYXNzPSIgcHJvZHVjdE9idGFpbkNvdW50cnkgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+T2J0YWluIENvdW50cnk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RPYnRhaW5Db3VudHJ5Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgY291bnRyeSBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ub2J0YWluQ291bnRyeS5pZCIgZGF0YS1mcm9tPSJjb3VudHJpZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5vYnRhaW5Db3VudHJ5LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0QXV0aE51bWJlciIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RBdXRoTnVtYmVyICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkF1dGguIE51bWJlcjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEF1dGhOdW1iZXIiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uYXV0aE51bWJlciIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMzUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RBdXRoTnVtYmVyIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5hdXRoTnVtYmVyIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEF1dGhDb3VudHJ5IiBjbGFzcz0iIHByb2R1Y3RBdXRoQ291bnRyeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BdXRoLiBDb3VudHJ5PC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0QXV0aENvdW50cnkiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBjb3VudHJ5IHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5hdXRoQ291bnRyeS5pZCIgZGF0YS1mcm9tPSJjb3VudHJpZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5hdXRoQ291bnRyeS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RNYW51ZmFjdHVyZXIiIGNsYXNzPSIgcHJvZHVjdE1hbnVmYWN0dXJlciBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BdXRoLiBIb2xkZXI8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RNYW51ZmFjdHVyZXIiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uYXV0aEhvbGRlci5pZE9yVmFsdWUiIGRhdGEtdGFnPSJ0cnVlIiBkYXRhLWZyb209Im1hbnVmYWN0dXJlcnMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5hdXRoSG9sZGVyLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkN1bXVsYXRpdmUgRG9zZSB0byBGaXJzdCBSZWFjdGlvbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iMTAiIGRhdGEtdW5pdExpc3Q9ImRvc2FnZS11bml0LWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uY3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24udmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwIiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0Q3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24iIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5jdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbi5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uY3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24uaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXhwb3N1cmVHZXN0YXRpb25QZXJpb2QiIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXhwb3N1cmVHZXN0YXRpb25QZXJpb2QgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RXhwb3N1cmUgR2VzdGF0aW9uIFBlcmlvZDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iMyIgZGF0YS11bml0TGlzdD0iZ2VzdGF0aW9uLXBlcmlvZC1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIzIiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXhwb3N1cmVHZXN0YXRpb25QZXJpb2QiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5leHBvc3VyZUdlc3RhdGlvblBlcmlvZC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZXhwb3N1cmVHZXN0YXRpb25QZXJpb2QuaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEFjdGlvblRha2VuIiBjbGFzcz0iIHByb2R1Y3RBY3Rpb25UYWtlbiBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BY3Rpb24gVGFrZW48L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RBY3Rpb25UYWtlbiI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5hY3Rpb25UYWtlbi5pZCIgZGF0YS1mcm9tPSJhY3Rpb25UYWtlbiIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmFjdGlvblRha2VuLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV4cGlyYXRpb25EYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwcm9kdWN0RXhwaXJhdGlvbkRhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FeHBpcmF0aW9uIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InByb2R1Y3RFeHBpcmF0aW9uRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgZnV0dXJlRGF0ZXNBbGxvd2VkIGFsbG93RGF0ZVdpdGhvdXRUaW1lICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5leHBpcmF0aW9uRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5leHBpcmF0aW9uRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmV4cGlyYXRpb25EYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZXhwaXJhdGlvbkRhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0UmVwbGFjZW1lbnRSZXF1aXJlZCIgY2xhc3M9IiBwcm9kdWN0UmVwbGFjZW1lbnRSZXF1aXJlZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZXBsYWNlbWVudCBSZXF1aXJlZDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdFJlcGxhY2VtZW50UmVxdWlyZWQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucmVwbGFjZW1lbnRSZXF1aXJlZC5pZCIgZGF0YS1mcm9tPSJyZXBsYWNlbWVudFJlcXVpcmVkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucmVwbGFjZW1lbnRSZXF1aXJlZC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMjMiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAyNCIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RSZXR1cm5SZXF1aXJlZCIgY2xhc3M9IiBwcm9kdWN0UmV0dXJuUmVxdWlyZWQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmV0dXJuIFJlcXVpcmVkPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0UmV0dXJuUmVxdWlyZWQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucmV0dXJuUmVxdWlyZWQuaWQiIGRhdGEtZnJvbT0icmV0dXJuUmVxdWlyZWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5yZXR1cm5SZXF1aXJlZC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMzMiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAzNCIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RSZWZ1bmRSZXF1ZXN0ZWQiIGNsYXNzPSIgcHJvZHVjdFJlZnVuZFJlcXVlc3RlZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWZ1bmQgUmVxdWVzdGVkPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0UmVmdW5kUmVxdWVzdGVkIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnJlZnVuZFJlcXVlc3RlZC5pZCIgZGF0YS1mcm9tPSJyZWZ1bmRSZXF1ZXN0ZWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5yZWZ1bmRSZXF1ZXN0ZWQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDM1IiA+WWVzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMzYiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RCbGluZGVkIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgICBwcm9kdWN0QmxpbmRlZCc+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5CbGluZGVkPC9sYWJlbD4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICcgZGF0YS1pZD0icHJvZHVjdEJsaW5kZWQiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS5wcm9kdWN0c1swXS5ibGluZGVkIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmJsaW5kZWQiIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5ibGluZGVkIj48L2xhYmVsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0QWRkbG5EcnVnSW5mb3JtYXRpb24iIGNsYXNzPSIgcHJvZHVjdEFkZGxuRHJ1Z0luZm9ybWF0aW9uIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BZGQmIzM5O2wgRHJ1ZyBJbmZvPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0QWRkbG5EcnVnSW5mb3JtYXRpb24iPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0Mi1ib3ggIG11bHRpU2VsZWN0U2VsZWN0MkZpZWxkIHdyYXBwZWQtbXVsdGlzZWxlY3QgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uYWRkaXRpb25hbERydWdJbmZvLmlkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iQ2hvb3NlIiBtdWx0aXBsZT0ibXVsdGlwbGUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5hZGRpdGlvbmFsRHJ1Z0luZm8uaWQiID4NPG9wdGlvbiB2YWx1ZT0iMzMiID5Db3VudGVyZmVpdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzNCIgPk92ZXJkb3NlPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjM1IiA+RHJ1ZyB0YWtlbiBieSB0aGUgZmF0aGVyPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjM2IiA+RHJ1ZyB0YWtlbiBiZXlvbmQgZXhwaXJ5IGRhdGU8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzciID5CYXRjaCBhbmQgbG90IHRlc3RlZCBhbmQgZm91bmQgd2l0aGluIHNwZWNpZmljYXRpb25zPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjM4IiA+QmF0Y2ggYW5kIGxvdCB0ZXN0ZWQgYW5kIGZvdW5kIG5vdCB3aXRoaW4gc3BlY2lmaWNhdGlvbnM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzkiID5NZWRpY2F0aW9uIGVycm9yPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQwIiA+TWlzdXNlPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQxIiA+QWJ1c2U8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNDIiID5PY2N1cGF0aW9uYWwgZXhwb3N1cmU8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNDMiID5PZmYgbGFiZWwgdXNlPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+PGRpdiBpZD0icHJvZHVjdEFkZGl0aW9uYWxEcnVnSW5mb05vdGVzIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCAgICAgcHJvZHVjdEFkZGl0aW9uYWxEcnVnSW5mb05vdGVzIGNvbC1tZC0xMic+ICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QWRkJiMzOTtsIERydWcgSW5mbyBOb3RlczwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0QWRkaXRpb25hbERydWdJbmZvTm90ZXMiPiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5hZGRpdGlvbmFsRHJ1Z0luZm9Ob3RlcyIgbWF4bGVuZ3RoPSIyMDAwIiByb3dzPSIyIiBjb2xzPSIxMDAiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmFkZGl0aW9uYWxEcnVnSW5mb05vdGVzIiA+PC90ZXh0YXJlYT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1heGxlbmd0aC1mZWVkYmFjayI+PC9zcGFuPiAgICAgICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8IS0tIFN1YiBTZWN0aW9ucyBQcm9kdWN0cyAtLT4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUgaW5uZXJTZWN0aW9uVGFibGUgIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1pbm5lclByb2R1Y3RzXzBfIj4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFN1YnN0YW5jZXMgLS0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgcngtY29sLXRhYmxlIG92ZXJyaWRlLWNvbC1wYWRkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24taW5uZXJQcm9kdWN0c18wXyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdFN1YnN0YW5jZXNfMCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c18wXyIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdWJzdGFuY2UocykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI2FjY29yZGlvbi1wcm9kdWN0LWlubmVyc3Vic3RhbmNlXzBfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI2FjY29yZGlvbi1wcm9kdWN0LWlubmVyc3Vic3RhbmNlXzBfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdFN1YnN0YW5jZXNfMCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlbXBsYXRlSWQ9InByb2R1Y3RTdWJzdGFuY2VzVGVtcGxhdGUiIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgIGlubmVyLXJlcGVhdGFibGUgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IgcGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkIGNsYXNzPSJ1bmhpZ2hsaWdodFNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0SW5ncmVkaWVudHMnIGNsYXNzPSdjb2wtbWQtNiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE5hbWUgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLWluZ3JlZGllbnREb3NhZ2VVbml0JyBjbGFzcz0nY29sLW1kLTYgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTdHJlbmd0aCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFidWxhcj0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24tcHJvZHVjdC1pbm5lcnN1YnN0YW5jZV8wXyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBpbm5lci1yZXBlYXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icHJvZHVjdFN1YnN0YW5jZXNfMF8tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb2R1Y3RJbmdyZWRpZW50cyIgY2xhc3M9IiBwcm9kdWN0SW5ncmVkaWVudHMgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmdyZWRpZW50cyI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItYWpheCB3cmFwcGVkLW11bHRpc2VsZWN0ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmluZ3JlZGllbnRzWzBdLm5hbWUuaWQiIGRhdGEtZnJvbT0iIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS11cmw9Ii9jYXNlRW50cnkvc2VhcmNoSW5ncmVkaWVudHMiIGRhdGEtdmFsdWU9IjM1MzkiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmluZ3JlZGllbnRzWzBdLm5hbWUuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmluZ3JlZGllbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSI0NiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uaW5ncmVkaWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPiAgICA8dGQgaWQ9ImluZ3JlZGllbnREb3NhZ2VVbml0IiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgaW5ncmVkaWVudERvc2FnZVVuaXQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iaW5ncmVkaWVudERvc2FnZVVuaXQiPiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjEwIiBkYXRhLXVuaXRMaXN0PSJzdHJlbmd0aC11bml0LWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uaW5ncmVkaWVudHNbMF0uc3RyZW5ndGgudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwIiBkYXRhLWZpZWxkLWlkPSJpbmdyZWRpZW50RG9zYWdlVW5pdCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uaW5ncmVkaWVudHNbMF0uc3RyZW5ndGgudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5pbmdyZWRpZW50c1swXS5zdHJlbmd0aC5pZCIgLz4gICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdHNbMF0uaW5ncmVkaWVudHNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPjxpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdFN1YnN0YW5jZXNfMCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFByb2R1Y3QgSW5kaWNhdGlvbiAtLT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiByeC1jb2wtdGFibGUgb3ZlcnJpZGUtY29sLXBhZGRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2R1Y3RzXzBfIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c18wXyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdEluZGljYXRpb25fMCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZHVjdCBJbmRpY2F0aW9uKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNhY2NvcmRpb24tcHJvZHVjdC1pbm5lcmluZGljYXRpb25fMF8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJpbmRpY2F0aW9uXzBfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEluZGljYXRpb25fMCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlbXBsYXRlSWQ9InByb2R1Y3RJbmRpY2F0aW9uVGVtcGxhdGUiIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgIGlubmVyLXJlcGVhdGFibGUgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IgcGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3QtaW5kaWNhdGlvbiBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0idW5oaWdobGlnaHRTZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkJyBjbGFzcz0nY29sLW1kLTYgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBJbmRpY2F0aW9uIChSZXBvcnRlZCkgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RJbmRpY2F0aW9uQ29kZWQnIGNsYXNzPSdjb2wtbWQtNiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IEluZGljYXRpb24gKENvZGVkKSA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFidWxhcj0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIj48aSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24tcHJvZHVjdC1pbm5lcmluZGljYXRpb25fMF8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgIHB2LXNlY3Rpb24tcmVjb3JkIGlubmVyLXJlcGVhdGFibGUgdWktc29ydGFibGUtaGFuZGxlICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwcm9kdWN0SW5kaWNhdGlvbl8wXy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTYgIHRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdEluZGljYXRpb25SZXBvcnRlZCI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uUmVwb3J0ZWQiPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uUmVwb3J0ZWQiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgLz4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucHJvZHVjdEluZGljYXRpb25zWzBdLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucHJvZHVjdEluZGljYXRpb25zWzBdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0ucHJvZHVjdEluZGljYXRpb25zWzBdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTMiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8dGQgaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0SW5kaWNhdGlvbkNvZGVkICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiPiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVhY3Rpb25Db2RlZCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTAwMCIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEluZGljYXRpb25Db2RlZCIgcmVhZG9ubHk9InJlYWRvbmx5IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICA8L2Rpdj48L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0c1swXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPjxpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdEluZGljYXRpb25fMCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIERvc2UgSW5mb3JtYXRpb24gIC0tPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLWItMCBvdmVycmlkZS1jb2wtcGFkZGluZy1mdWxsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHJ4bWFpbi1jb250YWluZXIgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIHJ4bWFpbi1jb250YWluZXItcm93Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2R1Y3RzXzBfIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c18wXyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdERvc2VfMCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9zZSBJbmZvcm1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcHZpSW5uZXJQcm9kdWN0RG9zZVJlY29yZHNfMF8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiNwcm9kdWN0RG9zZV8wXyIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcHZpSW5uZXJQcm9kdWN0RG9zZVJlY29yZHNfMF8iIGRhdGEtYW5jaG9yZGl2PSIjcHJvZHVjdERvc2VfMF8iIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1hZGQtcGFuZWwgYnRuLWFkZHJvdy10b3AgaWMtc20gcHYtYWRkLXJvdyIgZGF0YS1pbm5lci1zZWM9InRydWUiICAgICAgICAgICBkYXRhLXRhYnVsYXI9ImlubmVyIiB0aXRsZT0iQWRkIGFub3RoZXIgc2VjdGlvbiIgICAgICAgICAgIGRhdGEtdGFyZ2V0PSJwdi1pbm5lclByb2R1Y3REb3NlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYWRkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdERvc2VfMCIgZGF0YS10ZW1wbGF0ZUlkPSJwcm9kdWN0RG9zZVRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlICBpbm5lci1yZXBlYXRhYmxlIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lcmRvc2UtY29udGFpbmVyIHB2LWRyYWdnYWJsZS1saXN0IHB2LXNlY3Rpb24gdWktc29ydGFibGUgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InB2aUlubmVyUHJvZHVjdERvc2VSZWNvcmRzXzBfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1zZWN0aW9uLXJlY29yZCBpbm5lci1yZXBlYXRhYmxlIHB2LWlubmVyUHJvZHVjdERvc2UgcC0xMCB1aS1zb3J0YWJsZS1oYW5kbGUgcC1iLTEwIHJvdyByb3ctc3RyaXAgICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InByb2R1Y3REb3NlXzBfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9InJvdy1hY3Rpb24gbnVtLWJnIj4gICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iIGNsYXNzPSJwdi1pYyBpYy14cyBtLXItNSByZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIHByb2R1Y3RfMCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIG0tYi0xMCBmb3JtLXB2IGZvcm0taG9yaXpvbnRhbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlSW5mb3JtYXRpb24iIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlSW5mb3JtYXRpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RG9zZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VJbmZvcm1hdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjgiIGRhdGEtdW5pdExpc3Q9ImRvc2FnZS11bml0LWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kb3NlLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI4IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RG9zZUluZm9ybWF0aW9uIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRvc2UudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZG9zZS5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kb3NlLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTQiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUZyZXF1ZW5jeSIgY2xhc3M9IiBwcm9kdWN0RG9zZUZyZXF1ZW5jeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZyZXF1ZW5jeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VGcmVxdWVuY3kiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5mcmVxdWVuY3kuaWQiIGRhdGEtZnJvbT0iZG9zYWdlRnJlcXVlbmN5IiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5mcmVxdWVuY3kuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZVN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdERvc2VTdGFydERhdGUgIGNvbC1tZC0xLWhhbGYgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InByb2R1Y3REb3NlU3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlRW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdERvc2VFbmREYXRlICBjb2wtbWQtMS1oYWxmICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icHJvZHVjdERvc2VFbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlRHVyYXRpb24iIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlRHVyYXRpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RHVyYXRpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlRHVyYXRpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VEdXJhdGlvbiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlQmF0Y2hOdW1iZXIiIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlQmF0Y2hOdW1iZXIgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QmF0Y2gvTG90IE51bWJlcjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VCYXRjaE51bWJlciI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmJhdGNoTnVtYmVyIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIzNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VCYXRjaE51bWJlciIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uZG9zZUluZm9ybWF0aW9uc1swXS5iYXRjaE51bWJlciIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlUm91dGUiIGNsYXNzPSIgcHJvZHVjdERvc2VSb3V0ZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJvdXRlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZVJvdXRlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucm91dGUuaWRPclZhbHVlIiBkYXRhLXRhZz0idHJ1ZSIgZGF0YS1mcm9tPSJyb3V0ZSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucm91dGUuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdERvc2VQYXJlbnRSb3V0ZSIgY2xhc3M9IiBwcm9kdWN0RG9zZVBhcmVudFJvdXRlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMS1oYWxmICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UGFyZW50IFJvdXRlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZVBhcmVudFJvdXRlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucGFyZW50Um91dGUuaWRPclZhbHVlIiBkYXRhLXRhZz0idHJ1ZSIgZGF0YS1mcm9tPSJyb3V0ZSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucGFyZW50Um91dGUuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZURlc2NyaXB0aW9uIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdERvc2VEZXNjcmlwdGlvbiAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Eb3NlIERlc2NyaXB0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZURlc2NyaXB0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZGVzY3JpcHRpb24iIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3REb3NlRGVzY3JpcHRpb24iIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZGVzY3JpcHRpb24iIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0c1swXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAiIGlkPSJwcm9kdWN0LXNlY3Rpb24tMSI+ICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWhlYWRlcj0iUHJvZHVjdC1TZWN0aW9uIiBkYXRhLXBhcmVudD0iI3Byb2R1Y3Qtc2VjdGlvbiIgICAgICAgICAgICAgICAgICAgaHJlZj0iI3Byb2R1Y3Qtc2VjdGlvbl8xIiBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmFkZ2Ugcm93LWNvdW50IGJhZGdlLWluZGV4Ij4yPC9zcGFuPlByb2R1Y3QtU2VjdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb25maWd1cmVGaWVsZHMgcHYtc3ViaGVhZC1jb25maWciPiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gcHJvZHVjdC1kZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdF8xIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0LXNlY3Rpb25fMSIgY2xhc3M9InBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIGlubmVyLXJlcGVhdGFibGUgcHJvZHVjdC1zZWMiICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgdWktbmVzdGVkLXNvcnRhYmxlLWhhbmRsZSAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgZm9ybS1wdiI+ICAgICAgICAgICAgICAgICAgICA8ZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0TGljZW5zZSIgY2xhc3M9JyBjb2wtbWQtNCByZXF1aXJlZCAgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdExpY2Vuc2UnID4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Qcm9kdWN0IE5hbWU8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InByb2R1Y3RMaWNlbnNlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIHByb2R1Y3ROYW1lQnJvd3NlciAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5saWNlbnNlLnZhbHVlIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IlJ4IE1FVEZPUk1JTiIgZGF0YS1tYW5kYXRvcnk9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdmFsdWU9IlJ4IE1FVEZPUk1JTiIgZGF0YS1icm93c2VyLXR5cGU9InByb2R1Y3QiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InByb2R1Y3RMaWNlbnNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5saWNlbnNlLnZhbHVlIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmxpY2Vuc2UuaWQiIHZhbHVlPSIxMDAzODUiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmxpY2Vuc2UuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5pZCIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDI1OCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMzAiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmludGVybmFsUm93SWQiIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zYWdlRm9ybSIgY2xhc3M9IiBwcm9kdWN0RG9zYWdlRm9ybSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Eb3NhZ2UgRm9ybTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2FnZUZvcm0iPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zYWdlRm9ybS5pZCIgZGF0YS1mcm9tPSJkb3NhZ2VGb3JtIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjEiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2FnZUZvcm0uaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdFJvbGUiIGNsYXNzPSIgcHJvZHVjdFJvbGUgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yIHJlcXVpcmVkICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Sb2xlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0Um9sZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHByb2R1Y3RSb2xlSWQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLnJvbGUuaWQiIGRhdGEtZnJvbT0icm9sZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJ0cnVlIiBkYXRhLXZhbHVlPSIyOSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0ucm9sZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0T2J0YWluQ291bnRyeSIgY2xhc3M9IiBwcm9kdWN0T2J0YWluQ291bnRyeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5PYnRhaW4gQ291bnRyeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdE9idGFpbkNvdW50cnkiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBjb3VudHJ5IHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5vYnRhaW5Db3VudHJ5LmlkIiBkYXRhLWZyb209ImNvdW50cmllcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLm9idGFpbkNvdW50cnkuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RBdXRoTnVtYmVyIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEF1dGhOdW1iZXIgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QXV0aC4gTnVtYmVyPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0QXV0aE51bWJlciI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5hdXRoTnVtYmVyIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIzNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEF1dGhOdW1iZXIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmF1dGhOdW1iZXIiIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0QXV0aENvdW50cnkiIGNsYXNzPSIgcHJvZHVjdEF1dGhDb3VudHJ5IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkF1dGguIENvdW50cnk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RBdXRoQ291bnRyeSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIGNvdW50cnkgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmF1dGhDb3VudHJ5LmlkIiBkYXRhLWZyb209ImNvdW50cmllcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmF1dGhDb3VudHJ5LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdE1hbnVmYWN0dXJlciIgY2xhc3M9IiBwcm9kdWN0TWFudWZhY3R1cmVyIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkF1dGguIEhvbGRlcjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdE1hbnVmYWN0dXJlciI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5hdXRoSG9sZGVyLmlkT3JWYWx1ZSIgZGF0YS10YWc9InRydWUiIGRhdGEtZnJvbT0ibWFudWZhY3R1cmVycyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmF1dGhIb2xkZXIuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0Q3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24iIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0Q3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q3VtdWxhdGl2ZSBEb3NlIHRvIEZpcnN0IFJlYWN0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0Q3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSIxMCIgZGF0YS11bml0TGlzdD0iZG9zYWdlLXVuaXQtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5jdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbi52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTAiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RDdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uY3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24udmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5jdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbi5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFeHBvc3VyZUdlc3RhdGlvblBlcmlvZCIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFeHBvc3VyZUdlc3RhdGlvblBlcmlvZCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FeHBvc3VyZSBHZXN0YXRpb24gUGVyaW9kPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXhwb3N1cmVHZXN0YXRpb25QZXJpb2QiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSIzIiBkYXRhLXVuaXRMaXN0PSJnZXN0YXRpb24tcGVyaW9kLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZXhwb3N1cmVHZXN0YXRpb25QZXJpb2QudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjMiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFeHBvc3VyZUdlc3RhdGlvblBlcmlvZCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZXhwb3N1cmVHZXN0YXRpb25QZXJpb2QudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5leHBvc3VyZUdlc3RhdGlvblBlcmlvZC5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0QWN0aW9uVGFrZW4iIGNsYXNzPSIgcHJvZHVjdEFjdGlvblRha2VuIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkFjdGlvbiBUYWtlbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEFjdGlvblRha2VuIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmFjdGlvblRha2VuLmlkIiBkYXRhLWZyb209ImFjdGlvblRha2VuIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uYWN0aW9uVGFrZW4uaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXhwaXJhdGlvbkRhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHByb2R1Y3RFeHBpcmF0aW9uRGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkV4cGlyYXRpb24gRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icHJvZHVjdEV4cGlyYXRpb25EYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBmdXR1cmVEYXRlc0FsbG93ZWQgYWxsb3dEYXRlV2l0aG91dFRpbWUgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmV4cGlyYXRpb25EYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmV4cGlyYXRpb25EYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZXhwaXJhdGlvbkRhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5leHBpcmF0aW9uRGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RSZXBsYWNlbWVudFJlcXVpcmVkIiBjbGFzcz0iIHByb2R1Y3RSZXBsYWNlbWVudFJlcXVpcmVkIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlcGxhY2VtZW50IFJlcXVpcmVkPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0UmVwbGFjZW1lbnRSZXF1aXJlZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5yZXBsYWNlbWVudFJlcXVpcmVkLmlkIiBkYXRhLWZyb209InJlcGxhY2VtZW50UmVxdWlyZWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5yZXBsYWNlbWVudFJlcXVpcmVkLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAyMyIgPlllczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDI0IiA+Tm88L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdFJldHVyblJlcXVpcmVkIiBjbGFzcz0iIHByb2R1Y3RSZXR1cm5SZXF1aXJlZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZXR1cm4gUmVxdWlyZWQ8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RSZXR1cm5SZXF1aXJlZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5yZXR1cm5SZXF1aXJlZC5pZCIgZGF0YS1mcm9tPSJyZXR1cm5SZXF1aXJlZCIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLnJldHVyblJlcXVpcmVkLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAzMyIgPlllczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDM0IiA+Tm88L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdFJlZnVuZFJlcXVlc3RlZCIgY2xhc3M9IiBwcm9kdWN0UmVmdW5kUmVxdWVzdGVkIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlZnVuZCBSZXF1ZXN0ZWQ8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RSZWZ1bmRSZXF1ZXN0ZWQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0ucmVmdW5kUmVxdWVzdGVkLmlkIiBkYXRhLWZyb209InJlZnVuZFJlcXVlc3RlZCIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLnJlZnVuZFJlcXVlc3RlZC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMzUiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAzNiIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEJsaW5kZWQiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAgIHByb2R1Y3RCbGluZGVkJz4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkJsaW5kZWQ8L2xhYmVsPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgJyBkYXRhLWlkPSJwcm9kdWN0QmxpbmRlZCI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnByb2R1Y3RzWzFdLmJsaW5kZWQiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uYmxpbmRlZCIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmJsaW5kZWQiPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgaWQ9InByb2R1Y3RBZGRsbkRydWdJbmZvcm1hdGlvbiIgY2xhc3M9IiBwcm9kdWN0QWRkbG5EcnVnSW5mb3JtYXRpb24gbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkFkZCYjMzk7bCBEcnVnIEluZm88L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RBZGRsbkRydWdJbmZvcm1hdGlvbiI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3QyLWJveCAgbXVsdGlTZWxlY3RTZWxlY3QyRmllbGQgd3JhcHBlZC1tdWx0aXNlbGVjdCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5hZGRpdGlvbmFsRHJ1Z0luZm8uaWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJDaG9vc2UiIG11bHRpcGxlPSJtdWx0aXBsZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmFkZGl0aW9uYWxEcnVnSW5mby5pZCIgPg08b3B0aW9uIHZhbHVlPSIzMyIgPkNvdW50ZXJmZWl0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjM0IiA+T3ZlcmRvc2U8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzUiID5EcnVnIHRha2VuIGJ5IHRoZSBmYXRoZXI8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzYiID5EcnVnIHRha2VuIGJleW9uZCBleHBpcnkgZGF0ZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzNyIgPkJhdGNoIGFuZCBsb3QgdGVzdGVkIGFuZCBmb3VuZCB3aXRoaW4gc3BlY2lmaWNhdGlvbnM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzgiID5CYXRjaCBhbmQgbG90IHRlc3RlZCBhbmQgZm91bmQgbm90IHdpdGhpbiBzcGVjaWZpY2F0aW9uczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzOSIgPk1lZGljYXRpb24gZXJyb3I8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNDAiID5NaXN1c2U8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNDEiID5BYnVzZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI0MiIgPk9jY3VwYXRpb25hbCBleHBvc3VyZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI0MyIgPk9mZiBsYWJlbCB1c2U8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48ZGl2IGlkPSJwcm9kdWN0QWRkaXRpb25hbERydWdJbmZvTm90ZXMiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sICAgICBwcm9kdWN0QWRkaXRpb25hbERydWdJbmZvTm90ZXMgY29sLW1kLTEyJz4gICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BZGQmIzM5O2wgRHJ1ZyBJbmZvIE5vdGVzPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RBZGRpdGlvbmFsRHJ1Z0luZm9Ob3RlcyI+ICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmFkZGl0aW9uYWxEcnVnSW5mb05vdGVzIiBtYXhsZW5ndGg9IjIwMDAiIHJvd3M9IjIiIGNvbHM9IjEwMCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uYWRkaXRpb25hbERydWdJbmZvTm90ZXMiID48L3RleHRhcmVhPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwhLS0gU3ViIFNlY3Rpb25zIFByb2R1Y3RzIC0tPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSBpbm5lclNlY3Rpb25UYWJsZSAiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWNjb3JkaW9uLWlubmVyUHJvZHVjdHNfMV8iPiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gU3Vic3RhbmNlcyAtLT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiByeC1jb2wtdGFibGUgb3ZlcnJpZGUtY29sLXBhZGRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2R1Y3RzXzFfIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNwcm9kdWN0U3Vic3RhbmNlc18xIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjb2xsYXBzZWQgaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1pbm5lclByb2R1Y3RzXzFfIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1YnN0YW5jZShzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJzdWJzdGFuY2VfMV8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJzdWJzdGFuY2VfMV8iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0U3Vic3RhbmNlc18xIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVtcGxhdGVJZD0icHJvZHVjdFN1YnN0YW5jZXNUZW1wbGF0ZSIgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSAgaW5uZXItcmVwZWF0YWJsZSBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciBwYW5lbC1ib2R5IHAtMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9InVuaGlnaGxpZ2h0U2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RJbmdyZWRpZW50cycgY2xhc3M9J2NvbC1tZC02ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTmFtZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItaW5ncmVkaWVudERvc2FnZVVuaXQnIGNsYXNzPSdjb2wtbWQtNiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFN0cmVuZ3RoIDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBhZGQtdGFibGUtcm93IGFkZC1zZWN0aW9uIGJ0bi1hZGQtcGFuZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1wcm9kdWN0LWlubmVyc3Vic3RhbmNlXzFfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIGlubmVyLXJlcGVhdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwcm9kdWN0U3Vic3RhbmNlc18xXy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4Ij4xPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvZHVjdEluZ3JlZGllbnRzIiBjbGFzcz0iIHByb2R1Y3RJbmdyZWRpZW50cyBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEluZ3JlZGllbnRzIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1hamF4IHdyYXBwZWQtbXVsdGlzZWxlY3QgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uaW5ncmVkaWVudHNbMF0ubmFtZS5pZCIgZGF0YS1mcm9tPSIiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXVybD0iL2Nhc2VFbnRyeS9zZWFyY2hJbmdyZWRpZW50cyIgZGF0YS12YWx1ZT0iMTAyNjAxMDEiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmluZ3JlZGllbnRzWzBdLm5hbWUuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmluZ3JlZGllbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSI0NyIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uaW5ncmVkaWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPiAgICA8dGQgaWQ9ImluZ3JlZGllbnREb3NhZ2VVbml0IiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgaW5ncmVkaWVudERvc2FnZVVuaXQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iaW5ncmVkaWVudERvc2FnZVVuaXQiPiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjEwIiBkYXRhLXVuaXRMaXN0PSJzdHJlbmd0aC11bml0LWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uaW5ncmVkaWVudHNbMF0uc3RyZW5ndGgudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwIiBkYXRhLWZpZWxkLWlkPSJpbmdyZWRpZW50RG9zYWdlVW5pdCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uaW5ncmVkaWVudHNbMF0uc3RyZW5ndGgudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5pbmdyZWRpZW50c1swXS5zdHJlbmd0aC5pZCIgLz4gICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdHNbMV0uaW5ncmVkaWVudHNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPjxpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdFN1YnN0YW5jZXNfMSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFByb2R1Y3QgSW5kaWNhdGlvbiAtLT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiByeC1jb2wtdGFibGUgb3ZlcnJpZGUtY29sLXBhZGRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2R1Y3RzXzFfIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c18xXyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdEluZGljYXRpb25fMSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZHVjdCBJbmRpY2F0aW9uKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNhY2NvcmRpb24tcHJvZHVjdC1pbm5lcmluZGljYXRpb25fMV8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJpbmRpY2F0aW9uXzFfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEluZGljYXRpb25fMSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlbXBsYXRlSWQ9InByb2R1Y3RJbmRpY2F0aW9uVGVtcGxhdGUiIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgIGlubmVyLXJlcGVhdGFibGUgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IgcGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3QtaW5kaWNhdGlvbiBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0idW5oaWdobGlnaHRTZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkJyBjbGFzcz0nY29sLW1kLTYgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBJbmRpY2F0aW9uIChSZXBvcnRlZCkgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RJbmRpY2F0aW9uQ29kZWQnIGNsYXNzPSdjb2wtbWQtNiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IEluZGljYXRpb24gKENvZGVkKSA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFidWxhcj0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIj48aSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24tcHJvZHVjdC1pbm5lcmluZGljYXRpb25fMV8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgIHB2LXNlY3Rpb24tcmVjb3JkIGlubmVyLXJlcGVhdGFibGUgdWktc29ydGFibGUtaGFuZGxlICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwcm9kdWN0SW5kaWNhdGlvbl8xXy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTYgIHRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdEluZGljYXRpb25SZXBvcnRlZCI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uUmVwb3J0ZWQiPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uUmVwb3J0ZWQiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgLz4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0ucHJvZHVjdEluZGljYXRpb25zWzBdLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0ucHJvZHVjdEluZGljYXRpb25zWzBdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0ucHJvZHVjdEluZGljYXRpb25zWzBdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMzIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8dGQgaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0SW5kaWNhdGlvbkNvZGVkICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiPiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVhY3Rpb25Db2RlZCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTAwMCIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEluZGljYXRpb25Db2RlZCIgcmVhZG9ubHk9InJlYWRvbmx5IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICA8L2Rpdj48L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPjxpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdEluZGljYXRpb25fMSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIERvc2UgSW5mb3JtYXRpb24gIC0tPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLWItMCBvdmVycmlkZS1jb2wtcGFkZGluZy1mdWxsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHJ4bWFpbi1jb250YWluZXIgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIHJ4bWFpbi1jb250YWluZXItcm93Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2R1Y3RzXzFfIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c18xXyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdERvc2VfMSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9zZSBJbmZvcm1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcHZpSW5uZXJQcm9kdWN0RG9zZVJlY29yZHNfMV8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiNwcm9kdWN0RG9zZV8xXyIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcHZpSW5uZXJQcm9kdWN0RG9zZVJlY29yZHNfMV8iIGRhdGEtYW5jaG9yZGl2PSIjcHJvZHVjdERvc2VfMV8iIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1hZGQtcGFuZWwgYnRuLWFkZHJvdy10b3AgaWMtc20gcHYtYWRkLXJvdyIgZGF0YS1pbm5lci1zZWM9InRydWUiICAgICAgICAgICBkYXRhLXRhYnVsYXI9ImlubmVyIiB0aXRsZT0iQWRkIGFub3RoZXIgc2VjdGlvbiIgICAgICAgICAgIGRhdGEtdGFyZ2V0PSJwdi1pbm5lclByb2R1Y3REb3NlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYWRkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdERvc2VfMSIgZGF0YS10ZW1wbGF0ZUlkPSJwcm9kdWN0RG9zZVRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlICBpbm5lci1yZXBlYXRhYmxlIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lcmRvc2UtY29udGFpbmVyIHB2LWRyYWdnYWJsZS1saXN0IHB2LXNlY3Rpb24gdWktc29ydGFibGUgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InB2aUlubmVyUHJvZHVjdERvc2VSZWNvcmRzXzFfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1zZWN0aW9uLXJlY29yZCBpbm5lci1yZXBlYXRhYmxlIHB2LWlubmVyUHJvZHVjdERvc2UgcC0xMCB1aS1zb3J0YWJsZS1oYW5kbGUgcC1iLTEwIHJvdyByb3ctc3RyaXAgICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InByb2R1Y3REb3NlXzFfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9InJvdy1hY3Rpb24gbnVtLWJnIj4gICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iIGNsYXNzPSJwdi1pYyBpYy14cyBtLXItNSByZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIHByb2R1Y3RfMCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIG0tYi0xMCBmb3JtLXB2IGZvcm0taG9yaXpvbnRhbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlSW5mb3JtYXRpb24iIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlSW5mb3JtYXRpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RG9zZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VJbmZvcm1hdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjgiIGRhdGEtdW5pdExpc3Q9ImRvc2FnZS11bml0LWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zZUluZm9ybWF0aW9uc1swXS5kb3NlLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI4IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RG9zZUluZm9ybWF0aW9uIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRvc2UudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZG9zZS5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zZUluZm9ybWF0aW9uc1swXS5kb3NlLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zZUluZm9ybWF0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMzMiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2VJbmZvcm1hdGlvbnNbMF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUZyZXF1ZW5jeSIgY2xhc3M9IiBwcm9kdWN0RG9zZUZyZXF1ZW5jeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZyZXF1ZW5jeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VGcmVxdWVuY3kiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zZUluZm9ybWF0aW9uc1swXS5mcmVxdWVuY3kuaWQiIGRhdGEtZnJvbT0iZG9zYWdlRnJlcXVlbmN5IiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zZUluZm9ybWF0aW9uc1swXS5mcmVxdWVuY3kuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZVN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdERvc2VTdGFydERhdGUgIGNvbC1tZC0xLWhhbGYgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InByb2R1Y3REb3NlU3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zZUluZm9ybWF0aW9uc1swXS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5kb3NlSW5mb3JtYXRpb25zWzBdLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlRW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdERvc2VFbmREYXRlICBjb2wtbWQtMS1oYWxmICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icHJvZHVjdERvc2VFbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlRHVyYXRpb24iIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlRHVyYXRpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RHVyYXRpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlRHVyYXRpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VEdXJhdGlvbiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlQmF0Y2hOdW1iZXIiIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlQmF0Y2hOdW1iZXIgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QmF0Y2gvTG90IE51bWJlcjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VCYXRjaE51bWJlciI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5kb3NlSW5mb3JtYXRpb25zWzBdLmJhdGNoTnVtYmVyIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIzNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VCYXRjaE51bWJlciIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMV0uZG9zZUluZm9ybWF0aW9uc1swXS5iYXRjaE51bWJlciIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlUm91dGUiIGNsYXNzPSIgcHJvZHVjdERvc2VSb3V0ZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJvdXRlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZVJvdXRlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucm91dGUuaWRPclZhbHVlIiBkYXRhLXRhZz0idHJ1ZSIgZGF0YS1mcm9tPSJyb3V0ZSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucm91dGUuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdERvc2VQYXJlbnRSb3V0ZSIgY2xhc3M9IiBwcm9kdWN0RG9zZVBhcmVudFJvdXRlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMS1oYWxmICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UGFyZW50IFJvdXRlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZVBhcmVudFJvdXRlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucGFyZW50Um91dGUuaWRPclZhbHVlIiBkYXRhLXRhZz0idHJ1ZSIgZGF0YS1mcm9tPSJyb3V0ZSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucGFyZW50Um91dGUuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZURlc2NyaXB0aW9uIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdERvc2VEZXNjcmlwdGlvbiAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Eb3NlIERlc2NyaXB0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZURlc2NyaXB0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZGVzY3JpcHRpb24iIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3REb3NlRGVzY3JpcHRpb24iIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzFdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZGVzY3JpcHRpb24iIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0c1sxXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAiIGlkPSJwcm9kdWN0LXNlY3Rpb24tMiI+ICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWhlYWRlcj0iUHJvZHVjdC1TZWN0aW9uIiBkYXRhLXBhcmVudD0iI3Byb2R1Y3Qtc2VjdGlvbiIgICAgICAgICAgICAgICAgICAgaHJlZj0iI3Byb2R1Y3Qtc2VjdGlvbl8yIiBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmFkZ2Ugcm93LWNvdW50IGJhZGdlLWluZGV4Ij4zPC9zcGFuPlByb2R1Y3QtU2VjdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb25maWd1cmVGaWVsZHMgcHYtc3ViaGVhZC1jb25maWciPiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gcHJvZHVjdC1kZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdF8yIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0LXNlY3Rpb25fMiIgY2xhc3M9InBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIGlubmVyLXJlcGVhdGFibGUgcHJvZHVjdC1zZWMiICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgdWktbmVzdGVkLXNvcnRhYmxlLWhhbmRsZSAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgZm9ybS1wdiI+ICAgICAgICAgICAgICAgICAgICA8ZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0TGljZW5zZSIgY2xhc3M9JyBjb2wtbWQtNCByZXF1aXJlZCAgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdExpY2Vuc2UnID4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Qcm9kdWN0IE5hbWU8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InByb2R1Y3RMaWNlbnNlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIHByb2R1Y3ROYW1lQnJvd3NlciAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5saWNlbnNlLnZhbHVlIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IlJ4IENJU1BMQVRJTiBJRCIgZGF0YS1tYW5kYXRvcnk9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdmFsdWU9IlJ4IENJU1BMQVRJTiBJRCIgZGF0YS1icm93c2VyLXR5cGU9InByb2R1Y3QiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InByb2R1Y3RMaWNlbnNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5saWNlbnNlLnZhbHVlIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmxpY2Vuc2UuaWQiIHZhbHVlPSIxMDAzODEiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmxpY2Vuc2UuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5pZCIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDI3MSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMzQiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmludGVybmFsUm93SWQiIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zYWdlRm9ybSIgY2xhc3M9IiBwcm9kdWN0RG9zYWdlRm9ybSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Eb3NhZ2UgRm9ybTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2FnZUZvcm0iPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uZG9zYWdlRm9ybS5pZCIgZGF0YS1mcm9tPSJkb3NhZ2VGb3JtIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjQ4MCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uZG9zYWdlRm9ybS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0Um9sZSIgY2xhc3M9IiBwcm9kdWN0Um9sZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgcmVxdWlyZWQgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJvbGU8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RSb2xlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgcHJvZHVjdFJvbGVJZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0ucm9sZS5pZCIgZGF0YS1mcm9tPSJyb2xlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9InRydWUiIGRhdGEtdmFsdWU9IjI5IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5yb2xlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RPYnRhaW5Db3VudHJ5IiBjbGFzcz0iIHByb2R1Y3RPYnRhaW5Db3VudHJ5IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk9idGFpbiBDb3VudHJ5PC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0T2J0YWluQ291bnRyeSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIGNvdW50cnkgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLm9idGFpbkNvdW50cnkuaWQiIGRhdGEtZnJvbT0iY291bnRyaWVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0ub2J0YWluQ291bnRyeS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEF1dGhOdW1iZXIiIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0QXV0aE51bWJlciAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BdXRoLiBOdW1iZXI8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RBdXRoTnVtYmVyIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmF1dGhOdW1iZXIiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjM1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0QXV0aE51bWJlciIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uYXV0aE51bWJlciIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RBdXRoQ291bnRyeSIgY2xhc3M9IiBwcm9kdWN0QXV0aENvdW50cnkgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QXV0aC4gQ291bnRyeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEF1dGhDb3VudHJ5Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgY291bnRyeSBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uYXV0aENvdW50cnkuaWQiIGRhdGEtZnJvbT0iY291bnRyaWVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uYXV0aENvdW50cnkuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0TWFudWZhY3R1cmVyIiBjbGFzcz0iIHByb2R1Y3RNYW51ZmFjdHVyZXIgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QXV0aC4gSG9sZGVyPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0TWFudWZhY3R1cmVyIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmF1dGhIb2xkZXIuaWRPclZhbHVlIiBkYXRhLXRhZz0idHJ1ZSIgZGF0YS1mcm9tPSJtYW51ZmFjdHVyZXJzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uYXV0aEhvbGRlci5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RDdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbiIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RDdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbiAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5DdW11bGF0aXZlIERvc2UgdG8gRmlyc3QgUmVhY3Rpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RDdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjEwIiBkYXRhLXVuaXRMaXN0PSJkb3NhZ2UtdW5pdC1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIxMCIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5jdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbi52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uY3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24uaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkV4cG9zdXJlIEdlc3RhdGlvbiBQZXJpb2Q8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFeHBvc3VyZUdlc3RhdGlvblBlcmlvZCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjMiIGRhdGEtdW5pdExpc3Q9Imdlc3RhdGlvbi1wZXJpb2QtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5leHBvc3VyZUdlc3RhdGlvblBlcmlvZC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMyIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5leHBvc3VyZUdlc3RhdGlvblBlcmlvZC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uZXhwb3N1cmVHZXN0YXRpb25QZXJpb2QuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RBY3Rpb25UYWtlbiIgY2xhc3M9IiBwcm9kdWN0QWN0aW9uVGFrZW4gbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QWN0aW9uIFRha2VuPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0QWN0aW9uVGFrZW4iPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uYWN0aW9uVGFrZW4uaWQiIGRhdGEtZnJvbT0iYWN0aW9uVGFrZW4iIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5hY3Rpb25UYWtlbi5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFeHBpcmF0aW9uRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdEV4cGlyYXRpb25EYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RXhwaXJhdGlvbiBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJwcm9kdWN0RXhwaXJhdGlvbkRhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGZ1dHVyZURhdGVzQWxsb3dlZCBhbGxvd0RhdGVXaXRob3V0VGltZSAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uZXhwaXJhdGlvbkRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uZXhwaXJhdGlvbkRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5leHBpcmF0aW9uRGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmV4cGlyYXRpb25EYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdFJlcGxhY2VtZW50UmVxdWlyZWQiIGNsYXNzPSIgcHJvZHVjdFJlcGxhY2VtZW50UmVxdWlyZWQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVwbGFjZW1lbnQgUmVxdWlyZWQ8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RSZXBsYWNlbWVudFJlcXVpcmVkIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLnJlcGxhY2VtZW50UmVxdWlyZWQuaWQiIGRhdGEtZnJvbT0icmVwbGFjZW1lbnRSZXF1aXJlZCIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLnJlcGxhY2VtZW50UmVxdWlyZWQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDIzIiA+WWVzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMjQiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0UmV0dXJuUmVxdWlyZWQiIGNsYXNzPSIgcHJvZHVjdFJldHVyblJlcXVpcmVkIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJldHVybiBSZXF1aXJlZDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdFJldHVyblJlcXVpcmVkIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLnJldHVyblJlcXVpcmVkLmlkIiBkYXRhLWZyb209InJldHVyblJlcXVpcmVkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0ucmV0dXJuUmVxdWlyZWQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDMzIiA+WWVzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMzQiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0UmVmdW5kUmVxdWVzdGVkIiBjbGFzcz0iIHByb2R1Y3RSZWZ1bmRSZXF1ZXN0ZWQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVmdW5kIFJlcXVlc3RlZDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdFJlZnVuZFJlcXVlc3RlZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5yZWZ1bmRSZXF1ZXN0ZWQuaWQiIGRhdGEtZnJvbT0icmVmdW5kUmVxdWVzdGVkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0ucmVmdW5kUmVxdWVzdGVkLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAzNSIgPlllczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDM2IiA+Tm88L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0QmxpbmRlZCIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICAgcHJvZHVjdEJsaW5kZWQnPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QmxpbmRlZDwvbGFiZWw+ICAgICAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAnIGRhdGEtaWQ9InByb2R1Y3RCbGluZGVkIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEucHJvZHVjdHNbMl0uYmxpbmRlZCI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5ibGluZGVkIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uYmxpbmRlZCI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBpZD0icHJvZHVjdEFkZGxuRHJ1Z0luZm9ybWF0aW9uIiBjbGFzcz0iIHByb2R1Y3RBZGRsbkRydWdJbmZvcm1hdGlvbiBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEyICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QWRkJiMzOTtsIERydWcgSW5mbzwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEFkZGxuRHJ1Z0luZm9ybWF0aW9uIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdDItYm94ICBtdWx0aVNlbGVjdFNlbGVjdDJGaWVsZCB3cmFwcGVkLW11bHRpc2VsZWN0ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmFkZGl0aW9uYWxEcnVnSW5mby5pZCIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IkNob29zZSIgbXVsdGlwbGU9Im11bHRpcGxlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uYWRkaXRpb25hbERydWdJbmZvLmlkIiA+DTxvcHRpb24gdmFsdWU9IjMzIiA+Q291bnRlcmZlaXQ8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzQiID5PdmVyZG9zZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzNSIgPkRydWcgdGFrZW4gYnkgdGhlIGZhdGhlcjwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzNiIgPkRydWcgdGFrZW4gYmV5b25kIGV4cGlyeSBkYXRlPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjM3IiA+QmF0Y2ggYW5kIGxvdCB0ZXN0ZWQgYW5kIGZvdW5kIHdpdGhpbiBzcGVjaWZpY2F0aW9uczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzOCIgPkJhdGNoIGFuZCBsb3QgdGVzdGVkIGFuZCBmb3VuZCBub3Qgd2l0aGluIHNwZWNpZmljYXRpb25zPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjM5IiA+TWVkaWNhdGlvbiBlcnJvcjwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI0MCIgPk1pc3VzZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI0MSIgPkFidXNlPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQyIiA+T2NjdXBhdGlvbmFsIGV4cG9zdXJlPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQzIiA+T2ZmIGxhYmVsIHVzZTwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PjxkaXYgaWQ9InByb2R1Y3RBZGRpdGlvbmFsRHJ1Z0luZm9Ob3RlcyIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgICAgIHByb2R1Y3RBZGRpdGlvbmFsRHJ1Z0luZm9Ob3RlcyBjb2wtbWQtMTInPiAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkFkZCYjMzk7bCBEcnVnIEluZm8gTm90ZXM8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEFkZGl0aW9uYWxEcnVnSW5mb05vdGVzIj4gICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0iZm9ybS1jb250cm9sIGZtLXRleHQtYXJlYSAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uYWRkaXRpb25hbERydWdJbmZvTm90ZXMiIG1heGxlbmd0aD0iMjAwMCIgcm93cz0iMiIgY29scz0iMTAwIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5hZGRpdGlvbmFsRHJ1Z0luZm9Ob3RlcyIgPjwvdGV4dGFyZWE+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4gICAgICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdHNbMl0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPCEtLSBTdWIgU2VjdGlvbnMgUHJvZHVjdHMgLS0+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIGlubmVyU2VjdGlvblRhYmxlICI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c18yXyI+ICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBTdWJzdGFuY2VzIC0tPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IHJ4LWNvbC10YWJsZSBvdmVycmlkZS1jb2wtcGFkZGluZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWlubmVyUHJvZHVjdHNfMl8iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3Byb2R1Y3RTdWJzdGFuY2VzXzIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWNjb3JkaW9uLWlubmVyUHJvZHVjdHNfMl8iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3Vic3RhbmNlKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNhY2NvcmRpb24tcHJvZHVjdC1pbm5lcnN1YnN0YW5jZV8yXyIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNhY2NvcmRpb24tcHJvZHVjdC1pbm5lcnN1YnN0YW5jZV8yXyIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RTdWJzdGFuY2VzXzIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZW1wbGF0ZUlkPSJwcm9kdWN0U3Vic3RhbmNlc1RlbXBsYXRlIiBkYXRhLXRhYmxlPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlICBpbm5lci1yZXBlYXRhYmxlIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1yZWxhdGVkbmVzcyBwdi1zZWMtc2VwZXJhdG9yIHBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1pbm5lci1wcm9kdWN0LXN1YnN0YW5jZSBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0idW5oaWdobGlnaHRTZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSdoZWFkZXItcHJvZHVjdEluZ3JlZGllbnRzJyBjbGFzcz0nY29sLW1kLTYgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBOYW1lIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1pbmdyZWRpZW50RG9zYWdlVW5pdCcgY2xhc3M9J2NvbC1tZC02ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU3RyZW5ndGggPC9sYWJlbD48L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhYnVsYXI9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cy1zcXVhcmUtbyI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBjbGFzcz0icHYtZHJhZ2dhYmxlLWxpc3QgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJzdWJzdGFuY2VfMl8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgaW5uZXItcmVwZWF0YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InByb2R1Y3RTdWJzdGFuY2VzXzJfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXgiPjE8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9kdWN0SW5ncmVkaWVudHMiIGNsYXNzPSIgcHJvZHVjdEluZ3JlZGllbnRzIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0SW5ncmVkaWVudHMiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWFqYXggd3JhcHBlZC1tdWx0aXNlbGVjdCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5pbmdyZWRpZW50c1swXS5uYW1lLmlkIiBkYXRhLWZyb209IiIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdXJsPSIvY2FzZUVudHJ5L3NlYXJjaEluZ3JlZGllbnRzIiBkYXRhLXZhbHVlPSIzNTM5IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5pbmdyZWRpZW50c1swXS5uYW1lLmlkIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5pbmdyZWRpZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNDgiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmluZ3JlZGllbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD4gICAgPHRkIGlkPSJpbmdyZWRpZW50RG9zYWdlVW5pdCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIGluZ3JlZGllbnREb3NhZ2VVbml0ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImluZ3JlZGllbnREb3NhZ2VVbml0Ij4gICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSIxMCIgZGF0YS11bml0TGlzdD0ic3RyZW5ndGgtdW5pdC1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIxMCIgZGF0YS1maWVsZC1pZD0iaW5ncmVkaWVudERvc2FnZVVuaXQiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5pbmdyZWRpZW50c1swXS5zdHJlbmd0aC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uaW5ncmVkaWVudHNbMF0uc3RyZW5ndGguaWQiIC8+ICAgIDwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RzWzJdLmluZ3JlZGllbnRzWzBdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj48aSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kIG1kLWNsb3NlIHByb2R1Y3RTdWJzdGFuY2VzXzIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQcm9kdWN0IEluZGljYXRpb24gLS0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgcngtY29sLXRhYmxlIG92ZXJyaWRlLWNvbC1wYWRkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24taW5uZXJQcm9kdWN0c18yXyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWNjb3JkaW9uLWlubmVyUHJvZHVjdHNfMl8iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3Byb2R1Y3RJbmRpY2F0aW9uXzIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2R1Y3QgSW5kaWNhdGlvbihzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJpbmRpY2F0aW9uXzJfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI2FjY29yZGlvbi1wcm9kdWN0LWlubmVyaW5kaWNhdGlvbl8yXyIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RJbmRpY2F0aW9uXzIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZW1wbGF0ZUlkPSJwcm9kdWN0SW5kaWNhdGlvblRlbXBsYXRlIiBkYXRhLXRhYmxlPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlICBpbm5lci1yZXBlYXRhYmxlIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1yZWxhdGVkbmVzcyBwdi1zZWMtc2VwZXJhdG9yIHBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1pbm5lci1wcm9kdWN0LWluZGljYXRpb24gcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9InVuaGlnaGxpZ2h0U2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSdoZWFkZXItcHJvZHVjdEluZGljYXRpb25SZXBvcnRlZCcgY2xhc3M9J2NvbC1tZC02ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gSW5kaWNhdGlvbiAoUmVwb3J0ZWQpIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0SW5kaWNhdGlvbkNvZGVkJyBjbGFzcz0nY29sLW1kLTYgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBJbmRpY2F0aW9uIChDb2RlZCkgPC9sYWJlbD48L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhYnVsYXI9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCI+PGkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGx1cy1zcXVhcmUtbyI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBjbGFzcz0icHYtZHJhZ2dhYmxlLWxpc3QgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJpbmRpY2F0aW9uXzJfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlICBwdi1zZWN0aW9uLXJlY29yZCBpbm5lci1yZXBlYXRhYmxlIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icHJvZHVjdEluZGljYXRpb25fMl8tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXgiPjE8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC1tZC02ICB0ZW1wbGF0ZS1jb250cm9sIHByb2R1Y3RJbmRpY2F0aW9uUmVwb3J0ZWQiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkIj4gICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJwcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0ucHJvZHVjdEluZGljYXRpb25zWzBdLnJlcG9ydGVkUmVhY3Rpb24iIG1heGxlbmd0aD0iMjUwIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSJwcm9kdWN0SW5kaWNhdGlvbkNvZGVkIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtZmllbGRJZD0icHJvZHVjdEluZGljYXRpb25SZXBvcnRlZCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0ucHJvZHVjdEluZGljYXRpb25zWzBdLnJlcG9ydGVkUmVhY3Rpb24iIC8+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0ucHJvZHVjdEluZGljYXRpb25zWzBdLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0ucHJvZHVjdEluZGljYXRpb25zWzBdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0ucHJvZHVjdEluZGljYXRpb25zWzBdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjM2IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giID48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPHRkIGlkPSJwcm9kdWN0SW5kaWNhdGlvbkNvZGVkIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEluZGljYXRpb25Db2RlZCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0SW5kaWNhdGlvbkNvZGVkIj4gICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0ucHJvZHVjdEluZGljYXRpb25zWzBdLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwMDAiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIHJlYWRvbmx5PSJyZWFkb25seSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0ucHJvZHVjdEluZGljYXRpb25zWzBdLnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdHNbMl0ucHJvZHVjdEluZGljYXRpb25zWzBdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj48aSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kIG1kLWNsb3NlIHByb2R1Y3RJbmRpY2F0aW9uXzIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBEb3NlIEluZm9ybWF0aW9uICAtLT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS1iLTAgb3ZlcnJpZGUtY29sLXBhZGRpbmctZnVsbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCByeG1haW4tY29udGFpbmVyIHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyByeG1haW4tY29udGFpbmVyLXJvdyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24taW5uZXJQcm9kdWN0c18yXyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWNjb3JkaW9uLWlubmVyUHJvZHVjdHNfMl8iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3Byb2R1Y3REb3NlXzIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvc2UgSW5mb3JtYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI3B2aUlubmVyUHJvZHVjdERvc2VSZWNvcmRzXzJfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIjcHJvZHVjdERvc2VfMl8iIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3B2aUlubmVyUHJvZHVjdERvc2VSZWNvcmRzXzJfIiBkYXRhLWFuY2hvcmRpdj0iI3Byb2R1Y3REb3NlXzJfIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBidG4tYWRkLXBhbmVsIGJ0bi1hZGRyb3ctdG9wIGljLXNtIHB2LWFkZC1yb3ciIGRhdGEtaW5uZXItc2VjPSJ0cnVlIiAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJpbm5lciIgdGl0bGU9IkFkZCBhbm90aGVyIHNlY3Rpb24iICAgICAgICAgICBkYXRhLXRhcmdldD0icHYtaW5uZXJQcm9kdWN0RG9zZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFkZCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlXzIiIGRhdGEtdGVtcGxhdGVJZD0icHJvZHVjdERvc2VUZW1wbGF0ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSAgaW5uZXItcmVwZWF0YWJsZSBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5uZXJkb3NlLWNvbnRhaW5lciBwdi1kcmFnZ2FibGUtbGlzdCBwdi1zZWN0aW9uIHVpLXNvcnRhYmxlIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwdmlJbm5lclByb2R1Y3REb3NlUmVjb3Jkc18yXyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtc2VjdGlvbi1yZWNvcmQgaW5uZXItcmVwZWF0YWJsZSBwdi1pbm5lclByb2R1Y3REb3NlIHAtMTAgdWktc29ydGFibGUtaGFuZGxlIHAtYi0xMCByb3cgcm93LXN0cmlwICAgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwcm9kdWN0RG9zZV8yXy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPjxzcGFuIGNsYXNzPSJyb3ctY291bnQgYmFkZ2UtaW5kZXgiPjwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPSJyb3ctYWN0aW9uIG51bS1iZyI+ICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiBjbGFzcz0icHYtaWMgaWMteHMgbS1yLTUgcmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIj4gICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBwcm9kdWN0XzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgIDwvYT48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIG0tdC0yMCBtLWItMTAgZm9ybS1wdiBmb3JtLWhvcml6b250YWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUluZm9ybWF0aW9uIiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RG9zZUluZm9ybWF0aW9uICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRvc2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlSW5mb3JtYXRpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI4IiBkYXRhLXVuaXRMaXN0PSJkb3NhZ2UtdW5pdC1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZG9zZS52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iOCIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VJbmZvcm1hdGlvbiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uZG9zZUluZm9ybWF0aW9uc1swXS5kb3NlLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRvc2UuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZG9zZS5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmRvc2VJbmZvcm1hdGlvbnNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjM3IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5kb3NlSW5mb3JtYXRpb25zWzBdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdERvc2VGcmVxdWVuY3kiIGNsYXNzPSIgcHJvZHVjdERvc2VGcmVxdWVuY3kgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xLWhhbGYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GcmVxdWVuY3k8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlRnJlcXVlbmN5Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZnJlcXVlbmN5LmlkIiBkYXRhLWZyb209ImRvc2FnZUZyZXF1ZW5jeSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZnJlcXVlbmN5LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdERvc2VTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHByb2R1Y3REb3NlU3RhcnREYXRlICBjb2wtbWQtMS1oYWxmICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5TdGFydCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJwcm9kdWN0RG9zZVN0YXJ0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5kb3NlSW5mb3JtYXRpb25zWzBdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5kb3NlSW5mb3JtYXRpb25zWzBdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uZG9zZUluZm9ybWF0aW9uc1swXS5zdGFydERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHByb2R1Y3REb3NlRW5kRGF0ZSAgY29sLW1kLTEtaGFsZiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RW5kIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InByb2R1Y3REb3NlRW5kRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uZG9zZUluZm9ybWF0aW9uc1swXS5lbmREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uZG9zZUluZm9ybWF0aW9uc1swXS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uZG9zZUluZm9ybWF0aW9uc1swXS5lbmREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUR1cmF0aW9uIiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RG9zZUR1cmF0aW9uICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkR1cmF0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZUR1cmF0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZHVyYXRpb24udmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3REb3NlRHVyYXRpb24iIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZHVyYXRpb24udmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZHVyYXRpb24uaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZHVyYXRpb24uaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUJhdGNoTnVtYmVyIiBjbGFzcz0iY29sLW1kLTEtaGFsZiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RG9zZUJhdGNoTnVtYmVyICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkJhdGNoL0xvdCBOdW1iZXI8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlQmF0Y2hOdW1iZXIiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMl0uZG9zZUluZm9ybWF0aW9uc1swXS5iYXRjaE51bWJlciIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMzUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3REb3NlQmF0Y2hOdW1iZXIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzJdLmRvc2VJbmZvcm1hdGlvbnNbMF0uYmF0Y2hOdW1iZXIiIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZVJvdXRlIiBjbGFzcz0iIHByb2R1Y3REb3NlUm91dGUgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xLWhhbGYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Sb3V0ZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VSb3V0ZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5kb3NlSW5mb3JtYXRpb25zWzBdLnJvdXRlLmlkT3JWYWx1ZSIgZGF0YS10YWc9InRydWUiIGRhdGEtZnJvbT0icm91dGUiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5kb3NlSW5mb3JtYXRpb25zWzBdLnJvdXRlLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlUGFyZW50Um91dGUiIGNsYXNzPSIgcHJvZHVjdERvc2VQYXJlbnRSb3V0ZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlBhcmVudCBSb3V0ZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VQYXJlbnRSb3V0ZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5kb3NlSW5mb3JtYXRpb25zWzBdLnBhcmVudFJvdXRlLmlkT3JWYWx1ZSIgZGF0YS10YWc9InRydWUiIGRhdGEtZnJvbT0icm91dGUiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5kb3NlSW5mb3JtYXRpb25zWzBdLnBhcmVudFJvdXRlLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdERvc2VEZXNjcmlwdGlvbiIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlRGVzY3JpcHRpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RG9zZSBEZXNjcmlwdGlvbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VEZXNjcmlwdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRlc2NyaXB0aW9uIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RG9zZURlc2NyaXB0aW9uIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1syXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRlc2NyaXB0aW9uIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdHNbMl0uZG9zZUluZm9ybWF0aW9uc1swXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgIiBpZD0icHJvZHVjdC1zZWN0aW9uLTMiPiAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS1oZWFkZXI9IlByb2R1Y3QtU2VjdGlvbiIgZGF0YS1wYXJlbnQ9IiNwcm9kdWN0LXNlY3Rpb24iICAgICAgICAgICAgICAgICAgIGhyZWY9IiNwcm9kdWN0LXNlY3Rpb25fMyIgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJhZGdlIHJvdy1jb3VudCBiYWRnZS1pbmRleCI+NDwvc3Bhbj5Qcm9kdWN0LVNlY3Rpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29uZmlndXJlRmllbGRzIHB2LXN1YmhlYWQtY29uZmlnIj4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iIiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIHByb2R1Y3QtZGVsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIHByb2R1Y3RfMyIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBpZD0icHJvZHVjdC1zZWN0aW9uXzMiIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiBpbm5lci1yZXBlYXRhYmxlIHByb2R1Y3Qtc2VjIiAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5IHVpLW5lc3RlZC1zb3J0YWJsZS1oYW5kbGUgIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIGZvcm0tcHYiPiAgICAgICAgICAgICAgICAgICAgPGRpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdExpY2Vuc2UiIGNsYXNzPScgY29sLW1kLTQgcmVxdWlyZWQgIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RMaWNlbnNlJyA+ICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UHJvZHVjdCBOYW1lPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJwcm9kdWN0TGljZW5zZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBwcm9kdWN0TmFtZUJyb3dzZXIgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10ubGljZW5zZS52YWx1ZSIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSJJYnJhbmNlIEpQViBDYXBzdWxlcyA1MG1nIiBkYXRhLW1hbmRhdG9yeT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci12YWx1ZT0iSWJyYW5jZSBKUFYgQ2Fwc3VsZXMgNTBtZyIgZGF0YS1icm93c2VyLXR5cGU9InByb2R1Y3QiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9InByb2R1Y3RMaWNlbnNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5saWNlbnNlLnZhbHVlIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmxpY2Vuc2UuaWQiIHZhbHVlPSIxMDAxNDAiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmxpY2Vuc2UuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5pZCIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDExMCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMzgiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmludGVybmFsUm93SWQiIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzBdLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zYWdlRm9ybSIgY2xhc3M9IiBwcm9kdWN0RG9zYWdlRm9ybSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Eb3NhZ2UgRm9ybTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2FnZUZvcm0iPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zYWdlRm9ybS5pZCIgZGF0YS1mcm9tPSJkb3NhZ2VGb3JtIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2FnZUZvcm0uaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdFJvbGUiIGNsYXNzPSIgcHJvZHVjdFJvbGUgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yIHJlcXVpcmVkICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Sb2xlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0Um9sZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHByb2R1Y3RSb2xlSWQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLnJvbGUuaWQiIGRhdGEtZnJvbT0icm9sZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJ0cnVlIiBkYXRhLXZhbHVlPSIyOSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10ucm9sZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0T2J0YWluQ291bnRyeSIgY2xhc3M9IiBwcm9kdWN0T2J0YWluQ291bnRyeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5PYnRhaW4gQ291bnRyeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdE9idGFpbkNvdW50cnkiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBjb3VudHJ5IHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5vYnRhaW5Db3VudHJ5LmlkIiBkYXRhLWZyb209ImNvdW50cmllcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLm9idGFpbkNvdW50cnkuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RBdXRoTnVtYmVyIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEF1dGhOdW1iZXIgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QXV0aC4gTnVtYmVyPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0QXV0aE51bWJlciI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5hdXRoTnVtYmVyIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIzNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEF1dGhOdW1iZXIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmF1dGhOdW1iZXIiIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0QXV0aENvdW50cnkiIGNsYXNzPSIgcHJvZHVjdEF1dGhDb3VudHJ5IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkF1dGguIENvdW50cnk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RBdXRoQ291bnRyeSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIGNvdW50cnkgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmF1dGhDb3VudHJ5LmlkIiBkYXRhLWZyb209ImNvdW50cmllcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmF1dGhDb3VudHJ5LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdE1hbnVmYWN0dXJlciIgY2xhc3M9IiBwcm9kdWN0TWFudWZhY3R1cmVyIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkF1dGguIEhvbGRlcjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdE1hbnVmYWN0dXJlciI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5hdXRoSG9sZGVyLmlkT3JWYWx1ZSIgZGF0YS10YWc9InRydWUiIGRhdGEtZnJvbT0ibWFudWZhY3R1cmVycyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmF1dGhIb2xkZXIuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0Q3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24iIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0Q3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q3VtdWxhdGl2ZSBEb3NlIHRvIEZpcnN0IFJlYWN0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0Q3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSIxMCIgZGF0YS11bml0TGlzdD0iZG9zYWdlLXVuaXQtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5jdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbi52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTAiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RDdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uY3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24udmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5jdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbi5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFeHBvc3VyZUdlc3RhdGlvblBlcmlvZCIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFeHBvc3VyZUdlc3RhdGlvblBlcmlvZCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FeHBvc3VyZSBHZXN0YXRpb24gUGVyaW9kPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXhwb3N1cmVHZXN0YXRpb25QZXJpb2QiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSIzIiBkYXRhLXVuaXRMaXN0PSJnZXN0YXRpb24tcGVyaW9kLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZXhwb3N1cmVHZXN0YXRpb25QZXJpb2QudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjMiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFeHBvc3VyZUdlc3RhdGlvblBlcmlvZCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZXhwb3N1cmVHZXN0YXRpb25QZXJpb2QudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5leHBvc3VyZUdlc3RhdGlvblBlcmlvZC5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0QWN0aW9uVGFrZW4iIGNsYXNzPSIgcHJvZHVjdEFjdGlvblRha2VuIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkFjdGlvbiBUYWtlbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEFjdGlvblRha2VuIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmFjdGlvblRha2VuLmlkIiBkYXRhLWZyb209ImFjdGlvblRha2VuIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uYWN0aW9uVGFrZW4uaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXhwaXJhdGlvbkRhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHByb2R1Y3RFeHBpcmF0aW9uRGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkV4cGlyYXRpb24gRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icHJvZHVjdEV4cGlyYXRpb25EYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBmdXR1cmVEYXRlc0FsbG93ZWQgYWxsb3dEYXRlV2l0aG91dFRpbWUgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmV4cGlyYXRpb25EYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmV4cGlyYXRpb25EYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZXhwaXJhdGlvbkRhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5leHBpcmF0aW9uRGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RSZXBsYWNlbWVudFJlcXVpcmVkIiBjbGFzcz0iIHByb2R1Y3RSZXBsYWNlbWVudFJlcXVpcmVkIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlcGxhY2VtZW50IFJlcXVpcmVkPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0UmVwbGFjZW1lbnRSZXF1aXJlZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5yZXBsYWNlbWVudFJlcXVpcmVkLmlkIiBkYXRhLWZyb209InJlcGxhY2VtZW50UmVxdWlyZWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5yZXBsYWNlbWVudFJlcXVpcmVkLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAyMyIgPlllczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDI0IiA+Tm88L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdFJldHVyblJlcXVpcmVkIiBjbGFzcz0iIHByb2R1Y3RSZXR1cm5SZXF1aXJlZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZXR1cm4gUmVxdWlyZWQ8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RSZXR1cm5SZXF1aXJlZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5yZXR1cm5SZXF1aXJlZC5pZCIgZGF0YS1mcm9tPSJyZXR1cm5SZXF1aXJlZCIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLnJldHVyblJlcXVpcmVkLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAzMyIgPlllczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDM0IiA+Tm88L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdFJlZnVuZFJlcXVlc3RlZCIgY2xhc3M9IiBwcm9kdWN0UmVmdW5kUmVxdWVzdGVkIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlZnVuZCBSZXF1ZXN0ZWQ8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RSZWZ1bmRSZXF1ZXN0ZWQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10ucmVmdW5kUmVxdWVzdGVkLmlkIiBkYXRhLWZyb209InJlZnVuZFJlcXVlc3RlZCIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLnJlZnVuZFJlcXVlc3RlZC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMzUiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAzNiIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEJsaW5kZWQiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAgIHByb2R1Y3RCbGluZGVkJz4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkJsaW5kZWQ8L2xhYmVsPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgJyBkYXRhLWlkPSJwcm9kdWN0QmxpbmRlZCI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnByb2R1Y3RzWzNdLmJsaW5kZWQiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uYmxpbmRlZCIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmJsaW5kZWQiPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgaWQ9InByb2R1Y3RBZGRsbkRydWdJbmZvcm1hdGlvbiIgY2xhc3M9IiBwcm9kdWN0QWRkbG5EcnVnSW5mb3JtYXRpb24gbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkFkZCYjMzk7bCBEcnVnIEluZm88L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RBZGRsbkRydWdJbmZvcm1hdGlvbiI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3QyLWJveCAgbXVsdGlTZWxlY3RTZWxlY3QyRmllbGQgd3JhcHBlZC1tdWx0aXNlbGVjdCAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5hZGRpdGlvbmFsRHJ1Z0luZm8uaWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJDaG9vc2UiIG11bHRpcGxlPSJtdWx0aXBsZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmFkZGl0aW9uYWxEcnVnSW5mby5pZCIgPg08b3B0aW9uIHZhbHVlPSIzMyIgPkNvdW50ZXJmZWl0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjM0IiA+T3ZlcmRvc2U8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzUiID5EcnVnIHRha2VuIGJ5IHRoZSBmYXRoZXI8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzYiID5EcnVnIHRha2VuIGJleW9uZCBleHBpcnkgZGF0ZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzNyIgPkJhdGNoIGFuZCBsb3QgdGVzdGVkIGFuZCBmb3VuZCB3aXRoaW4gc3BlY2lmaWNhdGlvbnM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzgiID5CYXRjaCBhbmQgbG90IHRlc3RlZCBhbmQgZm91bmQgbm90IHdpdGhpbiBzcGVjaWZpY2F0aW9uczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzOSIgPk1lZGljYXRpb24gZXJyb3I8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNDAiID5NaXN1c2U8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNDEiID5BYnVzZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI0MiIgPk9jY3VwYXRpb25hbCBleHBvc3VyZTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI0MyIgPk9mZiBsYWJlbCB1c2U8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48ZGl2IGlkPSJwcm9kdWN0QWRkaXRpb25hbERydWdJbmZvTm90ZXMiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sICAgICBwcm9kdWN0QWRkaXRpb25hbERydWdJbmZvTm90ZXMgY29sLW1kLTEyJz4gICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BZGQmIzM5O2wgRHJ1ZyBJbmZvIE5vdGVzPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RBZGRpdGlvbmFsRHJ1Z0luZm9Ob3RlcyI+ICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmFkZGl0aW9uYWxEcnVnSW5mb05vdGVzIiBtYXhsZW5ndGg9IjIwMDAiIHJvd3M9IjIiIGNvbHM9IjEwMCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uYWRkaXRpb25hbERydWdJbmZvTm90ZXMiID48L3RleHRhcmVhPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwhLS0gU3ViIFNlY3Rpb25zIFByb2R1Y3RzIC0tPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSBpbm5lclNlY3Rpb25UYWJsZSAiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0iYWNjb3JkaW9uLWlubmVyUHJvZHVjdHNfM18iPiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gU3Vic3RhbmNlcyAtLT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiByeC1jb2wtdGFibGUgb3ZlcnJpZGUtY29sLXBhZGRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2R1Y3RzXzNfIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNwcm9kdWN0U3Vic3RhbmNlc18zIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjb2xsYXBzZWQgaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1pbm5lclByb2R1Y3RzXzNfIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1YnN0YW5jZShzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJzdWJzdGFuY2VfM18iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJzdWJzdGFuY2VfM18iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0U3Vic3RhbmNlc18zIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVtcGxhdGVJZD0icHJvZHVjdFN1YnN0YW5jZXNUZW1wbGF0ZSIgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSAgaW5uZXItcmVwZWF0YWJsZSBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciBwYW5lbC1ib2R5IHAtMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQgY2xhc3M9InVuaGlnaGxpZ2h0U2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RJbmdyZWRpZW50cycgY2xhc3M9J2NvbC1tZC02ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTmFtZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItaW5ncmVkaWVudERvc2FnZVVuaXQnIGNsYXNzPSdjb2wtbWQtNiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFN0cmVuZ3RoIDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBhZGQtdGFibGUtcm93IGFkZC1zZWN0aW9uIGJ0bi1hZGQtcGFuZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1wcm9kdWN0LWlubmVyc3Vic3RhbmNlXzNfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIGlubmVyLXJlcGVhdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwcm9kdWN0U3Vic3RhbmNlc18zXy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4Ij4xPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvZHVjdEluZ3JlZGllbnRzIiBjbGFzcz0iIHByb2R1Y3RJbmdyZWRpZW50cyBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEluZ3JlZGllbnRzIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1hamF4IHdyYXBwZWQtbXVsdGlzZWxlY3QgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uaW5ncmVkaWVudHNbMF0ubmFtZS5pZCIgZGF0YS1mcm9tPSIiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXVybD0iL2Nhc2VFbnRyeS9zZWFyY2hJbmdyZWRpZW50cyIgZGF0YS12YWx1ZT0iMTAzNDk3MDEiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmluZ3JlZGllbnRzWzBdLm5hbWUuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmluZ3JlZGllbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSI0OSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uaW5ncmVkaWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPiAgICA8dGQgaWQ9ImluZ3JlZGllbnREb3NhZ2VVbml0IiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgaW5ncmVkaWVudERvc2FnZVVuaXQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iaW5ncmVkaWVudERvc2FnZVVuaXQiPiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjEwIiBkYXRhLXVuaXRMaXN0PSJzdHJlbmd0aC11bml0LWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uaW5ncmVkaWVudHNbMF0uc3RyZW5ndGgudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwIiBkYXRhLWZpZWxkLWlkPSJpbmdyZWRpZW50RG9zYWdlVW5pdCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uaW5ncmVkaWVudHNbMF0uc3RyZW5ndGgudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5pbmdyZWRpZW50c1swXS5zdHJlbmd0aC5pZCIgLz4gICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdHNbM10uaW5ncmVkaWVudHNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPjxpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdFN1YnN0YW5jZXNfMyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFByb2R1Y3QgSW5kaWNhdGlvbiAtLT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiByeC1jb2wtdGFibGUgb3ZlcnJpZGUtY29sLXBhZGRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2R1Y3RzXzNfIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c18zXyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdEluZGljYXRpb25fMyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZHVjdCBJbmRpY2F0aW9uKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNhY2NvcmRpb24tcHJvZHVjdC1pbm5lcmluZGljYXRpb25fM18iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJpbmRpY2F0aW9uXzNfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEluZGljYXRpb25fMyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlbXBsYXRlSWQ9InByb2R1Y3RJbmRpY2F0aW9uVGVtcGxhdGUiIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgIGlubmVyLXJlcGVhdGFibGUgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IgcGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3QtaW5kaWNhdGlvbiBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0idW5oaWdobGlnaHRTZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkJyBjbGFzcz0nY29sLW1kLTYgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBJbmRpY2F0aW9uIChSZXBvcnRlZCkgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RJbmRpY2F0aW9uQ29kZWQnIGNsYXNzPSdjb2wtbWQtNiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IEluZGljYXRpb24gKENvZGVkKSA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFidWxhcj0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIj48aSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24tcHJvZHVjdC1pbm5lcmluZGljYXRpb25fM18iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgIHB2LXNlY3Rpb24tcmVjb3JkIGlubmVyLXJlcGVhdGFibGUgdWktc29ydGFibGUtaGFuZGxlICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwcm9kdWN0SW5kaWNhdGlvbl8zXy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTYgIHRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdEluZGljYXRpb25SZXBvcnRlZCI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uUmVwb3J0ZWQiPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uUmVwb3J0ZWQiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgLz4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10ucHJvZHVjdEluZGljYXRpb25zWzBdLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10ucHJvZHVjdEluZGljYXRpb25zWzBdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10ucHJvZHVjdEluZGljYXRpb25zWzBdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNDAiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8dGQgaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0SW5kaWNhdGlvbkNvZGVkICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiPiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVhY3Rpb25Db2RlZCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTAwMCIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEluZGljYXRpb25Db2RlZCIgcmVhZG9ubHk9InJlYWRvbmx5IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICA8L2Rpdj48L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0c1szXS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPjxpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdEluZGljYXRpb25fMyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIERvc2UgSW5mb3JtYXRpb24gIC0tPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLWItMCBvdmVycmlkZS1jb2wtcGFkZGluZy1mdWxsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHJ4bWFpbi1jb250YWluZXIgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIHJ4bWFpbi1jb250YWluZXItcm93Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2R1Y3RzXzNfIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c18zXyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdERvc2VfMyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9zZSBJbmZvcm1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcHZpSW5uZXJQcm9kdWN0RG9zZVJlY29yZHNfM18iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiNwcm9kdWN0RG9zZV8zXyIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcHZpSW5uZXJQcm9kdWN0RG9zZVJlY29yZHNfM18iIGRhdGEtYW5jaG9yZGl2PSIjcHJvZHVjdERvc2VfM18iIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1hZGQtcGFuZWwgYnRuLWFkZHJvdy10b3AgaWMtc20gcHYtYWRkLXJvdyIgZGF0YS1pbm5lci1zZWM9InRydWUiICAgICAgICAgICBkYXRhLXRhYnVsYXI9ImlubmVyIiB0aXRsZT0iQWRkIGFub3RoZXIgc2VjdGlvbiIgICAgICAgICAgIGRhdGEtdGFyZ2V0PSJwdi1pbm5lclByb2R1Y3REb3NlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYWRkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdERvc2VfMyIgZGF0YS10ZW1wbGF0ZUlkPSJwcm9kdWN0RG9zZVRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlICBpbm5lci1yZXBlYXRhYmxlIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lcmRvc2UtY29udGFpbmVyIHB2LWRyYWdnYWJsZS1saXN0IHB2LXNlY3Rpb24gdWktc29ydGFibGUgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InB2aUlubmVyUHJvZHVjdERvc2VSZWNvcmRzXzNfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1zZWN0aW9uLXJlY29yZCBpbm5lci1yZXBlYXRhYmxlIHB2LWlubmVyUHJvZHVjdERvc2UgcC0xMCB1aS1zb3J0YWJsZS1oYW5kbGUgcC1iLTEwIHJvdyByb3ctc3RyaXAgICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InByb2R1Y3REb3NlXzNfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9InJvdy1hY3Rpb24gbnVtLWJnIj4gICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iIGNsYXNzPSJwdi1pYyBpYy14cyBtLXItNSByZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIHByb2R1Y3RfMCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIG0tYi0xMCBmb3JtLXB2IGZvcm0taG9yaXpvbnRhbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlSW5mb3JtYXRpb24iIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlSW5mb3JtYXRpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RG9zZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VJbmZvcm1hdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjgiIGRhdGEtdW5pdExpc3Q9ImRvc2FnZS11bml0LWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zZUluZm9ybWF0aW9uc1swXS5kb3NlLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI4IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RG9zZUluZm9ybWF0aW9uIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRvc2UudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZG9zZS5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zZUluZm9ybWF0aW9uc1swXS5kb3NlLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zZUluZm9ybWF0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNDEiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2VJbmZvcm1hdGlvbnNbMF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUZyZXF1ZW5jeSIgY2xhc3M9IiBwcm9kdWN0RG9zZUZyZXF1ZW5jeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZyZXF1ZW5jeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VGcmVxdWVuY3kiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zZUluZm9ybWF0aW9uc1swXS5mcmVxdWVuY3kuaWQiIGRhdGEtZnJvbT0iZG9zYWdlRnJlcXVlbmN5IiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zZUluZm9ybWF0aW9uc1swXS5mcmVxdWVuY3kuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZVN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdERvc2VTdGFydERhdGUgIGNvbC1tZC0xLWhhbGYgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InByb2R1Y3REb3NlU3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zZUluZm9ybWF0aW9uc1swXS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5kb3NlSW5mb3JtYXRpb25zWzBdLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlRW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdERvc2VFbmREYXRlICBjb2wtbWQtMS1oYWxmICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icHJvZHVjdERvc2VFbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlRHVyYXRpb24iIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlRHVyYXRpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RHVyYXRpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlRHVyYXRpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VEdXJhdGlvbiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlQmF0Y2hOdW1iZXIiIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlQmF0Y2hOdW1iZXIgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QmF0Y2gvTG90IE51bWJlcjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VCYXRjaE51bWJlciI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1szXS5kb3NlSW5mb3JtYXRpb25zWzBdLmJhdGNoTnVtYmVyIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIzNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VCYXRjaE51bWJlciIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbM10uZG9zZUluZm9ybWF0aW9uc1swXS5iYXRjaE51bWJlciIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlUm91dGUiIGNsYXNzPSIgcHJvZHVjdERvc2VSb3V0ZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJvdXRlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZVJvdXRlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucm91dGUuaWRPclZhbHVlIiBkYXRhLXRhZz0idHJ1ZSIgZGF0YS1mcm9tPSJyb3V0ZSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucm91dGUuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdERvc2VQYXJlbnRSb3V0ZSIgY2xhc3M9IiBwcm9kdWN0RG9zZVBhcmVudFJvdXRlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMS1oYWxmICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UGFyZW50IFJvdXRlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZVBhcmVudFJvdXRlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucGFyZW50Um91dGUuaWRPclZhbHVlIiBkYXRhLXRhZz0idHJ1ZSIgZGF0YS1mcm9tPSJyb3V0ZSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucGFyZW50Um91dGUuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZURlc2NyaXB0aW9uIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdERvc2VEZXNjcmlwdGlvbiAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Eb3NlIERlc2NyaXB0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZURlc2NyaXB0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZGVzY3JpcHRpb24iIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3REb3NlRGVzY3JpcHRpb24iIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzNdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZGVzY3JpcHRpb24iIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0c1szXS5kb3NlSW5mb3JtYXRpb25zWzBdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAiIGlkPSJwcm9kdWN0LXNlY3Rpb24tNCI+ICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWhlYWRlcj0iUHJvZHVjdC1TZWN0aW9uIiBkYXRhLXBhcmVudD0iI3Byb2R1Y3Qtc2VjdGlvbiIgICAgICAgICAgICAgICAgICAgaHJlZj0iI3Byb2R1Y3Qtc2VjdGlvbl80IiBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmFkZ2Ugcm93LWNvdW50IGJhZGdlLWluZGV4Ij41PC9zcGFuPlByb2R1Y3QtU2VjdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb25maWd1cmVGaWVsZHMgcHYtc3ViaGVhZC1jb25maWciPiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gcHJvZHVjdC1kZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdF80IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0LXNlY3Rpb25fNCIgY2xhc3M9InBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIGlubmVyLXJlcGVhdGFibGUgcHJvZHVjdC1zZWMiICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgdWktbmVzdGVkLXNvcnRhYmxlLWhhbmRsZSAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgZm9ybS1wdiI+ICAgICAgICAgICAgICAgICAgICA8ZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0TGljZW5zZSIgY2xhc3M9JyBjb2wtbWQtNCByZXF1aXJlZCAgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdExpY2Vuc2UnID4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Qcm9kdWN0IE5hbWU8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InByb2R1Y3RMaWNlbnNlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIHByb2R1Y3ROYW1lQnJvd3NlciAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5saWNlbnNlLnZhbHVlIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9IkRlcHJvbWVsIDc1bWcgdGFibGV0IiBkYXRhLW1hbmRhdG9yeT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci12YWx1ZT0iRGVwcm9tZWwgNzVtZyB0YWJsZXQiIGRhdGEtYnJvd3Nlci10eXBlPSJwcm9kdWN0IiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwcm9kdWN0TGljZW5zZSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0ubGljZW5zZS52YWx1ZSIgLz4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5saWNlbnNlLmlkIiB2YWx1ZT0iMTAwMTYxIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5saWNlbnNlLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uaWQiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDAxMjEiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjQyIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1swXS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbMF0uc2VhcmNoIj4gICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giID48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdERvc2FnZUZvcm0iIGNsYXNzPSIgcHJvZHVjdERvc2FnZUZvcm0gbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RG9zYWdlIEZvcm08L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NhZ2VGb3JtIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2FnZUZvcm0uaWQiIGRhdGEtZnJvbT0iZG9zYWdlRm9ybSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIxIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5kb3NhZ2VGb3JtLmlkIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RSb2xlIiBjbGFzcz0iIHByb2R1Y3RSb2xlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiByZXF1aXJlZCAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Um9sZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdFJvbGUiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBwcm9kdWN0Um9sZUlkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5yb2xlLmlkIiBkYXRhLWZyb209InJvbGVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0idHJ1ZSIgZGF0YS12YWx1ZT0iMjkiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLnJvbGUuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdE9idGFpbkNvdW50cnkiIGNsYXNzPSIgcHJvZHVjdE9idGFpbkNvdW50cnkgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+T2J0YWluIENvdW50cnk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RPYnRhaW5Db3VudHJ5Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgY291bnRyeSBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0ub2J0YWluQ291bnRyeS5pZCIgZGF0YS1mcm9tPSJjb3VudHJpZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5vYnRhaW5Db3VudHJ5LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0QXV0aE51bWJlciIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RBdXRoTnVtYmVyICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkF1dGguIE51bWJlcjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEF1dGhOdW1iZXIiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uYXV0aE51bWJlciIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMzUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RBdXRoTnVtYmVyIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5hdXRoTnVtYmVyIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEF1dGhDb3VudHJ5IiBjbGFzcz0iIHByb2R1Y3RBdXRoQ291bnRyeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BdXRoLiBDb3VudHJ5PC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0QXV0aENvdW50cnkiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBjb3VudHJ5IHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5hdXRoQ291bnRyeS5pZCIgZGF0YS1mcm9tPSJjb3VudHJpZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5hdXRoQ291bnRyeS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RNYW51ZmFjdHVyZXIiIGNsYXNzPSIgcHJvZHVjdE1hbnVmYWN0dXJlciBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BdXRoLiBIb2xkZXI8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RNYW51ZmFjdHVyZXIiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uYXV0aEhvbGRlci5pZE9yVmFsdWUiIGRhdGEtdGFnPSJ0cnVlIiBkYXRhLWZyb209Im1hbnVmYWN0dXJlcnMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5hdXRoSG9sZGVyLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkN1bXVsYXRpdmUgRG9zZSB0byBGaXJzdCBSZWFjdGlvbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iMTAiIGRhdGEtdW5pdExpc3Q9ImRvc2FnZS11bml0LWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uY3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24udmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwIiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0Q3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24iIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmN1bXVsYXRpdmVEb3NlVG9GaXJzdFJlYWN0aW9uLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5jdW11bGF0aXZlRG9zZVRvRmlyc3RSZWFjdGlvbi5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uY3VtdWxhdGl2ZURvc2VUb0ZpcnN0UmVhY3Rpb24uaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXhwb3N1cmVHZXN0YXRpb25QZXJpb2QiIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXhwb3N1cmVHZXN0YXRpb25QZXJpb2QgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RXhwb3N1cmUgR2VzdGF0aW9uIFBlcmlvZDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iMyIgZGF0YS11bml0TGlzdD0iZ2VzdGF0aW9uLXBlcmlvZC1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIzIiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXhwb3N1cmVHZXN0YXRpb25QZXJpb2QiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmV4cG9zdXJlR2VzdGF0aW9uUGVyaW9kLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5leHBvc3VyZUdlc3RhdGlvblBlcmlvZC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZXhwb3N1cmVHZXN0YXRpb25QZXJpb2QuaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEFjdGlvblRha2VuIiBjbGFzcz0iIHByb2R1Y3RBY3Rpb25UYWtlbiBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BY3Rpb24gVGFrZW48L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RBY3Rpb25UYWtlbiI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5hY3Rpb25UYWtlbi5pZCIgZGF0YS1mcm9tPSJhY3Rpb25UYWtlbiIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmFjdGlvblRha2VuLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV4cGlyYXRpb25EYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBwcm9kdWN0RXhwaXJhdGlvbkRhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FeHBpcmF0aW9uIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InByb2R1Y3RFeHBpcmF0aW9uRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgZnV0dXJlRGF0ZXNBbGxvd2VkIGFsbG93RGF0ZVdpdGhvdXRUaW1lICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5leHBpcmF0aW9uRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5leHBpcmF0aW9uRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmV4cGlyYXRpb25EYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZXhwaXJhdGlvbkRhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0UmVwbGFjZW1lbnRSZXF1aXJlZCIgY2xhc3M9IiBwcm9kdWN0UmVwbGFjZW1lbnRSZXF1aXJlZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZXBsYWNlbWVudCBSZXF1aXJlZDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdFJlcGxhY2VtZW50UmVxdWlyZWQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0ucmVwbGFjZW1lbnRSZXF1aXJlZC5pZCIgZGF0YS1mcm9tPSJyZXBsYWNlbWVudFJlcXVpcmVkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0ucmVwbGFjZW1lbnRSZXF1aXJlZC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMjMiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAyNCIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RSZXR1cm5SZXF1aXJlZCIgY2xhc3M9IiBwcm9kdWN0UmV0dXJuUmVxdWlyZWQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmV0dXJuIFJlcXVpcmVkPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0UmV0dXJuUmVxdWlyZWQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0ucmV0dXJuUmVxdWlyZWQuaWQiIGRhdGEtZnJvbT0icmV0dXJuUmVxdWlyZWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5yZXR1cm5SZXF1aXJlZC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMzMiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTAzNCIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RSZWZ1bmRSZXF1ZXN0ZWQiIGNsYXNzPSIgcHJvZHVjdFJlZnVuZFJlcXVlc3RlZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWZ1bmQgUmVxdWVzdGVkPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0UmVmdW5kUmVxdWVzdGVkIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLnJlZnVuZFJlcXVlc3RlZC5pZCIgZGF0YS1mcm9tPSJyZWZ1bmRSZXF1ZXN0ZWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5yZWZ1bmRSZXF1ZXN0ZWQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxMDM1IiA+WWVzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjEwMzYiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RCbGluZGVkIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgICBwcm9kdWN0QmxpbmRlZCc+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5CbGluZGVkPC9sYWJlbD4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICcgZGF0YS1pZD0icHJvZHVjdEJsaW5kZWQiPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5ibGluZGVkIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmJsaW5kZWQiIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5ibGluZGVkIj48L2xhYmVsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0QWRkbG5EcnVnSW5mb3JtYXRpb24iIGNsYXNzPSIgcHJvZHVjdEFkZGxuRHJ1Z0luZm9ybWF0aW9uIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BZGQmIzM5O2wgRHJ1ZyBJbmZvPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0QWRkbG5EcnVnSW5mb3JtYXRpb24iPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0Mi1ib3ggIG11bHRpU2VsZWN0U2VsZWN0MkZpZWxkIHdyYXBwZWQtbXVsdGlzZWxlY3QgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uYWRkaXRpb25hbERydWdJbmZvLmlkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iQ2hvb3NlIiBtdWx0aXBsZT0ibXVsdGlwbGUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5hZGRpdGlvbmFsRHJ1Z0luZm8uaWQiID4NPG9wdGlvbiB2YWx1ZT0iMzMiID5Db3VudGVyZmVpdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzNCIgPk92ZXJkb3NlPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjM1IiA+RHJ1ZyB0YWtlbiBieSB0aGUgZmF0aGVyPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjM2IiA+RHJ1ZyB0YWtlbiBiZXlvbmQgZXhwaXJ5IGRhdGU8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzciID5CYXRjaCBhbmQgbG90IHRlc3RlZCBhbmQgZm91bmQgd2l0aGluIHNwZWNpZmljYXRpb25zPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjM4IiA+QmF0Y2ggYW5kIGxvdCB0ZXN0ZWQgYW5kIGZvdW5kIG5vdCB3aXRoaW4gc3BlY2lmaWNhdGlvbnM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMzkiID5NZWRpY2F0aW9uIGVycm9yPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQwIiA+TWlzdXNlPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQxIiA+QWJ1c2U8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNDIiID5PY2N1cGF0aW9uYWwgZXhwb3N1cmU8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNDMiID5PZmYgbGFiZWwgdXNlPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+PGRpdiBpZD0icHJvZHVjdEFkZGl0aW9uYWxEcnVnSW5mb05vdGVzIiBjbGFzcz0ndGVtcGxhdGUtY29udHJvbCAgICAgcHJvZHVjdEFkZGl0aW9uYWxEcnVnSW5mb05vdGVzIGNvbC1tZC0xMic+ICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QWRkJiMzOTtsIERydWcgSW5mbyBOb3RlczwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0QWRkaXRpb25hbERydWdJbmZvTm90ZXMiPiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5hZGRpdGlvbmFsRHJ1Z0luZm9Ob3RlcyIgbWF4bGVuZ3RoPSIyMDAwIiByb3dzPSIyIiBjb2xzPSIxMDAiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmFkZGl0aW9uYWxEcnVnSW5mb05vdGVzIiA+PC90ZXh0YXJlYT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1heGxlbmd0aC1mZWVkYmFjayI+PC9zcGFuPiAgICAgICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8IS0tIFN1YiBTZWN0aW9ucyBQcm9kdWN0cyAtLT4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUgaW5uZXJTZWN0aW9uVGFibGUgIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1pbm5lclByb2R1Y3RzXzRfIj4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFN1YnN0YW5jZXMgLS0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgcngtY29sLXRhYmxlIG92ZXJyaWRlLWNvbC1wYWRkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24taW5uZXJQcm9kdWN0c180XyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdFN1YnN0YW5jZXNfNCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c180XyIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdWJzdGFuY2UocykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI2FjY29yZGlvbi1wcm9kdWN0LWlubmVyc3Vic3RhbmNlXzRfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI2FjY29yZGlvbi1wcm9kdWN0LWlubmVyc3Vic3RhbmNlXzRfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdFN1YnN0YW5jZXNfNCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlbXBsYXRlSWQ9InByb2R1Y3RTdWJzdGFuY2VzVGVtcGxhdGUiIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgIGlubmVyLXJlcGVhdGFibGUgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IgcGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkIGNsYXNzPSJ1bmhpZ2hsaWdodFNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0SW5ncmVkaWVudHMnIGNsYXNzPSdjb2wtbWQtNiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE5hbWUgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLWluZ3JlZGllbnREb3NhZ2VVbml0JyBjbGFzcz0nY29sLW1kLTYgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTdHJlbmd0aCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFidWxhcj0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24tcHJvZHVjdC1pbm5lcnN1YnN0YW5jZV80XyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBpbm5lci1yZXBlYXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icHJvZHVjdFN1YnN0YW5jZXNfNF8tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb2R1Y3RJbmdyZWRpZW50cyIgY2xhc3M9IiBwcm9kdWN0SW5ncmVkaWVudHMgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmdyZWRpZW50cyI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItYWpheCB3cmFwcGVkLW11bHRpc2VsZWN0ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmluZ3JlZGllbnRzWzBdLm5hbWUuaWQiIGRhdGEtZnJvbT0iIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS11cmw9Ii9jYXNlRW50cnkvc2VhcmNoSW5ncmVkaWVudHMiIGRhdGEtdmFsdWU9IjIzMzAiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmluZ3JlZGllbnRzWzBdLm5hbWUuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmluZ3JlZGllbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSI1MCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uaW5ncmVkaWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPiAgICA8dGQgaWQ9ImluZ3JlZGllbnREb3NhZ2VVbml0IiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgaW5ncmVkaWVudERvc2FnZVVuaXQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iaW5ncmVkaWVudERvc2FnZVVuaXQiPiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjEwIiBkYXRhLXVuaXRMaXN0PSJzdHJlbmd0aC11bml0LWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uaW5ncmVkaWVudHNbMF0uc3RyZW5ndGgudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjEwIiBkYXRhLWZpZWxkLWlkPSJpbmdyZWRpZW50RG9zYWdlVW5pdCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uaW5ncmVkaWVudHNbMF0uc3RyZW5ndGgudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmluZ3JlZGllbnRzWzBdLnN0cmVuZ3RoLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5pbmdyZWRpZW50c1swXS5zdHJlbmd0aC5pZCIgLz4gICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdHNbNF0uaW5ncmVkaWVudHNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPjxpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdFN1YnN0YW5jZXNfNCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFByb2R1Y3QgSW5kaWNhdGlvbiAtLT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiByeC1jb2wtdGFibGUgb3ZlcnJpZGUtY29sLXBhZGRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2R1Y3RzXzRfIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c180XyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdEluZGljYXRpb25fNCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZHVjdCBJbmRpY2F0aW9uKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNhY2NvcmRpb24tcHJvZHVjdC1pbm5lcmluZGljYXRpb25fNF8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjYWNjb3JkaW9uLXByb2R1Y3QtaW5uZXJpbmRpY2F0aW9uXzRfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEluZGljYXRpb25fNCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlbXBsYXRlSWQ9InByb2R1Y3RJbmRpY2F0aW9uVGVtcGxhdGUiIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgIGlubmVyLXJlcGVhdGFibGUgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IgcGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3QtaW5kaWNhdGlvbiBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz0idW5oaWdobGlnaHRTZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkJyBjbGFzcz0nY29sLW1kLTYgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBJbmRpY2F0aW9uIChSZXBvcnRlZCkgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RJbmRpY2F0aW9uQ29kZWQnIGNsYXNzPSdjb2wtbWQtNiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IEluZGljYXRpb24gKENvZGVkKSA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFidWxhcj0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIj48aSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24tcHJvZHVjdC1pbm5lcmluZGljYXRpb25fNF8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgIHB2LXNlY3Rpb24tcmVjb3JkIGlubmVyLXJlcGVhdGFibGUgdWktc29ydGFibGUtaGFuZGxlICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJwcm9kdWN0SW5kaWNhdGlvbl80Xy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29sLW1kLTYgIHRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdEluZGljYXRpb25SZXBvcnRlZCI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uUmVwb3J0ZWQiPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uUmVwb3J0ZWQiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJwcm9kdWN0SW5kaWNhdGlvblJlcG9ydGVkIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVwb3J0ZWRSZWFjdGlvbiIgLz4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0ucHJvZHVjdEluZGljYXRpb25zWzBdLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0ucHJvZHVjdEluZGljYXRpb25zWzBdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0ucHJvZHVjdEluZGljYXRpb25zWzBdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNDQiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLnByb2R1Y3RJbmRpY2F0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8dGQgaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0SW5kaWNhdGlvbkNvZGVkICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RJbmRpY2F0aW9uQ29kZWQiPiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVhY3Rpb25Db2RlZCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMTAwMCIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEluZGljYXRpb25Db2RlZCIgcmVhZG9ubHk9InJlYWRvbmx5IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0ucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICA8L2Rpdj48L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5wcm9kdWN0SW5kaWNhdGlvbnNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPjxpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQgbWQtY2xvc2UgcHJvZHVjdEluZGljYXRpb25fNCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIERvc2UgSW5mb3JtYXRpb24gIC0tPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtLWItMCBvdmVycmlkZS1jb2wtcGFkZGluZy1mdWxsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHJ4bWFpbi1jb250YWluZXIgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIHJ4bWFpbi1jb250YWluZXItcm93Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2R1Y3RzXzRfIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kdWN0c180XyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcHJvZHVjdERvc2VfNCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9zZSBJbmZvcm1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcHZpSW5uZXJQcm9kdWN0RG9zZVJlY29yZHNfNF8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiNwcm9kdWN0RG9zZV80XyIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcHZpSW5uZXJQcm9kdWN0RG9zZVJlY29yZHNfNF8iIGRhdGEtYW5jaG9yZGl2PSIjcHJvZHVjdERvc2VfNF8iIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1hZGQtcGFuZWwgYnRuLWFkZHJvdy10b3AgaWMtc20gcHYtYWRkLXJvdyIgZGF0YS1pbm5lci1zZWM9InRydWUiICAgICAgICAgICBkYXRhLXRhYnVsYXI9ImlubmVyIiB0aXRsZT0iQWRkIGFub3RoZXIgc2VjdGlvbiIgICAgICAgICAgIGRhdGEtdGFyZ2V0PSJwdi1pbm5lclByb2R1Y3REb3NlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYWRkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdERvc2VfNCIgZGF0YS10ZW1wbGF0ZUlkPSJwcm9kdWN0RG9zZVRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlICBpbm5lci1yZXBlYXRhYmxlIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lcmRvc2UtY29udGFpbmVyIHB2LWRyYWdnYWJsZS1saXN0IHB2LXNlY3Rpb24gdWktc29ydGFibGUgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InB2aUlubmVyUHJvZHVjdERvc2VSZWNvcmRzXzRfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1zZWN0aW9uLXJlY29yZCBpbm5lci1yZXBlYXRhYmxlIHB2LWlubmVyUHJvZHVjdERvc2UgcC0xMCB1aS1zb3J0YWJsZS1oYW5kbGUgcC1iLTEwIHJvdyByb3ctc3RyaXAgICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InByb2R1Y3REb3NlXzRfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+PHNwYW4gY2xhc3M9InJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9InJvdy1hY3Rpb24gbnVtLWJnIj4gICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iIGNsYXNzPSJwdi1pYyBpYy14cyBtLXItNSByZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIHByb2R1Y3RfMCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgbS10LTIwIG0tYi0xMCBmb3JtLXB2IGZvcm0taG9yaXpvbnRhbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlSW5mb3JtYXRpb24iIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlSW5mb3JtYXRpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RG9zZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VJbmZvcm1hdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjgiIGRhdGEtdW5pdExpc3Q9ImRvc2FnZS11bml0LWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZG9zZUluZm9ybWF0aW9uc1swXS5kb3NlLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI4IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RG9zZUluZm9ybWF0aW9uIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5kb3NlSW5mb3JtYXRpb25zWzBdLmRvc2UudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZG9zZS5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZG9zZUluZm9ybWF0aW9uc1swXS5kb3NlLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZG9zZUluZm9ybWF0aW9uc1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNDUiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2VJbmZvcm1hdGlvbnNbMF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZUZyZXF1ZW5jeSIgY2xhc3M9IiBwcm9kdWN0RG9zZUZyZXF1ZW5jeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZyZXF1ZW5jeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VGcmVxdWVuY3kiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZG9zZUluZm9ybWF0aW9uc1swXS5mcmVxdWVuY3kuaWQiIGRhdGEtZnJvbT0iZG9zYWdlRnJlcXVlbmN5IiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZG9zZUluZm9ybWF0aW9uc1swXS5mcmVxdWVuY3kuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZVN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdERvc2VTdGFydERhdGUgIGNvbC1tZC0xLWhhbGYgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InByb2R1Y3REb3NlU3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2VJbmZvcm1hdGlvbnNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZG9zZUluZm9ybWF0aW9uc1swXS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5kb3NlSW5mb3JtYXRpb25zWzBdLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlRW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgcHJvZHVjdERvc2VFbmREYXRlICBjb2wtbWQtMS1oYWxmICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0icHJvZHVjdERvc2VFbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5kb3NlSW5mb3JtYXRpb25zWzBdLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlRHVyYXRpb24iIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlRHVyYXRpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RHVyYXRpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3REb3NlRHVyYXRpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VEdXJhdGlvbiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZG9zZUluZm9ybWF0aW9uc1swXS5kdXJhdGlvbi5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlQmF0Y2hOdW1iZXIiIGNsYXNzPSJjb2wtbWQtMS1oYWxmIHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3REb3NlQmF0Y2hOdW1iZXIgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+QmF0Y2gvTG90IE51bWJlcjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdERvc2VCYXRjaE51bWJlciI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5kb3NlSW5mb3JtYXRpb25zWzBdLmJhdGNoTnVtYmVyIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIzNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdERvc2VCYXRjaE51bWJlciIgaWQ9InNhZmV0eURhdGEucHJvZHVjdHNbNF0uZG9zZUluZm9ybWF0aW9uc1swXS5iYXRjaE51bWJlciIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3REb3NlUm91dGUiIGNsYXNzPSIgcHJvZHVjdERvc2VSb3V0ZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTEtaGFsZiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJvdXRlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZVJvdXRlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucm91dGUuaWRPclZhbHVlIiBkYXRhLXRhZz0idHJ1ZSIgZGF0YS1mcm9tPSJyb3V0ZSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucm91dGUuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdERvc2VQYXJlbnRSb3V0ZSIgY2xhc3M9IiBwcm9kdWN0RG9zZVBhcmVudFJvdXRlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMS1oYWxmICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UGFyZW50IFJvdXRlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZVBhcmVudFJvdXRlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucGFyZW50Um91dGUuaWRPclZhbHVlIiBkYXRhLXRhZz0idHJ1ZSIgZGF0YS1mcm9tPSJyb3V0ZSIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2VJbmZvcm1hdGlvbnNbMF0ucGFyZW50Um91dGUuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RG9zZURlc2NyaXB0aW9uIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdERvc2VEZXNjcmlwdGlvbiAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Eb3NlIERlc2NyaXB0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RG9zZURlc2NyaXB0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZGVzY3JpcHRpb24iIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3REb3NlRGVzY3JpcHRpb24iIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RzWzRdLmRvc2VJbmZvcm1hdGlvbnNbMF0uZGVzY3JpcHRpb24iIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0c1s0XS5kb3NlSW5mb3JtYXRpb25zWzBdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEV2ZW50cyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIHJ4bWFpbi1jb250YWluZXIgcnhtYWluLWNvbnRhaW5lci10b3AiICAgICAgICAgaWQ9InYtZXZlbnQiPiAgICAgICAgPGRpdiBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1yb3cgcnhtYWluLWNvbnRhaW5lci1oZWFkZXIgcGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgPGg0IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLWhlYWRlci1sYWJlbCI+ICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24tY2FzZSIgICAgICAgICAgICAgICAgICAgaHJlZj0iI2V2ZW50IiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBzZWMtZGlzcGxheS10eHQgc2VjdGlvblRpdGxlIj4gICAgICAgICAgICAgICAgICAgIEV2ZW50KHMpICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI2FjY29yZGlvbi1ldmVudCIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyAiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI2FjY29yZGlvbi1ldmVudCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyAiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBidG4tYWRkLXBhbmVsIGJ0bi1hZGRyb3ctdG9wIGljLXNtICIgZGF0YS1pbm5lci1zZWM9IiIgICAgICAgICAgIGRhdGEtdGFidWxhcj0iZmFsc2UiIHRpdGxlPSJBZGQgYW5vdGhlciBzZWN0aW9uIiAgICAgICAgICAgZGF0YS10YXJnZXQ9InB2aS1ldmVudCI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFkZCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICAgICAgICAgIDwvaDQ+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgaWQ9ImV2ZW50IiBkYXRhLXRlbXBsYXRlSWQ9ImV2ZW50VGVtcGxhdGUiICAgICAgICAgICAgIGNsYXNzPSJwdi1tYWluIHBhbmVsLWNvbGxhcHNlIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgY29sbGFwc2UgIiAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSBtLWItMCByb3ciPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAgcHYtZHJhZ2dhYmxlLWxpc3Qgc2hvcnQtZmllbGQgcHYtc2VjdGlvbiBtLWItMCIgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImFjY29yZGlvbi1ldmVudCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcHYtc2VjdGlvbi1yZWNvcmQgcHYtZXZlbnQgdWktc29ydGFibGUtaGFuZGxlIHBhbmVsLWRlZmF1bHQgIiAgICAgaWQ9ImV2ZW50LXNlY3Rpb24tMCI+ICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWhlYWRlcj0iRXZlbnQtU2VjdGlvbiIgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1ldmVudCIgaHJlZj0iI2V2ZW50LXNlY3Rpb25fMCIgICAgICAgICAgICAgICBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJhZGdlIHJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPkV2ZW50LVNlY3Rpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb25maWd1cmVGaWVsZHMgcHYtc3ViaGVhZC1jb25maWciPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9InB2LWV2ZW50IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJyZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgZXZlbnQtZGVsIj4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZXZlbnRfMCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICA8L2Rpdj4gICAgPGRpdiBjbGFzcz0icGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gaW5uZXItcmVwZWF0YWJsZSIgYXJpYS1leHBhbmRlZD0idHJ1ZSIgICAgICAgICBpZD0iZXZlbnQtc2VjdGlvbl8wIj4gICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGZvcm0tcHYiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJldmVudFJlcG9ydGVkUmVhY3Rpb24iIGNsYXNzPScgY29sLW1kLTQgcmVxdWlyZWQgIHRlbXBsYXRlLWNvbnRyb2wgIGV2ZW50UmVwb3J0ZWRSZWFjdGlvbicgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlcG9ydGVkIFJlYWN0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJldmVudFJlcG9ydGVkUmVhY3Rpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGV2ZW50TmFtZUJyb3dzZXIgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1swXS5yZXBvcnRlZFJlYWN0aW9uIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9ImhlYWRhY2giIGRhdGEtbWFuZGF0b3J5PSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXZhbHVlPSJoZWFkYWNoIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSJldmVudFJlYWN0aW9uQ29kZWQiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJldmVudFJlcG9ydGVkUmVhY3Rpb24iIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5yZXBvcnRlZFJlYWN0aW9uIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1swXS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMTkyMTEiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9ImhlYWRhY2giIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIxNSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLmludGVybmFsUm93SWQiIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50TGFuZ3VhZ2UiIGNsYXNzPSIgZXZlbnRMYW5ndWFnZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZXBvcnRlZCBMYW5ndWFnZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRMYW5ndWFnZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0ucmVwb3J0ZWRMYW5ndWFnZS5pZCIgZGF0YS1mcm9tPSJsYW5ndWFnZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iMSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLnJlcG9ydGVkTGFuZ3VhZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJldmVudFRyYW5zbGF0ZWRSZWFjdGlvbiIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIGV2ZW50VHJhbnNsYXRlZFJlYWN0aW9uICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlRyYW5zbGF0ZWQgUmVhY3Rpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50VHJhbnNsYXRlZFJlYWN0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1swXS50cmFuc2xhdGVkUmVhY3Rpb24iIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1maWVsZC1pZD0iZXZlbnRUcmFuc2xhdGVkUmVhY3Rpb24iIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS50cmFuc2xhdGVkUmVhY3Rpb24iIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9ImV2ZW50UmVhY3Rpb25Db2RlZCIgY2xhc3M9ImNvbC1tZC00IHRlbXBsYXRlLWNvbnRyb2wgIGV2ZW50UmVhY3Rpb25Db2RlZCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWFjdGlvbiAoQ29kZWQpPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudFJlYWN0aW9uQ29kZWQiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSJIZWFkYWNoZSIgZGF0YS1pbml0aWFsLXZhbHVlPSJIZWFkYWNoZSIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtZmllbGQtaWQ9ImV2ZW50UmVhY3Rpb25Db2RlZCIgcmVhZG9ubHk9InJlYWRvbmx5IiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0ucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50SGlnaGxpZ2h0ZWRCeVJlcG9ydGVyIiBjbGFzcz0iIGV2ZW50SGlnaGxpZ2h0ZWRCeVJlcG9ydGVyIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkhpZ2hsaWdodGVkIGJ5IFJlcG9ydGVyPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudEhpZ2hsaWdodGVkQnlSZXBvcnRlciI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaGlnaGxpZ2h0ZWRCeVJlcG9ydGVyLmlkIiBkYXRhLWZyb209ImhpZ2hsaWdodGVkQnlSZXBvcnRlcnMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaGlnaGxpZ2h0ZWRCeVJlcG9ydGVyLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTciID5IaWdobGlnaHRlZCwgTk9UIHNlcmlvdXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTgiID5Ob3QgaGlnaGxpZ2h0ZWQsIE5PVCBzZXJpb3VzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjE5IiA+SGlnaGxpZ2h0ZWQsIFNFUklPVVM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjAiID5Ob3QgaGlnaGxpZ2h0ZWQsIFNFUklPVVM8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRTZXJpb3VzTmVzcyIgY2xhc3M9IiBldmVudFNlcmlvdXNOZXNzIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlNlcmlvdXNuZXNzIENyaXRlcmlhPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudFNlcmlvdXNOZXNzIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdDItYm94ICBzZXJpb3VzbmVzc2VzIG11bHRpU2VsZWN0U2VsZWN0MkZpZWxkIHdyYXBwZWQtbXVsdGlzZWxlY3QgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLnNlcmlvdXNuZXNzZXMuaWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJDaG9vc2UiIG11bHRpcGxlPSJtdWx0aXBsZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5zZXJpb3VzbmVzc2VzLmlkIiA+DTxvcHRpb24gdmFsdWU9IjEiID5EZWF0aDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyIiA+TGlmZSBUaHJlYXRlbmluZzwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzIiA+SG9zcGl0YWxpemF0aW9uPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQiID5EaXNhYmxpbmc8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNSIgPkNvbmdlbml0YWwgQW5vbWFseTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI2IiA+T3RoZXIgTWVkaWNhbGx5IEltcG9ydGFudCBDb25kaXRpb248L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGV2ZW50U3RhcnREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RhcnQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0iZXZlbnRTdGFydERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLnN0YXJ0RGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5zdGFydERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudEVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGV2ZW50RW5kRGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkVuZCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJldmVudEVuZERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uZW5kRGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5lbmREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJldmVudER1cmF0aW9uIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgZXZlbnREdXJhdGlvbiAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EdXJhdGlvbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnREdXJhdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uZHVyYXRpb24udmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9ImV2ZW50RHVyYXRpb24iIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5kdXJhdGlvbi52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmR1cmF0aW9uLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0uZHVyYXRpb24uaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRPdXRjb21lcyIgY2xhc3M9IiBldmVudE91dGNvbWVzIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk91dGNvbWU8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50T3V0Y29tZXMiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLm91dGNvbWUuaWQiIGRhdGEtZnJvbT0ib3V0Y29tZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0ub3V0Y29tZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50TWVkaWNhbGx5Q29uZmlybWVkIiBjbGFzcz0iIGV2ZW50TWVkaWNhbGx5Q29uZmlybWVkIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk1lZGljYWxseSBDb25maXJtZWQ8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50TWVkaWNhbGx5Q29uZmlybWVkIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1swXS5tZWRpY2FsbHlDb25maXJtZWQuaWQiIGRhdGEtZnJvbT0ibWVkaWNhbGx5Q29uZmlybWVkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLm1lZGljYWxseUNvbmZpcm1lZC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIxIiA+WWVzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIyIiA+Tm88L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRDb3VudHJ5IiBjbGFzcz0iIGV2ZW50Q291bnRyeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db3VudHJ5PC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudENvdW50cnkiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBjb3VudHJ5IHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uY291bnRyeS5pZCIgZGF0YS1mcm9tPSJjb3VudHJpZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iMyIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLmNvdW50cnkuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRIb3NwaXRhbGl6YXRpb25TdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGV2ZW50SG9zcGl0YWxpemF0aW9uU3RhcnREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+SG9zcGl0YWxpemF0aW9uIFN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9ImV2ZW50SG9zcGl0YWxpemF0aW9uU3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBhbGxvd0RhdGVXaXRob3V0VGltZSAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaG9zcGl0YWxpemF0aW9uU3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5ob3NwaXRhbGl6YXRpb25TdGFydERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudEhvc3BpdGFsaXphdGlvbkVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGV2ZW50SG9zcGl0YWxpemF0aW9uRW5kRGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkhvc3BpdGFsaXphdGlvbiBFbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0iZXZlbnRIb3NwaXRhbGl6YXRpb25FbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBhbGxvd0RhdGVXaXRob3V0VGltZSAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzBdLmhvc3BpdGFsaXphdGlvbkVuZERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzBdLmhvc3BpdGFsaXphdGlvbkVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMF0uaG9zcGl0YWxpemF0aW9uRW5kRGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1swXS5ob3NwaXRhbGl6YXRpb25FbmREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEuZXZlbnRzWzBdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHB2LXNlY3Rpb24tcmVjb3JkIHB2LWV2ZW50IHVpLXNvcnRhYmxlLWhhbmRsZSBwYW5lbC1kZWZhdWx0ICIgICAgIGlkPSJldmVudC1zZWN0aW9uLTEiPiAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS1oZWFkZXI9IkV2ZW50LVNlY3Rpb24iICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24tZXZlbnQiIGhyZWY9IiNldmVudC1zZWN0aW9uXzEiICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSByb3ctY291bnQgYmFkZ2UtaW5kZXgiPjwvc3Bhbj5FdmVudC1TZWN0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29uZmlndXJlRmllbGRzIHB2LXN1YmhlYWQtY29uZmlnIj4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSJwdi1ldmVudCIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icmVtb3ZlLXNlY3Rpb24gcHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIGV2ZW50LWRlbCI+ICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGV2ZW50XzEiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgPC9kaXY+ICAgIDxkaXYgY2xhc3M9InBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIGlubmVyLXJlcGVhdGFibGUiIGFyaWEtZXhwYW5kZWQ9InRydWUiICAgICAgICAgaWQ9ImV2ZW50LXNlY3Rpb25fMSI+ICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5ICI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBmb3JtLXB2Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZXZlbnRSZXBvcnRlZFJlYWN0aW9uIiBjbGFzcz0nIGNvbC1tZC00IHJlcXVpcmVkICB0ZW1wbGF0ZS1jb250cm9sICBldmVudFJlcG9ydGVkUmVhY3Rpb24nID4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZXBvcnRlZCBSZWFjdGlvbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnB1dC1ncm91cCBpbnRlcm5hbCBpbm5lci1hZGRvbiByaWdodC1hZGRvbicgZGF0YS1pZD0iZXZlbnRSZXBvcnRlZFJlYWN0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBldmVudE5hbWVCcm93c2VyIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMV0ucmVwb3J0ZWRSZWFjdGlvbiIgbWF4bGVuZ3RoPSIyNTAiIHZhbHVlPSJuYXUiIGRhdGEtbWFuZGF0b3J5PSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1icm93c2VyLXZhbHVlPSJuYXUiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9ImV2ZW50UmVhY3Rpb25Db2RlZCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWZpZWxkSWQ9ImV2ZW50UmVwb3J0ZWRSZWFjdGlvbiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzFdLnJlcG9ydGVkUmVhY3Rpb24iIC8+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzFdLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA0ODM2NCIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzFdLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMV0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0ibmF1IiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMV0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzFdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzFdLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNTEiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJldmVudExhbmd1YWdlIiBjbGFzcz0iIGV2ZW50TGFuZ3VhZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVwb3J0ZWQgTGFuZ3VhZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50TGFuZ3VhZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzFdLnJlcG9ydGVkTGFuZ3VhZ2UuaWQiIGRhdGEtZnJvbT0ibGFuZ3VhZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjEiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5yZXBvcnRlZExhbmd1YWdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0iZXZlbnRUcmFuc2xhdGVkUmVhY3Rpb24iIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBldmVudFRyYW5zbGF0ZWRSZWFjdGlvbiAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5UcmFuc2xhdGVkIFJlYWN0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudFRyYW5zbGF0ZWRSZWFjdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMV0udHJhbnNsYXRlZFJlYWN0aW9uIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtZmllbGQtaWQ9ImV2ZW50VHJhbnNsYXRlZFJlYWN0aW9uIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMV0udHJhbnNsYXRlZFJlYWN0aW9uIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJldmVudFJlYWN0aW9uQ29kZWQiIGNsYXNzPSJjb2wtbWQtNCB0ZW1wbGF0ZS1jb250cm9sICBldmVudFJlYWN0aW9uQ29kZWQgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVhY3Rpb24gKENvZGVkKTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRSZWFjdGlvbkNvZGVkIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iTmF1c2VhIGFnZ3JhdmF0ZWQiIGRhdGEtaW5pdGlhbC12YWx1ZT0iTmF1c2VhIGFnZ3JhdmF0ZWQiIG1heGxlbmd0aD0iMjUwIiBkYXRhLWZpZWxkLWlkPSJldmVudFJlYWN0aW9uQ29kZWQiIHJlYWRvbmx5PSJyZWFkb25seSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzFdLnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJldmVudEhpZ2hsaWdodGVkQnlSZXBvcnRlciIgY2xhc3M9IiBldmVudEhpZ2hsaWdodGVkQnlSZXBvcnRlciBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5IaWdobGlnaHRlZCBieSBSZXBvcnRlcjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRIaWdobGlnaHRlZEJ5UmVwb3J0ZXIiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzFdLmhpZ2hsaWdodGVkQnlSZXBvcnRlci5pZCIgZGF0YS1mcm9tPSJoaWdobGlnaHRlZEJ5UmVwb3J0ZXJzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzFdLmhpZ2hsaWdodGVkQnlSZXBvcnRlci5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjE3IiA+SGlnaGxpZ2h0ZWQsIE5PVCBzZXJpb3VzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjE4IiA+Tm90IGhpZ2hsaWdodGVkLCBOT1Qgc2VyaW91czwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxOSIgPkhpZ2hsaWdodGVkLCBTRVJJT1VTPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIwIiA+Tm90IGhpZ2hsaWdodGVkLCBTRVJJT1VTPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50U2VyaW91c05lc3MiIGNsYXNzPSIgZXZlbnRTZXJpb3VzTmVzcyBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5TZXJpb3VzbmVzcyBDcml0ZXJpYTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRTZXJpb3VzTmVzcyI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCBzZWxlY3QyLWJveCAgc2VyaW91c25lc3NlcyBtdWx0aVNlbGVjdFNlbGVjdDJGaWVsZCB3cmFwcGVkLW11bHRpc2VsZWN0ICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5zZXJpb3VzbmVzc2VzLmlkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iQ2hvb3NlIiBtdWx0aXBsZT0ibXVsdGlwbGUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMV0uc2VyaW91c25lc3Nlcy5pZCIgPg08b3B0aW9uIHZhbHVlPSIxIiA+RGVhdGg8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMiIgPkxpZmUgVGhyZWF0ZW5pbmc8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMyIgPkhvc3BpdGFsaXphdGlvbjwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI0IiA+RGlzYWJsaW5nPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjUiID5Db25nZW5pdGFsIEFub21hbHk8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNiIgPk90aGVyIE1lZGljYWxseSBJbXBvcnRhbnQgQ29uZGl0aW9uPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50U3RhcnREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBldmVudFN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9ImV2ZW50U3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5zdGFydERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzFdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5zdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMV0uc3RhcnREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRFbmREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBldmVudEVuZERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5FbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0iZXZlbnRFbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5lbmREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5lbmREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzFdLmVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMV0uZW5kRGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0iZXZlbnREdXJhdGlvbiIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIGV2ZW50RHVyYXRpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RHVyYXRpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50RHVyYXRpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzFdLmR1cmF0aW9uLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJldmVudER1cmF0aW9uIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMV0uZHVyYXRpb24udmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5kdXJhdGlvbi5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzFdLmR1cmF0aW9uLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50T3V0Y29tZXMiIGNsYXNzPSIgZXZlbnRPdXRjb21lcyBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5PdXRjb21lPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudE91dGNvbWVzIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5vdXRjb21lLmlkIiBkYXRhLWZyb209Im91dGNvbWVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzFdLm91dGNvbWUuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudE1lZGljYWxseUNvbmZpcm1lZCIgY2xhc3M9IiBldmVudE1lZGljYWxseUNvbmZpcm1lZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5NZWRpY2FsbHkgQ29uZmlybWVkPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudE1lZGljYWxseUNvbmZpcm1lZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMV0ubWVkaWNhbGx5Q29uZmlybWVkLmlkIiBkYXRhLWZyb209Im1lZGljYWxseUNvbmZpcm1lZCIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5tZWRpY2FsbHlDb25maXJtZWQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyMSIgPlllczwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyMiIgPk5vPC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50Q291bnRyeSIgY2xhc3M9IiBldmVudENvdW50cnkgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q291bnRyeTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRDb3VudHJ5Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgY291bnRyeSBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzFdLmNvdW50cnkuaWQiIGRhdGEtZnJvbT0iY291bnRyaWVzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjMiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5jb3VudHJ5LmlkIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50SG9zcGl0YWxpemF0aW9uU3RhcnREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBldmVudEhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkhvc3BpdGFsaXphdGlvbiBTdGFydCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJldmVudEhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgYWxsb3dEYXRlV2l0aG91dFRpbWUgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5ob3NwaXRhbGl6YXRpb25TdGFydERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzFdLmhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5ob3NwaXRhbGl6YXRpb25TdGFydERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMV0uaG9zcGl0YWxpemF0aW9uU3RhcnREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRIb3NwaXRhbGl6YXRpb25FbmREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBldmVudEhvc3BpdGFsaXphdGlvbkVuZERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Ib3NwaXRhbGl6YXRpb24gRW5kIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9ImV2ZW50SG9zcGl0YWxpemF0aW9uRW5kRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgYWxsb3dEYXRlV2l0aG91dFRpbWUgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5ob3NwaXRhbGl6YXRpb25FbmREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1sxXS5ob3NwaXRhbGl6YXRpb25FbmREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzFdLmhvc3BpdGFsaXphdGlvbkVuZERhdGUuZm9ybWF0IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMV0uaG9zcGl0YWxpemF0aW9uRW5kRGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLmV2ZW50c1sxXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwdi1zZWN0aW9uLXJlY29yZCBwdi1ldmVudCB1aS1zb3J0YWJsZS1oYW5kbGUgcGFuZWwtZGVmYXVsdCAiICAgICBpZD0iZXZlbnQtc2VjdGlvbi0yIj4gICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtaGVhZGVyPSJFdmVudC1TZWN0aW9uIiAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWV2ZW50IiBocmVmPSIjZXZlbnQtc2VjdGlvbl8yIiAgICAgICAgICAgICAgIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmFkZ2Ugcm93LWNvdW50IGJhZGdlLWluZGV4Ij48L3NwYW4+RXZlbnQtU2VjdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbmZpZ3VyZUZpZWxkcyBwdi1zdWJoZWFkLWNvbmZpZyI+ICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0icHYtZXZlbnQiIHRpdGxlPSJSZW1vdmUgdGhpcyBzZWN0aW9uIiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJlbW92ZS1zZWN0aW9uIHB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCBldmVudC1kZWwiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBldmVudF8yIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgIDwvZGl2PiAgICA8ZGl2IGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiBpbm5lci1yZXBlYXRhYmxlIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiAgICAgICAgIGlkPSJldmVudC1zZWN0aW9uXzIiPiAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSAiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgZm9ybS1wdiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImV2ZW50UmVwb3J0ZWRSZWFjdGlvbiIgY2xhc3M9JyBjb2wtbWQtNCByZXF1aXJlZCAgdGVtcGxhdGUtY29udHJvbCAgZXZlbnRSZXBvcnRlZFJlYWN0aW9uJyA+ICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVwb3J0ZWQgUmVhY3Rpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZ3JvdXAgaW50ZXJuYWwgaW5uZXItYWRkb24gcmlnaHQtYWRkb24nIGRhdGEtaWQ9ImV2ZW50UmVwb3J0ZWRSZWFjdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgZXZlbnROYW1lQnJvd3NlciBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzJdLnJlcG9ydGVkUmVhY3Rpb24iIG1heGxlbmd0aD0iMjUwIiB2YWx1ZT0ibWlncmFpIiBkYXRhLW1hbmRhdG9yeT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtYnJvd3Nlci12YWx1ZT0ibWlncmFpIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSJldmVudFJlYWN0aW9uQ29kZWQiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJldmVudFJlcG9ydGVkUmVhY3Rpb24iIGlkPSJzYWZldHlEYXRhLmV2ZW50c1syXS5yZXBvcnRlZFJlYWN0aW9uIiAvPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1syXS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMjc2MDIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1syXS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzJdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9Im1pZ3JhaSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzJdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1syXS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1syXS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMl0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjUyIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMl0uaW50ZXJuYWxSb3dJZCIgLz4gICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giID48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRMYW5ndWFnZSIgY2xhc3M9IiBldmVudExhbmd1YWdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlcG9ydGVkIExhbmd1YWdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudExhbmd1YWdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1syXS5yZXBvcnRlZExhbmd1YWdlLmlkIiBkYXRhLWZyb209Imxhbmd1YWdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIxIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMl0ucmVwb3J0ZWRMYW5ndWFnZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9ImV2ZW50VHJhbnNsYXRlZFJlYWN0aW9uIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgZXZlbnRUcmFuc2xhdGVkUmVhY3Rpb24gICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+VHJhbnNsYXRlZCBSZWFjdGlvbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRUcmFuc2xhdGVkUmVhY3Rpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzJdLnRyYW5zbGF0ZWRSZWFjdGlvbiIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjUwIiBkYXRhLWZpZWxkLWlkPSJldmVudFRyYW5zbGF0ZWRSZWFjdGlvbiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzJdLnRyYW5zbGF0ZWRSZWFjdGlvbiIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0iZXZlbnRSZWFjdGlvbkNvZGVkIiBjbGFzcz0iY29sLW1kLTQgdGVtcGxhdGUtY29udHJvbCAgZXZlbnRSZWFjdGlvbkNvZGVkICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlYWN0aW9uIChDb2RlZCk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50UmVhY3Rpb25Db2RlZCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMl0ucmVhY3Rpb25Db2RlZCIgdmFsdWU9Ik1pZ3JhaW5lIGhlYWRhY2hlIiBkYXRhLWluaXRpYWwtdmFsdWU9Ik1pZ3JhaW5lIGhlYWRhY2hlIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1maWVsZC1pZD0iZXZlbnRSZWFjdGlvbkNvZGVkIiByZWFkb25seT0icmVhZG9ubHkiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1syXS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRIaWdobGlnaHRlZEJ5UmVwb3J0ZXIiIGNsYXNzPSIgZXZlbnRIaWdobGlnaHRlZEJ5UmVwb3J0ZXIgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+SGlnaGxpZ2h0ZWQgYnkgUmVwb3J0ZXI8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50SGlnaGxpZ2h0ZWRCeVJlcG9ydGVyIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1syXS5oaWdobGlnaHRlZEJ5UmVwb3J0ZXIuaWQiIGRhdGEtZnJvbT0iaGlnaGxpZ2h0ZWRCeVJlcG9ydGVycyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1syXS5oaWdobGlnaHRlZEJ5UmVwb3J0ZXIuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxNyIgPkhpZ2hsaWdodGVkLCBOT1Qgc2VyaW91czwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxOCIgPk5vdCBoaWdobGlnaHRlZCwgTk9UIHNlcmlvdXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTkiID5IaWdobGlnaHRlZCwgU0VSSU9VUzwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyMCIgPk5vdCBoaWdobGlnaHRlZCwgU0VSSU9VUzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudFNlcmlvdXNOZXNzIiBjbGFzcz0iIGV2ZW50U2VyaW91c05lc3MgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U2VyaW91c25lc3MgQ3JpdGVyaWE8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50U2VyaW91c05lc3MiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0Mi1ib3ggIHNlcmlvdXNuZXNzZXMgbXVsdGlTZWxlY3RTZWxlY3QyRmllbGQgd3JhcHBlZC1tdWx0aXNlbGVjdCAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMl0uc2VyaW91c25lc3Nlcy5pZCIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IkNob29zZSIgbXVsdGlwbGU9Im11bHRpcGxlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzJdLnNlcmlvdXNuZXNzZXMuaWQiID4NPG9wdGlvbiB2YWx1ZT0iMSIgPkRlYXRoPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIiID5MaWZlIFRocmVhdGVuaW5nPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjMiID5Ib3NwaXRhbGl6YXRpb248L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNCIgPkRpc2FibGluZzwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI1IiA+Q29uZ2VuaXRhbCBBbm9tYWx5PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjYiID5PdGhlciBNZWRpY2FsbHkgSW1wb3J0YW50IENvbmRpdGlvbjwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudFN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgZXZlbnRTdGFydERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5TdGFydCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJldmVudFN0YXJ0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMl0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1syXS5zdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMl0uc3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzJdLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50RW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgZXZlbnRFbmREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RW5kIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9ImV2ZW50RW5kRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMl0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMl0uZW5kRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1syXS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzJdLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9ImV2ZW50RHVyYXRpb24iIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBldmVudER1cmF0aW9uICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkR1cmF0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudER1cmF0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1syXS5kdXJhdGlvbi52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0iZXZlbnREdXJhdGlvbiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzJdLmR1cmF0aW9uLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMl0uZHVyYXRpb24uaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1syXS5kdXJhdGlvbi5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJldmVudE91dGNvbWVzIiBjbGFzcz0iIGV2ZW50T3V0Y29tZXMgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+T3V0Y29tZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRPdXRjb21lcyI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMl0ub3V0Y29tZS5pZCIgZGF0YS1mcm9tPSJvdXRjb21lcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1syXS5vdXRjb21lLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRNZWRpY2FsbHlDb25maXJtZWQiIGNsYXNzPSIgZXZlbnRNZWRpY2FsbHlDb25maXJtZWQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TWVkaWNhbGx5IENvbmZpcm1lZDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRNZWRpY2FsbHlDb25maXJtZWQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzJdLm1lZGljYWxseUNvbmZpcm1lZC5pZCIgZGF0YS1mcm9tPSJtZWRpY2FsbHlDb25maXJtZWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMl0ubWVkaWNhbGx5Q29uZmlybWVkLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjEiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjIiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudENvdW50cnkiIGNsYXNzPSIgZXZlbnRDb3VudHJ5IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvdW50cnk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50Q291bnRyeSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIGNvdW50cnkgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1syXS5jb3VudHJ5LmlkIiBkYXRhLWZyb209ImNvdW50cmllcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIzIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMl0uY291bnRyeS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudEhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgZXZlbnRIb3NwaXRhbGl6YXRpb25TdGFydERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Ib3NwaXRhbGl6YXRpb24gU3RhcnQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0iZXZlbnRIb3NwaXRhbGl6YXRpb25TdGFydERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGFsbG93RGF0ZVdpdGhvdXRUaW1lICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMl0uaG9zcGl0YWxpemF0aW9uU3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1syXS5ob3NwaXRhbGl6YXRpb25TdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMl0uaG9zcGl0YWxpemF0aW9uU3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzJdLmhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50SG9zcGl0YWxpemF0aW9uRW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgZXZlbnRIb3NwaXRhbGl6YXRpb25FbmREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+SG9zcGl0YWxpemF0aW9uIEVuZCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJldmVudEhvc3BpdGFsaXphdGlvbkVuZERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGFsbG93RGF0ZVdpdGhvdXRUaW1lICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbMl0uaG9zcGl0YWxpemF0aW9uRW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbMl0uaG9zcGl0YWxpemF0aW9uRW5kRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1syXS5ob3NwaXRhbGl6YXRpb25FbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzJdLmhvc3BpdGFsaXphdGlvbkVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5ldmVudHNbMl0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcHYtc2VjdGlvbi1yZWNvcmQgcHYtZXZlbnQgdWktc29ydGFibGUtaGFuZGxlIHBhbmVsLWRlZmF1bHQgIiAgICAgaWQ9ImV2ZW50LXNlY3Rpb24tMyI+ICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWhlYWRlcj0iRXZlbnQtU2VjdGlvbiIgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1ldmVudCIgaHJlZj0iI2V2ZW50LXNlY3Rpb25fMyIgICAgICAgICAgICAgICBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJhZGdlIHJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPkV2ZW50LVNlY3Rpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb25maWd1cmVGaWVsZHMgcHYtc3ViaGVhZC1jb25maWciPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9InB2LWV2ZW50IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJyZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgZXZlbnQtZGVsIj4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZXZlbnRfMyIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICA8L2Rpdj4gICAgPGRpdiBjbGFzcz0icGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gaW5uZXItcmVwZWF0YWJsZSIgYXJpYS1leHBhbmRlZD0idHJ1ZSIgICAgICAgICBpZD0iZXZlbnQtc2VjdGlvbl8zIj4gICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGZvcm0tcHYiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJldmVudFJlcG9ydGVkUmVhY3Rpb24iIGNsYXNzPScgY29sLW1kLTQgcmVxdWlyZWQgIHRlbXBsYXRlLWNvbnRyb2wgIGV2ZW50UmVwb3J0ZWRSZWFjdGlvbicgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlcG9ydGVkIFJlYWN0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJldmVudFJlcG9ydGVkUmVhY3Rpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGV2ZW50TmFtZUJyb3dzZXIgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1szXS5yZXBvcnRlZFJlYWN0aW9uIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9InRpbiIgZGF0YS1tYW5kYXRvcnk9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdmFsdWU9InRpbiIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iZXZlbnRSZWFjdGlvbkNvZGVkIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtZmllbGRJZD0iZXZlbnRSZXBvcnRlZFJlYWN0aW9uIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbM10ucmVwb3J0ZWRSZWFjdGlvbiIgLz4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10ubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDczNDY2IiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbM10ubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1szXS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSJ0aW4iIGlkPSJzYWZldHlEYXRhLmV2ZW50c1szXS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10uaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbM10uaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzNdLmludGVybmFsUm93SWQiIHZhbHVlPSI1MyIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzNdLmludGVybmFsUm93SWQiIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50TGFuZ3VhZ2UiIGNsYXNzPSIgZXZlbnRMYW5ndWFnZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZXBvcnRlZCBMYW5ndWFnZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRMYW5ndWFnZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10ucmVwb3J0ZWRMYW5ndWFnZS5pZCIgZGF0YS1mcm9tPSJsYW5ndWFnZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iMSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzNdLnJlcG9ydGVkTGFuZ3VhZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJldmVudFRyYW5zbGF0ZWRSZWFjdGlvbiIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIGV2ZW50VHJhbnNsYXRlZFJlYWN0aW9uICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlRyYW5zbGF0ZWQgUmVhY3Rpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50VHJhbnNsYXRlZFJlYWN0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1szXS50cmFuc2xhdGVkUmVhY3Rpb24iIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1maWVsZC1pZD0iZXZlbnRUcmFuc2xhdGVkUmVhY3Rpb24iIGlkPSJzYWZldHlEYXRhLmV2ZW50c1szXS50cmFuc2xhdGVkUmVhY3Rpb24iIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9ImV2ZW50UmVhY3Rpb25Db2RlZCIgY2xhc3M9ImNvbC1tZC00IHRlbXBsYXRlLWNvbnRyb2wgIGV2ZW50UmVhY3Rpb25Db2RlZCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWFjdGlvbiAoQ29kZWQpPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudFJlYWN0aW9uQ29kZWQiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzNdLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSJUaW5lYSBpbmNvZ25pdG8iIGRhdGEtaW5pdGlhbC12YWx1ZT0iVGluZWEgaW5jb2duaXRvIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1maWVsZC1pZD0iZXZlbnRSZWFjdGlvbkNvZGVkIiByZWFkb25seT0icmVhZG9ubHkiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1szXS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRIaWdobGlnaHRlZEJ5UmVwb3J0ZXIiIGNsYXNzPSIgZXZlbnRIaWdobGlnaHRlZEJ5UmVwb3J0ZXIgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+SGlnaGxpZ2h0ZWQgYnkgUmVwb3J0ZXI8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50SGlnaGxpZ2h0ZWRCeVJlcG9ydGVyIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1szXS5oaWdobGlnaHRlZEJ5UmVwb3J0ZXIuaWQiIGRhdGEtZnJvbT0iaGlnaGxpZ2h0ZWRCeVJlcG9ydGVycyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1szXS5oaWdobGlnaHRlZEJ5UmVwb3J0ZXIuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxNyIgPkhpZ2hsaWdodGVkLCBOT1Qgc2VyaW91czwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIxOCIgPk5vdCBoaWdobGlnaHRlZCwgTk9UIHNlcmlvdXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTkiID5IaWdobGlnaHRlZCwgU0VSSU9VUzwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyMCIgPk5vdCBoaWdobGlnaHRlZCwgU0VSSU9VUzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudFNlcmlvdXNOZXNzIiBjbGFzcz0iIGV2ZW50U2VyaW91c05lc3MgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U2VyaW91c25lc3MgQ3JpdGVyaWE8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50U2VyaW91c05lc3MiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0Mi1ib3ggIHNlcmlvdXNuZXNzZXMgbXVsdGlTZWxlY3RTZWxlY3QyRmllbGQgd3JhcHBlZC1tdWx0aXNlbGVjdCAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10uc2VyaW91c25lc3Nlcy5pZCIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IkNob29zZSIgbXVsdGlwbGU9Im11bHRpcGxlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzNdLnNlcmlvdXNuZXNzZXMuaWQiID4NPG9wdGlvbiB2YWx1ZT0iMSIgPkRlYXRoPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIiID5MaWZlIFRocmVhdGVuaW5nPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjMiID5Ib3NwaXRhbGl6YXRpb248L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNCIgPkRpc2FibGluZzwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI1IiA+Q29uZ2VuaXRhbCBBbm9tYWx5PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjYiID5PdGhlciBNZWRpY2FsbHkgSW1wb3J0YW50IENvbmRpdGlvbjwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudFN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgZXZlbnRTdGFydERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5TdGFydCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJldmVudFN0YXJ0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10uc3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1szXS5zdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10uc3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzNdLnN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50RW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgZXZlbnRFbmREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RW5kIERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9ImV2ZW50RW5kRGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10uZW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbM10uZW5kRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1szXS5lbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzNdLmVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9ImV2ZW50RHVyYXRpb24iIGNsYXNzPSJjb2wtbWQtMiB0ZW1wbGF0ZS1jb250cm9sICBldmVudER1cmF0aW9uICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkR1cmF0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudER1cmF0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1szXS5kdXJhdGlvbi52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0iZXZlbnREdXJhdGlvbiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzNdLmR1cmF0aW9uLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10uZHVyYXRpb24uaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1szXS5kdXJhdGlvbi5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJldmVudE91dGNvbWVzIiBjbGFzcz0iIGV2ZW50T3V0Y29tZXMgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+T3V0Y29tZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRPdXRjb21lcyI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10ub3V0Y29tZS5pZCIgZGF0YS1mcm9tPSJvdXRjb21lcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1szXS5vdXRjb21lLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRNZWRpY2FsbHlDb25maXJtZWQiIGNsYXNzPSIgZXZlbnRNZWRpY2FsbHlDb25maXJtZWQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TWVkaWNhbGx5IENvbmZpcm1lZDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRNZWRpY2FsbHlDb25maXJtZWQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzNdLm1lZGljYWxseUNvbmZpcm1lZC5pZCIgZGF0YS1mcm9tPSJtZWRpY2FsbHlDb25maXJtZWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbM10ubWVkaWNhbGx5Q29uZmlybWVkLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjEiID5ZZXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjIiID5Obzwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudENvdW50cnkiIGNsYXNzPSIgZXZlbnRDb3VudHJ5IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkNvdW50cnk8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50Q291bnRyeSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIGNvdW50cnkgc2VsZWN0Mi1ib3ggc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1szXS5jb3VudHJ5LmlkIiBkYXRhLWZyb209ImNvdW50cmllcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIzIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbM10uY291bnRyeS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudEhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgZXZlbnRIb3NwaXRhbGl6YXRpb25TdGFydERhdGUgIGNvbC1tZC0yICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Ib3NwaXRhbGl6YXRpb24gU3RhcnQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0iZXZlbnRIb3NwaXRhbGl6YXRpb25TdGFydERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGFsbG93RGF0ZVdpdGhvdXRUaW1lICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10uaG9zcGl0YWxpemF0aW9uU3RhcnREYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1szXS5ob3NwaXRhbGl6YXRpb25TdGFydERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10uaG9zcGl0YWxpemF0aW9uU3RhcnREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzNdLmhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZS5mb3JtYXQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50SG9zcGl0YWxpemF0aW9uRW5kRGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgZXZlbnRIb3NwaXRhbGl6YXRpb25FbmREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+SG9zcGl0YWxpemF0aW9uIEVuZCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJldmVudEhvc3BpdGFsaXphdGlvbkVuZERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGFsbG93RGF0ZVdpdGhvdXRUaW1lICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbM10uaG9zcGl0YWxpemF0aW9uRW5kRGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbM10uaG9zcGl0YWxpemF0aW9uRW5kRGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIiBkYXRhLXByZWNpc2lvbj0iWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1szXS5ob3NwaXRhbGl6YXRpb25FbmREYXRlLmZvcm1hdCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzNdLmhvc3BpdGFsaXphdGlvbkVuZERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5ldmVudHNbM10uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcHYtc2VjdGlvbi1yZWNvcmQgcHYtZXZlbnQgdWktc29ydGFibGUtaGFuZGxlIHBhbmVsLWRlZmF1bHQgIiAgICAgaWQ9ImV2ZW50LXNlY3Rpb24tNCI+ICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWhlYWRlcj0iRXZlbnQtU2VjdGlvbiIgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1ldmVudCIgaHJlZj0iI2V2ZW50LXNlY3Rpb25fNCIgICAgICAgICAgICAgICBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJhZGdlIHJvdy1jb3VudCBiYWRnZS1pbmRleCI+PC9zcGFuPkV2ZW50LVNlY3Rpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb25maWd1cmVGaWVsZHMgcHYtc3ViaGVhZC1jb25maWciPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9InB2LWV2ZW50IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJyZW1vdmUtc2VjdGlvbiBwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgZXZlbnQtZGVsIj4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZXZlbnRfNCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICA8L2Rpdj4gICAgPGRpdiBjbGFzcz0icGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gaW5uZXItcmVwZWF0YWJsZSIgYXJpYS1leHBhbmRlZD0idHJ1ZSIgICAgICAgICBpZD0iZXZlbnQtc2VjdGlvbl80Ij4gICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGZvcm0tcHYiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJldmVudFJlcG9ydGVkUmVhY3Rpb24iIGNsYXNzPScgY29sLW1kLTQgcmVxdWlyZWQgIHRlbXBsYXRlLWNvbnRyb2wgIGV2ZW50UmVwb3J0ZWRSZWFjdGlvbicgPiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlcG9ydGVkIFJlYWN0aW9uPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJldmVudFJlcG9ydGVkUmVhY3Rpb24iPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGV2ZW50TmFtZUJyb3dzZXIgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1s0XS5yZXBvcnRlZFJlYWN0aW9uIiBtYXhsZW5ndGg9IjI1MCIgdmFsdWU9InJlZCIgZGF0YS1tYW5kYXRvcnk9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdmFsdWU9InJlZCIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iZXZlbnRSZWFjdGlvbkNvZGVkIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtZmllbGRJZD0iZXZlbnRSZXBvcnRlZFJlYWN0aW9uIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbNF0ucmVwb3J0ZWRSZWFjdGlvbiIgLz4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbNF0ubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDYyNzQ4IiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbNF0ubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1s0XS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSJyZWQiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1s0XS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbNF0uaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbNF0uaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzRdLmludGVybmFsUm93SWQiIHZhbHVlPSI1NCIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzRdLmludGVybmFsUm93SWQiIC8+ICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIiA+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50TGFuZ3VhZ2UiIGNsYXNzPSIgZXZlbnRMYW5ndWFnZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZXBvcnRlZCBMYW5ndWFnZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnRMYW5ndWFnZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbNF0ucmVwb3J0ZWRMYW5ndWFnZS5pZCIgZGF0YS1mcm9tPSJsYW5ndWFnZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iMSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzRdLnJlcG9ydGVkTGFuZ3VhZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJldmVudFRyYW5zbGF0ZWRSZWFjdGlvbiIgY2xhc3M9ImNvbC1tZC0yIHRlbXBsYXRlLWNvbnRyb2wgIGV2ZW50VHJhbnNsYXRlZFJlYWN0aW9uICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlRyYW5zbGF0ZWQgUmVhY3Rpb248L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50VHJhbnNsYXRlZFJlYWN0aW9uIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1s0XS50cmFuc2xhdGVkUmVhY3Rpb24iIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1maWVsZC1pZD0iZXZlbnRUcmFuc2xhdGVkUmVhY3Rpb24iIGlkPSJzYWZldHlEYXRhLmV2ZW50c1s0XS50cmFuc2xhdGVkUmVhY3Rpb24iIC8+ICAgICAgICAgICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9ImV2ZW50UmVhY3Rpb25Db2RlZCIgY2xhc3M9ImNvbC1tZC00IHRlbXBsYXRlLWNvbnRyb2wgIGV2ZW50UmVhY3Rpb25Db2RlZCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWFjdGlvbiAoQ29kZWQpPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudFJlYWN0aW9uQ29kZWQiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzRdLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSJSZWQgYmxvb2QgY2VsbCBhbmFseXNpcyIgZGF0YS1pbml0aWFsLXZhbHVlPSJSZWQgYmxvb2QgY2VsbCBhbmFseXNpcyIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtZmllbGQtaWQ9ImV2ZW50UmVhY3Rpb25Db2RlZCIgcmVhZG9ubHk9InJlYWRvbmx5IiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbNF0ucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50SGlnaGxpZ2h0ZWRCeVJlcG9ydGVyIiBjbGFzcz0iIGV2ZW50SGlnaGxpZ2h0ZWRCeVJlcG9ydGVyIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkhpZ2hsaWdodGVkIGJ5IFJlcG9ydGVyPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudEhpZ2hsaWdodGVkQnlSZXBvcnRlciI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgICAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbNF0uaGlnaGxpZ2h0ZWRCeVJlcG9ydGVyLmlkIiBkYXRhLWZyb209ImhpZ2hsaWdodGVkQnlSZXBvcnRlcnMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbNF0uaGlnaGxpZ2h0ZWRCeVJlcG9ydGVyLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTciID5IaWdobGlnaHRlZCwgTk9UIHNlcmlvdXM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMTgiID5Ob3QgaGlnaGxpZ2h0ZWQsIE5PVCBzZXJpb3VzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjE5IiA+SGlnaGxpZ2h0ZWQsIFNFUklPVVM8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iMjAiID5Ob3QgaGlnaGxpZ2h0ZWQsIFNFUklPVVM8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRTZXJpb3VzTmVzcyIgY2xhc3M9IiBldmVudFNlcmlvdXNOZXNzIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlNlcmlvdXNuZXNzIENyaXRlcmlhPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudFNlcmlvdXNOZXNzIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdDItYm94ICBzZXJpb3VzbmVzc2VzIG11bHRpU2VsZWN0U2VsZWN0MkZpZWxkIHdyYXBwZWQtbXVsdGlzZWxlY3QgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzRdLnNlcmlvdXNuZXNzZXMuaWQiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJDaG9vc2UiIG11bHRpcGxlPSJtdWx0aXBsZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1s0XS5zZXJpb3VzbmVzc2VzLmlkIiA+DTxvcHRpb24gdmFsdWU9IjEiID5EZWF0aDwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIyIiA+TGlmZSBUaHJlYXRlbmluZzwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSIzIiA+SG9zcGl0YWxpemF0aW9uPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjQiID5EaXNhYmxpbmc8L29wdGlvbj4NPG9wdGlvbiB2YWx1ZT0iNSIgPkNvbmdlbml0YWwgQW5vbWFseTwvb3B0aW9uPg08b3B0aW9uIHZhbHVlPSI2IiA+T3RoZXIgTWVkaWNhbGx5IEltcG9ydGFudCBDb25kaXRpb248L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRTdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGV2ZW50U3RhcnREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+U3RhcnQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0iZXZlbnRTdGFydERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzRdLnN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbNF0uc3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzRdLnN0YXJ0RGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1s0XS5zdGFydERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudEVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGV2ZW50RW5kRGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkVuZCBEYXRlPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJldmVudEVuZERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzRdLmVuZERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzRdLmVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbNF0uZW5kRGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1s0XS5lbmREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJldmVudER1cmF0aW9uIiBjbGFzcz0iY29sLW1kLTIgdGVtcGxhdGUtY29udHJvbCAgZXZlbnREdXJhdGlvbiAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EdXJhdGlvbjwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iZXZlbnREdXJhdGlvbiI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbNF0uZHVyYXRpb24udmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9ImV2ZW50RHVyYXRpb24iIGlkPSJzYWZldHlEYXRhLmV2ZW50c1s0XS5kdXJhdGlvbi52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzRdLmR1cmF0aW9uLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbNF0uZHVyYXRpb24uaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRPdXRjb21lcyIgY2xhc3M9IiBldmVudE91dGNvbWVzIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk91dGNvbWU8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50T3V0Y29tZXMiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzRdLm91dGNvbWUuaWQiIGRhdGEtZnJvbT0ib3V0Y29tZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbNF0ub3V0Y29tZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9ImV2ZW50TWVkaWNhbGx5Q29uZmlybWVkIiBjbGFzcz0iIGV2ZW50TWVkaWNhbGx5Q29uZmlybWVkIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPk1lZGljYWxseSBDb25maXJtZWQ8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImV2ZW50TWVkaWNhbGx5Q29uZmlybWVkIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgICAgIiBuYW1lPSJzYWZldHlEYXRhLmV2ZW50c1s0XS5tZWRpY2FsbHlDb25maXJtZWQuaWQiIGRhdGEtZnJvbT0ibWVkaWNhbGx5Q29uZmlybWVkIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzRdLm1lZGljYWxseUNvbmZpcm1lZC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIxIiA+WWVzPC9vcHRpb24+DTxvcHRpb24gdmFsdWU9IjIyIiA+Tm88L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRDb3VudHJ5IiBjbGFzcz0iIGV2ZW50Q291bnRyeSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5Db3VudHJ5PC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJldmVudENvdW50cnkiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBjb3VudHJ5IHNlbGVjdDItYm94IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbNF0uY291bnRyeS5pZCIgZGF0YS1mcm9tPSJjb3VudHJpZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iMyIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzRdLmNvdW50cnkuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0iZXZlbnRIb3NwaXRhbGl6YXRpb25TdGFydERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGV2ZW50SG9zcGl0YWxpemF0aW9uU3RhcnREYXRlICBjb2wtbWQtMiAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+SG9zcGl0YWxpemF0aW9uIFN0YXJ0IERhdGU8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9ImV2ZW50SG9zcGl0YWxpemF0aW9uU3RhcnREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBhbGxvd0RhdGVXaXRob3V0VGltZSAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzRdLmhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5ldmVudHNbNF0uaG9zcGl0YWxpemF0aW9uU3RhcnREYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkiIGRhdGEtcHJlY2lzaW9uPSJZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzRdLmhvc3BpdGFsaXphdGlvblN0YXJ0RGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1s0XS5ob3NwaXRhbGl6YXRpb25TdGFydERhdGUuZm9ybWF0IiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJldmVudEhvc3BpdGFsaXphdGlvbkVuZERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGV2ZW50SG9zcGl0YWxpemF0aW9uRW5kRGF0ZSAgY29sLW1kLTIgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkhvc3BpdGFsaXphdGlvbiBFbmQgRGF0ZTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0iZXZlbnRIb3NwaXRhbGl6YXRpb25FbmREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBhbGxvd0RhdGVXaXRob3V0VGltZSAiIG5hbWU9InNhZmV0eURhdGEuZXZlbnRzWzRdLmhvc3BpdGFsaXphdGlvbkVuZERhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuZXZlbnRzWzRdLmhvc3BpdGFsaXphdGlvbkVuZERhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSIgZGF0YS1wcmVjaXNpb249IllZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5ldmVudHNbNF0uaG9zcGl0YWxpemF0aW9uRW5kRGF0ZS5mb3JtYXQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmV2ZW50c1s0XS5ob3NwaXRhbGl6YXRpb25FbmREYXRlLmZvcm1hdCIgLz48L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEuZXZlbnRzWzRdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBUZXN0IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIHJ4bWFpbi1jb250YWluZXIgcnhtYWluLWNvbnRhaW5lci10b3AiICAgICAgICAgaWQ9InYtdGVzdCI+ICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciBwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICA8aDQgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj4gICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1jYXNlIiAgICAgICAgICAgICAgICAgICBocmVmPSIjdGVzdCIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGNsYXNzPSJjb2xsYXBzZWQgc2VjLWRpc3BsYXktdHh0IHNlY3Rpb25UaXRsZSI+ICAgICAgICAgICAgICAgICAgICBUZXN0KHMpICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjdGVzdFRhYmxlU2VjdGlvbiIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyAiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3Rlc3RUYWJsZVNlY3Rpb24iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWFkZC1wYW5lbCBidG4tYWRkcm93LXRvcCBpYy1zbSAiIGRhdGEtaW5uZXItc2VjPSIiICAgICAgICAgICBkYXRhLXRhYnVsYXI9ImZhbHNlIiB0aXRsZT0iQWRkIGFub3RoZXIgc2VjdGlvbiIgICAgICAgICAgIGRhdGEtdGFyZ2V0PSJwdmktdGVzdFNlY3Rpb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hZGQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgaWQ9InRlc3QiIGRhdGEtdGVtcGxhdGVJZD0idGVzdFRlbXBsYXRlLTIiICAgICAgICAgICAgIGNsYXNzPSIgcHYtbWFpbiBwYW5lbC1jb2xsYXBzZSByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IGNvbGxhcHNlIiAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YWJsZT0idHJ1ZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXNlY3Rpb24iIGRhdGEtdGVtcGxhdGVJZD0idGVzdFRlbXBsYXRlIiAgICAgY2xhc3M9InBhbmVsLWNvbGxhcHNlIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgY29sbGFwc2UgcHYtc2VjdGlvbiIgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSBwdi1sYWJ0ZXN0LWdyaWQtbGlzdHZpZXcgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCAiIGRhdGEtdGVtcGxhdGVJZD0iMiI+ICAgICAgICA8dGhlYWQ+ICAgICAgICA8dHI+ICAgICAgICAgICAgPHRoIGNsYXNzPSJudW0tY29sIj4jPC90aD4gICAgICAgICAgICA8dGggY2xhc3M9Imx0LWNvbCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNyI+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIiB0aXRsZT0iVGVzdCBOYW1lIj5UZXN0IE5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1sb25nLWFycm93LWRvd24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS10YXJnZXQ9InB2LWxhYi10ZXN0LXJvdyIgZGF0YS1pbnNlcnQ9InB2aVRlc3RQYW5lbCIgY2xhc3M9InB2LWljIGFkZFRlc3RJblRhYmxlIGJ0bi1hZGQtcGFuZWwgZWRpdC1sb2NrIiB0aXRsZT0iQWRkIE5ldyBUZXN0Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1mbGFzayIgYXJpYS1oaWRkZW49InRydWUiPjxzdXA+Kzwvc3VwPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIiB0aXRsZT0iTG93LUhpZ2giPkxvdy1IaWdoIHwgVW5pdDwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC90aD4gICAgICAgICAgICA8dGggY2xhc3M9InJ0LWNvbCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMiBwdi1sYWJ0ZXN0LWNvbC1kYXRlIj4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiIHRpdGxlPSJUZXN0IERhdGUiPlRlc3QgRGF0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiIgZGF0YS1pbnNlcnQ9IiIgdGl0bGU9IkFkZCBUZXN0IERhdGUiIGNsYXNzPSJwdi1pYyBhZGRSZXBvcnRJblRhYmxlIGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2FsZW5kYXItcGx1cy1vIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+IDxpIGNsYXNzPSJmYSBmYS1sb25nLWFycm93LWRvd24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIj4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiIHRpdGxlPSJUZXN0IFJlc3VsdCI+VGVzdCBSZXN1bHQ8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIiB0aXRsZT0iQ29tbWVudHMiPkNvbW1lbnRzPC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHVsbC1sZWZ0Ij48bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiIHRpdGxlPSJNb3JlIEluZm8iPk1vcmUgSW5mbzwvbGFiZWw+PC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGg+ICAgICAgICA8L3RyPiAgICAgICAgPC90aGVhZD4gICAgICAgIDx0Ym9keSBjbGFzcz0icHYtZHJhZ2dhYmxlLWxpc3QgdWktc29ydGFibGUiIGlkPSJ0ZXN0VGFibGVTZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi0wIj4gICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+ICAgICAgICAgICAgICAgIDAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxUZXN0SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICA8L2E+ICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iV2l0aCBoeWRyb2NlcGhhbHVzLCBzcGluYSBiaWZpZGEsIGNlcnZpY2FsIHJlZ2lvbiIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJXaXRoIGh5ZHJvY2VwaGFsdXMsIHNwaW5hIGJpZmlkYSwgY2VydmljYWwgcmVnaW9uIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5hbWUubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDQ3OTkzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IndpdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJ3aXQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIxNiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giPjwvaT4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzBdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSB0ZXN0VW5pdHMgdGVzdC1oYXMtbmFtZSI+ICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIG5vcm1hbEhpZ2hMb3dWYWx1ZSAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5ub3JtYWxMb3dIaWdoIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5ub3JtYWxMb3ciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5ub3JtYWxIaWdoIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnVuaXQuaWQiIGNsYXNzPSIgdGVzdFVuaXQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC03ICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0udW5pdC5pZCIgZGF0YS1mcm9tPSJsYWJUZXN0VW5pdHMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1zb3VyY2U9ImxhYi10ZXN0LXVuaXQtbGlzdCIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS51bml0LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5kYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU1NLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0ucmVzdWx0LnZhbHVlIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgdGVzdFJlc3VsdCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0ucmVzdWx0LnZhbHVlIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0ucmVzdWx0LmlkIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdENvbW1lbnRzIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5jb21tZW50cyIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdENvbW1lbnRzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLmNvbW1lbnRzIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLm1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFJlcG9ydEljb24gdGVzdF8wIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPjwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tMSI+ICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCByb3ctY291bnQiPiAgICAgICAgICAgICAgICAxICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC10ZXN0IGhpZGUiPiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyB0ZXN0IiBjbGFzcz0icHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgPC9hPiAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC90ZD4gICAgPHRkIGNsYXNzPSJ0ZXN0TmFtZSI+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4gICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IkJsb2NrZWQgdGVhciBkdWN0IGNvbmdlbml0YWwiIG1heGxlbmd0aD0iMjUwIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtYnJvd3Nlci12YWx1ZT0iQmxvY2tlZCB0ZWFyIGR1Y3QgY29uZ2VuaXRhbCIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLWZpZWxkSWQ9InRlc3ROYW1lIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxXS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDAwNTI3NiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0ubmFtZS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMV0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSJibG8iIGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMV0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iYmxvIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNTUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLmludGVybmFsUm93SWQiIC8+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5vcm1hbExvd0hpZ2giIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Tm9ybWFsTG93SGlnaCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5vcm1hbExvd0hpZ2giIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0ubm9ybWFsTG93SGlnaCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMV0ubm9ybWFsSGlnaCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0ubm9ybWFsSGlnaCIgLz4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0udW5pdC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC90ZD4gICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0ZXN0LWRhdGUtcm93IiAgZGF0YS1yZXBvcnRObz0iMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0idGVzdERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMV0ucmVwb3J0c1sxXS5kYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxXS5yZXBvcnRzWzFdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5yZXBvcnRzWzFdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFJlc3VsdCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0ucmVzdWx0LnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0UmVzdWx0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5yZXBvcnRzWzFdLnJlc3VsdC52YWx1ZSIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0ucmVzdWx0LmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5yZXBvcnRzWzFdLnJlc3VsdC5pZCIgLz4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5yZXBvcnRzWzFdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0ucmVwb3J0c1sxXS5jb21tZW50cyIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0ubW9yZUluZm8iIGNsYXNzPSdjb2wtc20tMSAgICAgdGVzdE1vcmVJbmZvJz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMV0ucmVwb3J0c1sxXS5tb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxXS5yZXBvcnRzWzFdLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMV0ucmVwb3J0c1sxXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXJlcG9ydCI+ICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIHRlc3RfMSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC90ZD48L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTIiPiAgICA8dGQgY2xhc3M9InNlcmlhbE5vIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4gICAgICAgICAgICAgICAgMiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgdGVzdCIgY2xhc3M9InB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdE5hbWUiPiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ubmFtZS5yZWFjdGlvbkNvZGVkIiBjbGFzcz0nY29sLW1kLTcgICB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0TmFtZSc+ICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS5uYW1lLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSJJcm9uIGJpbmRpbmcgY2FwYWNpdHkgdG90YWwgbG93IiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9Iklyb24gYmluZGluZyBjYXBhY2l0eSB0b3RhbCBsb3ciIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMjI5NjYiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iaXJvIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9ImlybyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjU4IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMl0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4gICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdE5vcm1hbExvd0hpZ2giPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5vcm1hbExvd0hpZ2giIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS5ub3JtYWxMb3ciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5vcm1hbEhpZ2giIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLnVuaXQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdFJlcG9ydFJvdyB0ZXN0UmVwb3J0cyI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzJdLnJlcG9ydHNbMl0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgdGVzdFJlc3VsdElucHV0ICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5yZXN1bHQudmFsdWUiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5yZXN1bHQuaWQiIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5jb21tZW50cyIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RDb21tZW50cyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLnJlcG9ydHNbMl0uY29tbWVudHMiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzJdLnJlcG9ydHNbMl0ubW9yZUluZm8iPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzJdLnJlcG9ydHNbMl0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHJlcG9ydCIgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBkZWwtdGVzdC1yZXBvcnQgZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiB0ZXN0XzIiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+PC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi0zIj4gICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+ICAgICAgICAgICAgICAgIDMgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxUZXN0SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICA8L2E+ICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbM10ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iVGh5cmVvc3RhdGljIHRoZXJhcHkiIG1heGxlbmd0aD0iMjUwIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtYnJvd3Nlci12YWx1ZT0iVGh5cmVvc3RhdGljIHRoZXJhcHkiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbM10ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwNjUzNTkiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0idGh5IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9InRoeSIgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbM10uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjYxIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbM10uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4gICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdE5vcm1hbExvd0hpZ2giPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1szXS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5vcm1hbExvd0hpZ2giIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1szXS5ub3JtYWxMb3ciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5vcm1hbEhpZ2giIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbM10udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1szXS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLnVuaXQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdFJlcG9ydFJvdyB0ZXN0UmVwb3J0cyI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLnJlcG9ydHNbM10uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgdGVzdFJlc3VsdElucHV0ICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5yZXN1bHQudmFsdWUiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5yZXN1bHQuaWQiIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5jb21tZW50cyIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RDb21tZW50cyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLnJlcG9ydHNbM10uY29tbWVudHMiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzNdLnJlcG9ydHNbM10ubW9yZUluZm8iPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzNdLnJlcG9ydHNbM10uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHJlcG9ydCIgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBkZWwtdGVzdC1yZXBvcnQgZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiB0ZXN0XzMiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+PC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi00Ij4gICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+ICAgICAgICAgICAgICAgIDQgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxUZXN0SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICA8L2E+ICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iTmVvaW50aW1hbCBoeXBlcnBsYXNpYSIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJOZW9pbnRpbWFsIGh5cGVycGxhc2lhIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzRdLm5hbWUubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDc2ODUxIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS5uYW1lLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s0XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9Im5lbyIgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s0XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s0XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJuZW8iIGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzRdLmludGVybmFsUm93SWQiIHZhbHVlPSI2NCIgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giPjwvaT4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzRdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSB0ZXN0VW5pdHMgdGVzdC1oYXMtbmFtZSI+ICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIG5vcm1hbEhpZ2hMb3dWYWx1ZSAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS5ub3JtYWxMb3dIaWdoIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS5ub3JtYWxMb3ciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s0XS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS5ub3JtYWxIaWdoIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLnVuaXQuaWQiIGNsYXNzPSIgdGVzdFVuaXQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC03ICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0udW5pdC5pZCIgZGF0YS1mcm9tPSJsYWJUZXN0VW5pdHMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1zb3VyY2U9ImxhYi10ZXN0LXVuaXQtbGlzdCIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS51bml0LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s0XS5yZXBvcnRzWzRdLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5kYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU1NLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzRdLnJlcG9ydHNbNF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLnJlcG9ydHNbNF0ucmVzdWx0LnZhbHVlIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgdGVzdFJlc3VsdCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLnJlcG9ydHNbNF0ucmVzdWx0LnZhbHVlIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLnJlcG9ydHNbNF0ucmVzdWx0LmlkIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLnJlcG9ydHNbNF0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdENvbW1lbnRzIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5jb21tZW50cyIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdENvbW1lbnRzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS5yZXBvcnRzWzRdLmNvbW1lbnRzIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS50ZXN0c1s0XS5yZXBvcnRzWzRdLm1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzRdLnJlcG9ydHNbNF0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1s0XS5yZXBvcnRzWzRdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFJlcG9ydEljb24gdGVzdF80IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPjwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tNSI+ICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCByb3ctY291bnQiPiAgICAgICAgICAgICAgICA1ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC10ZXN0IGhpZGUiPiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyB0ZXN0IiBjbGFzcz0icHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgPC9hPiAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC90ZD4gICAgPHRkIGNsYXNzPSJ0ZXN0TmFtZSI+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4gICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IkJsdWUgYmFieSBzeW5kcm9tZSIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJCbHVlIGJhYnkgc3luZHJvbWUiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNV0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwNjk0MTIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iYmx1ZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s1XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s1XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJibHVlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s1XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNjciIGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLmludGVybmFsUm93SWQiIC8+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1s1XS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLm5vcm1hbExvd0hpZ2giIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Tm9ybWFsTG93SGlnaCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLm5vcm1hbExvd0hpZ2giIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ubm9ybWFsTG93SGlnaCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNV0ubm9ybWFsSGlnaCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ubm9ybWFsSGlnaCIgLz4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0udW5pdC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC90ZD4gICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0ZXN0LWRhdGUtcm93IiAgZGF0YS1yZXBvcnRObz0iMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0idGVzdERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNV0ucmVwb3J0c1s1XS5kYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFJlc3VsdCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0ucmVzdWx0LnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0UmVzdWx0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLnJlc3VsdC52YWx1ZSIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0ucmVzdWx0LmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLnJlc3VsdC5pZCIgLz4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ucmVwb3J0c1s1XS5jb21tZW50cyIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0ubW9yZUluZm8iIGNsYXNzPSdjb2wtc20tMSAgICAgdGVzdE1vcmVJbmZvJz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbNV0ucmVwb3J0c1s1XS5tb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbNV0ucmVwb3J0c1s1XS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXJlcG9ydCI+ICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIHRlc3RfNSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC90ZD48L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTYiPiAgICA8dGQgY2xhc3M9InNlcmlhbE5vIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4gICAgICAgICAgICAgICAgNiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgdGVzdCIgY2xhc3M9InB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdE5hbWUiPiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubmFtZS5yZWFjdGlvbkNvZGVkIiBjbGFzcz0nY29sLW1kLTcgICB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0TmFtZSc+ICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s2XS5uYW1lLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSJCcml0dGxlIHRlZXRoIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IkJyaXR0bGUgdGVldGgiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNl0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMDYzNzQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzZdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0idGVldCIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s2XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s2XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJ0ZWV0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s2XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNzAiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLmludGVybmFsUm93SWQiIC8+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1s2XS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLm5vcm1hbExvd0hpZ2giIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Tm9ybWFsTG93SGlnaCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzZdLm5vcm1hbExvd0hpZ2giIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubm9ybWFsTG93SGlnaCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzZdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNl0ubm9ybWFsSGlnaCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubm9ybWFsSGlnaCIgLz4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzZdLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0udW5pdC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC90ZD4gICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0ZXN0LWRhdGUtcm93IiAgZGF0YS1yZXBvcnRObz0iMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0idGVzdERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNl0ucmVwb3J0c1s2XS5kYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFJlc3VsdCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0ucmVzdWx0LnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0UmVzdWx0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLnJlc3VsdC52YWx1ZSIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0ucmVzdWx0LmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLnJlc3VsdC5pZCIgLz4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ucmVwb3J0c1s2XS5jb21tZW50cyIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0ubW9yZUluZm8iIGNsYXNzPSdjb2wtc20tMSAgICAgdGVzdE1vcmVJbmZvJz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbNl0ucmVwb3J0c1s2XS5tb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbNl0ucmVwb3J0c1s2XS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXJlcG9ydCI+ICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIHRlc3RfNiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC90ZD48L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTciPiAgICA8dGQgY2xhc3M9InNlcmlhbE5vIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4gICAgICAgICAgICAgICAgNyAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgdGVzdCIgY2xhc3M9InB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdE5hbWUiPiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ubmFtZS5yZWFjdGlvbkNvZGVkIiBjbGFzcz0nY29sLW1kLTcgICB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0TmFtZSc+ICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5uYW1lLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSJCbGFjayBjb2xvcmVkIHN3ZWF0aW5nIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IkJsYWNrIGNvbG9yZWQgc3dlYXRpbmciIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbN10ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMDQ5NzAiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzddLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iYmxhIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzddLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzddLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9ImJsYSIgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbN10uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjczIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbN10uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4gICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdE5vcm1hbExvd0hpZ2giPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLm5vcm1hbExvd0hpZ2giIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5ub3JtYWxMb3ciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzddLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLm5vcm1hbEhpZ2giIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbN10udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLnVuaXQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdFJlcG9ydFJvdyB0ZXN0UmVwb3J0cyI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzddLnJlcG9ydHNbN10uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbN10ucmVwb3J0c1s3XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ucmVwb3J0c1s3XS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgdGVzdFJlc3VsdElucHV0ICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ucmVwb3J0c1s3XS5yZXN1bHQudmFsdWUiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ucmVwb3J0c1s3XS5yZXN1bHQuaWQiIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ucmVwb3J0c1s3XS5jb21tZW50cyIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RDb21tZW50cyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLnJlcG9ydHNbN10uY29tbWVudHMiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzddLnJlcG9ydHNbN10ubW9yZUluZm8iPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbN10ucmVwb3J0c1s3XS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzddLnJlcG9ydHNbN10uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHJlcG9ydCIgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBkZWwtdGVzdC1yZXBvcnQgZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiB0ZXN0XzciIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+PC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi04Ij4gICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+ICAgICAgICAgICAgICAgIDggICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxUZXN0SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICA8L2E+ICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iRmlyZSBhY2NpZGVudCIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJGaXJlIGFjY2lkZW50IiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5hbWUubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDcyMDk3IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5uYW1lLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9ImZpcmUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iZmlyZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9Ijc2IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbOF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4gICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdE5vcm1hbExvd0hpZ2giPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5vcm1hbExvd0hpZ2giIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS5ub3JtYWxMb3ciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5vcm1hbEhpZ2giIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLnVuaXQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdFJlcG9ydFJvdyB0ZXN0UmVwb3J0cyI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzhdLnJlcG9ydHNbOF0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgdGVzdFJlc3VsdElucHV0ICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5yZXN1bHQudmFsdWUiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5yZXN1bHQuaWQiIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5jb21tZW50cyIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RDb21tZW50cyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLnJlcG9ydHNbOF0uY29tbWVudHMiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzhdLnJlcG9ydHNbOF0ubW9yZUluZm8iPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzhdLnJlcG9ydHNbOF0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHJlcG9ydCIgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBkZWwtdGVzdC1yZXBvcnQgZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiB0ZXN0XzgiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+PC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi05Ij4gICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+ICAgICAgICAgICAgICAgIDkgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxUZXN0SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICA8L2E+ICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOV0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iRGVwZW5kZW5jZSBhZGRpY3RpdmUiIG1heGxlbmd0aD0iMjUwIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtYnJvd3Nlci12YWx1ZT0iRGVwZW5kZW5jZSBhZGRpY3RpdmUiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOV0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMTIzMzYiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iZGVwIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9ImRlcCIgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOV0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9Ijc5IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbOV0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4gICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdE5vcm1hbExvd0hpZ2giPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s5XS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLm5vcm1hbExvd0hpZ2giIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s5XS5ub3JtYWxMb3ciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLm5vcm1hbEhpZ2giIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s5XS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLnVuaXQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdFJlcG9ydFJvdyB0ZXN0UmVwb3J0cyI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLnJlcG9ydHNbOV0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgdGVzdFJlc3VsdElucHV0ICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5yZXN1bHQudmFsdWUiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5yZXN1bHQuaWQiIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5jb21tZW50cyIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RDb21tZW50cyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLnJlcG9ydHNbOV0uY29tbWVudHMiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzldLnJlcG9ydHNbOV0ubW9yZUluZm8iPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzldLnJlcG9ydHNbOV0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHJlcG9ydCIgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBkZWwtdGVzdC1yZXBvcnQgZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiB0ZXN0XzkiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+PC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi0xMCI+ICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCByb3ctY291bnQiPiAgICAgICAgICAgICAgICAxMCAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgdGVzdCIgY2xhc3M9InB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdE5hbWUiPiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9Ik1hcmFudGljIGVuZG9jYXJkaXRpcyIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJNYXJhbnRpYyBlbmRvY2FyZGl0aXMiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA1ODE0NyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9Im1hciIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0ibWFyIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLmludGVybmFsUm93SWQiIHZhbHVlPSI4MiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLmludGVybmFsUm93SWQiIC8+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4gICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIG5vcm1hbEhpZ2hMb3dWYWx1ZSAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLm5vcm1hbExvd0hpZ2giIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLm5vcm1hbExvd0hpZ2giIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5ub3JtYWxIaWdoIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS51bml0LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLnJlcG9ydHNbMTBdLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5kYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5kYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU1NLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ucmVwb3J0c1sxMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ucmVwb3J0c1sxMF0ucmVzdWx0LnZhbHVlIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgdGVzdFJlc3VsdCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLnJlcG9ydHNbMTBdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLnJlcG9ydHNbMTBdLnJlc3VsdC52YWx1ZSIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5yZXN1bHQuaWQiIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLnJlcG9ydHNbMTBdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5jb21tZW50cyIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdENvbW1lbnRzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ucmVwb3J0c1sxMF0uY29tbWVudHMiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ucmVwb3J0c1sxMF0ubW9yZUluZm8iIGNsYXNzPSdjb2wtc20tMSAgICAgdGVzdE1vcmVJbmZvJz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMTBdLnJlcG9ydHNbMTBdLm1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXJlcG9ydCI+ICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIHRlc3RfMTAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+PC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi0xMSI+ICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCByb3ctY291bnQiPiAgICAgICAgICAgICAgICAxMSAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgdGVzdCIgY2xhc3M9InB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdE5hbWUiPiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTFdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IkRpZ2VzdGl2ZSB0cmFjdCBYLXJheSBOT1Mgbm9ybWFsIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IkRpZ2VzdGl2ZSB0cmFjdCBYLXJheSBOT1Mgbm9ybWFsIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMTI5ODciIGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5uYW1lLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSJkaWciIGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzExXS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTFdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9ImRpZyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzExXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iODUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMTFdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSB0ZXN0VW5pdHMgdGVzdC1oYXMtbmFtZSI+ICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLm5vcm1hbExvd0hpZ2giIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Tm9ybWFsTG93SGlnaCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzExXS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5ub3JtYWxMb3dIaWdoIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTFdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzExXS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ubm9ybWFsSGlnaCIgLz4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMV0udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0udW5pdC5pZCIgZGF0YS1mcm9tPSJsYWJUZXN0VW5pdHMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1zb3VyY2U9ImxhYi10ZXN0LXVuaXQtbGlzdCIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMV0udW5pdC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC90ZD4gICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0ZXN0LWRhdGUtcm93IiAgZGF0YS1yZXBvcnRObz0iMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5yZXBvcnRzWzExXS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFJlc3VsdCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzExXS5yZXBvcnRzWzExXS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5yZXBvcnRzWzExXS5yZXN1bHQudmFsdWUiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0ucmVzdWx0LmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0ucmVzdWx0LmlkIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5yZXBvcnRzWzExXS5jb21tZW50cyIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RDb21tZW50cyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLmNvbW1lbnRzIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzExXS5yZXBvcnRzWzExXS5tb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHJlcG9ydCIgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBkZWwtdGVzdC1yZXBvcnQgZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiB0ZXN0XzExIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPjwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tMTIiPiAgICA8dGQgY2xhc3M9InNlcmlhbE5vIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4gICAgICAgICAgICAgICAgMTIgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxUZXN0SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICA8L2E+ICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4gICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5uYW1lLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSJUcmktaW9kb3RoeXJvbmluZSBmcmVlIGFibm9ybWFsIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IlRyaS1pb2RvdGh5cm9uaW5lIGZyZWUgYWJub3JtYWwiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA1Mzc5NCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9InRyaSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTJdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0idHJpIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTJdLmludGVybmFsUm93SWQiIHZhbHVlPSI4OCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLmludGVybmFsUm93SWQiIC8+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxMl0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4gICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIG5vcm1hbEhpZ2hMb3dWYWx1ZSAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTJdLm5vcm1hbExvd0hpZ2giIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLm5vcm1hbExvd0hpZ2giIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTJdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5ub3JtYWxIaWdoIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS51bml0LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5yZXBvcnRzWzEyXS5kYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5yZXBvcnRzWzEyXS5kYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU1NLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5yZXBvcnRzWzEyXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ucmVwb3J0c1sxMl0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ucmVwb3J0c1sxMl0ucmVzdWx0LnZhbHVlIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgdGVzdFJlc3VsdCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLnJlc3VsdC52YWx1ZSIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5yZXBvcnRzWzEyXS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5yZXBvcnRzWzEyXS5yZXN1bHQuaWQiIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5yZXBvcnRzWzEyXS5jb21tZW50cyIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdENvbW1lbnRzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ucmVwb3J0c1sxMl0uY29tbWVudHMiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ucmVwb3J0c1sxMl0ubW9yZUluZm8iIGNsYXNzPSdjb2wtc20tMSAgICAgdGVzdE1vcmVJbmZvJz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLm1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5yZXBvcnRzWzEyXS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzEyXS5yZXBvcnRzWzEyXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXJlcG9ydCI+ICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIHRlc3RfMTIiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+PC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi0xMyI+ICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCByb3ctY291bnQiPiAgICAgICAgICAgICAgICAxMyAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgdGVzdCIgY2xhc3M9InB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdE5hbWUiPiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IlRTSCBkZWNyZWFzZSIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJUU0ggZGVjcmVhc2UiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA0NDcxNCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9InRzaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0idHNoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLmludGVybmFsUm93SWQiIHZhbHVlPSI5MSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLmludGVybmFsUm93SWQiIC8+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxM10uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4gICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIG5vcm1hbEhpZ2hMb3dWYWx1ZSAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLm5vcm1hbExvd0hpZ2giIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLm5vcm1hbExvd0hpZ2giIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5ub3JtYWxIaWdoIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS51bml0LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLnJlcG9ydHNbMTNdLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5kYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5kYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU1NLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ucmVwb3J0c1sxM10uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ucmVwb3J0c1sxM10ucmVzdWx0LnZhbHVlIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgdGVzdFJlc3VsdCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLnJlcG9ydHNbMTNdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLnJlcG9ydHNbMTNdLnJlc3VsdC52YWx1ZSIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5yZXN1bHQuaWQiIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLnJlcG9ydHNbMTNdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5jb21tZW50cyIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdENvbW1lbnRzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ucmVwb3J0c1sxM10uY29tbWVudHMiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ucmVwb3J0c1sxM10ubW9yZUluZm8iIGNsYXNzPSdjb2wtc20tMSAgICAgdGVzdE1vcmVJbmZvJz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMTNdLnJlcG9ydHNbMTNdLm1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXJlcG9ydCI+ICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIHRlc3RfMTMiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+PC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi0xNCI+ICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCByb3ctY291bnQiPiAgICAgICAgICAgICAgICAxNCAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgdGVzdCIgY2xhc3M9InB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdE5hbWUiPiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTRdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IlQzIG5vcm1hbCIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJUMyBub3JtYWwiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA0MzA1NCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9InQzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJ0MyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iOTQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMTRdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSB0ZXN0VW5pdHMgdGVzdC1oYXMtbmFtZSI+ICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLm5vcm1hbExvd0hpZ2giIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Tm9ybWFsTG93SGlnaCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5ub3JtYWxMb3dIaWdoIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTRdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ubm9ybWFsSGlnaCIgLz4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNF0udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0udW5pdC5pZCIgZGF0YS1mcm9tPSJsYWJUZXN0VW5pdHMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1zb3VyY2U9ImxhYi10ZXN0LXVuaXQtbGlzdCIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNF0udW5pdC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC90ZD4gICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0ZXN0LWRhdGUtcm93IiAgZGF0YS1yZXBvcnRObz0iMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5yZXBvcnRzWzE0XS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFJlc3VsdCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5yZXBvcnRzWzE0XS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5yZXBvcnRzWzE0XS5yZXN1bHQudmFsdWUiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0ucmVzdWx0LmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0ucmVzdWx0LmlkIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5yZXBvcnRzWzE0XS5jb21tZW50cyIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RDb21tZW50cyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLmNvbW1lbnRzIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzE0XS5yZXBvcnRzWzE0XS5tb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHJlcG9ydCIgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBkZWwtdGVzdC1yZXBvcnQgZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiB0ZXN0XzE0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPjwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tMTUiPiAgICA8dGQgY2xhc3M9InNlcmlhbE5vIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4gICAgICAgICAgICAgICAgMTUgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxUZXN0SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICA8L2E+ICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4gICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5uYW1lLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSJJb2RpZGUgaW50b3hpY2F0aW9uIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IklvZGlkZSBpbnRveGljYXRpb24iIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDAyMjkwMiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9ImlvZCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTVdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iaW9kIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTVdLmludGVybmFsUm93SWQiIHZhbHVlPSI5NyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLmludGVybmFsUm93SWQiIC8+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxNV0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4gICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIG5vcm1hbEhpZ2hMb3dWYWx1ZSAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTVdLm5vcm1hbExvd0hpZ2giIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLm5vcm1hbExvd0hpZ2giIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTVdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5ub3JtYWxIaWdoIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS51bml0LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5yZXBvcnRzWzE1XS5kYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5yZXBvcnRzWzE1XS5kYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU1NLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5yZXBvcnRzWzE1XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ucmVwb3J0c1sxNV0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ucmVwb3J0c1sxNV0ucmVzdWx0LnZhbHVlIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgdGVzdFJlc3VsdCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLnJlc3VsdC52YWx1ZSIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5yZXBvcnRzWzE1XS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5yZXBvcnRzWzE1XS5yZXN1bHQuaWQiIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5yZXBvcnRzWzE1XS5jb21tZW50cyIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdENvbW1lbnRzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ucmVwb3J0c1sxNV0uY29tbWVudHMiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ucmVwb3J0c1sxNV0ubW9yZUluZm8iIGNsYXNzPSdjb2wtc20tMSAgICAgdGVzdE1vcmVJbmZvJz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLm1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5yZXBvcnRzWzE1XS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzE1XS5yZXBvcnRzWzE1XS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXJlcG9ydCI+ICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIHRlc3RfMTUiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+PC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi0xNiI+ICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCByb3ctY291bnQiPiAgICAgICAgICAgICAgICAxNiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgdGVzdCIgY2xhc3M9InB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdE5hbWUiPiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IkZsdSBwcmV2ZW50aW9uIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IkZsdSBwcmV2ZW50aW9uIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMTY3OTIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5uYW1lLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSJmbHUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9ImZsdSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTAwIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNl0uaW50ZXJuYWxSb3dJZCIgLz4gICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giPjwvaT4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzE2XS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdE5vcm1hbExvd0hpZ2giPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ubm9ybWFsTG93SGlnaCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5ub3JtYWxMb3ciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5ub3JtYWxMb3ciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ubm9ybWFsSGlnaCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLm5vcm1hbEhpZ2giIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLnVuaXQuaWQiIGNsYXNzPSIgdGVzdFVuaXQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC03ICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLnVuaXQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdFJlcG9ydFJvdyB0ZXN0UmVwb3J0cyI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ucmVwb3J0c1sxNl0uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0idGVzdERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5yZXBvcnRzWzE2XS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5yZXBvcnRzWzE2XS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgdGVzdFJlc3VsdElucHV0ICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ucmVwb3J0c1sxNl0ucmVzdWx0LnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0UmVzdWx0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ucmVwb3J0c1sxNl0ucmVzdWx0LnZhbHVlIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLnJlc3VsdC5pZCIgLz4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ucmVwb3J0c1sxNl0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdENvbW1lbnRzIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5yZXBvcnRzWzE2XS5jb21tZW50cyIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5yZXBvcnRzWzE2XS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS50ZXN0c1sxNl0ucmVwb3J0c1sxNl0ubW9yZUluZm8iPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFJlcG9ydEljb24gdGVzdF8xNiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC90ZD48L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTE3Ij4gICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+ICAgICAgICAgICAgICAgIDE3ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC10ZXN0IGhpZGUiPiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyB0ZXN0IiBjbGFzcz0icHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgPC9hPiAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC90ZD4gICAgPHRkIGNsYXNzPSJ0ZXN0TmFtZSI+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubmFtZS5yZWFjdGlvbkNvZGVkIiBjbGFzcz0nY29sLW1kLTcgICB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0TmFtZSc+ICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iQm9keSBpbWFnZSBkaXNvcmRlciIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJCb2R5IGltYWdlIGRpc29yZGVyIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMDU4OTIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5uYW1lLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSJib2QiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9ImJvZCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTAzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10uaW50ZXJuYWxSb3dJZCIgLz4gICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giPjwvaT4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzE3XS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdE5vcm1hbExvd0hpZ2giPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubm9ybWFsTG93SGlnaCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5ub3JtYWxMb3ciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5ub3JtYWxMb3ciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubm9ybWFsSGlnaCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLm5vcm1hbEhpZ2giIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLnVuaXQuaWQiIGNsYXNzPSIgdGVzdFVuaXQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC03ICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLnVuaXQuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvdGQ+ICAgIDx0ZCBjbGFzcz0idGVzdFJlcG9ydFJvdyB0ZXN0UmVwb3J0cyI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10ucmVwb3J0c1sxN10uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+ICAgIDxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0idGVzdERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgdGVzdFJlc3VsdElucHV0ICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxN10ucmVwb3J0c1sxN10ucmVzdWx0LnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0UmVzdWx0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10ucmVwb3J0c1sxN10ucmVzdWx0LnZhbHVlIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLnJlc3VsdC5pZCIgLz4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10ucmVwb3J0c1sxN10uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdENvbW1lbnRzIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5jb21tZW50cyIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS50ZXN0c1sxN10ucmVwb3J0c1sxN10ubW9yZUluZm8iPiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFJlcG9ydEljb24gdGVzdF8xNyIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC90ZD48L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTE4Ij4gICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+ICAgICAgICAgICAgICAgIDE4ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC10ZXN0IGhpZGUiPiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyB0ZXN0IiBjbGFzcz0icHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgPC9hPiAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC90ZD4gICAgPHRkIGNsYXNzPSJ0ZXN0TmFtZSI+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubmFtZS5yZWFjdGlvbkNvZGVkIiBjbGFzcz0nY29sLW1kLTcgICB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0TmFtZSc+ICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iRmFjdG9yIFYgTGVpZGVuIGNhcnJpZXIiIG1heGxlbmd0aD0iMjUwIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtYnJvd3Nlci12YWx1ZT0iRmFjdG9yIFYgTGVpZGVuIGNhcnJpZXIiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA3NTY1MiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9ImRlbiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMThdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iZGVuIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMThdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMDYiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMThdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSB0ZXN0VW5pdHMgdGVzdC1oYXMtbmFtZSI+ICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLm5vcm1hbExvd0hpZ2giIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Tm9ybWFsTG93SGlnaCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5ub3JtYWxMb3dIaWdoIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMThdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubm9ybWFsSGlnaCIgLz4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOF0udW5pdC5pZCIgZGF0YS1mcm9tPSJsYWJUZXN0VW5pdHMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1zb3VyY2U9ImxhYi10ZXN0LXVuaXQtbGlzdCIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0udW5pdC5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC90ZD4gICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0ZXN0LWRhdGUtcm93IiAgZGF0YS1yZXBvcnRObz0iMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4gICAgPGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ucmVwb3J0c1sxOF0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ucmVwb3J0c1sxOF0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ucmVwb3J0c1sxOF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLnJlcG9ydHNbMThdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLnJlcG9ydHNbMThdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFJlc3VsdCI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5yZXN1bHQudmFsdWUiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ucmVwb3J0c1sxOF0ucmVzdWx0LmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ucmVwb3J0c1sxOF0ucmVzdWx0LmlkIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5jb21tZW50cyIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RDb21tZW50cyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ucmVwb3J0c1sxOF0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLnJlcG9ydHNbMThdLmNvbW1lbnRzIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLnJlcG9ydHNbMThdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5tb3JlSW5mbyI+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ucmVwb3J0c1sxOF0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxOF0ucmVwb3J0c1sxOF0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHJlcG9ydCIgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBkZWwtdGVzdC1yZXBvcnQgZWRpdC1sb2NrIj4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiB0ZXN0XzE4IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPjwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tMTkiPiAgICA8dGQgY2xhc3M9InNlcmlhbE5vIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4gICAgICAgICAgICAgICAgMTkgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxUZXN0SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICA8L2E+ICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4gICAgICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4gICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5uYW1lLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSJZZWxsb3cgbmFpbCBzeW5kcm9tZSIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJZZWxsb3cgbmFpbCBzeW5kcm9tZSIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLWZpZWxkSWQ9InRlc3ROYW1lIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLm5hbWUubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDQ4MjQ0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubmFtZS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0ieWVsbG93IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJ5ZWxsb3ciIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOV0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjEwOSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTldLmludGVybmFsUm93SWQiIC8+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxOV0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4gICAgICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIG5vcm1hbEhpZ2hMb3dWYWx1ZSAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLm5vcm1hbExvd0hpZ2giIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTldLm5vcm1hbExvd0hpZ2giIC8+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5ub3JtYWxIaWdoIiAvPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS51bml0LmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L3RkPiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTldLnJlcG9ydHNbMTldLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPiAgICA8ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5kYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5kYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU1NLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ucmVwb3J0c1sxOV0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ucmVwb3J0c1sxOV0ucmVzdWx0LnZhbHVlIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgdGVzdFJlc3VsdCAgIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4gICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLnJlcG9ydHNbMTldLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTldLnJlcG9ydHNbMTldLnJlc3VsdC52YWx1ZSIgLz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5yZXN1bHQuaWQiIC8+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTldLnJlcG9ydHNbMTldLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+ICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5jb21tZW50cyIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdENvbW1lbnRzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ucmVwb3J0c1sxOV0uY29tbWVudHMiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ucmVwb3J0c1sxOV0ubW9yZUluZm8iIGNsYXNzPSdjb2wtc20tMSAgICAgdGVzdE1vcmVJbmZvJz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMTldLnJlcG9ydHNbMTldLm1vcmVJbmZvIj4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXJlcG9ydCI+ICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIHRlc3RfMTkiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvdGQ+PC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PiAgICA8L3RhYmxlPjwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQcm9kdWN0IEV2ZW50IE1hdHJpeCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIHJ4bWFpbi1jb250YWluZXIgcnhtYWluLWNvbnRhaW5lci10b3AiICAgICAgICAgaWQ9InYtcHJvZHVjdEV2ZW50TWF0cml4Ij4gICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIHBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgIDxoNCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2siPiAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWNhc2UiICAgICAgICAgICAgICAgICAgIGhyZWY9IiNwcm9kdWN0RXZlbnRNYXRyaXgiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIHNlYy1kaXNwbGF5LXR4dCBzZWN0aW9uVGl0bGUiPiAgICAgICAgICAgICAgICAgICAgUHJvZHVjdCBFdmVudCBNYXRyaXggICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hbGVydC1jaXJjbGUtb3V0bGluZSB0ZXh0LWRhbmdlciBwZW1SZWZyZXNoIGhpZGUiIGlkPSJwZW1SZWZyZXNoIiBhcmlhLWhpZGRlbj0idHJ1ZSIgICAgICAgZGF0YS1yZXF1aXJlLXBlbS1wcm9kdWN0LW9yZGVyPSJmYWxzZSIgZGF0YS1yZXF1aXJlLXBlbS1ldmVudC1vcmRlcj0iZmFsc2UiICAgICAgIGRhdGEtcmVxdWlyZS1yZWluZGV4LWFsbC1ldmVudHM9ImZhbHNlIiBkYXRhLXJlcXVpcmUtdHJlZS12aWV3LXJlZnJlc2g9ImZhbHNlIiBkYXRhLXJlcXVpcmUtcm93LW51bWJlci11cGRhdGU9ImZhbHNlIiAgICAgICBkYXRhLXN1Y2Nlc3MtbXNnPSJQcm9kdWN0cyAmIEV2ZW50cyBvcmRlciBpbiBQcm9kdWN0IEV2ZW50IE1hdHJpeCBhbmQgdGhlIFRyZWUgVmlldyBpcyByZWZyZXNoZWQuIiAgICAgICB0aXRsZT0iUmVmcmVzaCB0aGUgcHJvZHVjdHMgJiBldmVudHMgb3JkZXIgYW5kIHRoZSB0cmVlIHZpZXciICAgICAgIGRhdGEtc2VjdGlvbi1pZD0iI3Byb2R1Y3RFdmVudE1hdHJpeCIgZGF0YS1zZWN0aW9uLW5hbWU9IlByb2R1Y3QgRXZlbnQiPjwvaT4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50TWF0cml4IiAgICAgICAgICAgICBjbGFzcz0icGFuZWwtY29sbGFwc2UgcHYtbWFpbiBjb2xsYXBzZSByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHBlbS1yZWZyZXNoIiAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtc2VjdGlvbiBwZS1yb3cgaW5uZXItdGFibGUgbS1iLTAgcm93Ij4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibm8tcGUtd2FybmluZyI+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdi1zZWN0aW9uLXJlY29yZCBwYW5lbCBwcm9kdWN0UEVUZW1wbGF0ZSAiIGRhdGEtcHJvZHVjdC1yb3ctaWQ9IjExIiBkYXRhLXBlcnNpc3RlZCA9ICJ0cnVlIj4gICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAgbS1iLTAgaW5uZXItcmVwZWF0YWJsZSIgaWQ9ImFjY29yZGlvbi1pbm5lclByb2RFdmVudE1hdHJpeF8wIj4gICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgbS1iLTAgZXZlbnRDb250YWluZXIiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgaWQ9InByb2R1Y3ROYW1lUEVNIiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24taW5uZXJQcm9kRXZlbnRNYXRyaXgiIGhyZWY9IiNwdlBFTV8wIiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InByb2R1Y3ROYW1lSGVhZGVyUEUgaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQgY29sbGFwc2VkIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHZQRU1fMCIgY2xhc3M9InBhbmVsLWNvbGxhcHNlIGlubmVyLXJlcGVhdGFibGUgY29sbGFwc2UiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBzdHlsZT0iaGVpZ2h0OiAwIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBzaG9ydC1maWVsZCBwLTAgZXZlbnQtY29udGFpbmVyLWRpdiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdi1wcm9kdWN0LWV2ZW50LW1ldHJpeCBwdi1zZWN0aW9uLXJlY29yZCBldmVudFBFVGVtcGxhdGUgcm93LXN0cmlwIG0tMCBwLWwtMTAgcC1yLTUgcC1iLTEwICAgIiAgICAgZGF0YS1ldmVudC1yb3ctaWQ9IjE1IiAgICAgaWQ9InByb2R1Y3RFdmVudE1hdHJpeC1zZWN0aW9uLTAiIGRhdGEtcGVyc2lzdGVkPSJ0cnVlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvdy1jb3VudCI+MTwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIGNvbC1tZC0xMiBldmVudCIgaWQ9ImV2ZW50TmFtZVBFTSI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXZlbnROYW1lSGVhZGVyUEUiPjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1pbmRpY2F0b3IiPjwvc3Bhbj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZpcnN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLmZpcnN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjExMyIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5MYXN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ubGFzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5yZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJyZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLmRlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209ImRlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5kZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5wcm9kdWN0SW50ZXJuYWxJZCB2YWx1ZT0xMT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLmV2ZW50SW50ZXJuYWxJZCB2YWx1ZT0xNT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5wcm9kdWN0SWQgdmFsdWU9PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0uZXZlbnRJZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCByZWxhdGVkbmVzc0Fzc2VzbWVudCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLXRhYmxlIG0tdC0xMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudF8wIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWxhdGVkbmVzcyBBc3Nlc3NtZW50cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8wXyIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMF8iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMCIgZGF0YS10ZW1wbGF0ZUlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUZW1wbGF0ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgcC0wIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5IHAtMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1yZWxhdGVkbmVzcyBwdi1zZWMtc2VwZXJhdG9yIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1pbm5lci1wcm9kdWN0LXN1YnN0YW5jZSBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFNvdXJjZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBNZXRob2QgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0JyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBSZXN1bHQgPC9sYWJlbD48L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBhZGQtdGFibGUtcm93IGFkZC1zZWN0aW9uIGJ0bi1hZGQtcGFuZWwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFidWxhcj0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cy1zcXVhcmUtbyI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBjbGFzcz0icHYtZHJhZ2dhYmxlLWxpc3QgdWktc29ydGFibGUgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzBfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIGlubmVyLXJlcGVhdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAgcmVsYXRlZG5lc3NSb3ciICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMF8tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eVNvdXJjZSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlNZXRob2RzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00IGluZGljYXRvci10YWJ1bGFyIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBwZVJlc3VsdCAgaW5kaWNhdG9yLXRhYnVsYXIgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5Q2F0ZWdvcnkiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFswXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0YWJsZS1yb3ctZGVsIHB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gYnRuLWRlbC1wYW5lbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXByb2R1Y3QtZXZlbnQtbWV0cml4IHB2LXNlY3Rpb24tcmVjb3JkIGV2ZW50UEVUZW1wbGF0ZSByb3ctc3RyaXAgbS0wIHAtbC0xMCBwLXItNSBwLWItMTAgICAiICAgICBkYXRhLWV2ZW50LXJvdy1pZD0iNTEiICAgICBpZD0icHJvZHVjdEV2ZW50TWF0cml4LXNlY3Rpb24tMSIgZGF0YS1wZXJzaXN0ZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj4gICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93LWNvdW50Ij4yPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtdGl0bGUgY29sLW1kLTEyIGV2ZW50IiBpZD0iZXZlbnROYW1lUEVNIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJldmVudE5hbWVIZWFkZXJQRSI+PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWljLWluZGljYXRvciI+PC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Rmlyc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzFdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzFdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMV0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxXS5maXJzdERvc2VJbnRlcnZhbC5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTE0IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMV0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMV0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzFdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxXS5sYXN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMV0ubGFzdERvc2VJbnRlcnZhbC5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzFdLnJlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209InJlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxXS5yZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudERlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMV0uZGVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0iZGVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzFdLmRlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzFdLnByb2R1Y3RJbnRlcm5hbElkIHZhbHVlPTExPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMV0uZXZlbnRJbnRlcm5hbElkIHZhbHVlPTUxPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMV0uZGVsZXRlZCB2YWx1ZT1mYWxzZT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzFdLnByb2R1Y3RJZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxXS5ldmVudElkIHZhbHVlPT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IHJlbGF0ZWRuZXNzQXNzZXNtZW50IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5uZXItdGFibGUgbS10LTEwIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50XzEiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbGF0ZWRuZXNzIEFzc2Vzc21lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzFfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8xXyIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8xIiBkYXRhLXRlbXBsYXRlSWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyBwLTAgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU291cmNlIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE1ldGhvZCA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFJlc3VsdCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMV8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgaW5uZXItcmVwZWF0YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICByZWxhdGVkbmVzc1JvdyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8xXy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4Ij4xPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgaW5kaWNhdG9yLXRhYnVsYXIiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHBlUmVzdWx0ICBpbmRpY2F0b3ItdGFidWxhciBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtcHJvZHVjdC1ldmVudC1tZXRyaXggcHYtc2VjdGlvbi1yZWNvcmQgZXZlbnRQRVRlbXBsYXRlIHJvdy1zdHJpcCBtLTAgcC1sLTEwIHAtci01IHAtYi0xMCAgICIgICAgIGRhdGEtZXZlbnQtcm93LWlkPSI1MiIgICAgIGlkPSJwcm9kdWN0RXZlbnRNYXRyaXgtc2VjdGlvbi0yIiBkYXRhLXBlcnNpc3RlZD0idHJ1ZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyb3ctY291bnQiPjM8L3NwYW4+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC10aXRsZSBjb2wtbWQtMTIgZXZlbnQiIGlkPSJldmVudE5hbWVQRU0iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV2ZW50TmFtZUhlYWRlclBFIj48L3NwYW4+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaWMtaW5kaWNhdG9yIj48L3NwYW4+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GaXJzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMl0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMl0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyXS5maXJzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzJdLmZpcnN0RG9zZUludGVydmFsLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzJdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMTUiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyXS5pbnRlcm5hbFJvd0lkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TGFzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyXS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMl0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzJdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyXS5sYXN0RG9zZUludGVydmFsLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMl0ucmVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0icmVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzJdLnJlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RGVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyXS5kZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJkZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMl0uZGVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMl0ucHJvZHVjdEludGVybmFsSWQgdmFsdWU9MTE+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyXS5ldmVudEludGVybmFsSWQgdmFsdWU9NTI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyXS5kZWxldGVkIHZhbHVlPWZhbHNlPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMl0ucHJvZHVjdElkIHZhbHVlPT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzJdLmV2ZW50SWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggcmVsYXRlZG5lc3NBc3Nlc21lbnQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci10YWJsZSBtLXQtMTAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMiIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRlZG5lc3MgQXNzZXNzbWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMl8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzJfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzIiIGRhdGEtdGVtcGxhdGVJZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGVtcGxhdGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYmxlPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgcHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHAtMCBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTb3VyY2UgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTWV0aG9kIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUmVzdWx0IDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYnVsYXI9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8yXyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBpbm5lci1yZXBlYXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIHJlbGF0ZWRuZXNzUm93IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzJfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXgiPjE8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzJdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlTb3VyY2UiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzJdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzJdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5TWV0aG9kcyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzJdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCBpbmRpY2F0b3ItdGFidWxhciI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgcGVSZXN1bHQgIGluZGljYXRvci10YWJ1bGFyIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eUNhdGVnb3J5IiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdi1wcm9kdWN0LWV2ZW50LW1ldHJpeCBwdi1zZWN0aW9uLXJlY29yZCBldmVudFBFVGVtcGxhdGUgcm93LXN0cmlwIG0tMCBwLWwtMTAgcC1yLTUgcC1iLTEwICAgIiAgICAgZGF0YS1ldmVudC1yb3ctaWQ9IjUzIiAgICAgaWQ9InByb2R1Y3RFdmVudE1hdHJpeC1zZWN0aW9uLTMiIGRhdGEtcGVyc2lzdGVkPSJ0cnVlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvdy1jb3VudCI+NDwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIGNvbC1tZC0xMiBldmVudCIgaWQ9ImV2ZW50TmFtZVBFTSI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXZlbnROYW1lSGVhZGVyUEUiPjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1pbmRpY2F0b3IiPjwvc3Bhbj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZpcnN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFszXS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFszXS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzNdLmZpcnN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbM10uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbM10uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjExNiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzNdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5MYXN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzNdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFszXS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbM10ubGFzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzNdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFszXS5yZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJyZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbM10ucmVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzNdLmRlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209ImRlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFszXS5kZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFszXS5wcm9kdWN0SW50ZXJuYWxJZCB2YWx1ZT0xMT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzNdLmV2ZW50SW50ZXJuYWxJZCB2YWx1ZT01Mz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzNdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFszXS5wcm9kdWN0SWQgdmFsdWU9PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbM10uZXZlbnRJZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCByZWxhdGVkbmVzc0Fzc2VzbWVudCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLXRhYmxlIG0tdC0xMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudF8zIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWxhdGVkbmVzcyBBc3Nlc3NtZW50cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8zXyIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fM18iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMyIgZGF0YS10ZW1wbGF0ZUlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUZW1wbGF0ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgcC0wIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5IHAtMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1yZWxhdGVkbmVzcyBwdi1zZWMtc2VwZXJhdG9yIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1pbm5lci1wcm9kdWN0LXN1YnN0YW5jZSBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFNvdXJjZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBNZXRob2QgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0JyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBSZXN1bHQgPC9sYWJlbD48L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBhZGQtdGFibGUtcm93IGFkZC1zZWN0aW9uIGJ0bi1hZGQtcGFuZWwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFidWxhcj0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cy1zcXVhcmUtbyI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBjbGFzcz0icHYtZHJhZ2dhYmxlLWxpc3QgdWktc29ydGFibGUgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzNfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIGlubmVyLXJlcGVhdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAgcmVsYXRlZG5lc3NSb3ciICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfM18tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eVNvdXJjZSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzNdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzNdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlNZXRob2RzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00IGluZGljYXRvci10YWJ1bGFyIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBwZVJlc3VsdCAgaW5kaWNhdG9yLXRhYnVsYXIgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFszXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5Q2F0ZWdvcnkiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFszXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFszXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0YWJsZS1yb3ctZGVsIHB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gYnRuLWRlbC1wYW5lbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXByb2R1Y3QtZXZlbnQtbWV0cml4IHB2LXNlY3Rpb24tcmVjb3JkIGV2ZW50UEVUZW1wbGF0ZSByb3ctc3RyaXAgbS0wIHAtbC0xMCBwLXItNSBwLWItMTAgICAiICAgICBkYXRhLWV2ZW50LXJvdy1pZD0iNTQiICAgICBpZD0icHJvZHVjdEV2ZW50TWF0cml4LXNlY3Rpb24tNCIgZGF0YS1wZXJzaXN0ZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj4gICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93LWNvdW50Ij41PC9zcGFuPiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtdGl0bGUgY29sLW1kLTEyIGV2ZW50IiBpZD0iZXZlbnROYW1lUEVNIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJldmVudE5hbWVIZWFkZXJQRSI+PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWljLWluZGljYXRvciI+PC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Rmlyc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzRdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzRdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNF0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs0XS5maXJzdERvc2VJbnRlcnZhbC5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs0XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTE3IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNF0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzRdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs0XS5sYXN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNF0ubGFzdERvc2VJbnRlcnZhbC5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzRdLnJlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209InJlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs0XS5yZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudERlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNF0uZGVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0iZGVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzRdLmRlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzRdLnByb2R1Y3RJbnRlcm5hbElkIHZhbHVlPTExPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNF0uZXZlbnRJbnRlcm5hbElkIHZhbHVlPTU0PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzRdLnByb2R1Y3RJZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs0XS5ldmVudElkIHZhbHVlPT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IHJlbGF0ZWRuZXNzQXNzZXNtZW50IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5uZXItdGFibGUgbS10LTEwIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50XzQiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbGF0ZWRuZXNzIEFzc2Vzc21lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzRfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl80XyIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF80IiBkYXRhLXRlbXBsYXRlSWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyBwLTAgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU291cmNlIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE1ldGhvZCA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFJlc3VsdCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fNF8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgaW5uZXItcmVwZWF0YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICByZWxhdGVkbmVzc1JvdyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF80Xy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4Ij4xPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs0XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs0XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs0XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs0XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgaW5kaWNhdG9yLXRhYnVsYXIiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHBlUmVzdWx0ICBpbmRpY2F0b3ItdGFidWxhciBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXNlY3Rpb24tcmVjb3JkIHBhbmVsIHByb2R1Y3RQRVRlbXBsYXRlICIgZGF0YS1wcm9kdWN0LXJvdy1pZD0iMzAiIGRhdGEtcGVyc2lzdGVkID0gInRydWUiPiAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCBpbm5lci1yZXBlYXRhYmxlIiBpZD0iYWNjb3JkaW9uLWlubmVyUHJvZEV2ZW50TWF0cml4XzEiPiAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBtLWItMCBldmVudENvbnRhaW5lciI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBpZD0icHJvZHVjdE5hbWVQRU0iICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclByb2RFdmVudE1hdHJpeCIgaHJlZj0iI3B2UEVNXzEiICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHJvZHVjdE5hbWVIZWFkZXJQRSBpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCBjb2xsYXBzZWQiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwdlBFTV8xIiBjbGFzcz0icGFuZWwtY29sbGFwc2UgaW5uZXItcmVwZWF0YWJsZSBjb2xsYXBzZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIHN0eWxlPSJoZWlnaHQ6IDAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5IHNob3J0LWZpZWxkIHAtMCBldmVudC1jb250YWluZXItZGl2Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXByb2R1Y3QtZXZlbnQtbWV0cml4IHB2LXNlY3Rpb24tcmVjb3JkIGV2ZW50UEVUZW1wbGF0ZSByb3ctc3RyaXAgbS0wIHAtbC0xMCBwLXItNSBwLWItMTAgICAiICAgICBkYXRhLWV2ZW50LXJvdy1pZD0iMTUiICAgICBpZD0icHJvZHVjdEV2ZW50TWF0cml4LXNlY3Rpb24tNSIgZGF0YS1wZXJzaXN0ZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj4gICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93LWNvdW50Ij4xPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtdGl0bGUgY29sLW1kLTEyIGV2ZW50IiBpZD0iZXZlbnROYW1lUEVNIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJldmVudE5hbWVIZWFkZXJQRSI+PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWljLWluZGljYXRvciI+PC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Rmlyc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzVdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzVdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNV0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs1XS5maXJzdERvc2VJbnRlcnZhbC5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs1XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTE4IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNV0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNV0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzVdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs1XS5sYXN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNV0ubGFzdERvc2VJbnRlcnZhbC5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzVdLnJlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209InJlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs1XS5yZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudERlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNV0uZGVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0iZGVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzVdLmRlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzVdLnByb2R1Y3RJbnRlcm5hbElkIHZhbHVlPTMwPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNV0uZXZlbnRJbnRlcm5hbElkIHZhbHVlPTE1PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNV0uZGVsZXRlZCB2YWx1ZT1mYWxzZT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzVdLnByb2R1Y3RJZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs1XS5ldmVudElkIHZhbHVlPT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IHJlbGF0ZWRuZXNzQXNzZXNtZW50IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5uZXItdGFibGUgbS10LTEwIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50XzUiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbGF0ZWRuZXNzIEFzc2Vzc21lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzVfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl81XyIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF81IiBkYXRhLXRlbXBsYXRlSWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyBwLTAgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU291cmNlIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE1ldGhvZCA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFJlc3VsdCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fNV8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgaW5uZXItcmVwZWF0YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICByZWxhdGVkbmVzc1JvdyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF81Xy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4Ij4xPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs1XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs1XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs1XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs1XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgaW5kaWNhdG9yLXRhYnVsYXIiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHBlUmVzdWx0ICBpbmRpY2F0b3ItdGFidWxhciBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzVdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzVdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzVdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtcHJvZHVjdC1ldmVudC1tZXRyaXggcHYtc2VjdGlvbi1yZWNvcmQgZXZlbnRQRVRlbXBsYXRlIHJvdy1zdHJpcCBtLTAgcC1sLTEwIHAtci01IHAtYi0xMCAgICIgICAgIGRhdGEtZXZlbnQtcm93LWlkPSI1MSIgICAgIGlkPSJwcm9kdWN0RXZlbnRNYXRyaXgtc2VjdGlvbi02IiBkYXRhLXBlcnNpc3RlZD0idHJ1ZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyb3ctY291bnQiPjI8L3NwYW4+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC10aXRsZSBjb2wtbWQtMTIgZXZlbnQiIGlkPSJldmVudE5hbWVQRU0iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV2ZW50TmFtZUhlYWRlclBFIj48L3NwYW4+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaWMtaW5kaWNhdG9yIj48L3NwYW4+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GaXJzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNl0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNl0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs2XS5maXJzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzZdLmZpcnN0RG9zZUludGVydmFsLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzZdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMTkiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs2XS5pbnRlcm5hbFJvd0lkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TGFzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs2XS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNl0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzZdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs2XS5sYXN0RG9zZUludGVydmFsLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNl0ucmVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0icmVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzZdLnJlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RGVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs2XS5kZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJkZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNl0uZGVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNl0ucHJvZHVjdEludGVybmFsSWQgdmFsdWU9MzA+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs2XS5ldmVudEludGVybmFsSWQgdmFsdWU9NTE+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs2XS5kZWxldGVkIHZhbHVlPWZhbHNlPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNl0ucHJvZHVjdElkIHZhbHVlPT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzZdLmV2ZW50SWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggcmVsYXRlZG5lc3NBc3Nlc21lbnQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci10YWJsZSBtLXQtMTAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfNiIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRlZG5lc3MgQXNzZXNzbWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fNl8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzZfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzYiIGRhdGEtdGVtcGxhdGVJZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGVtcGxhdGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYmxlPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgcHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHAtMCBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTb3VyY2UgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTWV0aG9kIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUmVzdWx0IDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYnVsYXI9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl82XyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBpbm5lci1yZXBlYXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIHJlbGF0ZWRuZXNzUm93IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzZfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXgiPjE8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzZdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlTb3VyY2UiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs2XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzZdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzZdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs2XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5TWV0aG9kcyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzZdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCBpbmRpY2F0b3ItdGFidWxhciI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgcGVSZXN1bHQgIGluZGljYXRvci10YWJ1bGFyIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eUNhdGVnb3J5IiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbNl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdi1wcm9kdWN0LWV2ZW50LW1ldHJpeCBwdi1zZWN0aW9uLXJlY29yZCBldmVudFBFVGVtcGxhdGUgcm93LXN0cmlwIG0tMCBwLWwtMTAgcC1yLTUgcC1iLTEwICAgIiAgICAgZGF0YS1ldmVudC1yb3ctaWQ9IjUyIiAgICAgaWQ9InByb2R1Y3RFdmVudE1hdHJpeC1zZWN0aW9uLTciIGRhdGEtcGVyc2lzdGVkPSJ0cnVlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvdy1jb3VudCI+Mzwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIGNvbC1tZC0xMiBldmVudCIgaWQ9ImV2ZW50TmFtZVBFTSI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXZlbnROYW1lSGVhZGVyUEUiPjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1pbmRpY2F0b3IiPjwvc3Bhbj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZpcnN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs3XS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs3XS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzddLmZpcnN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbN10uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbN10uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjEyMCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzddLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5MYXN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzddLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs3XS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbN10ubGFzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzddLmxhc3REb3NlSW50ZXJ2YWwuaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs3XS5yZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJyZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbN10ucmVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzddLmRlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209ImRlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs3XS5kZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs3XS5wcm9kdWN0SW50ZXJuYWxJZCB2YWx1ZT0zMD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzddLmV2ZW50SW50ZXJuYWxJZCB2YWx1ZT01Mj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzddLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs3XS5wcm9kdWN0SWQgdmFsdWU9PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbN10uZXZlbnRJZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCByZWxhdGVkbmVzc0Fzc2VzbWVudCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLXRhYmxlIG0tdC0xMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudF83IiBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWxhdGVkbmVzcyBBc3Nlc3NtZW50cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl83XyIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fN18iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfNyIgZGF0YS10ZW1wbGF0ZUlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUZW1wbGF0ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgcC0wIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5IHAtMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1yZWxhdGVkbmVzcyBwdi1zZWMtc2VwZXJhdG9yIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1pbm5lci1wcm9kdWN0LXN1YnN0YW5jZSBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFNvdXJjZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBNZXRob2QgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0JyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBSZXN1bHQgPC9sYWJlbD48L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBhZGQtdGFibGUtcm93IGFkZC1zZWN0aW9uIGJ0bi1hZGQtcGFuZWwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFidWxhcj0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cy1zcXVhcmUtbyI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBjbGFzcz0icHYtZHJhZ2dhYmxlLWxpc3QgdWktc29ydGFibGUgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzdfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIGlubmVyLXJlcGVhdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAgcmVsYXRlZG5lc3NSb3ciICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfN18tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbN10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eVNvdXJjZSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzddLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbN10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbN10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzddLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlNZXRob2RzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbN10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00IGluZGljYXRvci10YWJ1bGFyIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBwZVJlc3VsdCAgaW5kaWNhdG9yLXRhYnVsYXIgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs3XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5Q2F0ZWdvcnkiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs3XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs3XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0YWJsZS1yb3ctZGVsIHB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gYnRuLWRlbC1wYW5lbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXByb2R1Y3QtZXZlbnQtbWV0cml4IHB2LXNlY3Rpb24tcmVjb3JkIGV2ZW50UEVUZW1wbGF0ZSByb3ctc3RyaXAgbS0wIHAtbC0xMCBwLXItNSBwLWItMTAgICAiICAgICBkYXRhLWV2ZW50LXJvdy1pZD0iNTMiICAgICBpZD0icHJvZHVjdEV2ZW50TWF0cml4LXNlY3Rpb24tOCIgZGF0YS1wZXJzaXN0ZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj4gICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93LWNvdW50Ij40PC9zcGFuPiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtdGl0bGUgY29sLW1kLTEyIGV2ZW50IiBpZD0iZXZlbnROYW1lUEVNIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJldmVudE5hbWVIZWFkZXJQRSI+PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWljLWluZGljYXRvciI+PC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Rmlyc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzhdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzhdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOF0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs4XS5maXJzdERvc2VJbnRlcnZhbC5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs4XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTIxIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOF0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzhdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs4XS5sYXN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOF0ubGFzdERvc2VJbnRlcnZhbC5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzhdLnJlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209InJlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs4XS5yZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudERlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOF0uZGVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0iZGVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzhdLmRlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzhdLnByb2R1Y3RJbnRlcm5hbElkIHZhbHVlPTMwPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOF0uZXZlbnRJbnRlcm5hbElkIHZhbHVlPTUzPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzhdLnByb2R1Y3RJZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs4XS5ldmVudElkIHZhbHVlPT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IHJlbGF0ZWRuZXNzQXNzZXNtZW50IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5uZXItdGFibGUgbS10LTEwIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50XzgiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbGF0ZWRuZXNzIEFzc2Vzc21lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzhfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl84XyIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF84IiBkYXRhLXRlbXBsYXRlSWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyBwLTAgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU291cmNlIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE1ldGhvZCA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFJlc3VsdCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fOF8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgaW5uZXItcmVwZWF0YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICByZWxhdGVkbmVzc1JvdyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF84Xy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4Ij4xPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs4XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs4XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs4XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs4XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgaW5kaWNhdG9yLXRhYnVsYXIiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHBlUmVzdWx0ICBpbmRpY2F0b3ItdGFidWxhciBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzhdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzhdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzhdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtcHJvZHVjdC1ldmVudC1tZXRyaXggcHYtc2VjdGlvbi1yZWNvcmQgZXZlbnRQRVRlbXBsYXRlIHJvdy1zdHJpcCBtLTAgcC1sLTEwIHAtci01IHAtYi0xMCAgICIgICAgIGRhdGEtZXZlbnQtcm93LWlkPSI1NCIgICAgIGlkPSJwcm9kdWN0RXZlbnRNYXRyaXgtc2VjdGlvbi05IiBkYXRhLXBlcnNpc3RlZD0idHJ1ZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyb3ctY291bnQiPjU8L3NwYW4+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC10aXRsZSBjb2wtbWQtMTIgZXZlbnQiIGlkPSJldmVudE5hbWVQRU0iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV2ZW50TmFtZUhlYWRlclBFIj48L3NwYW4+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaWMtaW5kaWNhdG9yIj48L3NwYW4+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GaXJzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOV0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOV0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs5XS5maXJzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzldLmZpcnN0RG9zZUludGVydmFsLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzldLmludGVybmFsUm93SWQiIHZhbHVlPSIxMjIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs5XS5pbnRlcm5hbFJvd0lkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TGFzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs5XS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOV0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzldLmxhc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs5XS5sYXN0RG9zZUludGVydmFsLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOV0ucmVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0icmVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzldLnJlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RGVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs5XS5kZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJkZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOV0uZGVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOV0ucHJvZHVjdEludGVybmFsSWQgdmFsdWU9MzA+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs5XS5ldmVudEludGVybmFsSWQgdmFsdWU9NTQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs5XS5kZWxldGVkIHZhbHVlPWZhbHNlPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOV0ucHJvZHVjdElkIHZhbHVlPT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzldLmV2ZW50SWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggcmVsYXRlZG5lc3NBc3Nlc21lbnQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci10YWJsZSBtLXQtMTAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfOSIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRlZG5lc3MgQXNzZXNzbWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fOV8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzlfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzkiIGRhdGEtdGVtcGxhdGVJZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGVtcGxhdGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYmxlPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgcHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHAtMCBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTb3VyY2UgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTWV0aG9kIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUmVzdWx0IDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYnVsYXI9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl85XyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBpbm5lci1yZXBlYXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIHJlbGF0ZWRuZXNzUm93IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzlfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXgiPjE8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzldLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlTb3VyY2UiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs5XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzldLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzldLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFs5XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5TWV0aG9kcyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzldLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCBpbmRpY2F0b3ItdGFidWxhciI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgcGVSZXN1bHQgIGluZGljYXRvci10YWJ1bGFyIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eUNhdGVnb3J5IiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbOV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtc2VjdGlvbi1yZWNvcmQgcGFuZWwgcHJvZHVjdFBFVGVtcGxhdGUgIiBkYXRhLXByb2R1Y3Qtcm93LWlkPSIzNCIgZGF0YS1wZXJzaXN0ZWQgPSAidHJ1ZSI+ICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIGlubmVyLXJlcGVhdGFibGUiIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kRXZlbnRNYXRyaXhfMiI+ICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIG0tYi0wIGV2ZW50Q29udGFpbmVyIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGlkPSJwcm9kdWN0TmFtZVBFTSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWlubmVyUHJvZEV2ZW50TWF0cml4IiBocmVmPSIjcHZQRU1fMiIgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwcm9kdWN0TmFtZUhlYWRlclBFIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IGNvbGxhcHNlZCIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InB2UEVNXzIiIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBpbm5lci1yZXBlYXRhYmxlIGNvbGxhcHNlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgc3R5bGU9ImhlaWdodDogMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgc2hvcnQtZmllbGQgcC0wIGV2ZW50LWNvbnRhaW5lci1kaXYiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtcHJvZHVjdC1ldmVudC1tZXRyaXggcHYtc2VjdGlvbi1yZWNvcmQgZXZlbnRQRVRlbXBsYXRlIHJvdy1zdHJpcCBtLTAgcC1sLTEwIHAtci01IHAtYi0xMCAgICIgICAgIGRhdGEtZXZlbnQtcm93LWlkPSIxNSIgICAgIGlkPSJwcm9kdWN0RXZlbnRNYXRyaXgtc2VjdGlvbi0xMCIgZGF0YS1wZXJzaXN0ZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj4gICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93LWNvdW50Ij4xPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtdGl0bGUgY29sLW1kLTEyIGV2ZW50IiBpZD0iZXZlbnROYW1lUEVNIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJldmVudE5hbWVIZWFkZXJQRSI+PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWljLWluZGljYXRvciI+PC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Rmlyc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEwXS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTBdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMjMiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTBdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEwXS5sYXN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTBdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0ucmVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0icmVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEwXS5yZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudERlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTBdLmRlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209ImRlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0uZGVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTBdLnByb2R1Y3RJbnRlcm5hbElkIHZhbHVlPTM0PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTBdLmV2ZW50SW50ZXJuYWxJZCB2YWx1ZT0xNT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEwXS5kZWxldGVkIHZhbHVlPWZhbHNlPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTBdLnByb2R1Y3RJZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0uZXZlbnRJZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCByZWxhdGVkbmVzc0Fzc2VzbWVudCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLXRhYmxlIG0tdC0xMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudF8xMCIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRlZG5lc3MgQXNzZXNzbWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMTBfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8xMF8iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTAiIGRhdGEtdGVtcGxhdGVJZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGVtcGxhdGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYmxlPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgcHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHAtMCBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTb3VyY2UgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTWV0aG9kIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUmVzdWx0IDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYnVsYXI9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8xMF8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgaW5uZXItcmVwZWF0YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICByZWxhdGVkbmVzc1JvdyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8xMF8tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlTb3VyY2UiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00IGluZGljYXRvci10YWJ1bGFyIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBwZVJlc3VsdCAgaW5kaWNhdG9yLXRhYnVsYXIgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eUNhdGVnb3J5IiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEwXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0YWJsZS1yb3ctZGVsIHB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gYnRuLWRlbC1wYW5lbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXByb2R1Y3QtZXZlbnQtbWV0cml4IHB2LXNlY3Rpb24tcmVjb3JkIGV2ZW50UEVUZW1wbGF0ZSByb3ctc3RyaXAgbS0wIHAtbC0xMCBwLXItNSBwLWItMTAgICAiICAgICBkYXRhLWV2ZW50LXJvdy1pZD0iNTEiICAgICBpZD0icHJvZHVjdEV2ZW50TWF0cml4LXNlY3Rpb24tMTEiIGRhdGEtcGVyc2lzdGVkPSJ0cnVlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvdy1jb3VudCI+Mjwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIGNvbC1tZC0xMiBldmVudCIgaWQ9ImV2ZW50TmFtZVBFTSI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXZlbnROYW1lSGVhZGVyUEUiPjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1pbmRpY2F0b3IiPjwvc3Bhbj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZpcnN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMV0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLmZpcnN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLmZpcnN0RG9zZUludGVydmFsLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzExXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTI0IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5MYXN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzExXS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMV0ubGFzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzExXS5sYXN0RG9zZUludGVydmFsLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLnJlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209InJlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMV0ucmVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzExXS5kZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJkZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLmRlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzExXS5wcm9kdWN0SW50ZXJuYWxJZCB2YWx1ZT0zND48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzExXS5ldmVudEludGVybmFsSWQgdmFsdWU9NTE+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMV0uZGVsZXRlZCB2YWx1ZT1mYWxzZT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzExXS5wcm9kdWN0SWQgdmFsdWU9PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLmV2ZW50SWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggcmVsYXRlZG5lc3NBc3Nlc21lbnQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci10YWJsZSBtLXQtMTAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTEiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbGF0ZWRuZXNzIEFzc2Vzc21lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzExXyIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMTFfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzExIiBkYXRhLXRlbXBsYXRlSWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyBwLTAgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU291cmNlIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE1ldGhvZCA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFJlc3VsdCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMTFfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIGlubmVyLXJlcGVhdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAgcmVsYXRlZG5lc3NSb3ciICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTFfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXgiPjE8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzExXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzExXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlNZXRob2RzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCBpbmRpY2F0b3ItdGFidWxhciI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgcGVSZXN1bHQgIGluZGljYXRvci10YWJ1bGFyIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzExXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdi1wcm9kdWN0LWV2ZW50LW1ldHJpeCBwdi1zZWN0aW9uLXJlY29yZCBldmVudFBFVGVtcGxhdGUgcm93LXN0cmlwIG0tMCBwLWwtMTAgcC1yLTUgcC1iLTEwICAgIiAgICAgZGF0YS1ldmVudC1yb3ctaWQ9IjUyIiAgICAgaWQ9InByb2R1Y3RFdmVudE1hdHJpeC1zZWN0aW9uLTEyIiBkYXRhLXBlcnNpc3RlZD0idHJ1ZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyb3ctY291bnQiPjM8L3NwYW4+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC10aXRsZSBjb2wtbWQtMTIgZXZlbnQiIGlkPSJldmVudE5hbWVQRU0iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV2ZW50TmFtZUhlYWRlclBFIj48L3NwYW4+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaWMtaW5kaWNhdG9yIj48L3NwYW4+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GaXJzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTJdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5maXJzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5maXJzdERvc2VJbnRlcnZhbC5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMl0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjEyNSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5pbnRlcm5hbFJvd0lkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TGFzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMl0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTJdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMl0ubGFzdERvc2VJbnRlcnZhbC5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5yZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJyZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTJdLnJlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RGVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMl0uZGVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0iZGVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5kZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMl0ucHJvZHVjdEludGVybmFsSWQgdmFsdWU9MzQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMl0uZXZlbnRJbnRlcm5hbElkIHZhbHVlPTUyPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTJdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMl0ucHJvZHVjdElkIHZhbHVlPT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5ldmVudElkIHZhbHVlPT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IHJlbGF0ZWRuZXNzQXNzZXNtZW50IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5uZXItdGFibGUgbS10LTEwIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50XzEyIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWxhdGVkbmVzcyBBc3Nlc3NtZW50cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8xMl8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzEyXyIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8xMiIgZGF0YS10ZW1wbGF0ZUlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUZW1wbGF0ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgcC0wIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5IHAtMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1yZWxhdGVkbmVzcyBwdi1zZWMtc2VwZXJhdG9yIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1pbm5lci1wcm9kdWN0LXN1YnN0YW5jZSBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFNvdXJjZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBNZXRob2QgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0JyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBSZXN1bHQgPC9sYWJlbD48L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBhZGQtdGFibGUtcm93IGFkZC1zZWN0aW9uIGJ0bi1hZGQtcGFuZWwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFidWxhcj0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cy1zcXVhcmUtbyI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBjbGFzcz0icHYtZHJhZ2dhYmxlLWxpc3QgdWktc29ydGFibGUgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzEyXyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBpbm5lci1yZXBlYXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIHJlbGF0ZWRuZXNzUm93IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzEyXy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4Ij4xPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eVNvdXJjZSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5TWV0aG9kcyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgaW5kaWNhdG9yLXRhYnVsYXIiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHBlUmVzdWx0ICBpbmRpY2F0b3ItdGFidWxhciBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5Q2F0ZWdvcnkiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxMl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTJdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtcHJvZHVjdC1ldmVudC1tZXRyaXggcHYtc2VjdGlvbi1yZWNvcmQgZXZlbnRQRVRlbXBsYXRlIHJvdy1zdHJpcCBtLTAgcC1sLTEwIHAtci01IHAtYi0xMCAgICIgICAgIGRhdGEtZXZlbnQtcm93LWlkPSI1MyIgICAgIGlkPSJwcm9kdWN0RXZlbnRNYXRyaXgtc2VjdGlvbi0xMyIgZGF0YS1wZXJzaXN0ZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj4gICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93LWNvdW50Ij40PC9zcGFuPiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtdGl0bGUgY29sLW1kLTEyIGV2ZW50IiBpZD0iZXZlbnROYW1lUEVNIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJldmVudE5hbWVIZWFkZXJQRSI+PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWljLWluZGljYXRvciI+PC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Rmlyc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEzXS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTNdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMjYiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTNdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEzXS5sYXN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTNdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10ucmVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0icmVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEzXS5yZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudERlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTNdLmRlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209ImRlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10uZGVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTNdLnByb2R1Y3RJbnRlcm5hbElkIHZhbHVlPTM0PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTNdLmV2ZW50SW50ZXJuYWxJZCB2YWx1ZT01Mz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEzXS5kZWxldGVkIHZhbHVlPWZhbHNlPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTNdLnByb2R1Y3RJZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10uZXZlbnRJZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCByZWxhdGVkbmVzc0Fzc2VzbWVudCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLXRhYmxlIG0tdC0xMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudF8xMyIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRlZG5lc3MgQXNzZXNzbWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMTNfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8xM18iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTMiIGRhdGEtdGVtcGxhdGVJZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGVtcGxhdGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYmxlPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgcHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHAtMCBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTb3VyY2UgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTWV0aG9kIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUmVzdWx0IDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYnVsYXI9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8xM18iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgaW5uZXItcmVwZWF0YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICByZWxhdGVkbmVzc1JvdyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8xM18tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTNdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlTb3VyY2UiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTNdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00IGluZGljYXRvci10YWJ1bGFyIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBwZVJlc3VsdCAgaW5kaWNhdG9yLXRhYnVsYXIgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eUNhdGVnb3J5IiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTNdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzEzXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0YWJsZS1yb3ctZGVsIHB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gYnRuLWRlbC1wYW5lbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXByb2R1Y3QtZXZlbnQtbWV0cml4IHB2LXNlY3Rpb24tcmVjb3JkIGV2ZW50UEVUZW1wbGF0ZSByb3ctc3RyaXAgbS0wIHAtbC0xMCBwLXItNSBwLWItMTAgICAiICAgICBkYXRhLWV2ZW50LXJvdy1pZD0iNTQiICAgICBpZD0icHJvZHVjdEV2ZW50TWF0cml4LXNlY3Rpb24tMTQiIGRhdGEtcGVyc2lzdGVkPSJ0cnVlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvdy1jb3VudCI+NTwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIGNvbC1tZC0xMiBldmVudCIgaWQ9ImV2ZW50TmFtZVBFTSI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXZlbnROYW1lSGVhZGVyUEUiPjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1pbmRpY2F0b3IiPjwvc3Bhbj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZpcnN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNF0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLmZpcnN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLmZpcnN0RG9zZUludGVydmFsLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE0XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTI3IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5MYXN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE0XS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNF0ubGFzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE0XS5sYXN0RG9zZUludGVydmFsLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLnJlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209InJlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNF0ucmVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE0XS5kZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJkZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLmRlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE0XS5wcm9kdWN0SW50ZXJuYWxJZCB2YWx1ZT0zND48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE0XS5ldmVudEludGVybmFsSWQgdmFsdWU9NTQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE0XS5wcm9kdWN0SWQgdmFsdWU9PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLmV2ZW50SWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggcmVsYXRlZG5lc3NBc3Nlc21lbnQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci10YWJsZSBtLXQtMTAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTQiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbGF0ZWRuZXNzIEFzc2Vzc21lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzE0XyIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMTRfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzE0IiBkYXRhLXRlbXBsYXRlSWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyBwLTAgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU291cmNlIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE1ldGhvZCA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFJlc3VsdCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMTRfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIGlubmVyLXJlcGVhdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAgcmVsYXRlZG5lc3NSb3ciICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTRfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXgiPjE8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE0XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE0XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlNZXRob2RzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCBpbmRpY2F0b3ItdGFidWxhciI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgcGVSZXN1bHQgIGluZGljYXRvci10YWJ1bGFyIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE0XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtc2VjdGlvbi1yZWNvcmQgcGFuZWwgcHJvZHVjdFBFVGVtcGxhdGUgIiBkYXRhLXByb2R1Y3Qtcm93LWlkPSIzOCIgZGF0YS1wZXJzaXN0ZWQgPSAidHJ1ZSI+ICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIGlubmVyLXJlcGVhdGFibGUiIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kRXZlbnRNYXRyaXhfMyI+ICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIG0tYi0wIGV2ZW50Q29udGFpbmVyIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGlkPSJwcm9kdWN0TmFtZVBFTSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWlubmVyUHJvZEV2ZW50TWF0cml4IiBocmVmPSIjcHZQRU1fMyIgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwcm9kdWN0TmFtZUhlYWRlclBFIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IGNvbGxhcHNlZCIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InB2UEVNXzMiIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBpbm5lci1yZXBlYXRhYmxlIGNvbGxhcHNlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgc3R5bGU9ImhlaWdodDogMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgc2hvcnQtZmllbGQgcC0wIGV2ZW50LWNvbnRhaW5lci1kaXYiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtcHJvZHVjdC1ldmVudC1tZXRyaXggcHYtc2VjdGlvbi1yZWNvcmQgZXZlbnRQRVRlbXBsYXRlIHJvdy1zdHJpcCBtLTAgcC1sLTEwIHAtci01IHAtYi0xMCAgICIgICAgIGRhdGEtZXZlbnQtcm93LWlkPSIxNSIgICAgIGlkPSJwcm9kdWN0RXZlbnRNYXRyaXgtc2VjdGlvbi0xNSIgZGF0YS1wZXJzaXN0ZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj4gICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93LWNvdW50Ij4xPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtdGl0bGUgY29sLW1kLTEyIGV2ZW50IiBpZD0iZXZlbnROYW1lUEVNIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJldmVudE5hbWVIZWFkZXJQRSI+PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWljLWluZGljYXRvciI+PC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Rmlyc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE1XS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTVdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMjgiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTVdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE1XS5sYXN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTVdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0ucmVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0icmVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE1XS5yZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudERlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTVdLmRlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209ImRlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0uZGVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTVdLnByb2R1Y3RJbnRlcm5hbElkIHZhbHVlPTM4PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTVdLmV2ZW50SW50ZXJuYWxJZCB2YWx1ZT0xNT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE1XS5kZWxldGVkIHZhbHVlPWZhbHNlPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTVdLnByb2R1Y3RJZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0uZXZlbnRJZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCByZWxhdGVkbmVzc0Fzc2VzbWVudCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLXRhYmxlIG0tdC0xMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudF8xNSIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRlZG5lc3MgQXNzZXNzbWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMTVfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8xNV8iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTUiIGRhdGEtdGVtcGxhdGVJZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGVtcGxhdGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYmxlPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgcHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHAtMCBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTb3VyY2UgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTWV0aG9kIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUmVzdWx0IDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYnVsYXI9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8xNV8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgaW5uZXItcmVwZWF0YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICByZWxhdGVkbmVzc1JvdyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8xNV8tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTVdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlTb3VyY2UiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTVdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00IGluZGljYXRvci10YWJ1bGFyIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBwZVJlc3VsdCAgaW5kaWNhdG9yLXRhYnVsYXIgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eUNhdGVnb3J5IiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTVdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE1XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0YWJsZS1yb3ctZGVsIHB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gYnRuLWRlbC1wYW5lbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXByb2R1Y3QtZXZlbnQtbWV0cml4IHB2LXNlY3Rpb24tcmVjb3JkIGV2ZW50UEVUZW1wbGF0ZSByb3ctc3RyaXAgbS0wIHAtbC0xMCBwLXItNSBwLWItMTAgICAiICAgICBkYXRhLWV2ZW50LXJvdy1pZD0iNTEiICAgICBpZD0icHJvZHVjdEV2ZW50TWF0cml4LXNlY3Rpb24tMTYiIGRhdGEtcGVyc2lzdGVkPSJ0cnVlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvdy1jb3VudCI+Mjwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIGNvbC1tZC0xMiBldmVudCIgaWQ9ImV2ZW50TmFtZVBFTSI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXZlbnROYW1lSGVhZGVyUEUiPjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1pbmRpY2F0b3IiPjwvc3Bhbj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZpcnN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNl0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLmZpcnN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLmZpcnN0RG9zZUludGVydmFsLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE2XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTI5IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5MYXN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE2XS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNl0ubGFzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE2XS5sYXN0RG9zZUludGVydmFsLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLnJlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209InJlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNl0ucmVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE2XS5kZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJkZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLmRlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE2XS5wcm9kdWN0SW50ZXJuYWxJZCB2YWx1ZT0zOD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE2XS5ldmVudEludGVybmFsSWQgdmFsdWU9NTE+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNl0uZGVsZXRlZCB2YWx1ZT1mYWxzZT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE2XS5wcm9kdWN0SWQgdmFsdWU9PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLmV2ZW50SWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggcmVsYXRlZG5lc3NBc3Nlc21lbnQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci10YWJsZSBtLXQtMTAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTYiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbGF0ZWRuZXNzIEFzc2Vzc21lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzE2XyIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMTZfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzE2IiBkYXRhLXRlbXBsYXRlSWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyBwLTAgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU291cmNlIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE1ldGhvZCA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFJlc3VsdCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMTZfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIGlubmVyLXJlcGVhdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAgcmVsYXRlZG5lc3NSb3ciICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTZfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXgiPjE8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE2XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE2XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlNZXRob2RzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCBpbmRpY2F0b3ItdGFidWxhciI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgcGVSZXN1bHQgIGluZGljYXRvci10YWJ1bGFyIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTZdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE2XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxNl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdi1wcm9kdWN0LWV2ZW50LW1ldHJpeCBwdi1zZWN0aW9uLXJlY29yZCBldmVudFBFVGVtcGxhdGUgcm93LXN0cmlwIG0tMCBwLWwtMTAgcC1yLTUgcC1iLTEwICAgIiAgICAgZGF0YS1ldmVudC1yb3ctaWQ9IjUyIiAgICAgaWQ9InByb2R1Y3RFdmVudE1hdHJpeC1zZWN0aW9uLTE3IiBkYXRhLXBlcnNpc3RlZD0idHJ1ZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyb3ctY291bnQiPjM8L3NwYW4+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC10aXRsZSBjb2wtbWQtMTIgZXZlbnQiIGlkPSJldmVudE5hbWVQRU0iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV2ZW50TmFtZUhlYWRlclBFIj48L3NwYW4+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaWMtaW5kaWNhdG9yIj48L3NwYW4+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GaXJzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTddLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5maXJzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5maXJzdERvc2VJbnRlcnZhbC5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxN10uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjEzMCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5pbnRlcm5hbFJvd0lkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TGFzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxN10ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTddLmxhc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxN10ubGFzdERvc2VJbnRlcnZhbC5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5yZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJyZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTddLnJlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RGVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxN10uZGVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0iZGVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5kZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxN10ucHJvZHVjdEludGVybmFsSWQgdmFsdWU9Mzg+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxN10uZXZlbnRJbnRlcm5hbElkIHZhbHVlPTUyPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTddLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxN10ucHJvZHVjdElkIHZhbHVlPT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5ldmVudElkIHZhbHVlPT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IHJlbGF0ZWRuZXNzQXNzZXNtZW50IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5uZXItdGFibGUgbS10LTEwIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50XzE3IiBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWxhdGVkbmVzcyBBc3Nlc3NtZW50cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8xN18iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzE3XyIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8xNyIgZGF0YS10ZW1wbGF0ZUlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUZW1wbGF0ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgcC0wIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5IHAtMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1yZWxhdGVkbmVzcyBwdi1zZWMtc2VwZXJhdG9yIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1pbm5lci1wcm9kdWN0LXN1YnN0YW5jZSBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFNvdXJjZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBNZXRob2QgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0JyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBSZXN1bHQgPC9sYWJlbD48L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBhZGQtdGFibGUtcm93IGFkZC1zZWN0aW9uIGJ0bi1hZGQtcGFuZWwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFidWxhcj0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cy1zcXVhcmUtbyI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBjbGFzcz0icHYtZHJhZ2dhYmxlLWxpc3QgdWktc29ydGFibGUgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzE3XyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBpbm5lci1yZXBlYXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIHJlbGF0ZWRuZXNzUm93IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzE3Xy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4Ij4xPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxN10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eVNvdXJjZSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxN10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5TWV0aG9kcyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgaW5kaWNhdG9yLXRhYnVsYXIiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHBlUmVzdWx0ICBpbmRpY2F0b3ItdGFidWxhciBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE3XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5Q2F0ZWdvcnkiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxN10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTddLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtcHJvZHVjdC1ldmVudC1tZXRyaXggcHYtc2VjdGlvbi1yZWNvcmQgZXZlbnRQRVRlbXBsYXRlIHJvdy1zdHJpcCBtLTAgcC1sLTEwIHAtci01IHAtYi0xMCAgICIgICAgIGRhdGEtZXZlbnQtcm93LWlkPSI1MyIgICAgIGlkPSJwcm9kdWN0RXZlbnRNYXRyaXgtc2VjdGlvbi0xOCIgZGF0YS1wZXJzaXN0ZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj4gICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93LWNvdW50Ij40PC9zcGFuPiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtdGl0bGUgY29sLW1kLTEyIGV2ZW50IiBpZD0iZXZlbnROYW1lUEVNIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJldmVudE5hbWVIZWFkZXJQRSI+PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWljLWluZGljYXRvciI+PC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Rmlyc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE4XS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMThdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMzEiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMThdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE4XS5sYXN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMThdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0ucmVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0icmVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE4XS5yZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudERlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMThdLmRlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209ImRlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0uZGVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMThdLnByb2R1Y3RJbnRlcm5hbElkIHZhbHVlPTM4PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMThdLmV2ZW50SW50ZXJuYWxJZCB2YWx1ZT01Mz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE4XS5kZWxldGVkIHZhbHVlPWZhbHNlPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMThdLnByb2R1Y3RJZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0uZXZlbnRJZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCByZWxhdGVkbmVzc0Fzc2VzbWVudCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLXRhYmxlIG0tdC0xMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudF8xOCIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRlZG5lc3MgQXNzZXNzbWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMThfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8xOF8iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTgiIGRhdGEtdGVtcGxhdGVJZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGVtcGxhdGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYmxlPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgcHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHAtMCBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTb3VyY2UgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTWV0aG9kIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUmVzdWx0IDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYnVsYXI9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8xOF8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgaW5uZXItcmVwZWF0YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICByZWxhdGVkbmVzc1JvdyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8xOF8tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMThdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlTb3VyY2UiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMThdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00IGluZGljYXRvci10YWJ1bGFyIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBwZVJlc3VsdCAgaW5kaWNhdG9yLXRhYnVsYXIgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eUNhdGVnb3J5IiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMThdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE4XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0YWJsZS1yb3ctZGVsIHB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gYnRuLWRlbC1wYW5lbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXByb2R1Y3QtZXZlbnQtbWV0cml4IHB2LXNlY3Rpb24tcmVjb3JkIGV2ZW50UEVUZW1wbGF0ZSByb3ctc3RyaXAgbS0wIHAtbC0xMCBwLXItNSBwLWItMTAgICAiICAgICBkYXRhLWV2ZW50LXJvdy1pZD0iNTQiICAgICBpZD0icHJvZHVjdEV2ZW50TWF0cml4LXNlY3Rpb24tMTkiIGRhdGEtcGVyc2lzdGVkPSJ0cnVlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvdy1jb3VudCI+NTwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIGNvbC1tZC0xMiBldmVudCIgaWQ9ImV2ZW50TmFtZVBFTSI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXZlbnROYW1lSGVhZGVyUEUiPjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1pbmRpY2F0b3IiPjwvc3Bhbj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZpcnN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOV0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLmZpcnN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLmZpcnN0RG9zZUludGVydmFsLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE5XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTMyIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5MYXN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE5XS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOV0ubGFzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE5XS5sYXN0RG9zZUludGVydmFsLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLnJlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209InJlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOV0ucmVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE5XS5kZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJkZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLmRlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE5XS5wcm9kdWN0SW50ZXJuYWxJZCB2YWx1ZT0zOD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE5XS5ldmVudEludGVybmFsSWQgdmFsdWU9NTQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOV0uZGVsZXRlZCB2YWx1ZT1mYWxzZT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE5XS5wcm9kdWN0SWQgdmFsdWU9PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLmV2ZW50SWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggcmVsYXRlZG5lc3NBc3Nlc21lbnQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci10YWJsZSBtLXQtMTAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTkiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbGF0ZWRuZXNzIEFzc2Vzc21lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzE5XyIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMTlfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzE5IiBkYXRhLXRlbXBsYXRlSWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyBwLTAgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU291cmNlIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE1ldGhvZCA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFJlc3VsdCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMTlfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIGlubmVyLXJlcGVhdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAgcmVsYXRlZG5lc3NSb3ciICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMTlfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXgiPjE8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE5XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE5XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlNZXRob2RzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCBpbmRpY2F0b3ItdGFidWxhciI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgcGVSZXN1bHQgIGluZGljYXRvci10YWJ1bGFyIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMTldLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzE5XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsxOV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtc2VjdGlvbi1yZWNvcmQgcGFuZWwgcHJvZHVjdFBFVGVtcGxhdGUgIiBkYXRhLXByb2R1Y3Qtcm93LWlkPSI0MiIgZGF0YS1wZXJzaXN0ZWQgPSAidHJ1ZSI+ICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIGlubmVyLXJlcGVhdGFibGUiIGlkPSJhY2NvcmRpb24taW5uZXJQcm9kRXZlbnRNYXRyaXhfNCI+ICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIG0tYi0wIGV2ZW50Q29udGFpbmVyIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGlkPSJwcm9kdWN0TmFtZVBFTSIgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWlubmVyUHJvZEV2ZW50TWF0cml4IiBocmVmPSIjcHZQRU1fNCIgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwcm9kdWN0TmFtZUhlYWRlclBFIGlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IGNvbGxhcHNlZCIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InB2UEVNXzQiIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBpbm5lci1yZXBlYXRhYmxlIGNvbGxhcHNlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgc3R5bGU9ImhlaWdodDogMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgc2hvcnQtZmllbGQgcC0wIGV2ZW50LWNvbnRhaW5lci1kaXYiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtcHJvZHVjdC1ldmVudC1tZXRyaXggcHYtc2VjdGlvbi1yZWNvcmQgZXZlbnRQRVRlbXBsYXRlIHJvdy1zdHJpcCBtLTAgcC1sLTEwIHAtci01IHAtYi0xMCAgICIgICAgIGRhdGEtZXZlbnQtcm93LWlkPSIxNSIgICAgIGlkPSJwcm9kdWN0RXZlbnRNYXRyaXgtc2VjdGlvbi0yMCIgZGF0YS1wZXJzaXN0ZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj4gICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93LWNvdW50Ij4xPC9zcGFuPiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtdGl0bGUgY29sLW1kLTEyIGV2ZW50IiBpZD0iZXZlbnROYW1lUEVNIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJldmVudE5hbWVIZWFkZXJQRSI+PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWljLWluZGljYXRvciI+PC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Rmlyc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIwXS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjBdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMzMiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjBdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIwXS5sYXN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjBdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0ucmVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0icmVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIwXS5yZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudERlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjBdLmRlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209ImRlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0uZGVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjBdLnByb2R1Y3RJbnRlcm5hbElkIHZhbHVlPTQyPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjBdLmV2ZW50SW50ZXJuYWxJZCB2YWx1ZT0xNT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIwXS5kZWxldGVkIHZhbHVlPWZhbHNlPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjBdLnByb2R1Y3RJZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0uZXZlbnRJZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCByZWxhdGVkbmVzc0Fzc2VzbWVudCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLXRhYmxlIG0tdC0xMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudF8yMCIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRlZG5lc3MgQXNzZXNzbWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMjBfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8yMF8iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMjAiIGRhdGEtdGVtcGxhdGVJZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGVtcGxhdGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYmxlPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgcHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHAtMCBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTb3VyY2UgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTWV0aG9kIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUmVzdWx0IDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYnVsYXI9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8yMF8iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgaW5uZXItcmVwZWF0YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICByZWxhdGVkbmVzc1JvdyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8yMF8tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlTb3VyY2UiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00IGluZGljYXRvci10YWJ1bGFyIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBwZVJlc3VsdCAgaW5kaWNhdG9yLXRhYnVsYXIgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eUNhdGVnb3J5IiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjBdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIwXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0YWJsZS1yb3ctZGVsIHB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gYnRuLWRlbC1wYW5lbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXByb2R1Y3QtZXZlbnQtbWV0cml4IHB2LXNlY3Rpb24tcmVjb3JkIGV2ZW50UEVUZW1wbGF0ZSByb3ctc3RyaXAgbS0wIHAtbC0xMCBwLXItNSBwLWItMTAgICAiICAgICBkYXRhLWV2ZW50LXJvdy1pZD0iNTEiICAgICBpZD0icHJvZHVjdEV2ZW50TWF0cml4LXNlY3Rpb24tMjEiIGRhdGEtcGVyc2lzdGVkPSJ0cnVlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvdy1jb3VudCI+Mjwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIGNvbC1tZC0xMiBldmVudCIgaWQ9ImV2ZW50TmFtZVBFTSI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXZlbnROYW1lSGVhZGVyUEUiPjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1pbmRpY2F0b3IiPjwvc3Bhbj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZpcnN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMV0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLmZpcnN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLmZpcnN0RG9zZUludGVydmFsLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIxXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTM0IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5MYXN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIxXS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMV0ubGFzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIxXS5sYXN0RG9zZUludGVydmFsLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLnJlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209InJlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMV0ucmVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIxXS5kZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJkZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLmRlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIxXS5wcm9kdWN0SW50ZXJuYWxJZCB2YWx1ZT00Mj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIxXS5ldmVudEludGVybmFsSWQgdmFsdWU9NTE+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMV0uZGVsZXRlZCB2YWx1ZT1mYWxzZT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIxXS5wcm9kdWN0SWQgdmFsdWU9PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLmV2ZW50SWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggcmVsYXRlZG5lc3NBc3Nlc21lbnQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci10YWJsZSBtLXQtMTAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMjEiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbGF0ZWRuZXNzIEFzc2Vzc21lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzIxXyIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMjFfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzIxIiBkYXRhLXRlbXBsYXRlSWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyBwLTAgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU291cmNlIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE1ldGhvZCA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFJlc3VsdCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMjFfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIGlubmVyLXJlcGVhdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAgcmVsYXRlZG5lc3NSb3ciICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMjFfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXgiPjE8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIxXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIxXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlNZXRob2RzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCBpbmRpY2F0b3ItdGFidWxhciI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgcGVSZXN1bHQgIGluZGljYXRvci10YWJ1bGFyIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjFdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIxXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMV0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdi1wcm9kdWN0LWV2ZW50LW1ldHJpeCBwdi1zZWN0aW9uLXJlY29yZCBldmVudFBFVGVtcGxhdGUgcm93LXN0cmlwIG0tMCBwLWwtMTAgcC1yLTUgcC1iLTEwICAgIiAgICAgZGF0YS1ldmVudC1yb3ctaWQ9IjUyIiAgICAgaWQ9InByb2R1Y3RFdmVudE1hdHJpeC1zZWN0aW9uLTIyIiBkYXRhLXBlcnNpc3RlZD0idHJ1ZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93LW51bSBudW0tYmciPiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyb3ctY291bnQiPjM8L3NwYW4+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgaW5uZXItdGFibGUiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC10aXRsZSBjb2wtbWQtMTIgZXZlbnQiIGlkPSJldmVudE5hbWVQRU0iPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV2ZW50TmFtZUhlYWRlclBFIj48L3NwYW4+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaWMtaW5kaWNhdG9yIj48L3NwYW4+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5GaXJzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjJdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5maXJzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5maXJzdERvc2VJbnRlcnZhbC5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMl0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjEzNSIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5pbnRlcm5hbFJvd0lkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+TGFzdCBEb3NlIEludGVydmFsPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMl0ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjJdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMl0ubGFzdERvc2VJbnRlcnZhbC5pZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5SZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5yZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJyZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjJdLnJlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+RGVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMl0uZGVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0iZGVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5kZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMl0ucHJvZHVjdEludGVybmFsSWQgdmFsdWU9NDI+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMl0uZXZlbnRJbnRlcm5hbElkIHZhbHVlPTUyPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjJdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMl0ucHJvZHVjdElkIHZhbHVlPT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5ldmVudElkIHZhbHVlPT4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IHJlbGF0ZWRuZXNzQXNzZXNtZW50IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5uZXItdGFibGUgbS10LTEwIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtZ3JvdXAgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBzZWN0aW9uLWhlYWRlciBpbm5lciI+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0icGFuZWwtdGl0bGUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgc2VjLWRpc3BsYXktdHh0IiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50XzIyIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWxhdGVkbmVzcyBBc3Nlc3NtZW50cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8yMl8iIHRpdGxlPSJNb3ZlIFJlY29yZCBVcCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctdXAgaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzIyXyIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgIDwvc3Bhbj4gICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8yMiIgZGF0YS10ZW1wbGF0ZUlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUZW1wbGF0ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBwdi1tYWluIHBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGluIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgcC0wIGlubmVyLWFjY29yZGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ib2R5IHAtMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1yZWxhdGVkbmVzcyBwdi1zZWMtc2VwZXJhdG9yIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdi1pbm5lci1wcm9kdWN0LXN1YnN0YW5jZSBwdi1zZWN0aW9uIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFNvdXJjZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBNZXRob2QgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0JyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBSZXN1bHQgPC9sYWJlbD48L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHVsbC1yaWdodCBhZGQtdGFibGUtcm93IGFkZC1zZWN0aW9uIGJ0bi1hZGQtcGFuZWwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFidWxhcj0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcGx1cy1zcXVhcmUtbyI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBjbGFzcz0icHYtZHJhZ2dhYmxlLWxpc3QgdWktc29ydGFibGUgaW5uZXItcmVwZWF0YWJsZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzIyXyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBpbm5lci1yZXBlYXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIHJlbGF0ZWRuZXNzUm93IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzIyXy1zZWN0aW9uLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4Ij4xPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eVNvdXJjZSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5TWV0aG9kcyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLm1ldGhvZC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgaW5kaWNhdG9yLXRhYnVsYXIiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHBlUmVzdWx0ICBpbmRpY2F0b3ItdGFidWxhciBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIyXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5Q2F0ZWdvcnkiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyMl0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjJdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uZGVsZXRlZCB2YWx1ZT0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtcHJvZHVjdC1ldmVudC1tZXRyaXggcHYtc2VjdGlvbi1yZWNvcmQgZXZlbnRQRVRlbXBsYXRlIHJvdy1zdHJpcCBtLTAgcC1sLTEwIHAtci01IHAtYi0xMCAgICIgICAgIGRhdGEtZXZlbnQtcm93LWlkPSI1MyIgICAgIGlkPSJwcm9kdWN0RXZlbnRNYXRyaXgtc2VjdGlvbi0yMyIgZGF0YS1wZXJzaXN0ZWQ9InRydWUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdy1udW0gbnVtLWJnIj4gICAgICAgICAgICA8c3BhbiBjbGFzcz0icm93LWNvdW50Ij40PC9zcGFuPiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGlubmVyLXRhYmxlIj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtdGl0bGUgY29sLW1kLTEyIGV2ZW50IiBpZD0iZXZlbnROYW1lUEVNIj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJldmVudE5hbWVIZWFkZXJQRSI+PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWljLWluZGljYXRvciI+PC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwgICAiID4gICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Rmlyc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIzXS5maXJzdERvc2VJbnRlcnZhbC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNSIgZGF0YS1maWVsZC1pZD0icHJvZHVjdEV2ZW50Rmlyc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10uZmlyc3REb3NlSW50ZXJ2YWwuaWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjNdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMzYiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10uaW50ZXJuYWxSb3dJZCIgLz4gICAgPC9kaXY+IDwvZGl2PiAgICAgICAgICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGNsYXNzPSJjb2wtbWQtNiB0ZW1wbGF0ZS1jb250cm9sICBwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkxhc3QgRG9zZSBJbnRlcnZhbDwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgY29tYmluZWRDb21wbGV4RmllbGQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLWFsbG93ZWRGaXJzdFBhcnQ9IjUiIGRhdGEtdW5pdExpc3Q9ImR1cmF0aW9uLWNvZGUtbGlzdCIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjNdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10ubGFzdERvc2VJbnRlcnZhbC52YWx1ZSIgLz4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIzXS5sYXN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjNdLmxhc3REb3NlSW50ZXJ2YWwuaWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgPGRpdiBpZD0icHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVjaGFsbGVuZ2UgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC02ICAiPiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+UmVjaGFsbGVuZ2U8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10ucmVjaGFsbGVuZ2UuaWQiIGRhdGEtZnJvbT0icmVjaGFsbGVuZ2VzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIzXS5yZWNoYWxsZW5nZS5pZCIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudERlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudERlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkRlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjNdLmRlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209ImRlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10uZGVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjNdLnByb2R1Y3RJbnRlcm5hbElkIHZhbHVlPTQyPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjNdLmV2ZW50SW50ZXJuYWxJZCB2YWx1ZT01Mz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIzXS5kZWxldGVkIHZhbHVlPWZhbHNlPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjNdLnByb2R1Y3RJZCB2YWx1ZT0+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10uZXZlbnRJZCB2YWx1ZT0+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCByZWxhdGVkbmVzc0Fzc2VzbWVudCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLXRhYmxlIG0tdC0xMCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tYi0wIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgaW5uZXIiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHNlYy1kaXNwbGF5LXR4dCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudF8yMyIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRlZG5lc3MgQXNzZXNzbWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICAgICAgPHNwYW4gY2xhc3M9InB2LXJlb3JkZXItc2VjIGhpZGUiPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMjNfIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI3JlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8yM18iIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LWRvd24gaWMteHMgaW5uZXItcmVwZWF0YWJsZSI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMjMiIGRhdGEtdGVtcGxhdGVJZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50VGVtcGxhdGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYmxlPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlubmVyLXJlcGVhdGFibGUgcHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHAtMCBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBwLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtcmVsYXRlZG5lc3MgcHYtc2VjLXNlcGVyYXRvciI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHYtaW5uZXItcHJvZHVjdC1zdWJzdGFuY2UgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCBwdi1pbm5lci10YWJsZSBtLWItMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1zbiI+IzwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlJyBjbGFzcz0nY29sLW1kLTQgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBTb3VyY2UgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLXByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gTWV0aG9kIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1Jlc3VsdCcgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUmVzdWx0IDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLWxhIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InB1bGwtcmlnaHQgYWRkLXRhYmxlLXJvdyBhZGQtc2VjdGlvbiBidG4tYWRkLXBhbmVsIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRhYnVsYXI9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBsdXMtc3F1YXJlLW8iPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIGlubmVyLXJlcGVhdGFibGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRhYmxlU2VjdGlvbl8yM18iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgaW5uZXItcmVwZWF0YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICByZWxhdGVkbmVzc1JvdyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudF8yM18tc2VjdGlvbi0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCI+MTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzU291cmNlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjNdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlTb3VyY2UiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5zb3VyY2UuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjNdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3N0TWV0aG9kIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eU1ldGhvZHMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5tZXRob2QuaWRPclZhbHVlIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjx0ZCBpZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiIGNsYXNzPSIgcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00IGluZGljYXRvci10YWJ1bGFyIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBwZVJlc3VsdCAgaW5kaWNhdG9yLXRhYnVsYXIgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyM10ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5yZXN1bHQuaWRPclZhbHVlIiBkYXRhLWZyb209ImNhdXNhbGl0eUNhdGVnb3J5IiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjNdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzIzXS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmRlbGV0ZWQgdmFsdWU9PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ0YWJsZS1yb3ctZGVsIHB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gYnRuLWRlbC1wYW5lbCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LXByb2R1Y3QtZXZlbnQtbWV0cml4IHB2LXNlY3Rpb24tcmVjb3JkIGV2ZW50UEVUZW1wbGF0ZSByb3ctc3RyaXAgbS0wIHAtbC0xMCBwLXItNSBwLWItMTAgICAiICAgICBkYXRhLWV2ZW50LXJvdy1pZD0iNTQiICAgICBpZD0icHJvZHVjdEV2ZW50TWF0cml4LXNlY3Rpb24tMjQiIGRhdGEtcGVyc2lzdGVkPSJ0cnVlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ctbnVtIG51bS1iZyI+ICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJvdy1jb3VudCI+NTwvc3Bhbj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IHJ4LWNvbC10YWJsZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBpbm5lci10YWJsZSI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIGNvbC1tZC0xMiBldmVudCIgaWQ9ImV2ZW50TmFtZVBFTSI+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXZlbnROYW1lSGVhZGVyUEUiPjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1pbmRpY2F0b3IiPjwvc3Bhbj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRGaXJzdERvc2VJbnRlcnZhbCIgY2xhc3M9ImNvbC1tZC02IHRlbXBsYXRlLWNvbnRyb2wgIHByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsICAgIiA+ICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPkZpcnN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBjb21iaW5lZENvbXBsZXhGaWVsZCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtYWxsb3dlZEZpcnN0UGFydD0iNSIgZGF0YS11bml0TGlzdD0iZHVyYXRpb24tY29kZS1saXN0IiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyNF0uZmlyc3REb3NlSW50ZXJ2YWwudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUiIGRhdGEtZmllbGQtaWQ9InByb2R1Y3RFdmVudEZpcnN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLmZpcnN0RG9zZUludGVydmFsLnZhbHVlIiAvPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLmZpcnN0RG9zZUludGVydmFsLmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLmZpcnN0RG9zZUludGVydmFsLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzI0XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iMTM3IiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLmludGVybmFsUm93SWQiIC8+ICAgIDwvZGl2PiA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBjbGFzcz0iY29sLW1kLTYgdGVtcGxhdGUtY29udHJvbCAgcHJvZHVjdEV2ZW50TGFzdERvc2VJbnRlcnZhbCAgICIgPiAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5MYXN0IERvc2UgSW50ZXJ2YWw8L2xhYmVsPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudExhc3REb3NlSW50ZXJ2YWwiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGNvbWJpbmVkQ29tcGxleEZpZWxkICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1hbGxvd2VkRmlyc3RQYXJ0PSI1IiBkYXRhLXVuaXRMaXN0PSJkdXJhdGlvbi1jb2RlLWxpc3QiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzI0XS5sYXN0RG9zZUludGVydmFsLnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1IiBkYXRhLWZpZWxkLWlkPSJwcm9kdWN0RXZlbnRMYXN0RG9zZUludGVydmFsIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLmxhc3REb3NlSW50ZXJ2YWwudmFsdWUiIC8+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyNF0ubGFzdERvc2VJbnRlcnZhbC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzI0XS5sYXN0RG9zZUludGVydmFsLmlkIiAvPiAgICA8L2Rpdj4gPC9kaXY+ICAgIDxkaXYgaWQ9InByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlY2hhbGxlbmdlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNiAgIj4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlY2hhbGxlbmdlPC9sYWJlbD4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJwcm9kdWN0RXZlbnRSZWNoYWxsZW5nZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLnJlY2hhbGxlbmdlLmlkIiBkYXRhLWZyb209InJlY2hhbGxlbmdlcyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyNF0ucmVjaGFsbGVuZ2UuaWQiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvZGl2PiAgICA8ZGl2IGlkPSJwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnREZWNoYWxsZW5nZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTYgICI+ICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5EZWNoYWxsZW5nZTwvbGFiZWw+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50RGVjaGFsbGVuZ2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzI0XS5kZWNoYWxsZW5nZS5pZCIgZGF0YS1mcm9tPSJkZWNoYWxsZW5nZXMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLmRlY2hhbGxlbmdlLmlkIiA+DTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L2Rpdj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzI0XS5wcm9kdWN0SW50ZXJuYWxJZCB2YWx1ZT00Mj48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzI0XS5ldmVudEludGVybmFsSWQgdmFsdWU9NTQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyNF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzI0XS5wcm9kdWN0SWQgdmFsdWU9PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLmV2ZW50SWQgdmFsdWU9PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggcmVsYXRlZG5lc3NBc3Nlc21lbnQgcngtY29sLXRhYmxlIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lci10YWJsZSBtLXQtMTAiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1ncm91cCBtLWItMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaW5uZXItcmVwZWF0YWJsZSBzZWMtZGlzcGxheS10eHQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMjQiIGFyaWEtZXhwYW5kZWQ9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbGF0ZWRuZXNzIEFzc2Vzc21lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjcmVsYXRlZG5lc3NBc3Nlc3NtZW50VGFibGVTZWN0aW9uXzI0XyIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyBpbm5lci1yZXBlYXRhYmxlIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYXJyb3ctYmFjayAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICA8L2E+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iTW92ZSBSZWNvcmQgRG93biIgZGF0YS10YXJnZXQ9IiNyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMjRfIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzIGlubmVyLXJlcGVhdGFibGUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icmVsYXRlZG5lc3NBc3Nlc3NtZW50XzI0IiBkYXRhLXRlbXBsYXRlSWQ9InJlbGF0ZWRuZXNzQXNzZXNzbWVudFRlbXBsYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJsZT0idHJ1ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbm5lci1yZXBlYXRhYmxlIHB2LW1haW4gcGFuZWwtY29sbGFwc2UgY29sbGFwc2UgaW4gcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyBwLTAgaW5uZXItYWNjb3JkaW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZScgY2xhc3M9J2NvbC1tZC00ICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU291cmNlIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1wcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IE1ldGhvZCA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItcHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NSZXN1bHQnIGNsYXNzPSdjb2wtbWQtNCAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IFJlc3VsdCA8L2xhYmVsPjwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InB2LWNvbC1sYSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10YWJ1bGFyPSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJwdi1kcmFnZ2FibGUtbGlzdCB1aS1zb3J0YWJsZSBpbm5lci1yZXBlYXRhYmxlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRUYWJsZVNlY3Rpb25fMjRfIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIGlubmVyLXJlcGVhdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAgcmVsYXRlZG5lc3NSb3ciICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJyZWxhdGVkbmVzc0Fzc2Vzc21lbnRfMjRfLXNlY3Rpb24tMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXgiPjE8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc1NvdXJjZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTQgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0icHJvZHVjdEV2ZW50UmVsYXRlZE5lc3NTb3VyY2UiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzI0XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnNvdXJjZS5pZE9yVmFsdWUiIGRhdGEtZnJvbT0iY2F1c2FsaXR5U291cmNlIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uc291cmNlLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzI0XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCIgY2xhc3M9IiBwcm9kdWN0RXZlbnRSZWxhdGVkTmVzc3RNZXRob2QgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC00ICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzdE1ldGhvZCI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlNZXRob2RzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ubWV0aG9kLmlkT3JWYWx1ZSIgPg08b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48dGQgaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IiBjbGFzcz0iIHByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNCBpbmRpY2F0b3ItdGFidWxhciI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InByb2R1Y3RFdmVudFJlbGF0ZWROZXNzUmVzdWx0Ij4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgcGVSZXN1bHQgIGluZGljYXRvci10YWJ1bGFyIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5wcm9kdWN0RXZlbnRNYXRyaXhbMjRdLnJlbGF0ZWRuZXNzQXNzZXNzbWVudHNbMF0ucmVzdWx0LmlkT3JWYWx1ZSIgZGF0YS1mcm9tPSJjYXVzYWxpdHlDYXRlZ29yeSIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEucHJvZHVjdEV2ZW50TWF0cml4WzI0XS5yZWxhdGVkbmVzc0Fzc2Vzc21lbnRzWzBdLnJlc3VsdC5pZE9yVmFsdWUiID4NPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnByb2R1Y3RFdmVudE1hdHJpeFsyNF0ucmVsYXRlZG5lc3NBc3Nlc3NtZW50c1swXS5kZWxldGVkIHZhbHVlPT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFN1bW1hcnkgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgc2VjdGlvbi1oZWFkZXIgcnhtYWluLWNvbnRhaW5lciByeG1haW4tY29udGFpbmVyLXRvcCIgICAgICAgICBpZD0idi1zdW1tYXJ5Ij4gICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIHBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgIDxoNCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPiAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWNhc2UiICAgICAgICAgICAgICAgICAgIGhyZWY9IiNzdW1tYXJ5IiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgY2xhc3M9ImNvbGxhcHNlZCBzZWMtZGlzcGxheS10eHQgc2VjdGlvblRpdGxlIj4gICAgICAgICAgICAgICAgICAgIFN1bW1hcnkgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGlkPSJzdW1tYXJ5IiAgICAgICAgICAgICBjbGFzcz0icGFuZWwtY29sbGFwc2UgY29sbGFwc2UgcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHJ4bWFpbi1jb250YWluZXItc2hvdyIgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdi1zdW1tYXJ5IHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgZm9ybS1wdiI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzdW1tYXJ5Q29tbWVudCIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgICAgIHN1bW1hcnlDb21tZW50IGNvbC1tZC0xMic+ICAgIDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+Q2FzZSBEZXNjcmlwdGlvbiAoTmFycmF0aXZlKTwvbGFiZWw+ICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJzdW1tYXJ5Q29tbWVudCI+ICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgIHN1bW1hcnlDb21tZW50cyAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnN1bW1hcnkuY2FzZURlc2NyaXB0aW9uIiBtYXhsZW5ndGg9IjEwMDAwMCIgcm93cz0iNSIgY29scz0iMTAwIiBpZD0ic2FmZXR5RGF0YS5zdW1tYXJ5LmNhc2VEZXNjcmlwdGlvbiIgPjExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExPC90ZXh0YXJlYT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1heGxlbmd0aC1mZWVkYmFjayI+PC9zcGFuPiAgICAgICAgICAgIDwvZGl2PjwvZGl2PjxkaXYgaWQ9InJlcG9ydGVyQ29tbWVudCIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgICAgIHJlcG9ydGVyQ29tbWVudCBjb2wtbWQtMTInPiAgICA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPlJlcG9ydGVyIENvbW1lbnRzPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InJlcG9ydGVyQ29tbWVudCI+ICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgIHN1bW1hcnlDb21tZW50cyAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnN1bW1hcnkucmVwb3J0ZXJDb21tZW50cyIgbWF4bGVuZ3RoPSIyMDAwMCIgcm93cz0iMyIgY29scz0iMTAwIiBpZD0ic2FmZXR5RGF0YS5zdW1tYXJ5LnJlcG9ydGVyQ29tbWVudHMiID48L3RleHRhcmVhPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+PC9kaXY+PGRpdiBpZD0ic2VuZGVyQ29tbWVudCIgY2xhc3M9J3RlbXBsYXRlLWNvbnRyb2wgICAgIHNlbmRlckNvbW1lbnQgY29sLW1kLTEyJz4gICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5TZW5kZXIgQ29tbWVudHM8L2xhYmVsPiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ic2VuZGVyQ29tbWVudCI+ICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgIHN1bW1hcnlDb21tZW50cyAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnN1bW1hcnkuc2VuZGVyQ29tbWVudHMiIG1heGxlbmd0aD0iMjAwMDAiIHJvd3M9IjMiIGNvbHM9IjEwMCIgaWQ9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJDb21tZW50cyIgPjwvdGV4dGFyZWE+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4gICAgICAgICAgICA8L2Rpdj48L2Rpdj48ZGl2IGlkPSJhZGRpdGlvbmFsTm90ZXMiIGNsYXNzPSd0ZW1wbGF0ZS1jb250cm9sICAgICBhZGRpdGlvbmFsTm90ZXMgY29sLW1kLTEyJz4gICAgPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz5BZGRpdGlvbmFsIE5vdGVzPC9sYWJlbD4gICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImFkZGl0aW9uYWxOb3RlcyI+ICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEgIEFkZGl0aW9uYWwgTm90ZXMgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS5zdW1tYXJ5LmN1c3RvbVByb3BlcnR5LmFkZGl0aW9uYWxOb3RlcyIgbWF4bGVuZ3RoPSIyMDAwMCIgcm93cz0iNSIgY29scz0iMTAwIiBpZD0ic2FmZXR5RGF0YS5zdW1tYXJ5LmN1c3RvbVByb3BlcnR5LmFkZGl0aW9uYWxOb3RlcyIgPjwvdGV4dGFyZWE+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4gICAgICAgICAgICA8L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCByeC1jb2wtdGFibGUiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLXRhYmxlIHJvdyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIG0tdC0xMCBtLWItNSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFN1YnN0YW5jZXMgLS0+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIGlubmVyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJwYW5lbC10aXRsZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1pbm5lclN1bW1hcnkiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjaW5uZXJTdW1tYXJ5RGlhZ25vc2lzIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InNlYy1kaXNwbGF5LXR4dCIgYXJpYS1leHBhbmRlZD0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VuZGVyJ3MgRGlhZ25vc2lzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1yZW9yZGVyLXNlYyBoaWRlIj4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGRhdGEtdGFyZ2V0PSIjc2VuZGVyRGlhZ25vc2lzVGFibGVTZWN0aW9uIiB0aXRsZT0iTW92ZSBSZWNvcmQgVXAiIGRhdGEtYW5jaG9yZGl2PSIiIGNsYXNzPSJidG4tcm93LXVwIGljLXhzICI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9Ik1vdmUgUmVjb3JkIERvd24iIGRhdGEtdGFyZ2V0PSIjc2VuZGVyRGlhZ25vc2lzVGFibGVTZWN0aW9uIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy1kb3duIGljLXhzICI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFycm93LWJhY2sgIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgPC9hPiAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJpbm5lclN1bW1hcnlEaWFnbm9zaXMiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHYtbWFpbiBwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBpbiByeG1haW4tY29udGFpbmVyLWNvbnRlbnQgcnhtYWluLWNvbnRhaW5lci1zaG93IHAtMCBpbm5lci1hY2NvcmRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJ0cnVlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZW1wbGF0ZUlkPSJpbm5lclN1bW1hcnlEaWFnbm9zaXNUZW1wbGF0ZSIgZGF0YS10YWJsZT0idHJ1ZSI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkgcC0wIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LXJlbGF0ZWRuZXNzIHB2LXNlYy1zZXBlcmF0b3IiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWlubmVyLXByb2R1Y3Qtc3Vic3RhbmNlIHB2LXNlY3Rpb24iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgcHYtaW5uZXItdGFibGUgbS1iLTAiPiAgICA8dGhlYWQ+ICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtc24iPiM8L3RoPiAgICAgICAgPHRoIGlkPSdoZWFkZXItc2VuZGVyRGlhZ25vc2lzJyBjbGFzcz0nY29sLW1kLTEyICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gU2VuZGVyJ3MgRGlhZ25vc2lzIDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPjxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICBkYXRhLXRhYnVsYXI9InRydWUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+PC9hPjwvdGg+ICAgICAgICA8L3RoZWFkPiAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIiBpZD0ic2VuZGVyRGlhZ25vc2lzVGFibGVTZWN0aW9uIj4gICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgaWQ9ImlubmVyU3VtbWFyeURpYWdub3Npcy1zZWN0aW9uLTAiPiAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4Ij48L3RkPiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wtbWQtMTIgIHRlbXBsYXRlLWNvbnRyb2wgc2VuZGVyRGlhZ25vc2lzIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0ic2VuZGVyRGlhZ25vc2lzIj4gICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWdyb3VwIGludGVybmFsIGlubmVyLWFkZG9uIHJpZ2h0LWFkZG9uJyBkYXRhLWlkPSJzZW5kZXJEaWFnbm9zaXMiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIHN1bW1hcnlDb21tZW50cyAgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnN1bW1hcnkuc2VuZGVyRGlhZ25vc2lzWzBdLnJlYWN0aW9uQ29kZWQiIG1heGxlbmd0aD0iMjUwIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1maWVsZElkPSJzZW5kZXJEaWFnbm9zaXMiIGlkPSJzYWZldHlEYXRhLnN1bW1hcnkuc2VuZGVyRGlhZ25vc2lzWzBdLnJlYWN0aW9uQ29kZWQiIC8+ICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJEaWFnbm9zaXNbMF0ubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJEaWFnbm9zaXNbMF0ubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnN1bW1hcnkuc2VuZGVyRGlhZ25vc2lzWzBdLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJEaWFnbm9zaXNbMF0uY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJEaWFnbm9zaXNbMF0uaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5zdW1tYXJ5LnNlbmRlckRpYWdub3Npc1swXS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5zdW1tYXJ5LnNlbmRlckRpYWdub3Npc1swXS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5zdW1tYXJ5LnNlbmRlckRpYWdub3Npc1swXS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuc3VtbWFyeS5zZW5kZXJEaWFnbm9zaXNbMF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjE5IiBpZD0ic2FmZXR5RGF0YS5zdW1tYXJ5LnNlbmRlckRpYWdub3Npc1swXS5pbnRlcm5hbFJvd0lkIiAvPiAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIiAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPiAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCIgPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgIDwvZGl2PjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5zdW1tYXJ5LnNlbmRlckRpYWdub3Npc1swXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgaW5uZXJTdW1tYXJ5RGlhZ25vc2lzXzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgICAgICAgICAgPC9hPiAgICAgICAgPC90ZD4gICAgPC90cj4gICAgICAgIDwvdGJvZHk+PC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBhdHRhY2htZW50cyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIHJ4bWFpbi1jb250YWluZXIgcnhtYWluLWNvbnRhaW5lci10b3AiICAgICAgICAgaWQ9InYtYXR0YWNobWVudCI+ICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciBwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICA8aDQgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj4gICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiAgICAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1jYXNlIiAgICAgICAgICAgICAgICAgICBocmVmPSIjYXR0YWNobWVudCIgYXJpYS1leHBhbmRlZD0iZmFsc2UiICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjb2xsYXBzZWQgc2VjLWRpc3BsYXktdHh0IHNlY3Rpb25UaXRsZSI+ICAgICAgICAgICAgICAgICAgICBBdHRhY2htZW50KHMpICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LWhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtcmVvcmRlci1zZWMgaGlkZSI+ICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iI2F0dGFjaG1lbnRQYW5lbCIgdGl0bGU9Ik1vdmUgUmVjb3JkIFVwIiBkYXRhLWFuY2hvcmRpdj0iIiBjbGFzcz0iYnRuLXJvdy11cCBpYy14cyAiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJNb3ZlIFJlY29yZCBEb3duIiBkYXRhLXRhcmdldD0iI2F0dGFjaG1lbnRQYW5lbCIgZGF0YS1hbmNob3JkaXY9IiIgY2xhc3M9ImJ0bi1yb3ctZG93biBpYy14cyAiPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hcnJvdy1iYWNrICIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgIDwvYT4gICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICAgICAgPC9oND4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBpZD0iYXR0YWNobWVudCIgZGF0YS10ZW1wbGF0ZUlkPSJhdHRhY2htZW50VGVtcGxhdGUiIGRhdGEtdGFibGU9InRydWUiICAgICAgICAgICAgIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBwdi1tYWluIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgIGNvbGxhcHNlIiAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+ICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB2LWF0dGFjaG1lbnQiPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHJvdyBtLWItMCI+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIgcHYtc2VjdGlvbiI+ICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIj4gICAgPHRoZWFkPiAgICAgICAgICAgIDx0aCBjbGFzcz0icHYtY29sLXNuIj4jPC90aD4gICAgICAgIDx0aCBpZD0naGVhZGVyLWF0dGFjaG1lbnRSZWNlaXB0RGF0ZScgY2xhc3M9J2NvbC1tZC0yICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUmVjZWlwdCBEYXRlIDwvbGFiZWw+PC90aD48dGggaWQ9J2hlYWRlci1hdHRhY2htZW50RmlsZVR5cGUnIGNsYXNzPSdjb2wtbWQtMiAgdHJ1ZSc+IDxsYWJlbCBjbGFzcz0nY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyc+IEF0dGFjaG1lbnQgVHlwZSA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItYXR0YWNobWVudEZpbGVQYXRoJyBjbGFzcz0nY29sLW1kLTMgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBGaWxlIE5hbWUgPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLWF0dGFjaG1lbnRQcm9jZXNzU3RhdHVzJyBjbGFzcz0nY29sLW1kLTIgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBQcm9jZXNzIFN0YXR1cyA8L2xhYmVsPjwvdGg+PHRoIGlkPSdoZWFkZXItYXR0YWNobWVudENhc2VWZXJzaW9uJyBjbGFzcz0nY29sLW1kLTMgIHRydWUnPiA8bGFiZWwgY2xhc3M9J2NvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMnPiBDYXNlIFZlcnNpb24gPC9sYWJlbD48L3RoPjx0aCBpZD0naGVhZGVyLWF0dGFjaG1lbnRJc1Byb3RlY3RlZCcgY2xhc3M9J2NvbC1tZC0xICB0cnVlJz4gPGxhYmVsIGNsYXNzPSdjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzJz4gUHJvdGVjdGVkIDwvbGFiZWw+PC90aD4gICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJwdi1jb2wtbGEiPjxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJwdWxsLXJpZ2h0IGFkZC10YWJsZS1yb3cgYWRkLXNlY3Rpb24gYnRuLWFkZC1wYW5lbCIgICAgICAgICAgICAgICBkYXRhLXRhYnVsYXI9InRydWUiPiAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1wbHVzLXNxdWFyZS1vIj48L2k+PC9hPjwvdGg+ICAgICAgICA8L3RoZWFkPiAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIiBpZD0iYXR0YWNobWVudFBhbmVsIj4gICAgICAgICAgICA8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgaWQ9ImF0dGFjaG1lbnQtc2VjdGlvbi0wIj4gICAgICAgICAgICA8dGQgY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCI+PC90ZD4gICAgICAgICAgICA8dGQgaWQ9ImF0dGFjaG1lbnRSZWNlaXB0RGF0ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgYXR0YWNobWVudFJlY2VpcHREYXRlICBjb2wtbWQtMiI+ICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iYXR0YWNobWVudFJlY2VpcHREYXRlIj48ZGl2IGNsYXNzPSIiPiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIiAgICAgICAgIGRhdGEtaWQ9ImF0dGFjaG1lbnRSZWNlaXB0RGF0ZSI+ICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgYWxsb3dFZGl0ICIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5yZWNlaXB0RGF0ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5yZWNlaXB0RGF0ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIwIiB2YWx1ZT0iMTUtQXByLTIwMjAgMDA6MDA6MDAiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU9OLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4gICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4gICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4gICAgICAgIDwvc3Bhbj4gICAgPC9kaXY+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLmludGVybmFsUm93SWQiIC8+PC9kaXY+PC9kaXY+PC90ZD48dGQgaWQ9ImF0dGFjaG1lbnRGaWxlVHlwZSIgY2xhc3M9IiBhdHRhY2htZW50RmlsZVR5cGUgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImF0dGFjaG1lbnRGaWxlVHlwZSI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IGFsbG93RWRpdCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0uZmlsZVR5cGUiIGRhdGEtZnJvbT0iZmlsZVR5cGVzIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS12YWx1ZT0iMTAwMDAwIiBpZD0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5maWxlVHlwZSIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+ICAgIDx0ZCBpZD0iYXR0YWNobWVudEZpbGVQYXRoIiBjbGFzcz0iY29sLW1kLTMgIGFsbG93RWRpdCAgICBhdHRhY2htZW50RmlsZVBhdGggIj4gICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImF0dGFjaG1lbnRGaWxlUGF0aCI+PGRpdiBjbGFzcz0iZmlsZS11cGxvYWRlciIgZGF0YS1wcm92aWRlcz0iZmlsZXVwbG9hZCI+PGlucHV0IHR5cGU9ImZpbGUiIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0uZmlsZVBhdGgiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSJmaWxlIGFsbG93RWRpdCI+PGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPiAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAiIGRpc2FibGVkIHBsYWNlaG9sZGVyPSJBdHRhY2ggYSBmaWxlIiBpZD0iYXR0YWNobWVudEZpbGVQYXRoIiAgICAgICAgICAgbmFtZT0ic2FmZXR5RGF0YS5maWxlSW5wdXRCb3hbLTFdLmZpbGVOYW1lIiB2YWx1ZT0iQzomIzkyO1BWSW5UYWtlJiM5Mjs0LjYuMC4zJiM5MjtzY3JpcHRzJiM5MjtTY3JpcHQxX0Nhc2VDcmVhdGlvbiYjOTI7Y2lvbXNfc2Nhbm5lZC5wZGYiPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5pZCIgdmFsdWU9Ijg3Mzk0IiBpZD0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5pZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLmZpbGVOYW1lIiB2YWx1ZT0iQzomIzkyO1BWSW5UYWtlJiM5Mjs0LjYuMC4zJiM5MjtzY3JpcHRzJiM5MjtTY3JpcHQxX0Nhc2VDcmVhdGlvbiYjOTI7Y2lvbXNfc2Nhbm5lZC5wZGYiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLmZpbGVOYW1lIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0uaXNSZWRhY3RGaWxlIiB2YWx1ZT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLmlzUmVkYWN0RmlsZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLnJlZGFjdEZpbGVOYW1lIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5yZWRhY3RGaWxlTmFtZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLmNhc2VDb3VudHJ5IiBjbGFzcz0iaGlkZGVuLWNhc2UtY291bnRyeSIgdmFsdWU9IjMiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLmNhc2VDb3VudHJ5IiAvPiAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuICI+ICAgICAgICA8YnV0dG9uIGNsYXNzPSJicm93c2UgYnRuIGJ0bi1wcmltYXJ5IGJ0bi1maWxlLXVwbG9hZCBhbGxvd0VkaXQiICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiI+PGkgICAgICAgICAgICAgICAgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+ICAgICAgICA8L2J1dHRvbj4gICAgPC9zcGFuPiAgICA8c3BhbiBjbGFzcz0iICI+ICAgICAgICA8c3BhbiBjbGFzcz0icHYtaWMtcmVkYWN0IGljLXNtIHJlZGFjdEF0dGFjaG1lbnRTcGFuIHJlZGFjdEF0dGFjaG1lbnQtODczOTQgaGlkZSI+ICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1hbHBoYS1yLWJveC1vdXRsaW5lIHJlZGFjdE92ZXJsYXlJY29uIj48L2k+ICAgICAgICA8L3NwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PiAgICA8L2Rpdj48L3RkPjx0ZCBpZD0iYXR0YWNobWVudFByb2Nlc3NTdGF0dXMiIGNsYXNzPSIgYXR0YWNobWVudFByb2Nlc3NTdGF0dXMgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0yICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImF0dGFjaG1lbnRQcm9jZXNzU3RhdHVzIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggYWxsb3dFZGl0IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5wcm9jZXNzU3RhdHVzIiBkYXRhLWZyb209InByb2Nlc3NTdGF0dXMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIxMDAzIiBpZD0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5wcm9jZXNzU3RhdHVzIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD48dGQgaWQ9ImF0dGFjaG1lbnRDYXNlVmVyc2lvbiIgY2xhc3M9IiBhdHRhY2htZW50Q2FzZVZlcnNpb24gbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0zICI+PGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImF0dGFjaG1lbnRDYXNlVmVyc2lvbiI+ICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IGFsbG93RWRpdCAgICIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5jYXNlVmVyc2lvbiIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIxIiBpZD0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1swXS5jYXNlVmVyc2lvbiIgPg08b3B0aW9uIHZhbHVlPSIiPlNlbGVjdDwvb3B0aW9uPg08L3NlbGVjdD4gICAgICAgIDwvZGl2PjwvdGQ+ICAgIDx0ZCBpZD0iYXR0YWNobWVudElzUHJvdGVjdGVkIiBjbGFzcz0iIGlzUHJvdGVjdGVkIHYtbWlkZGxlIHRleHQtY2VudGVyIGFsbG93RWRpdCAgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMSAgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICcgZGF0YS1pZD0iYXR0YWNobWVudElzUHJvdGVjdGVkIj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLmF0dGFjaG1lbnRzWzBdLmlzUHJvdGVjdGVkIi8+ICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0uaXNQcm90ZWN0ZWQiIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgaXNQcm90ZWN0ZWQgdi1taWRkbGUgdGV4dC1jZW50ZXIgYWxsb3dFZGl0ICIgLz4gICAgICAgIDxsYWJlbCBjbGFzcz0iIj48L2xhYmVsPiAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC90ZD48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEuYXR0YWNobWVudHNbMF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4gICAgICAgICAgICA8dGQ+ICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHNlY3Rpb24iICAgICAgICAgICAgICAgY2xhc3M9InRhYmxlLXJvdy1kZWwgcHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBidG4tZGVsLXBhbmVsIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGF0dGFjaG1lbnRfMCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgICAgICAgICA8L2E+ICAgICAgICA8L3RkPiAgICA8L3RyPiAgICAgICAgICAgIDx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBpZD0iYXR0YWNobWVudC1zZWN0aW9uLTEiPiAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4Ij48L3RkPiAgICAgICAgICAgIDx0ZCBpZD0iYXR0YWNobWVudFJlY2VpcHREYXRlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCBhdHRhY2htZW50UmVjZWlwdERhdGUgIGNvbC1tZC0yIj4gICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJhdHRhY2htZW50UmVjZWlwdERhdGUiPjxkaXYgY2xhc3M9IiI+ICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiICAgICAgICAgZGF0YS1pZD0iYXR0YWNobWVudFJlY2VpcHREYXRlIj4gICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBhbGxvd0VkaXQgIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzFdLnJlY2VpcHREYXRlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzFdLnJlY2VpcHREYXRlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjAiIHZhbHVlPSIxNS1BcHItMjAyMCAwMDowMDowMCIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NT04tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPiAgICAgICAgPC9zcGFuPiAgICA8L2Rpdj4gICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMV0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMV0uaW50ZXJuYWxSb3dJZCIgLz48L2Rpdj48L2Rpdj48L3RkPjx0ZCBpZD0iYXR0YWNobWVudEZpbGVUeXBlIiBjbGFzcz0iIGF0dGFjaG1lbnRGaWxlVHlwZSBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iYXR0YWNobWVudEZpbGVUeXBlIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggYWxsb3dFZGl0IHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1sxXS5maWxlVHlwZSIgZGF0YS1mcm9tPSJmaWxlVHlwZXMiIGRhdGEtdGFidWxhcj0idHJ1ZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXZhbHVlPSIxMDAxMzYiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzFdLmZpbGVUeXBlIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD4gICAgPHRkIGlkPSJhdHRhY2htZW50RmlsZVBhdGgiIGNsYXNzPSJjb2wtbWQtMyAgYWxsb3dFZGl0ICAgIGF0dGFjaG1lbnRGaWxlUGF0aCAiPiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iYXR0YWNobWVudEZpbGVQYXRoIj48ZGl2IGNsYXNzPSJmaWxlLXVwbG9hZGVyIiBkYXRhLXByb3ZpZGVzPSJmaWxldXBsb2FkIj48aW5wdXQgdHlwZT0iZmlsZSIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1sxXS5maWxlUGF0aCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9ImZpbGUgYWxsb3dFZGl0Ij48ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+ICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICIgZGlzYWJsZWQgcGxhY2Vob2xkZXI9IkF0dGFjaCBhIGZpbGUiIGlkPSJhdHRhY2htZW50RmlsZVBhdGgiICAgICAgICAgICBuYW1lPSJzYWZldHlEYXRhLmZpbGVJbnB1dEJveFstMV0uZmlsZU5hbWUiIHZhbHVlPSJDOiYjOTI7UFZJblRha2UmIzkyOzQuNi4wLjMmIzkyO3NjcmlwdHMmIzkyO1NjcmlwdDFfQ2FzZUNyZWF0aW9uJiM5MjtjaW9tc19zY2FubmVkLnBkZiI+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzFdLmlkIiB2YWx1ZT0iODczOTUiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzFdLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMV0uZmlsZU5hbWUiIHZhbHVlPSJDOiYjOTI7UFZJblRha2UmIzkyOzQuNi4wLjMmIzkyO3NjcmlwdHMmIzkyO1NjcmlwdDFfQ2FzZUNyZWF0aW9uJiM5MjtjaW9tc19zY2FubmVkLnBkZiIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMV0uZmlsZU5hbWUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1sxXS5pc1JlZGFjdEZpbGUiIHZhbHVlPSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMV0uaXNSZWRhY3RGaWxlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMV0ucmVkYWN0RmlsZU5hbWUiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzFdLnJlZGFjdEZpbGVOYW1lIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMV0uY2FzZUNvdW50cnkiIGNsYXNzPSJoaWRkZW4tY2FzZS1jb3VudHJ5IiB2YWx1ZT0iMyIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMV0uY2FzZUNvdW50cnkiIC8+ICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1idG4gIj4gICAgICAgIDxidXR0b24gY2xhc3M9ImJyb3dzZSBidG4gYnRuLXByaW1hcnkgYnRuLWZpbGUtdXBsb2FkIGFsbG93RWRpdCIgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIj48aSAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giPjwvaT4gICAgICAgIDwvYnV0dG9uPiAgICA8L3NwYW4+ICAgIDxzcGFuIGNsYXNzPSIgIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1yZWRhY3QgaWMtc20gcmVkYWN0QXR0YWNobWVudFNwYW4gcmVkYWN0QXR0YWNobWVudC04NzM5NSBoaWRlIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFscGhhLXItYm94LW91dGxpbmUgcmVkYWN0T3ZlcmxheUljb24iPjwvaT4gICAgICAgIDwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+ICAgIDwvZGl2PjwvdGQ+PHRkIGlkPSJhdHRhY2htZW50UHJvY2Vzc1N0YXR1cyIgY2xhc3M9IiBhdHRhY2htZW50UHJvY2Vzc1N0YXR1cyBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iYXR0YWNobWVudFByb2Nlc3NTdGF0dXMiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBhbGxvd0VkaXQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzFdLnByb2Nlc3NTdGF0dXMiIGRhdGEtZnJvbT0icHJvY2Vzc1N0YXR1cyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjEwMDMiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzFdLnByb2Nlc3NTdGF0dXMiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjx0ZCBpZD0iYXR0YWNobWVudENhc2VWZXJzaW9uIiBjbGFzcz0iIGF0dGFjaG1lbnRDYXNlVmVyc2lvbiBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iYXR0YWNobWVudENhc2VWZXJzaW9uIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggYWxsb3dFZGl0ICAgIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzFdLmNhc2VWZXJzaW9uIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjEiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzFdLmNhc2VWZXJzaW9uIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD4gICAgPHRkIGlkPSJhdHRhY2htZW50SXNQcm90ZWN0ZWQiIGNsYXNzPSIgaXNQcm90ZWN0ZWQgdi1taWRkbGUgdGV4dC1jZW50ZXIgYWxsb3dFZGl0ICB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xICAiPjxkaXYgY2xhc3M9J2ludGVybmFsIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgJyBkYXRhLWlkPSJhdHRhY2htZW50SXNQcm90ZWN0ZWQiPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEuYXR0YWNobWVudHNbMV0uaXNQcm90ZWN0ZWQiLz4gICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1sxXS5pc1Byb3RlY3RlZCIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiBpc1Byb3RlY3RlZCB2LW1pZGRsZSB0ZXh0LWNlbnRlciBhbGxvd0VkaXQgIiAvPiAgICAgICAgPGxhYmVsIGNsYXNzPSIiPjwvbGFiZWw+ICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5hdHRhY2htZW50c1sxXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgYXR0YWNobWVudF8xIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvdGQ+ICAgIDwvdHI+ICAgICAgICAgICAgPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIGlkPSJhdHRhY2htZW50LXNlY3Rpb24tMiI+ICAgICAgICAgICAgPHRkIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXgiPjwvdGQ+ICAgICAgICAgICAgPHRkIGlkPSJhdHRhY2htZW50UmVjZWlwdERhdGUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIGF0dGFjaG1lbnRSZWNlaXB0RGF0ZSAgY29sLW1kLTIiPiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9ImF0dGFjaG1lbnRSZWNlaXB0RGF0ZSI+PGRpdiBjbGFzcz0iIj4gICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIgICAgICAgICBkYXRhLWlkPSJhdHRhY2htZW50UmVjZWlwdERhdGUiPiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGFsbG93RWRpdCAiIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMl0ucmVjZWlwdERhdGUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMl0ucmVjZWlwdERhdGUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMCIgdmFsdWU9IjE1LUFwci0yMDIwIDAwOjAwOjAwIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1PTi1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+ICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+ICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+ICAgICAgICA8L3NwYW4+ICAgIDwvZGl2PiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1syXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1syXS5pbnRlcm5hbFJvd0lkIiAvPjwvZGl2PjwvZGl2PjwvdGQ+PHRkIGlkPSJhdHRhY2htZW50RmlsZVR5cGUiIGNsYXNzPSIgYXR0YWNobWVudEZpbGVUeXBlIG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtMiAiPjxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJhdHRhY2htZW50RmlsZVR5cGUiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBhbGxvd0VkaXQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzJdLmZpbGVUeXBlIiBkYXRhLWZyb209ImZpbGVUeXBlcyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjQiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzJdLmZpbGVUeXBlIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD4gICAgPHRkIGlkPSJhdHRhY2htZW50RmlsZVBhdGgiIGNsYXNzPSJjb2wtbWQtMyAgYWxsb3dFZGl0ICAgIGF0dGFjaG1lbnRGaWxlUGF0aCAiPiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iYXR0YWNobWVudEZpbGVQYXRoIj48ZGl2IGNsYXNzPSJmaWxlLXVwbG9hZGVyIiBkYXRhLXByb3ZpZGVzPSJmaWxldXBsb2FkIj48aW5wdXQgdHlwZT0iZmlsZSIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1syXS5maWxlUGF0aCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9ImZpbGUgYWxsb3dFZGl0Ij48ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+ICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICIgZGlzYWJsZWQgcGxhY2Vob2xkZXI9IkF0dGFjaCBhIGZpbGUiIGlkPSJhdHRhY2htZW50RmlsZVBhdGgiICAgICAgICAgICBuYW1lPSJzYWZldHlEYXRhLmZpbGVJbnB1dEJveFstMV0uZmlsZU5hbWUiIHZhbHVlPSJDOiYjOTI7UFZJblRha2UmIzkyOzQuNi4wLjMmIzkyO3NjcmlwdHMmIzkyO1NjcmlwdDFfQ2FzZUNyZWF0aW9uJiM5MjtjaW9tc19zY2FubmVkLnBkZiI+ICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzJdLmlkIiB2YWx1ZT0iODczOTYiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzJdLmlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMl0uZmlsZU5hbWUiIHZhbHVlPSJDOiYjOTI7UFZJblRha2UmIzkyOzQuNi4wLjMmIzkyO3NjcmlwdHMmIzkyO1NjcmlwdDFfQ2FzZUNyZWF0aW9uJiM5MjtjaW9tc19zY2FubmVkLnBkZiIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMl0uZmlsZU5hbWUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1syXS5pc1JlZGFjdEZpbGUiIHZhbHVlPSJmYWxzZSIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMl0uaXNSZWRhY3RGaWxlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMl0ucmVkYWN0RmlsZU5hbWUiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzJdLnJlZGFjdEZpbGVOYW1lIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMl0uY2FzZUNvdW50cnkiIGNsYXNzPSJoaWRkZW4tY2FzZS1jb3VudHJ5IiB2YWx1ZT0iMyIgaWQ9InNhZmV0eURhdGEuYXR0YWNobWVudHNbMl0uY2FzZUNvdW50cnkiIC8+ICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1idG4gIj4gICAgICAgIDxidXR0b24gY2xhc3M9ImJyb3dzZSBidG4gYnRuLXByaW1hcnkgYnRuLWZpbGUtdXBsb2FkIGFsbG93RWRpdCIgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIj48aSAgICAgICAgICAgICAgICBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giPjwvaT4gICAgICAgIDwvYnV0dG9uPiAgICA8L3NwYW4+ICAgIDxzcGFuIGNsYXNzPSIgIj4gICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1yZWRhY3QgaWMtc20gcmVkYWN0QXR0YWNobWVudFNwYW4gcmVkYWN0QXR0YWNobWVudC04NzM5NiBoaWRlIj4gICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFscGhhLXItYm94LW91dGxpbmUgcmVkYWN0T3ZlcmxheUljb24iPjwvaT4gICAgICAgIDwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+ICAgIDwvZGl2PjwvdGQ+PHRkIGlkPSJhdHRhY2htZW50UHJvY2Vzc1N0YXR1cyIgY2xhc3M9IiBhdHRhY2htZW50UHJvY2Vzc1N0YXR1cyBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTIgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iYXR0YWNobWVudFByb2Nlc3NTdGF0dXMiPiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCBhbGxvd0VkaXQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzJdLnByb2Nlc3NTdGF0dXMiIGRhdGEtZnJvbT0icHJvY2Vzc1N0YXR1cyIgZGF0YS10YWJ1bGFyPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjEwMDMiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzJdLnByb2Nlc3NTdGF0dXMiID4NPG9wdGlvbiB2YWx1ZT0iIj5TZWxlY3Q8L29wdGlvbj4NPC9zZWxlY3Q+ICAgICAgICA8L2Rpdj48L3RkPjx0ZCBpZD0iYXR0YWNobWVudENhc2VWZXJzaW9uIiBjbGFzcz0iIGF0dGFjaG1lbnRDYXNlVmVyc2lvbiBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTMgIj48ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0iYXR0YWNobWVudENhc2VWZXJzaW9uIj4gICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggYWxsb3dFZGl0ICAgIiBuYW1lPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzJdLmNhc2VWZXJzaW9uIiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtdmFsdWU9IjEiIGlkPSJzYWZldHlEYXRhLmF0dGFjaG1lbnRzWzJdLmNhc2VWZXJzaW9uIiA+DTxvcHRpb24gdmFsdWU9IiI+U2VsZWN0PC9vcHRpb24+DTwvc2VsZWN0PiAgICAgICAgPC9kaXY+PC90ZD4gICAgPHRkIGlkPSJhdHRhY2htZW50SXNQcm90ZWN0ZWQiIGNsYXNzPSIgaXNQcm90ZWN0ZWQgdi1taWRkbGUgdGV4dC1jZW50ZXIgYWxsb3dFZGl0ICB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC0xICAiPjxkaXYgY2xhc3M9J2ludGVybmFsIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgJyBkYXRhLWlkPSJhdHRhY2htZW50SXNQcm90ZWN0ZWQiPiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEuYXR0YWNobWVudHNbMl0uaXNQcm90ZWN0ZWQiLz4gICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS5hdHRhY2htZW50c1syXS5pc1Byb3RlY3RlZCIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiBpc1Byb3RlY3RlZCB2LW1pZGRsZSB0ZXh0LWNlbnRlciBhbGxvd0VkaXQgIiAvPiAgICAgICAgPGxhYmVsIGNsYXNzPSIiPjwvbGFiZWw+ICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L3RkPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS5hdHRhY2htZW50c1syXS5kZWxldGVkIHZhbHVlPWZhbHNlPiAgICAgICAgICAgIDx0ZD4gICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgc2VjdGlvbiIgICAgICAgICAgICAgICBjbGFzcz0idGFibGUtcm93LWRlbCBwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGJ0bi1kZWwtcGFuZWwiPiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgYXR0YWNobWVudF8yIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvdGQ+ICAgIDwvdHI+ICAgICAgICA8L3Rib2R5PjwvdGFibGU+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzcGVjaWFsRmllbGRDb250YWluZXIiIG5hbWU9InNwZWNpYWxGaWVsZENvbnRhaW5lciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gVGFza3MgU2VjdGlvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKPGRpdiBpZD0ianVzdGlmaWNhdGlvbk1vZGFsIiBjbGFzcz0ibW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1tZCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBpZD0ianVzdGlmaWNhdGlvbkNsb3NlQnV0dG9uIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+w5c8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0ibW9kYWwtdGl0bGUganVzdGlmaWNhdGlvbkNvbW1lbnRzIj5DYXNlIEFzc2lnbm1lbnQ8L2g0PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgYXNzaWduZWVVc2VyTGlzdCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYgcmVxdWlyZWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJhc3NpZ25lZVVzZXJMaXN0IiBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyI+QXNzaWduIFRvOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iYXNzaWduZWVVc2VyTGlzdCIgaWQ9ImFzc2lnbmVlVXNlckxpc3QiIGNsYXNzPSJmb3JtLWNvbnRyb2wgc2VsZWN0MiI+PC9zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ianVzdGlmaWNhdGlvbk1vZGFsSWQiIGNsYXNzPSJjb250cm9sLWxhYmVsIj5Db21tZW50cwogICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9Imp1c3RpZmljYXRpb25Nb2RhbElkIiBuYW1lPSJqdXN0aWZpY2F0aW9uQ29tbWVudHMiIHJvd3M9IjQiIGNvbHM9IjIwIiBtYXhsZW5ndGg9IjUwMCIgY2xhc3M9ImZvcm0tY29udHJvbCBmbS10ZXh0LWFyZWEiID48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWF4bGVuZ3RoLWZlZWRiYWNrIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9Imp1c3RpZmljYXRpb25Nb2RhbE9rQnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1pbnZlcnNlIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCI+T2s8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0iYXNzaWduQ2FuY2VsQnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGJ0bi1tZCI+Q2FuY2VsPC9idXR0b24+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIHJ4bWFpbi1jb250YWluZXIgcnhtYWluLWNvbnRhaW5lci10b3AiICAgICAgICAgaWQ9InYtdGFzayI+ICAgICAgICA8ZGl2IGNsYXNzPSJyeG1haW4tY29udGFpbmVyLXJvdyByeG1haW4tY29udGFpbmVyLWhlYWRlciBwYW5lbC1oZWFkaW5nIj4gICAgICAgICAgICA8aDQgY2xhc3M9InJ4bWFpbi1jb250YWluZXItaGVhZGVyLWxhYmVsIj4gICAgICAgICAgICAgICAgPGEgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvbi1jYXNlIiAgICAgICAgICAgICAgICAgICBocmVmPSIjdGFza1NlY3Rpb24iIGNsYXNzPSJjb2xsYXBzZWQgc2VjLWRpc3BsYXktdHh0IHNlY3Rpb25UaXRsZSI+ICAgICAgICAgICAgICAgICAgICBUYXNrKHMpPC9hPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIj4gICAgPGEgaHJlZj0iIyIgY2xhc3M9ImRyb3Bkb3duLXRvZ2dsZSBwdWxsLXJpZ2h0IGljLXNtIiAgICAgICBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iPjxpIGNsYXNzPSJtZCBtZC1saXN0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT4gICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IGZpZWxkLWNvbmZpZyI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0idGFza0luZGV4IiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9InRydWUiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iIyIgZGF0YS1pZD0idGFza0luZGV4IiBkYXRhLWluZGV4ID0gIjAiIGRhdGEtc2VjdGlvbi1uYW1lPSJUYXNrcyIgZGF0YS1jbGFzcyA9InB2LWNvbC14eHMiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ0YXNrSW5kZXgiPiM8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0idGFza1R5cGVJZCIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJUYXNrIFR5cGUiIGRhdGEtaWQ9InRhc2tUeXBlSWQiIGRhdGEtaW5kZXggPSAiMSIgZGF0YS1zZWN0aW9uLW5hbWU9IlRhc2tzIiBkYXRhLWNsYXNzID0icHYtY29sLXNtIi8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idGFza1R5cGVJZCI+VGFzayBUeXBlPC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9ImFzc2lnbmVkVG9JZCIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJBc3NpZ25lZCBUbyIgZGF0YS1pZD0iYXNzaWduZWRUb0lkIiBkYXRhLWluZGV4ID0gIjIiIGRhdGEtc2VjdGlvbi1uYW1lPSJUYXNrcyIgZGF0YS1jbGFzcyA9InB2LWNvbC1tZCIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImFzc2lnbmVkVG9JZCI+QXNzaWduZWQgVG88L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0iZGVzY3JpcHRpb24iICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iRGVzY3JpcHRpb24iIGRhdGEtaWQ9ImRlc2NyaXB0aW9uIiBkYXRhLWluZGV4ID0gIjMiIGRhdGEtc2VjdGlvbi1uYW1lPSJUYXNrcyIgZGF0YS1jbGFzcyA9InB2LWNvbC14bCIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRlc2NyaXB0aW9uIj5EZXNjcmlwdGlvbjwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJkdWVEYXRlIiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IkR1ZSBEYXRlIiBkYXRhLWlkPSJkdWVEYXRlIiBkYXRhLWluZGV4ID0gIjQiIGRhdGEtc2VjdGlvbi1uYW1lPSJUYXNrcyIgZGF0YS1jbGFzcyA9InB2LWNvbC1zbSIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImR1ZURhdGUiPkR1ZSBEYXRlPC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9ImNvbXBsZXRpb25EYXRlIiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IkNvbXBsZXRpb24gRGF0ZSIgZGF0YS1pZD0iY29tcGxldGlvbkRhdGUiIGRhdGEtaW5kZXggPSAiNSIgZGF0YS1zZWN0aW9uLW5hbWU9IlRhc2tzIiBkYXRhLWNsYXNzID0icHYtY29sLW1kIi8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY29tcGxldGlvbkRhdGUiPkNvbXBsZXRpb24gRGF0ZTwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJwcmlvcml0eUlkIiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IlByaW9yaXR5IiBkYXRhLWlkPSJwcmlvcml0eUlkIiBkYXRhLWluZGV4ID0gIjYiIGRhdGEtc2VjdGlvbi1uYW1lPSJUYXNrcyIgZGF0YS1jbGFzcyA9InB2LWNvbC1zbSIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InByaW9yaXR5SWQiPlByaW9yaXR5PC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9InN0YXR1cyIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJTdGF0dXMiIGRhdGEtaWQ9InN0YXR1cyIgZGF0YS1pbmRleCA9ICI3IiBkYXRhLXNlY3Rpb24tbmFtZT0iVGFza3MiIGRhdGEtY2xhc3MgPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzdGF0dXMiPlN0YXR1czwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJjcmVhdGVkQnlVc2VySWQiICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iQ3JlYXRlZCBCeSIgZGF0YS1pZD0iY3JlYXRlZEJ5VXNlcklkIiBkYXRhLWluZGV4ID0gIjgiIGRhdGEtc2VjdGlvbi1uYW1lPSJUYXNrcyIgZGF0YS1jbGFzcyA9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImNyZWF0ZWRCeVVzZXJJZCI+Q3JlYXRlZCBCeTwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJkYXRlQ3JlYXRlZCIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJEYXRlIENyZWF0ZWQiIGRhdGEtaWQ9ImRhdGVDcmVhdGVkIiBkYXRhLWluZGV4ID0gIjkiIGRhdGEtc2VjdGlvbi1uYW1lPSJUYXNrcyIgZGF0YS1jbGFzcyA9InB2LWNvbC1zbSIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImRhdGVDcmVhdGVkIj5EYXRlIENyZWF0ZWQ8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0idGVydGlhcnlSZWZJZCIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJJbnRha2UgQ2FzZSAjIiBkYXRhLWlkPSJ0ZXJ0aWFyeVJlZklkIiBkYXRhLWluZGV4ID0gIjEwIiBkYXRhLXNlY3Rpb24tbmFtZT0iVGFza3MiIGRhdGEtY2xhc3MgPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ0ZXJ0aWFyeVJlZklkIj5JbnRha2UgQ2FzZSAjPC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9InNlY29uZGFyeVJlZklkIiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IlZlcnNpb24iIGRhdGEtaWQ9InNlY29uZGFyeVJlZklkIiBkYXRhLWluZGV4ID0gIjExIiBkYXRhLXNlY3Rpb24tbmFtZT0iVGFza3MiIGRhdGEtY2xhc3MgPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzZWNvbmRhcnlSZWZJZCI+VmVyc2lvbjwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJ0YXNrQWN0aW9uIiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IkFjdGlvbnMiIGRhdGEtaWQ9InRhc2tBY3Rpb24iIGRhdGEtaW5kZXggPSAiMTIiIGRhdGEtc2VjdGlvbi1uYW1lPSJUYXNrcyIgZGF0YS1jbGFzcyA9InB2LWNvbC14eHMiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ0YXNrQWN0aW9uIj5BY3Rpb25zPC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+ICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1maWx0ZXIgZ3JpZC1maWx0ZXIgaWMtc20gbS1yLTUiICAgICAgIHRpdGxlPSJFbmFibGUvRGlzYWJsZSBGaWx0ZXJzIiAgICAgICBkYXRhLXNlY3Rpb24taWQ9IiN0YXNrU2VjdGlvbiIgZGF0YS1zZWN0aW9uLW5hbWUgPSAiVGFza3MiIGRhdGEtZmlsdGVyLWhpZGU9InRydWUiPiAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWZpbHRlciIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0icHVsbC1yaWdodCBncmlkLXJlZnJlc2ggaWMtc20gbS1yLTUiIHRpdGxlPSJSZWZyZXNoIiAgICAgICBkYXRhLXNlY3Rpb24taWQ9IiN0YXNrU2VjdGlvbiIgZGF0YS1zZWN0aW9uLW5hbWUgPSAiVGFza3MiPiAgICAgICAgPGkgY2xhc3M9Im1kIG1kLXJlZnJlc2giIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICAgIDwvYT4gICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgY2xhc3M9InB1bGwtcmlnaHQgZ3JpZC1hZGQgaWMtc20gbS1yLTUiICAgICAgIHRpdGxlPSJBZGQiIGRhdGEtc2VjdGlvbi1pZD0iI3Rhc2tTZWN0aW9uIiBkYXRhLXNlY3Rpb24tbmFtZSA9ICJUYXNrcyI+ICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYWRkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiAgICA8L2E+PC9zcGFuPiAgICAgICAgICAgIDwvaDQ+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgaWQ9InRhc2tTZWN0aW9uIiBjbGFzcz0icGFuZWwtY29sbGFwc2UgY29sbGFwc2UgcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHB2LWdyaWQtc2VjIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtc2VjLXNlcGVyYXRvciBmb3JtLXB2Ij4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWNhc2VsaXN0Ij4gICAgPGRpdiBjbGFzcz0icGFuZWwgbS1iLTAiPiAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBwLTAgbS0wIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRhVGFibGVzX3Njcm9sbCI+ICAgICAgICAgICAgICAgIDx0YWJsZSBpZD0idGFibGVDb250YWluZXJJZGE1MTA2NmJjLTg1YjQtNDY2ZS1hYjdmLWQ1YzhhMDhjOWQ4ZSIgY2VsbHNwYWNpbmc9IjAiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIGRpc3BsYXkgb3JkZXItY29sdW1uIGxpc3QtdGFibGUgcHYtbGlzdC10YWJsZSBwdi1ncmlkLXRhYmxlIGRpc3BsYXkiPjwvdGFibGU+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+PHNjcmlwdD4gICAgdmFyIHB2aSA9IHB2aSB8fCB7fTsgICAgcHZpLmRhdGFHcmlkT2JqZWN0ID0gcHZpLmRhdGFHcmlkT2JqZWN0IHx8IHt9OyAgICBwdmkuZGF0YUdyaWRPYmplY3RbJ1Rhc2tzJ10gPSB7ICAgICAgICBncmlkT3B0aW9uczp7ICAgICAgICAgICAgdGFibGVDb250YWluZXJJZDogJ3RhYmxlQ29udGFpbmVySWRhNTEwNjZiYy04NWI0LTQ2NmUtYWI3Zi1kNWM4YTA4YzlkOGUnLCAgICAgICAgICAgIGdyaWRIZWFkZXJzOiBbeyJpbnB1dFR5cGUiOiJqYXZhc2NyaXB0IiwibWFuZGF0b3J5Ijp0cnVlLCJjbGFzc05hbWUiOiJwdi1jb2wteHhzIiwibmFtZSI6InRhc2tJbmRleCIsImRhdGEiOiJ0YXNrSW5kZXgiLCJ0aXRsZSI6IiMiLCJ2aXNpYmxlIjp0cnVlLCJ3aWR0aCI6IjYwcHgiLCJkaXNhYmxlX3lhZGNmIjp0cnVlLCJvcmRlcmFibGUiOmZhbHNlLCJzZWFyY2hhYmxlIjpmYWxzZSwiaHRtbENvZGUiOnsiZnVuY3Rpb24iOnsiYXJndW1lbnRzIjoicm93LHR5cGUsZGF0YSxtZXRhIiwiYm9keSI6InJldHVybiAoMSArIG1ldGEucm93ICsgbWV0YS5zZXR0aW5ncy5faURpc3BsYXlTdGFydCk7In19fSx7ImlucHV0VHlwZSI6InRleHRib3giLCJtYW5kYXRvcnkiOmZhbHNlLCJjbGFzc05hbWUiOiJwdi1jb2wtc20iLCJuYW1lIjoidGFza1R5cGVJZCIsImRhdGEiOiJ0YXNrVHlwZUlkIiwidGl0bGUiOiJUYXNrIFR5cGUiLCJ2aXNpYmxlIjp0cnVlLCJ3aWR0aCI6IjEwMHB4Iiwib3JkZXJhYmxlIjpmYWxzZSwiY3VzdG9tX2ZpbHRlcl90eXBlIjoibnVtYmVyIiwiZGF0YVNvdXJjZSI6InRhc2tDYXRlZ29yeSIsImZpbHRlcl90eXBlIjoic2VsZWN0Iiwic2VsZWN0X3R5cGUiOiIiLCJzdHlsZV9jbGFzcyI6ImZvcm0tY29udHJvbCIsInNlbGVjdF90eXBlX29wdGlvbnMiOnsid2lkdGgiOiJhdXRvIiwicGxhY2Vob2xkZXIiOiJTZWxlY3QiLCJhbGxvd0NsZWFyIjp0cnVlfSwic29ydF9hcyI6Im5vbmUiLCJmaWx0ZXJfcmVzZXRfYnV0dG9uX3RleHQiOmZhbHNlfSx7ImlucHV0VHlwZSI6InRleHRib3giLCJtYW5kYXRvcnkiOmZhbHNlLCJjbGFzc05hbWUiOiJwdi1jb2wtbWQiLCJuYW1lIjoiYXNzaWduZWRUb0lkIiwiZGF0YSI6ImFzc2lnbmVkVG9JZCIsInRpdGxlIjoiQXNzaWduZWQgVG8iLCJ2aXNpYmxlIjp0cnVlLCJ3aWR0aCI6IjE1MHB4Iiwib3JkZXJhYmxlIjpmYWxzZSwiY3VzdG9tX2ZpbHRlcl90eXBlIjoibnVtYmVyIiwiZGF0YVNvdXJjZSI6InVzZXJEZXRhaWxzIiwiZmlsdGVyX3R5cGUiOiJzZWxlY3QiLCJzZWxlY3RfdHlwZSI6IiIsInN0eWxlX2NsYXNzIjoiZm9ybS1jb250cm9sIiwic2VsZWN0X3R5cGVfb3B0aW9ucyI6eyJ3aWR0aCI6ImF1dG8iLCJwbGFjZWhvbGRlciI6IlNlbGVjdCIsImFsbG93Q2xlYXIiOnRydWV9LCJzb3J0X2FzIjoibm9uZSIsImZpbHRlcl9yZXNldF9idXR0b25fdGV4dCI6ZmFsc2V9LHsiaW5wdXRUeXBlIjoic3RyaW5nIiwibWFuZGF0b3J5IjpmYWxzZSwiY2xhc3NOYW1lIjoicHYtY29sLXhsIiwibmFtZSI6ImRlc2NyaXB0aW9uIiwiZGF0YSI6ImRlc2NyaXB0aW9uIiwidGl0bGUiOiJEZXNjcmlwdGlvbiIsInZpc2libGUiOnRydWUsIndpZHRoIjoiMzAwcHgiLCJvcmRlcmFibGUiOmZhbHNlfSx7ImlucHV0VHlwZSI6ImRhdGVwaWNrZXIiLCJtYW5kYXRvcnkiOmZhbHNlLCJjbGFzc05hbWUiOiJwdi1jb2wtc20iLCJuYW1lIjoiZHVlRGF0ZSIsImRhdGEiOiJkdWVEYXRlIiwidGl0bGUiOiJEdWUgRGF0ZSIsInZpc2libGUiOnRydWUsIndpZHRoIjoiMTAwcHgifSx7ImlucHV0VHlwZSI6ImRhdGVwaWNrZXIiLCJtYW5kYXRvcnkiOmZhbHNlLCJjbGFzc05hbWUiOiJwdi1jb2wtbWQiLCJuYW1lIjoiY29tcGxldGlvbkRhdGUiLCJkYXRhIjoiY29tcGxldGlvbkRhdGUiLCJ0aXRsZSI6IkNvbXBsZXRpb24gRGF0ZSIsInZpc2libGUiOnRydWUsIndpZHRoIjoiMTIwcHgifSx7ImlucHV0VHlwZSI6InRleHRib3giLCJtYW5kYXRvcnkiOmZhbHNlLCJjbGFzc05hbWUiOiJwdi1jb2wtc20iLCJuYW1lIjoicHJpb3JpdHlJZCIsImRhdGEiOiJwcmlvcml0eUlkIiwidGl0bGUiOiJQcmlvcml0eSIsInZpc2libGUiOnRydWUsIndpZHRoIjoiMTAwcHgiLCJjdXN0b21fZmlsdGVyX3R5cGUiOiJudW1iZXIiLCJkYXRhU291cmNlIjoidGFza1ByaW9yaXR5IiwiZmlsdGVyX3R5cGUiOiJzZWxlY3QiLCJzZWxlY3RfdHlwZSI6IiIsInN0eWxlX2NsYXNzIjoiZm9ybS1jb250cm9sIiwic2VsZWN0X3R5cGVfb3B0aW9ucyI6eyJ3aWR0aCI6ImF1dG8iLCJwbGFjZWhvbGRlciI6IlNlbGVjdCIsImFsbG93Q2xlYXIiOnRydWV9LCJzb3J0X2FzIjoibm9uZSIsImZpbHRlcl9yZXNldF9idXR0b25fdGV4dCI6ZmFsc2V9LHsiaW5wdXRUeXBlIjoidGV4dGJveCIsIm1hbmRhdG9yeSI6ZmFsc2UsImNsYXNzTmFtZSI6IiIsIm5hbWUiOiJzdGF0dXMiLCJkYXRhIjoic3RhdHVzIiwidGl0bGUiOiJTdGF0dXMiLCJ2aXNpYmxlIjp0cnVlLCJ3aWR0aCI6IjEyMHB4Iiwib3JkZXJhYmxlIjpmYWxzZSwiY3VzdG9tX2ZpbHRlcl90eXBlIjoibnVtYmVyIiwiZGF0YVNvdXJjZSI6InRhc2tTdGF0dXMiLCJmaWx0ZXJfdHlwZSI6InNlbGVjdCIsInNlbGVjdF90eXBlIjoiIiwic3R5bGVfY2xhc3MiOiJmb3JtLWNvbnRyb2wiLCJzZWxlY3RfdHlwZV9vcHRpb25zIjp7IndpZHRoIjoiYXV0byIsInBsYWNlaG9sZGVyIjoiU2VsZWN0IiwiYWxsb3dDbGVhciI6dHJ1ZX0sInNvcnRfYXMiOiJub25lIiwiZmlsdGVyX3Jlc2V0X2J1dHRvbl90ZXh0IjpmYWxzZX0seyJpbnB1dFR5cGUiOiJ0ZXh0IiwibWFuZGF0b3J5IjpmYWxzZSwiY2xhc3NOYW1lIjoiIiwibmFtZSI6ImNyZWF0ZWRCeVVzZXJJZCIsImRhdGEiOiJjcmVhdGVkQnlVc2VySWQiLCJ0aXRsZSI6IkNyZWF0ZWQgQnkiLCJ2aXNpYmxlIjpmYWxzZSwid2lkdGgiOiIxNTBweCIsIm9yZGVyYWJsZSI6ZmFsc2UsImN1c3RvbV9maWx0ZXJfdHlwZSI6Im51bWJlciIsImRhdGFTb3VyY2UiOiJ1c2VyRGV0YWlscyIsImZpbHRlcl90eXBlIjoic2VsZWN0Iiwic2VsZWN0X3R5cGUiOiIiLCJzdHlsZV9jbGFzcyI6ImZvcm0tY29udHJvbCIsInNlbGVjdF90eXBlX29wdGlvbnMiOnsid2lkdGgiOiJhdXRvIiwicGxhY2Vob2xkZXIiOiJTZWxlY3QiLCJhbGxvd0NsZWFyIjp0cnVlfSwic29ydF9hcyI6Im5vbmUiLCJmaWx0ZXJfcmVzZXRfYnV0dG9uX3RleHQiOmZhbHNlfSx7ImlucHV0VHlwZSI6ImRhdGVwaWNrZXIiLCJtYW5kYXRvcnkiOmZhbHNlLCJjbGFzc05hbWUiOiJwdi1jb2wtc20iLCJuYW1lIjoiZGF0ZUNyZWF0ZWQiLCJkYXRhIjoiZGF0ZUNyZWF0ZWQiLCJ0aXRsZSI6IkRhdGUgQ3JlYXRlZCIsInZpc2libGUiOmZhbHNlLCJ3aWR0aCI6IjEwMHB4In0seyJpbnB1dFR5cGUiOiJ0ZXh0Ym94IiwibWFuZGF0b3J5IjpmYWxzZSwiY2xhc3NOYW1lIjoiIiwibmFtZSI6InRlcnRpYXJ5UmVmSWQiLCJkYXRhIjoidGVydGlhcnlSZWZJZCIsInRpdGxlIjoiSW50YWtlIENhc2UgIyIsInZpc2libGUiOmZhbHNlLCJ3aWR0aCI6IjEyMHB4In0seyJpbnB1dFR5cGUiOiJudW1iZXIiLCJtYW5kYXRvcnkiOmZhbHNlLCJjbGFzc05hbWUiOiIiLCJuYW1lIjoic2Vjb25kYXJ5UmVmSWQiLCJkYXRhIjoic2Vjb25kYXJ5UmVmSWQiLCJ0aXRsZSI6IlZlcnNpb24iLCJ2aXNpYmxlIjpmYWxzZSwid2lkdGgiOiI4MHB4IiwiY3VzdG9tX2ZpbHRlcl90eXBlIjoibnVtYmVyIn0seyJpbnB1dFR5cGUiOiJqYXZhc2NyaXB0IiwibWFuZGF0b3J5IjpmYWxzZSwiY2xhc3NOYW1lIjoicHYtY29sLXh4cyIsIm5hbWUiOiJ0YXNrQWN0aW9uIiwiZGF0YSI6InRhc2tBY3Rpb24iLCJ0aXRsZSI6IkFjdGlvbnMiLCJ2aXNpYmxlIjp0cnVlLCJ3aWR0aCI6IjYwcHgiLCJodG1sQ29kZSI6eyJmdW5jdGlvbiI6eyJhcmd1bWVudHMiOiJyb3csIHR5cGUsIGRhdGEsIG1ldGEiLCJib2R5IjoicmV0dXJuICBcIjxpIGNsYXNzPSdtZCBtZC1wZW5jaWwgZWRpdFRhc2snIHRpdGxlPSdFZGl0JyBhcmlhLWhpZGRlbj0ndHJ1ZSc+PFx1MDAyZmk+IDxpIGNsYXNzPSdtZCBtZC1kZWxldGUgZGVsZXRlVGFzaycgdGl0bGU9J0RlbGV0ZScgYXJpYS1oaWRkZW49J3RydWUnPjxcdTAwMmZpPlwiIn19LCJvcmRlcmFibGUiOmZhbHNlLCJzZWFyY2hhYmxlIjpmYWxzZSwiZGlzYWJsZV95YWRjZiI6dHJ1ZX1dLCAgICAgICAgICAgIHNlY3Rpb25JZDogJyN0YXNrU2VjdGlvbicgICAgICAgIH0gICAgfTs8L3NjcmlwdD4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBGb2xsb3cgdXAgcXVlcnkgU2VjdGlvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1kZWZhdWx0IHNlY3Rpb24taGVhZGVyIHJ4bWFpbi1jb250YWluZXIgcnhtYWluLWNvbnRhaW5lci10b3AiICAgICAgICAgaWQ9InYtZnVxIj4gICAgICAgIDxkaXYgY2xhc3M9InJ4bWFpbi1jb250YWluZXItcm93IHJ4bWFpbi1jb250YWluZXItaGVhZGVyIHBhbmVsLWhlYWRpbmciPiAgICAgICAgICAgIDxoNCBjbGFzcz0icnhtYWluLWNvbnRhaW5lci1oZWFkZXItbGFiZWwiPiAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uLWNhc2UiICAgICAgICAgICAgICAgICAgIGhyZWY9IiNmdXFTZWN0aW9uIiBjbGFzcz0iY29sbGFwc2VkIHNlYy1kaXNwbGF5LXR4dCBzZWN0aW9uVGl0bGUiPiAgICAgICAgICAgICAgICAgICAgRm9sbG93IFVwIFF1ZXJpZXM8L2E+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1oZWFkLWNvbmZpZyBjb25maWd1cmVGaWVsZHMiPiAgICA8YSBocmVmPSIjIiBjbGFzcz0iZHJvcGRvd24tdG9nZ2xlIHB1bGwtcmlnaHQgaWMtc20iICAgICAgIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+PGkgY2xhc3M9Im1kIG1kLWxpc3QiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+PC9hPiAgICA8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUgZmllbGQtY29uZmlnIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJmdXFJbmRleCIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJ0cnVlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IiMiIGRhdGEtaWQ9ImZ1cUluZGV4IiBkYXRhLWluZGV4ID0gIjAiIGRhdGEtc2VjdGlvbi1uYW1lPSJGb2xsb3cgVXAgUXVlcmllcyIgZGF0YS1jbGFzcyA9InB2LWNvbC14eHMiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJmdXFJbmRleCI+IzwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJzZW50VG8iICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iQ29udGFjdGVkIiBkYXRhLWlkPSJzZW50VG8iIGRhdGEtaW5kZXggPSAiMSIgZGF0YS1zZWN0aW9uLW5hbWU9IkZvbGxvdyBVcCBRdWVyaWVzIiBkYXRhLWNsYXNzID0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic2VudFRvIj5Db250YWN0ZWQ8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0ibWV0aG9kSWQiICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iTWV0aG9kIiBkYXRhLWlkPSJtZXRob2RJZCIgZGF0YS1pbmRleCA9ICIyIiBkYXRhLXNlY3Rpb24tbmFtZT0iRm9sbG93IFVwIFF1ZXJpZXMiIGRhdGEtY2xhc3MgPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJtZXRob2RJZCI+TWV0aG9kPC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9InN1YmplY3QiICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iU3ViamVjdCAvIERlc2NyaXB0aW9uIiBkYXRhLWlkPSJzdWJqZWN0IiBkYXRhLWluZGV4ID0gIjMiIGRhdGEtc2VjdGlvbi1uYW1lPSJGb2xsb3cgVXAgUXVlcmllcyIgZGF0YS1jbGFzcyA9InB2LWNvbC14bCIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InN1YmplY3QiPlN1YmplY3QgLyBEZXNjcmlwdGlvbjwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJkYXRlU2VudCIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJEYXRlIENvbnRhY3RlZCIgZGF0YS1pZD0iZGF0ZVNlbnQiIGRhdGEtaW5kZXggPSAiNCIgZGF0YS1zZWN0aW9uLW5hbWU9IkZvbGxvdyBVcCBRdWVyaWVzIiBkYXRhLWNsYXNzID0icHYtY29sLXNtIi8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0ZVNlbnQiPkRhdGUgQ29udGFjdGVkPC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9InNlbnRCeSIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJDb250YWN0ZWQgQnkiIGRhdGEtaWQ9InNlbnRCeSIgZGF0YS1pbmRleCA9ICI1IiBkYXRhLXNlY3Rpb24tbmFtZT0iRm9sbG93IFVwIFF1ZXJpZXMiIGRhdGEtY2xhc3MgPSIiLz4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJzZW50QnkiPkNvbnRhY3RlZCBCeTwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC12aXNpYmxlIGNoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgbm93cmFwIiBkYXRhLWlkPSJjb21tZW50cyIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJDb21tZW50cyIgZGF0YS1pZD0iY29tbWVudHMiIGRhdGEtaW5kZXggPSAiNiIgZGF0YS1zZWN0aW9uLW5hbWU9IkZvbGxvdyBVcCBRdWVyaWVzIiBkYXRhLWNsYXNzID0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY29tbWVudHMiPkNvbW1lbnRzPC9sYWJlbD4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLXZpc2libGUgY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSBub3dyYXAiIGRhdGEtaWQ9ImRhdGVDbG9zZWQiICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iRGF0ZSBDbG9zZWQiIGRhdGEtaWQ9ImRhdGVDbG9zZWQiIGRhdGEtaW5kZXggPSAiNyIgZGF0YS1zZWN0aW9uLW5hbWU9IkZvbGxvdyBVcCBRdWVyaWVzIiBkYXRhLWNsYXNzID0icHYtY29sLXNtIi8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0ZUNsb3NlZCI+RGF0ZSBDbG9zZWQ8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0idGVydGlhcnlSZWZJZCIgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSI+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBkYXRhLXZhbHVlPSJJbnRha2UgQ2FzZSAjIiBkYXRhLWlkPSJ0ZXJ0aWFyeVJlZklkIiBkYXRhLWluZGV4ID0gIjgiIGRhdGEtc2VjdGlvbi1uYW1lPSJGb2xsb3cgVXAgUXVlcmllcyIgZGF0YS1jbGFzcyA9IiIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InRlcnRpYXJ5UmVmSWQiPkludGFrZSBDYXNlICM8L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0ic2Vjb25kYXJ5UmVmSWQiICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgZGF0YS12YWx1ZT0iVmVyc2lvbiIgZGF0YS1pZD0ic2Vjb25kYXJ5UmVmSWQiIGRhdGEtaW5kZXggPSAiOSIgZGF0YS1zZWN0aW9uLW5hbWU9IkZvbGxvdyBVcCBRdWVyaWVzIiBkYXRhLWNsYXNzID0iIi8+ICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic2Vjb25kYXJ5UmVmSWQiPlZlcnNpb248L2xhYmVsPiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtdmlzaWJsZSBjaGVja2JveCBjaGVja2JveC1wcmltYXJ5IG5vd3JhcCIgZGF0YS1pZD0iZnVxQWN0aW9uIiAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIj4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGRhdGEtdmFsdWU9IkFjdGlvbnMiIGRhdGEtaWQ9ImZ1cUFjdGlvbiIgZGF0YS1pbmRleCA9ICIxMCIgZGF0YS1zZWN0aW9uLW5hbWU9IkZvbGxvdyBVcCBRdWVyaWVzIiBkYXRhLWNsYXNzID0icHYtY29sLXh4cyIvPiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImZ1cUFjdGlvbiI+QWN0aW9uczwvbGFiZWw+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZmlsdGVyIGdyaWQtZmlsdGVyIGljLXNtIG0tci01IiAgICAgICB0aXRsZT0iRW5hYmxlL0Rpc2FibGUgRmlsdGVycyIgICAgICAgZGF0YS1zZWN0aW9uLWlkPSIjZnVxU2VjdGlvbiIgZGF0YS1zZWN0aW9uLW5hbWUgPSAiRm9sbG93IFVwIFF1ZXJpZXMiIGRhdGEtZmlsdGVyLWhpZGU9InRydWUiPiAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWZpbHRlciIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0icHVsbC1yaWdodCBncmlkLXJlZnJlc2ggaWMtc20gbS1yLTUiIHRpdGxlPSJSZWZyZXNoIiAgICAgICBkYXRhLXNlY3Rpb24taWQ9IiNmdXFTZWN0aW9uIiBkYXRhLXNlY3Rpb24tbmFtZSA9ICJGb2xsb3cgVXAgUXVlcmllcyI+ICAgICAgICA8aSBjbGFzcz0ibWQgbWQtcmVmcmVzaCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPiAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0icHVsbC1yaWdodCBncmlkLWFkZCBpYy1zbSBtLXItNSIgICAgICAgdGl0bGU9IkFkZCIgZGF0YS1zZWN0aW9uLWlkPSIjZnVxU2VjdGlvbiIgZGF0YS1zZWN0aW9uLW5hbWUgPSAiRm9sbG93IFVwIFF1ZXJpZXMiPiAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFkZCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4gICAgPC9hPjwvc3Bhbj4gICAgICAgICAgICA8L2g0PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGlkPSJmdXFTZWN0aW9uIiBjbGFzcz0icGFuZWwtY29sbGFwc2UgY29sbGFwc2UgcnhtYWluLWNvbnRhaW5lci1jb250ZW50IHB2LWdyaWQtc2VjIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHYtc2VjLXNlcGVyYXRvciBmb3JtLXB2Ij4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB2LWNhc2VsaXN0Ij4gICAgPGRpdiBjbGFzcz0icGFuZWwgbS1iLTAiPiAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBwLTAgbS0wIj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRhVGFibGVzX3Njcm9sbCI+ICAgICAgICAgICAgICAgIDx0YWJsZSBpZD0idGFibGVDb250YWluZXJJZGYyMjYzYWZmLWRlMDMtNGViMC05Mjc3LWU2ZGE1ZjIxYTM2YiIgY2VsbHNwYWNpbmc9IjAiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIGRpc3BsYXkgb3JkZXItY29sdW1uIGxpc3QtdGFibGUgcHYtbGlzdC10YWJsZSBwdi1ncmlkLXRhYmxlIGRpc3BsYXkiPjwvdGFibGU+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+PHNjcmlwdD4gICAgdmFyIHB2aSA9IHB2aSB8fCB7fTsgICAgcHZpLmRhdGFHcmlkT2JqZWN0ID0gcHZpLmRhdGFHcmlkT2JqZWN0IHx8IHt9OyAgICBwdmkuZGF0YUdyaWRPYmplY3RbJ0ZvbGxvdyBVcCBRdWVyaWVzJ10gPSB7ICAgICAgICBncmlkT3B0aW9uczp7ICAgICAgICAgICAgdGFibGVDb250YWluZXJJZDogJ3RhYmxlQ29udGFpbmVySWRmMjI2M2FmZi1kZTAzLTRlYjAtOTI3Ny1lNmRhNWYyMWEzNmInLCAgICAgICAgICAgIGdyaWRIZWFkZXJzOiBbeyJpbnB1dFR5cGUiOiJqYXZhc2NyaXB0IiwibWFuZGF0b3J5Ijp0cnVlLCJjbGFzc05hbWUiOiJwdi1jb2wteHhzIiwibmFtZSI6ImZ1cUluZGV4IiwiZGF0YSI6ImZ1cUluZGV4IiwidGl0bGUiOiIjIiwidmlzaWJsZSI6dHJ1ZSwid2lkdGgiOiI2MHB4Iiwib3JkZXJhYmxlIjpmYWxzZSwic2VhcmNoYWJsZSI6ZmFsc2UsImRpc2FibGVfeWFkY2YiOnRydWUsImh0bWxDb2RlIjp7ImZ1bmN0aW9uIjp7ImFyZ3VtZW50cyI6InJvdyx0eXBlLGRhdGEsbWV0YSIsImJvZHkiOiJyZXR1cm4gKDEgKyBtZXRhLnJvdyArIG1ldGEuc2V0dGluZ3MuX2lEaXNwbGF5U3RhcnQpOyJ9fX0seyJpbnB1dFR5cGUiOiJ0ZXh0Ym94IiwibWFuZGF0b3J5IjpmYWxzZSwiY2xhc3NOYW1lIjoiIiwibmFtZSI6InNlbnRUbyIsImRhdGEiOiJzZW50VG8iLCJ0aXRsZSI6IkNvbnRhY3RlZCIsInZpc2libGUiOnRydWUsIndpZHRoIjoiMjAwcHgifSx7ImlucHV0VHlwZSI6InRleHRib3giLCJtYW5kYXRvcnkiOmZhbHNlLCJjbGFzc05hbWUiOiIiLCJuYW1lIjoibWV0aG9kSWQiLCJkYXRhIjoibWV0aG9kSWQiLCJ0aXRsZSI6Ik1ldGhvZCIsInZpc2libGUiOnRydWUsIndpZHRoIjoiMTUwcHgiLCJvcmRlcmFibGUiOmZhbHNlLCJjdXN0b21fZmlsdGVyX3R5cGUiOiJudW1iZXIiLCJkYXRhU291cmNlIjoibWV0aG9kIiwiZmlsdGVyX3R5cGUiOiJzZWxlY3QiLCJzZWxlY3RfdHlwZSI6IiIsInN0eWxlX2NsYXNzIjoiZm9ybS1jb250cm9sIiwic2VsZWN0X3R5cGVfb3B0aW9ucyI6eyJ3aWR0aCI6ImF1dG8iLCJwbGFjZWhvbGRlciI6IlNlbGVjdCIsImFsbG93Q2xlYXIiOnRydWV9LCJzb3J0X2FzIjoibm9uZSIsImZpbHRlcl9yZXNldF9idXR0b25fdGV4dCI6ZmFsc2V9LHsiaW5wdXRUeXBlIjoic3RyaW5nIiwibWFuZGF0b3J5IjpmYWxzZSwiY2xhc3NOYW1lIjoicHYtY29sLXhsIiwibmFtZSI6InN1YmplY3QiLCJkYXRhIjoic3ViamVjdCIsInRpdGxlIjoiU3ViamVjdCAvIERlc2NyaXB0aW9uIiwidmlzaWJsZSI6dHJ1ZSwid2lkdGgiOiIzMDBweCIsIm9yZGVyYWJsZSI6ZmFsc2UsImFkZGl0aW9uYWxfZm4iOnRydWUsImh0bWxDb2RlIjp7InByZV9yZW5kZXIiOnRydWUsImZ1bmN0aW9uIjp7ImFyZ3VtZW50cyI6InJvdyx0eXBlLGRhdGEsbWV0YSIsImJvZHkiOiJyZXR1cm4gcHZpLm1hbmFnZUZ1cXMuYXBwZW5kRW1haWxJY29uKGRhdGEpOyJ9fX0seyJpbnB1dFR5cGUiOiJkYXRlcGlja2VyIiwibWFuZGF0b3J5IjpmYWxzZSwiY2xhc3NOYW1lIjoicHYtY29sLXNtIiwibmFtZSI6ImRhdGVTZW50IiwiZGF0YSI6ImRhdGVTZW50IiwidGl0bGUiOiJEYXRlIENvbnRhY3RlZCIsInZpc2libGUiOnRydWUsIndpZHRoIjoiMTAwcHgifSx7ImlucHV0VHlwZSI6InRleHRib3giLCJtYW5kYXRvcnkiOmZhbHNlLCJjbGFzc05hbWUiOiIiLCJuYW1lIjoic2VudEJ5IiwiZGF0YSI6InNlbnRCeSIsInRpdGxlIjoiQ29udGFjdGVkIEJ5IiwidmlzaWJsZSI6dHJ1ZSwid2lkdGgiOiIyMDBweCJ9LHsiaW5wdXRUeXBlIjoic3RyaW5nIiwibWFuZGF0b3J5IjpmYWxzZSwiY2xhc3NOYW1lIjoiIiwibmFtZSI6ImNvbW1lbnRzIiwiZGF0YSI6ImNvbW1lbnRzIiwidGl0bGUiOiJDb21tZW50cyIsInZpc2libGUiOmZhbHNlLCJ3aWR0aCI6IjI1MHB4Iiwib3JkZXJhYmxlIjpmYWxzZX0seyJpbnB1dFR5cGUiOiJkYXRlcGlja2VyIiwibWFuZGF0b3J5IjpmYWxzZSwiY2xhc3NOYW1lIjoicHYtY29sLXNtIiwibmFtZSI6ImRhdGVDbG9zZWQiLCJkYXRhIjoiZGF0ZUNsb3NlZCIsInRpdGxlIjoiRGF0ZSBDbG9zZWQiLCJ2aXNpYmxlIjpmYWxzZSwid2lkdGgiOiIxMDBweCJ9LHsiaW5wdXRUeXBlIjoidGV4dGJveCIsIm1hbmRhdG9yeSI6ZmFsc2UsImNsYXNzTmFtZSI6IiIsIm5hbWUiOiJ0ZXJ0aWFyeVJlZklkIiwiZGF0YSI6InRlcnRpYXJ5UmVmSWQiLCJ0aXRsZSI6IkludGFrZSBDYXNlICMiLCJ2aXNpYmxlIjpmYWxzZSwid2lkdGgiOiIxMjBweCJ9LHsiaW5wdXRUeXBlIjoibnVtYmVyIiwibWFuZGF0b3J5IjpmYWxzZSwiY2xhc3NOYW1lIjoiIiwibmFtZSI6InNlY29uZGFyeVJlZklkIiwiZGF0YSI6InNlY29uZGFyeVJlZklkIiwidGl0bGUiOiJWZXJzaW9uIiwidmlzaWJsZSI6ZmFsc2UsIndpZHRoIjoiMTIwcHgiLCJjdXN0b21fZmlsdGVyX3R5cGUiOiJudW1iZXIifSx7ImlucHV0VHlwZSI6ImphdmFzY3JpcHQiLCJtYW5kYXRvcnkiOmZhbHNlLCJjbGFzc05hbWUiOiJwdi1jb2wteHhzIiwibmFtZSI6ImZ1cUFjdGlvbiIsImRhdGEiOiJmdXFBY3Rpb24iLCJ0aXRsZSI6IkFjdGlvbnMiLCJ2aXNpYmxlIjp0cnVlLCJ3aWR0aCI6IjYwcHgiLCJodG1sQ29kZSI6eyJmdW5jdGlvbiI6eyJhcmd1bWVudHMiOiJyb3csIHR5cGUsIGRhdGEsIG1ldGEiLCJib2R5IjoicmV0dXJuICBcIjxpIGNsYXNzPSdtZCBtZC1wZW5jaWwgZWRpdEZ1cScgdGl0bGUgPSdFZGl0JyBhcmlhLWhpZGRlbj0ndHJ1ZSc+PFx1MDAyZmk+IDxpIGNsYXNzPSdtZCBtZC1kZWxldGUgZGVsZXRlRnVxJyB0aXRsZSA9J0RlbGV0ZScgYXJpYS1oaWRkZW49J3RydWUnPjxcdTAwMmZpPlwiIn19LCJvcmRlcmFibGUiOmZhbHNlLCJzZWFyY2hhYmxlIjpmYWxzZSwiZGlzYWJsZV95YWRjZiI6dHJ1ZX1dLCAgICAgICAgICAgIHNlY3Rpb25JZDogJyNmdXFTZWN0aW9uJyAgICAgICAgfSAgICB9Ozwvc2NyaXB0PiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Fzc2V0cy92ZW5kb3IvZG9jdW1lbnRWaWV3ZXIvYXR0YWNobWVudFZpZXdlci1tYW5pZmVzdC1kMjFjZDVlZjlhZmM5ZDIzYjhlMzE0NmM3ODMyYmIwOS5jc3MiLz4KCjxkaXYgY2xhc3M9InBhbmUgdWktbGF5b3V0LWVhc3QgaW52aXNpYmxlIj4KICAgIDxkaXYgY2xhc3M9ImF0dGNobWVudC1hY2NvcmRpYW4iPgogICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWdyb3VwIiBpZD0iYWNjb3JkaW9uLWF0dGFjaG1lbnQiPgogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InBhbmVsLXRpdGxlIj5BdHRhY2htZW50cwogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIGFsd2F5cy12aXNpYmxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJleHBhbmQtYWxsIGljLXNtICAiIHRpdGxlPSJFeHBhbmQgQWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYWRkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiZuYnNwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvY2FzZUVudHJ5L2Rvd25sb2FkQWxsQ2FzZUF0dGFjaG1lbnQvMjQ0NzAxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiBkb3dubG9hZC1hbGwgaWQtYWRkZWQgaWMtc20gICIgdGl0bGU9IkRvd25sb2FkIEFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWRvd25sb2FkLW11bHRpcGxlIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvaDQ+CgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSBpbm5lci10YWJsZSBjYXJkLWJveCBhdHRhY2htZW50UGFuZWxEaXYiPgogICAgICAgICAgICAgICAgICAgICAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYXR0YWNobWVudFZpZXdlckhlYWx0aFVybCIgdmFsdWU9Imh0dHA6Ly8xMC4xMDAuMjIuMjQwOjMwMDAiIGlkPSJhdHRhY2htZW50Vmlld2VySGVhbHRoVXJsIiAvPgoKICAgIDxkaXYgY2xhc3M9InBhbmVsIHBhbmVsLWRlZmF1bHQgYWN0dWFsVmlld2VyQmFyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtaGVhZGluZyBhY3R1YWxWaWV3ZXJQYW5lbEhlYWRlciBhdHRhY2htZW50LXBhbmVsLWhlYWRpbmciPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPSJhdHRhY2htZW50MSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9ImF0dGFjaG1lbnQxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iI2F0dGFjaG1lbnQxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNvbGxhcHNlZCBhdHRhY2htZW50RmlsZSBsYmwtZWxpcHNpcyBtLTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZpbGVOYW1lPSJDOiYjOTI7UFZJblRha2UmIzkyOzQuNi4wLjMmIzkyO3NjcmlwdHMmIzkyO1NjcmlwdDFfQ2FzZUNyZWF0aW9uJiM5MjtjaW9tc19zY2FubmVkLnBkZiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3RvcmFnZUlkPSI4NzM5NCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJvdmVyZmxvdzogaGlkZGVuO3doaXRlLXNwYWNlOiBub3dyYXA7dGV4dC1vdmVyZmxvdzogZWxsaXBzaXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iQXV0b3BzeSBSZXBvcnQgKEM6JiM5MjtQVkluVGFrZSYjOTI7NC42LjAuMyYjOTI7c2NyaXB0cyYjOTI7U2NyaXB0MV9DYXNlQ3JlYXRpb24mIzkyO2Npb21zX3NjYW5uZWQucGRmKSAtIEluaXRpYWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkF1dG9wc3kgUmVwb3J0IChDOiYjOTI7UFZJblRha2UmIzkyOzQuNi4wLjMmIzkyO3NjcmlwdHMmIzkyO1NjcmlwdDFfQ2FzZUNyZWF0aW9uJiM5MjtjaW9tc19zY2FubmVkLnBkZikgLSBJbml0aWFsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LXN1YmhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyBzaG93LWhlYWQtaWNvbi1hbHdheXMgYWx3YXlzLXZpc2libGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2F0dGFjaG1lbnQxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJlZGFjdEF0dGFjaG1lbnRMaW5rIHJlZGFjdEF0dGFjaG1lbnQtODczOTQgaGlkZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9ImF0dGFjaG1lbnQxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1maWxlTmFtZT0iQzomIzkyO1BWSW5UYWtlJiM5Mjs0LjYuMC4zJiM5MjtzY3JpcHRzJiM5MjtTY3JpcHQxX0Nhc2VDcmVhdGlvbiYjOTI7Y2lvbXNfc2Nhbm5lZC5wZGYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXN0b3JhZ2VJZD0iODczOTQiIHRpdGxlPSJSZWRhY3RlZCBWZXJzaW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaWMtcmVkYWN0IGljLXNtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFscGhhLXItYm94LW91dGxpbmUiID48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImF0dGFjaG1lbnRSb3cgaWMtYXR0YWNobWVudC1uZXctdGFiIHNpbmdsZUF0dGFjaG1lbnRMYXVuY2giCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZpbGVOYW1lPSJDOiYjOTI7UFZJblRha2UmIzkyOzQuNi4wLjMmIzkyO3NjcmlwdHMmIzkyO1NjcmlwdDFfQ2FzZUNyZWF0aW9uJiM5MjtjaW9tc19zY2FubmVkLnBkZiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3RvcmFnZUlkPSI4NzM5NCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9ImF0dGFjaG1lbnQxIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtbGF1bmNoIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJFeHBvcnQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBpZD0iYXR0YWNobWVudDEiIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBhY3R1YWxWaWV3ZXJBdHRhY2htZW50RGl2Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkiIHN0eWxlPSJoZWlnaHQ6IDY3MHB4OyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0idmlld2VyIiBzdHlsZT0iaGVpZ2h0OiAxMDAlOyI+PGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvLi4vYXNzZXRzL3ZlbmRvci9zcGlubmVyLmdpZiIvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBhY3R1YWxWaWV3ZXJCYXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIGFjdHVhbFZpZXdlclBhbmVsSGVhZGVyIGF0dGFjaG1lbnQtcGFuZWwtaGVhZGluZyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9ImF0dGFjaG1lbnQyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYXR0YWNobWVudDIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjYXR0YWNobWVudDIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGF0dGFjaG1lbnRGaWxlIGxibC1lbGlwc2lzIG0tMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmlsZU5hbWU9IkM6JiM5MjtQVkluVGFrZSYjOTI7NC42LjAuMyYjOTI7c2NyaXB0cyYjOTI7U2NyaXB0MV9DYXNlQ3JlYXRpb24mIzkyO2Npb21zX3NjYW5uZWQucGRmIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zdG9yYWdlSWQ9Ijg3Mzk1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im92ZXJmbG93OiBoaWRkZW47d2hpdGUtc3BhY2U6IG5vd3JhcDt0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJBZGRpdGlvbmFsIFBNREEgUjMgZmllbGRzIChDOiYjOTI7UFZJblRha2UmIzkyOzQuNi4wLjMmIzkyO3NjcmlwdHMmIzkyO1NjcmlwdDFfQ2FzZUNyZWF0aW9uJiM5MjtjaW9tc19zY2FubmVkLnBkZikgLSBJbml0aWFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5BZGRpdGlvbmFsIFBNREEgUjMgZmllbGRzIChDOiYjOTI7UFZJblRha2UmIzkyOzQuNi4wLjMmIzkyO3NjcmlwdHMmIzkyO1NjcmlwdDFfQ2FzZUNyZWF0aW9uJiM5MjtjaW9tc19zY2FubmVkLnBkZikgLSBJbml0aWFsPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InB2LXN1YmhlYWQtY29uZmlnIGNvbmZpZ3VyZUZpZWxkcyBzaG93LWhlYWQtaWNvbi1hbHdheXMgYWx3YXlzLXZpc2libGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI2F0dGFjaG1lbnQyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJlZGFjdEF0dGFjaG1lbnRMaW5rIHJlZGFjdEF0dGFjaG1lbnQtODczOTUgaGlkZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9ImF0dGFjaG1lbnQyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1maWxlTmFtZT0iQzomIzkyO1BWSW5UYWtlJiM5Mjs0LjYuMC4zJiM5MjtzY3JpcHRzJiM5MjtTY3JpcHQxX0Nhc2VDcmVhdGlvbiYjOTI7Y2lvbXNfc2Nhbm5lZC5wZGYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXN0b3JhZ2VJZD0iODczOTUiIHRpdGxlPSJSZWRhY3RlZCBWZXJzaW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtaWMtcmVkYWN0IGljLXNtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWFscGhhLXItYm94LW91dGxpbmUiID48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImF0dGFjaG1lbnRSb3cgaWMtYXR0YWNobWVudC1uZXctdGFiIHNpbmdsZUF0dGFjaG1lbnRMYXVuY2giCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZpbGVOYW1lPSJDOiYjOTI7UFZJblRha2UmIzkyOzQuNi4wLjMmIzkyO3NjcmlwdHMmIzkyO1NjcmlwdDFfQ2FzZUNyZWF0aW9uJiM5MjtjaW9tc19zY2FubmVkLnBkZiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3RvcmFnZUlkPSI4NzM5NSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9ImF0dGFjaG1lbnQyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtbGF1bmNoIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJFeHBvcnQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgPGRpdiBpZD0iYXR0YWNobWVudDIiIGNsYXNzPSJwYW5lbC1jb2xsYXBzZSBjb2xsYXBzZSBhY3R1YWxWaWV3ZXJBdHRhY2htZW50RGl2Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkiIHN0eWxlPSJoZWlnaHQ6IDY3MHB4OyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0idmlld2VyIiBzdHlsZT0iaGVpZ2h0OiAxMDAlOyI+PGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvLi4vYXNzZXRzL3ZlbmRvci9zcGlubmVyLmdpZiIvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0icGFuZWwgcGFuZWwtZGVmYXVsdCBhY3R1YWxWaWV3ZXJCYXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIGFjdHVhbFZpZXdlclBhbmVsSGVhZGVyIGF0dGFjaG1lbnQtcGFuZWwtaGVhZGluZyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhbmVsLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9ImF0dGFjaG1lbnQzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0iYXR0YWNobWVudDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIjYXR0YWNobWVudDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY29sbGFwc2VkIGF0dGFjaG1lbnRGaWxlIGxibC1lbGlwc2lzIG0tMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmlsZU5hbWU9IkM6JiM5MjtQVkluVGFrZSYjOTI7NC42LjAuMyYjOTI7c2NyaXB0cyYjOTI7U2NyaXB0MV9DYXNlQ3JlYXRpb24mIzkyO2Npb21zX3NjYW5uZWQucGRmIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zdG9yYWdlSWQ9Ijg3Mzk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im92ZXJmbG93OiBoaWRkZW47d2hpdGUtc3BhY2U6IG5vd3JhcDt0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJDaGVzdCBYLXJheSAoQzomIzkyO1BWSW5UYWtlJiM5Mjs0LjYuMC4zJiM5MjtzY3JpcHRzJiM5MjtTY3JpcHQxX0Nhc2VDcmVhdGlvbiYjOTI7Y2lvbXNfc2Nhbm5lZC5wZGYpIC0gSW5pdGlhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q2hlc3QgWC1yYXkgKEM6JiM5MjtQVkluVGFrZSYjOTI7NC42LjAuMyYjOTI7c2NyaXB0cyYjOTI7U2NyaXB0MV9DYXNlQ3JlYXRpb24mIzkyO2Npb21zX3NjYW5uZWQucGRmKSAtIEluaXRpYWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHYtc3ViaGVhZC1jb25maWcgY29uZmlndXJlRmllbGRzIHNob3ctaGVhZC1pY29uLWFsd2F5cyBhbHdheXMtdmlzaWJsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjYXR0YWNobWVudDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icmVkYWN0QXR0YWNobWVudExpbmsgcmVkYWN0QXR0YWNobWVudC04NzM5NiBoaWRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZD0iYXR0YWNobWVudDMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZpbGVOYW1lPSJDOiYjOTI7UFZJblRha2UmIzkyOzQuNi4wLjMmIzkyO3NjcmlwdHMmIzkyO1NjcmlwdDFfQ2FzZUNyZWF0aW9uJiM5MjtjaW9tc19zY2FubmVkLnBkZiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3RvcmFnZUlkPSI4NzM5NiIgdGl0bGU9IlJlZGFjdGVkIFZlcnNpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwdi1pYy1yZWRhY3QgaWMtc20iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtYWxwaGEtci1ib3gtb3V0bGluZSIgPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYXR0YWNobWVudFJvdyBpYy1hdHRhY2htZW50LW5ldy10YWIgc2luZ2xlQXR0YWNobWVudExhdW5jaCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmlsZU5hbWU9IkM6JiM5MjtQVkluVGFrZSYjOTI7NC42LjAuMyYjOTI7c2NyaXB0cyYjOTI7U2NyaXB0MV9DYXNlQ3JlYXRpb24mIzkyO2Npb21zX3NjYW5uZWQucGRmIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zdG9yYWdlSWQ9Ijg3Mzk2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZD0iYXR0YWNobWVudDMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1sYXVuY2giCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkV4cG9ydCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8ZGl2IGlkPSJhdHRhY2htZW50MyIgY2xhc3M9InBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlIGFjdHVhbFZpZXdlckF0dGFjaG1lbnREaXYiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFuZWwtYm9keSIgc3R5bGU9ImhlaWdodDogNjcwcHg7Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJ2aWV3ZXIiIHN0eWxlPSJoZWlnaHQ6IDEwMCU7Ij48aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii8uLi9hc3NldHMvdmVuZG9yL3NwaW5uZXIuZ2lmIi8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8L2Rpdj4KCgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSB3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQgaGlkZSIgaWQ9ImVkaXRGVVEiPkVkaXQgRlVRPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0IGhpZGUiIGlkPSJkZWxldGVGVVEiPkRlbGV0ZSBGVVE8L2J1dHRvbj4KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyZml4Ij48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCjxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJmaXhlZC1wYWdlLWJvdCBmdWxsY2FzZS1wYWdlLWJvdCI+CiAgICAgICAgPGRpdiBjbGFzcz0icGFnZS1ib3QtbHQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLWRlc3RpbmF0aW9uVVJMPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3VibWl0QnRuIGJ0biBidG4td2FybmluZyBidG4tcm91bmRlZCB3LW1kIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCBtLWItNSBtYXJnLXRvcCBidG4tY3JlYXRlICI+VXBkYXRlPC9idXR0b24+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InB1bGwtcmlnaHQgcGFnZS1ib3QtcnQiPgogICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgZGF0YS1iYWNrZHJvcD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIHB2LWJ0bi1kYXJrLWdyZXkgYnRuLXJvdW5kZWQgdy1tZCB3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQgbS1iLTUgYnRuLWJhY2sgbWFyZy10b3AiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNhcmV0LWxlZnQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+IEJhY2sKICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBkYXRhLWRhc2hib2FyZHVybD0iaHR0cDovLzEwLjEwMC4yMi4yNDM6ODA4MS9kYXNoYm9hcmQvaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBwdi1idG4tZ3JleSBidG4tcm91bmRlZCB3LW1kIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCBtLWItNSBtYXJnLXRvcCBidG4tY2FuY2VsIGhpZGUiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXRpbWVzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiBDYW5jZWwKICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYW5jZWxCdG5EaXZDbGFzcyBoaWRlIj48ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNsZWFyZml4Ij48L2Rpdj48YnI+PGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1zbSBidG4td2hpdGUgeWVzIj5PazwvYT4gPGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1zbSBidG4tZGFuZ2VyIGNhbmNlbCI+Q2FuY2VsPC9hPjwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmFja0J0bkRpdkNsYXNzIGhpZGUiPjxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2xlYXJmaXgiPjwvZGl2Pjxicj48YQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXNtIGJ0bi13aGl0ZSB5ZXMiPlllczwvYT4gPGEKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1zbSBidG4td2hpdGUgbm8iPk5vPC9hPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tc20gYnRuLWRhbmdlciBjYW5jZWwiPkNhbmNlbDwvYT48L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Indhcm5pbmdUZW1wbGF0ZUNsYXNzIGhpZGUiPjxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2xlYXJmaXgiPjwvZGl2Pjxicj48YQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXNtIGNhbmNlbCBidG4tc3VjY2VzcyB5ZXMiPk9rPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIGVuZCBjb250YWluZXIgLS0+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLSBlbmQgY29udGVudCAtLT4KICAgICAgICA8IS0tIEZPT1RFUiAtLT4KICAgICAgICA8IS0tIDxmb290ZXIgY2xhc3M9ImZvb3RlciB0ZXh0LXJpZ2h0Ij4KICAgICAgICAgICAgICAgMjAxNiDCqSBSeExvZ2l4LgogICAgICAgICAgICAgICA8L2Zvb3Rlcj4gLS0+CiAgICAgICAgPCEtLSBFbmQgRk9PVEVSIC0tPgogICAgPC9kaXY+CiAgICA8IS0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IC0tPgogICAgPCEtLSBFbmQgUmlnaHQgY29udGVudCBoZXJlIC0tPgogICAgPCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAtLT4KPC9kaXY+CjxkaXYgaWQ9InRlc3RUZW1wbGF0ZS0yIiBjbGFzcz0iaGlkZSIgZGF0YS10YWJsZT0idHJ1ZSI+CiAgICAKCgo8ZGl2IGNsYXNzPSJyb3cgcHYtc2VjdGlvbiIgZGF0YS10ZW1wbGF0ZUlkPSJ0ZXN0VGVtcGxhdGUiCiAgICAgY2xhc3M9InBhbmVsLWNvbGxhcHNlIHJ4bWFpbi1jb250YWluZXItY29udGVudCByeG1haW4tY29udGFpbmVyLXNob3cgY29sbGFwc2UgcHYtc2VjdGlvbiIKICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+CiAgICA8dGFibGUgY2xhc3M9InRhYmxlIHB2LWxhYnRlc3QtZ3JpZC1saXN0dmlldyB0YWJsZS1zdHJpcGVkIHB2LWlubmVyLXRhYmxlIG0tYi0wIGhpZGUiIGRhdGEtdGVtcGxhdGVJZD0iMiI+CiAgICAgICAgPHRoZWFkPgogICAgICAgIDx0cj4KICAgICAgICAgICAgPHRoIGNsYXNzPSJudW0tY29sIj4jPC90aD4KICAgICAgICAgICAgPHRoIGNsYXNzPSJsdC1jb2wiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyIgdGl0bGU9IlRlc3QgTmFtZSI+VGVzdCBOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1sb25nLWFycm93LWRvd24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhYnVsYXI9InRydWUiIGRhdGEtdGFyZ2V0PSJwdi1sYWItdGVzdC1yb3ciIGRhdGEtaW5zZXJ0PSJwdmlUZXN0UGFuZWwiIGNsYXNzPSJwdi1pYyBhZGRUZXN0SW5UYWJsZSBidG4tYWRkLXBhbmVsIGVkaXQtbG9jayIgdGl0bGU9IkFkZCBOZXcgVGVzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWZsYXNrIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PHN1cD4rPC9zdXA+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiIHRpdGxlPSJMb3ctSGlnaCI+TG93LUhpZ2ggfCBVbml0PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3RoPgogICAgICAgICAgICA8dGggY2xhc3M9InJ0LWNvbCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0yIHB2LWxhYnRlc3QtY29sLWRhdGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiIHRpdGxlPSJUZXN0IERhdGUiPlRlc3QgRGF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBkYXRhLXRhcmdldD0iIiBkYXRhLWluc2VydD0iIiB0aXRsZT0iQWRkIFRlc3QgRGF0ZSIgY2xhc3M9InB2LWljIGFkZFJlcG9ydEluVGFibGUgZWRpdC1sb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2FsZW5kYXItcGx1cy1vIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiA8aSBjbGFzcz0iZmEgZmEtbG9uZy1hcnJvdy1kb3duIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiIHRpdGxlPSJUZXN0IFJlc3VsdCI+VGVzdCBSZXN1bHQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIGxibC1lbGlwc2lzIiB0aXRsZT0iQ29tbWVudHMiPkNvbW1lbnRzPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwdWxsLWxlZnQiPjxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCBsYmwtZWxpcHNpcyIgdGl0bGU9Ik1vcmUgSW5mbyI+TW9yZSBJbmZvPC9sYWJlbD48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L3RoPgogICAgICAgIDwvdHI+CiAgICAgICAgPC90aGVhZD4KICAgICAgICA8dGJvZHkgY2xhc3M9InB2LWRyYWdnYWJsZS1saXN0IHVpLXNvcnRhYmxlIiBpZD0idGVzdFRhYmxlU2VjdGlvbiI+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAoKCgo8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi0wIj4KICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPgogICAgICAgIAogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+CiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4KICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ubmFtZS5yZWFjdGlvbkNvZGVkIiBjbGFzcz0nY29sLW1kLTcgICB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0TmFtZSc+CiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IldpdGggaHlkcm9jZXBoYWx1cywgc3BpbmEgYmlmaWRhLCBjZXJ2aWNhbCByZWdpb24iIG1heGxlbmd0aD0iMjUwIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtYnJvd3Nlci12YWx1ZT0iV2l0aCBoeWRyb2NlcGhhbHVzLCBzcGluYSBiaWZpZGEsIGNlcnZpY2FsIHJlZ2lvbiIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLWZpZWxkSWQ9InRlc3ROYW1lIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5hbWUubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDQ3OTkzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9IndpdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJ3aXQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIxNiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0uaW50ZXJuYWxSb3dJZCIgLz4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIgogICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giPjwvaT4KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1swXS5kZWxldGVkIHZhbHVlPWZhbHNlPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4KICAgICAgICAgICAgCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLm5vcm1hbExvd0hpZ2giIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ubm9ybWFsTG93SGlnaCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5ub3JtYWxMb3ciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5ub3JtYWxIaWdoIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnVuaXQuaWQiIGNsYXNzPSIgdGVzdFVuaXQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC03ICAiPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnVuaXQuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC90ZD4KCiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPgogICAgICAgICAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5kYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0uaW50ZXJuYWxSb3dJZCIgLz4KPC9kaXY+CjwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0ucmVzdWx0LnZhbHVlIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5yZXN1bHQuaWQiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5jb21tZW50cyIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RDb21tZW50cyAgIj4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdENvbW1lbnRzIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMF0ucmVwb3J0c1swXS5jb21tZW50cyIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzBdLnJlcG9ydHNbMF0ubW9yZUluZm8iIGNsYXNzPSdjb2wtc20tMSAgICAgdGVzdE1vcmVJbmZvJz4KICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLm1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1swXS5yZXBvcnRzWzBdLmRlbGV0ZWQgdmFsdWU9PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXJlcG9ydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHJlcG9ydCIgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBkZWwtdGVzdC1yZXBvcnQgZWRpdC1sb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFJlcG9ydEljb24gXzAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAoKICAgIDwvdGQ+CjwvdHI+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgoKCjx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTEiPgogICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4KICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImRlbC10ZXN0IGhpZGUiPgogICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgdGVzdCIgY2xhc3M9InB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gZWRpdC1sb2NrIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxUZXN0SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPC90ZD4KICAgIDx0ZCBjbGFzcz0idGVzdE5hbWUiPgogICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4KICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMV0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iQmxvY2tlZCB0ZWFyIGR1Y3QgY29uZ2VuaXRhbCIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJCbG9ja2VkIHRlYXIgZHVjdCBjb25nZW5pdGFsIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMV0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMDUyNzYiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iYmxvIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9ImJsbyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMV0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjU1IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5pbnRlcm5hbFJvd0lkIiAvPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzFdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPgogICAgICAgICAgICAKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5vcm1hbExvd0hpZ2giIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Tm9ybWFsTG93SGlnaCAgIj4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdE5vcm1hbExvd0hpZ2giPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIG5vcm1hbEhpZ2hMb3dWYWx1ZSAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMV0ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5ub3JtYWxMb3dIaWdoIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxXS5ub3JtYWxMb3ciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLm5vcm1hbEhpZ2giIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0udW5pdC5pZCIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L3RkPgoKICAgIDx0ZCBjbGFzcz0idGVzdFJlcG9ydFJvdyB0ZXN0UmVwb3J0cyI+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0ZXN0LWRhdGUtcm93IiAgZGF0YS1yZXBvcnRObz0iMCI+CiAgICAgICAgICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0ucmVwb3J0c1sxXS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAoKPGRpdiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiCiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxXS5yZXBvcnRzWzFdLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0ucmVwb3J0c1sxXS5kYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU1NLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4KICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0ucmVwb3J0c1sxXS5pbnRlcm5hbFJvd0lkIiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0ucmVzdWx0LnZhbHVlIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgdGVzdFJlc3VsdCAgIj4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFJlc3VsdCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgdGVzdFJlc3VsdElucHV0ICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxXS5yZXBvcnRzWzFdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0ucmVwb3J0c1sxXS5yZXN1bHQudmFsdWUiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0ucmVzdWx0LmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5yZXBvcnRzWzFdLnJlc3VsdC5pZCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5yZXBvcnRzWzFdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMV0ucmVwb3J0c1sxXS5jb21tZW50cyIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdENvbW1lbnRzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxXS5yZXBvcnRzWzFdLmNvbW1lbnRzIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMV0ucmVwb3J0c1sxXS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0ubW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzFdLnJlcG9ydHNbMV0uZGVsZXRlZCB2YWx1ZT0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiBfMSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCgogICAgPC90ZD4KPC90cj4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCgoKPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tMiI+CiAgICA8dGQgY2xhc3M9InNlcmlhbE5vIj4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCByb3ctY291bnQiPgogICAgICAgICAgICAgICAgMgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyB0ZXN0IiBjbGFzcz0icHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8L3RkPgogICAgPHRkIGNsYXNzPSJ0ZXN0TmFtZSI+CiAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPgogICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS5uYW1lLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSJJcm9uIGJpbmRpbmcgY2FwYWNpdHkgdG90YWwgbG93IiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9Iklyb24gYmluZGluZyBjYXBhY2l0eSB0b3RhbCBsb3ciIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDAyMjk2NiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ubmFtZS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSJpcm8iIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iaXJvIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNTgiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMl0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSB0ZXN0VW5pdHMgdGVzdC1oYXMtbmFtZSI+CiAgICAgICAgICAgIAoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5vcm1hbExvd0hpZ2giIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzJdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0ubm9ybWFsSGlnaCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ubm9ybWFsSGlnaCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0udW5pdC5pZCIgZGF0YS1mcm9tPSJsYWJUZXN0VW5pdHMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1zb3VyY2U9ImxhYi10ZXN0LXVuaXQtbGlzdCIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS51bml0LmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvdGQ+CgogICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4KICAgICAgICAgICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPgogICAgCgo8ZGl2IGNsYXNzPSIiPgogICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIKICAgICAgICAgZGF0YS1pZD0idGVzdERhdGUiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzJdLnJlcG9ydHNbMl0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLmludGVybmFsUm93SWQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzJdLnJlcG9ydHNbMl0ucmVzdWx0LnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0UmVzdWx0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLnJlc3VsdC52YWx1ZSIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLnJlcG9ydHNbMl0ucmVzdWx0LmlkIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLnJlcG9ydHNbMl0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzJdLnJlcG9ydHNbMl0uY29tbWVudHMiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1syXS5yZXBvcnRzWzJdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5tb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIAo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMl0ucmVwb3J0c1syXS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIF8yIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKCiAgICA8L3RkPgo8L3RyPgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAoKCgo8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi0zIj4KICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPgogICAgICAgIAogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+CiAgICAgICAgICAgICAgICAzCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4KICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ubmFtZS5yZWFjdGlvbkNvZGVkIiBjbGFzcz0nY29sLW1kLTcgICB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0TmFtZSc+CiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IlRoeXJlb3N0YXRpYyB0aGVyYXB5IiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IlRoeXJlb3N0YXRpYyB0aGVyYXB5IiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbM10ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwNjUzNTkiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0idGh5IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9InRoeSIgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbM10uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjYxIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5pbnRlcm5hbFJvd0lkIiAvPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzNdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPgogICAgICAgICAgICAKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5vcm1hbExvd0hpZ2giIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Tm9ybWFsTG93SGlnaCAgIj4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdE5vcm1hbExvd0hpZ2giPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIG5vcm1hbEhpZ2hMb3dWYWx1ZSAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbM10ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5ub3JtYWxMb3dIaWdoIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1szXS5ub3JtYWxMb3ciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLm5vcm1hbEhpZ2giIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbM10udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbM10udW5pdC5pZCIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L3RkPgoKICAgIDx0ZCBjbGFzcz0idGVzdFJlcG9ydFJvdyB0ZXN0UmVwb3J0cyI+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0ZXN0LWRhdGUtcm93IiAgZGF0YS1yZXBvcnRObz0iMCI+CiAgICAgICAgICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAoKPGRpdiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiCiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5kYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU1NLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4KICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLnJlcG9ydHNbM10uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5pbnRlcm5hbFJvd0lkIiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzNdLnJlcG9ydHNbM10ucmVzdWx0LnZhbHVlIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgdGVzdFJlc3VsdCAgIj4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFJlc3VsdCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgdGVzdFJlc3VsdElucHV0ICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5yZXN1bHQudmFsdWUiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLnJlcG9ydHNbM10ucmVzdWx0LmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLnJlc3VsdC5pZCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5jb21tZW50cyIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdENvbW1lbnRzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1szXS5yZXBvcnRzWzNdLmNvbW1lbnRzIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbM10ucmVwb3J0c1szXS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzNdLnJlcG9ydHNbM10ubW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzNdLnJlcG9ydHNbM10ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzNdLnJlcG9ydHNbM10uZGVsZXRlZCB2YWx1ZT0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiBfMyIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCgogICAgPC90ZD4KPC90cj4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCgoKPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tNCI+CiAgICA8dGQgY2xhc3M9InNlcmlhbE5vIj4KICAgICAgICAKICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5ldy1pbmRleCBiYWRnZS1pbmRleCByb3ctY291bnQiPgogICAgICAgICAgICAgICAgNAogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyB0ZXN0IiBjbGFzcz0icHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8L3RkPgogICAgPHRkIGNsYXNzPSJ0ZXN0TmFtZSI+CiAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPgogICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s0XS5uYW1lLnJlYWN0aW9uQ29kZWQiIHZhbHVlPSJOZW9pbnRpbWFsIGh5cGVycGxhc2lhIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9Ik5lb2ludGltYWwgaHlwZXJwbGFzaWEiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s0XS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA3Njg1MSIgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ubmFtZS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSJuZW8iIGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0ibmVvIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s0XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNjQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbNF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSB0ZXN0VW5pdHMgdGVzdC1oYXMtbmFtZSI+CiAgICAgICAgICAgIAoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s0XS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLm5vcm1hbExvd0hpZ2giIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzRdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ubm9ybWFsSGlnaCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ubm9ybWFsSGlnaCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0udW5pdC5pZCIgZGF0YS1mcm9tPSJsYWJUZXN0VW5pdHMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1zb3VyY2U9ImxhYi10ZXN0LXVuaXQtbGlzdCIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS51bml0LmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvdGQ+CgogICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4KICAgICAgICAgICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS5yZXBvcnRzWzRdLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPgogICAgCgo8ZGl2IGNsYXNzPSIiPgogICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIKICAgICAgICAgZGF0YS1pZD0idGVzdERhdGUiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzRdLnJlcG9ydHNbNF0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS5yZXBvcnRzWzRdLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS5yZXBvcnRzWzRdLmludGVybmFsUm93SWQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzRdLnJlcG9ydHNbNF0ucmVzdWx0LnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0UmVzdWx0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS5yZXBvcnRzWzRdLnJlc3VsdC52YWx1ZSIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLnJlcG9ydHNbNF0ucmVzdWx0LmlkIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLnJlcG9ydHNbNF0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s0XS5yZXBvcnRzWzRdLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzRdLnJlcG9ydHNbNF0uY29tbWVudHMiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s0XS5yZXBvcnRzWzRdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5tb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIAo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbNF0ucmVwb3J0c1s0XS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIF80IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKCiAgICA8L3RkPgo8L3RyPgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAoKCgo8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi01Ij4KICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPgogICAgICAgIAogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+CiAgICAgICAgICAgICAgICA1CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4KICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ubmFtZS5yZWFjdGlvbkNvZGVkIiBjbGFzcz0nY29sLW1kLTcgICB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0TmFtZSc+CiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IkJsdWUgYmFieSBzeW5kcm9tZSIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJCbHVlIGJhYnkgc3luZHJvbWUiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s1XS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA2OTQxMiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ubmFtZS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNV0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSJibHVlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9ImJsdWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLmludGVybmFsUm93SWQiIHZhbHVlPSI2NyIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0uaW50ZXJuYWxSb3dJZCIgLz4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIgogICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giPjwvaT4KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1s1XS5kZWxldGVkIHZhbHVlPWZhbHNlPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4KICAgICAgICAgICAgCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLm5vcm1hbExvd0hpZ2giIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ubm9ybWFsTG93SGlnaCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNV0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5ub3JtYWxMb3ciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s1XS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5ub3JtYWxIaWdoIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLnVuaXQuaWQiIGNsYXNzPSIgdGVzdFVuaXQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC03ICAiPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s1XS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLnVuaXQuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC90ZD4KCiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPgogICAgICAgICAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNV0ucmVwb3J0c1s1XS5kYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0uaW50ZXJuYWxSb3dJZCIgLz4KPC9kaXY+CjwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNV0ucmVwb3J0c1s1XS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0ucmVzdWx0LnZhbHVlIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ucmVwb3J0c1s1XS5yZXN1bHQuaWQiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ucmVwb3J0c1s1XS5jb21tZW50cyIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RDb21tZW50cyAgIj4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdENvbW1lbnRzIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbNV0ucmVwb3J0c1s1XS5jb21tZW50cyIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzVdLnJlcG9ydHNbNV0ubW9yZUluZm8iIGNsYXNzPSdjb2wtc20tMSAgICAgdGVzdE1vcmVJbmZvJz4KICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLm1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1s1XS5yZXBvcnRzWzVdLmRlbGV0ZWQgdmFsdWU9PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXJlcG9ydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHJlcG9ydCIgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBkZWwtdGVzdC1yZXBvcnQgZWRpdC1sb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFJlcG9ydEljb24gXzUiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAoKICAgIDwvdGQ+CjwvdHI+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgoKCjx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTYiPgogICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4KICAgICAgICAgICAgICAgIDYKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImRlbC10ZXN0IGhpZGUiPgogICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgdGVzdCIgY2xhc3M9InB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gZWRpdC1sb2NrIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxUZXN0SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPC90ZD4KICAgIDx0ZCBjbGFzcz0idGVzdE5hbWUiPgogICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4KICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNl0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iQnJpdHRsZSB0ZWV0aCIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJCcml0dGxlIHRlZXRoIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNl0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMDYzNzQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzZdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0idGVldCIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s2XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s2XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJ0ZWV0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s2XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNzAiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbNl0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSB0ZXN0VW5pdHMgdGVzdC1oYXMtbmFtZSI+CiAgICAgICAgICAgIAoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s2XS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLm5vcm1hbExvd0hpZ2giIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzZdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNl0ubm9ybWFsSGlnaCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ubm9ybWFsSGlnaCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNl0udW5pdC5pZCIgZGF0YS1mcm9tPSJsYWJUZXN0VW5pdHMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1zb3VyY2U9ImxhYi10ZXN0LXVuaXQtbGlzdCIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS51bml0LmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvdGQ+CgogICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4KICAgICAgICAgICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPgogICAgCgo8ZGl2IGNsYXNzPSIiPgogICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIKICAgICAgICAgZGF0YS1pZD0idGVzdERhdGUiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNl0ucmVwb3J0c1s2XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLmludGVybmFsUm93SWQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbNl0ucmVwb3J0c1s2XS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0ucmVzdWx0LnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0UmVzdWx0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLnJlc3VsdC52YWx1ZSIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNl0ucmVwb3J0c1s2XS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0ucmVzdWx0LmlkIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzZdLnJlcG9ydHNbNl0uY29tbWVudHMiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s2XS5yZXBvcnRzWzZdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbNl0ucmVwb3J0c1s2XS5tb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbNl0ucmVwb3J0c1s2XS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIAo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbNl0ucmVwb3J0c1s2XS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIF82IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKCiAgICA8L3RkPgo8L3RyPgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAoKCgo8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi03Ij4KICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPgogICAgICAgIAogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+CiAgICAgICAgICAgICAgICA3CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4KICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ubmFtZS5yZWFjdGlvbkNvZGVkIiBjbGFzcz0nY29sLW1kLTcgICB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0TmFtZSc+CiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzddLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IkJsYWNrIGNvbG9yZWQgc3dlYXRpbmciIG1heGxlbmd0aD0iMjUwIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtYnJvd3Nlci12YWx1ZT0iQmxhY2sgY29sb3JlZCBzd2VhdGluZyIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLWZpZWxkSWQ9InRlc3ROYW1lIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzddLm5hbWUubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDA0OTcwIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5uYW1lLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9ImJsYSIgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJibGEiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzddLmludGVybmFsUm93SWQiIHZhbHVlPSI3MyIgaWQ9InNhZmV0eURhdGEudGVzdHNbN10uaW50ZXJuYWxSb3dJZCIgLz4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJ0bi1vcGVuLW1lZHJhYiBpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IGItMCB0ZXh0LXdoaXRlIGRhdGVwaWNrZXItaWNvbiAgIgogICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiIGlkPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giIG5hbWU9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1zZWFyY2giPjwvaT4KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1s3XS5kZWxldGVkIHZhbHVlPWZhbHNlPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4KICAgICAgICAgICAgCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzddLm5vcm1hbExvd0hpZ2giIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjUwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ubm9ybWFsTG93SGlnaCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbN10ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5ub3JtYWxMb3ciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5ub3JtYWxIaWdoIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLnVuaXQuaWQiIGNsYXNzPSIgdGVzdFVuaXQgbnVsbCB0ZW1wbGF0ZS1jb250cm9sIGNvbC1tZC03ICAiPgogICAgCiAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFVuaXQiPgoKCiAgICA8c2VsZWN0IGNsYXNzPSJmb3JtLWNvbnRyb2wgICBzZWxlY3QyLWJveCB0ZXN0VW5pdEZpZWxkIHNlbGVjdDItbGF6eSAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLnVuaXQuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC90ZD4KCiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPgogICAgICAgICAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLnJlcG9ydHNbN10uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbN10ucmVwb3J0c1s3XS5kYXRlLnZhbHVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLnJlcG9ydHNbN10uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLnJlcG9ydHNbN10uaW50ZXJuYWxSb3dJZCIgLz4KPC9kaXY+CjwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbN10ucmVwb3J0c1s3XS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLnJlcG9ydHNbN10ucmVzdWx0LnZhbHVlIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ucmVwb3J0c1s3XS5yZXN1bHQuaWQiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ucmVwb3J0c1s3XS5jb21tZW50cyIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RDb21tZW50cyAgIj4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdENvbW1lbnRzIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzddLnJlcG9ydHNbN10uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbN10ucmVwb3J0c1s3XS5jb21tZW50cyIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzddLnJlcG9ydHNbN10ubW9yZUluZm8iIGNsYXNzPSdjb2wtc20tMSAgICAgdGVzdE1vcmVJbmZvJz4KICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hlY2tib3ggY2hlY2tib3gtcHJpbWFyeSAgICBwLXQtMCAnIGRhdGEtaWQ9InRlc3RNb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfc2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLm1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1s3XS5yZXBvcnRzWzddLmRlbGV0ZWQgdmFsdWU9PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXJlcG9ydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHJlcG9ydCIgY2xhc3M9InB1bGwtcmlnaHQgYnRuLWRlbC1wYW5lbCByZW1vdmUtc2VjdGlvbiBkZWwtdGVzdC1yZXBvcnQgZWRpdC1sb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFJlcG9ydEljb24gXzciIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAoKICAgIDwvdGQ+CjwvdHI+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgoKCjx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTgiPgogICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4KICAgICAgICAgICAgICAgIDgKICAgICAgICAgICAgPC9zcGFuPgogICAgICAgIAogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9ImRlbC10ZXN0IGhpZGUiPgogICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgdGVzdCIgY2xhc3M9InB1bGwtcmlnaHQgcmVtb3ZlLXNlY3Rpb24gZWRpdC1sb2NrIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxUZXN0SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPC90ZD4KICAgIDx0ZCBjbGFzcz0idGVzdE5hbWUiPgogICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4KICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iRmlyZSBhY2NpZGVudCIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJGaXJlIGFjY2lkZW50IiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwNzIwOTciIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iZmlyZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJmaXJlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iNzYiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbOF0uZGVsZXRlZCB2YWx1ZT1mYWxzZT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSB0ZXN0VW5pdHMgdGVzdC1oYXMtbmFtZSI+CiAgICAgICAgICAgIAoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5vcm1hbExvd0hpZ2giIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzhdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0ubm9ybWFsSGlnaCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0ubm9ybWFsSGlnaCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0udW5pdC5pZCIgZGF0YS1mcm9tPSJsYWJUZXN0VW5pdHMiIGRhdGEtdGFidWxhcj0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlaG9sZGVyPSJTZWxlY3QiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1zb3VyY2U9ImxhYi10ZXN0LXVuaXQtbGlzdCIgZGF0YS12YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS51bml0LmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvdGQ+CgogICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4KICAgICAgICAgICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLmRhdGUudmFsdWUiIGNsYXNzPSJ0ZW1wbGF0ZS1jb250cm9sIHRlc3REYXRlICBjb2wtbWQtMiAiPgogICAgCgo8ZGl2IGNsYXNzPSIiPgogICAgPGRpdiBjbGFzcz0iZGF0ZXBpY2tlciBpbnRlcm5hbCBpbnB1dC1ncm91cCBkYXRlICIKICAgICAgICAgZGF0YS1pZD0idGVzdERhdGUiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzhdLnJlcG9ydHNbOF0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLmludGVybmFsUm93SWQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzhdLnJlcG9ydHNbOF0ucmVzdWx0LnZhbHVlIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0UmVzdWx0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLnJlc3VsdC52YWx1ZSIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLnJlcG9ydHNbOF0ucmVzdWx0LmlkIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLnJlcG9ydHNbOF0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzhdLnJlcG9ydHNbOF0uY29tbWVudHMiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgogICAgCiAgICAgICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s4XS5yZXBvcnRzWzhdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5tb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5tb3JlSW5mbyIgdmFsdWU9InRydWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1hbmRhdG9yeVNldD0iMCIgY2xhc3M9IiAgIiAgZGF0YS1zZWFyY2gtZmllbGQ9IiIvPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IiIgZm9yPSJ0ZXN0TW9yZUluZm8iPjwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KICAgIAo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbOF0ucmVwb3J0c1s4XS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIF84IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKCiAgICA8L3RkPgo8L3RyPgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAoKCgo8dHIgY2xhc3M9InJvdy10YWJsZSBwdi1zZWN0aW9uLXJlY29yZCB1aS1zb3J0YWJsZS1oYW5kbGUgICIgc3R5bGU9ImRpc3BsYXk6IHRhYmxlLXJvdyIgaWQ9InRlc3Qtc2VjdGlvbi05Ij4KICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPgogICAgICAgIAogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+CiAgICAgICAgICAgICAgICA5CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4KICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ubmFtZS5yZWFjdGlvbkNvZGVkIiBjbGFzcz0nY29sLW1kLTcgICB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0TmFtZSc+CiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW50ZXJuYWwiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgc2luZ2xlTWVkZHJhRmllbGQgbWVkZHJhQnJvd3NlciAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IkRlcGVuZGVuY2UgYWRkaWN0aXZlIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IkRlcGVuZGVuY2UgYWRkaWN0aXZlIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOV0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwMTIzMzYiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iZGVwIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9ImRlcCIgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOV0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9Ijc5IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5pbnRlcm5hbFJvd0lkIiAvPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzldLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPgogICAgICAgICAgICAKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLm5vcm1hbExvd0hpZ2giIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Tm9ybWFsTG93SGlnaCAgIj4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdE5vcm1hbExvd0hpZ2giPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIG5vcm1hbEhpZ2hMb3dWYWx1ZSAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOV0ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5ub3JtYWxMb3dIaWdoIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s5XS5ub3JtYWxMb3ciIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLm5vcm1hbEhpZ2giIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0udW5pdC5pZCIgPg0KPG9wdGlvbiB2YWx1ZT0iIiBzZWxlY3RlZD0ic2VsZWN0ZWQiPlNlbGVjdDwvb3B0aW9uPg0KPC9zZWxlY3Q+CiAgICAKICAgIAoKPC9kaXY+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L3RkPgoKICAgIDx0ZCBjbGFzcz0idGVzdFJlcG9ydFJvdyB0ZXN0UmVwb3J0cyI+CiAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0ZXN0LWRhdGUtcm93IiAgZGF0YS1yZXBvcnRObz0iMCI+CiAgICAgICAgICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAoKPGRpdiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiCiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5kYXRlLnZhbHVlIiBkYXRhLXBhcnRpYWxkYXRlc2FsbG93ZWQ9IjEiIHZhbHVlPSIiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBwbGFjZWhvbGRlcj0iREQtTU1NLUNDWVkgaGg6bW06c3MiIGRhdGEtcHJlY2lzaW9uPSJERC1NTU0tWVlZWSIgLz4KICAgICAgICA8c3BhbiB0eXBlPSJidXR0b24iIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiBiZy1wcmltYXJ5IHRleHQtd2hpdGUgYi0wIGRhdGVwaWNrZXItaWNvbiI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jYWxlbmRhci1ibGFuayI+PC9pPgogICAgICAgIDwvc3Bhbj4KICAgIDwvZGl2PgogICAgCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLnJlcG9ydHNbOV0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5pbnRlcm5hbFJvd0lkIiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzldLnJlcG9ydHNbOV0ucmVzdWx0LnZhbHVlIiBjbGFzcz0iY29sLW1kLTMgdGVtcGxhdGUtY29udHJvbCAgdGVzdFJlc3VsdCAgIj4KICAgICAgICA8ZGl2IGNsYXNzPSdpbnRlcm5hbCcgZGF0YS1pZD0idGVzdFJlc3VsdCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgdGVzdFJlc3VsdElucHV0ICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5yZXN1bHQudmFsdWUiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLnJlcG9ydHNbOV0ucmVzdWx0LmlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLnJlc3VsdC5pZCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5jb21tZW50cyIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdENvbW1lbnRzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1s5XS5yZXBvcnRzWzldLmNvbW1lbnRzIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbOV0ucmVwb3J0c1s5XS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzldLnJlcG9ydHNbOV0ubW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzldLnJlcG9ydHNbOV0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzldLnJlcG9ydHNbOV0uZGVsZXRlZCB2YWx1ZT0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiBfOSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCgogICAgPC90ZD4KPC90cj4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCgoKPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tMTAiPgogICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4KICAgICAgICAgICAgICAgIDEwCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4KICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPgogICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iTWFyYW50aWMgZW5kb2NhcmRpdGlzIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9Ik1hcmFudGljIGVuZG9jYXJkaXRpcyIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLWZpZWxkSWQ9InRlc3ROYW1lIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwNTgxNDciIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5uYW1lLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSJtYXIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9Im1hciIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iODIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5pbnRlcm5hbFJvd0lkIiAvPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzEwXS5kZWxldGVkIHZhbHVlPWZhbHNlPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4KICAgICAgICAgICAgCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubm9ybWFsTG93SGlnaCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ubm9ybWFsSGlnaCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS51bml0LmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvdGQ+CgogICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4KICAgICAgICAgICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMF0ucmVwb3J0c1sxMF0uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLnJlcG9ydHNbMTBdLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLnJlcG9ydHNbMTBdLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLnJlcG9ydHNbMTBdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5pbnRlcm5hbFJvd0lkIiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5yZXN1bHQudmFsdWUiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5yZXN1bHQuaWQiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTBdLnJlcG9ydHNbMTBdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLnJlcG9ydHNbMTBdLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5jb21tZW50cyIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzEwXS5yZXBvcnRzWzEwXS5tb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTBdLnJlcG9ydHNbMTBdLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxMF0ucmVwb3J0c1sxMF0uZGVsZXRlZCB2YWx1ZT0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiBfMTAiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAoKICAgIDwvdGQ+CjwvdHI+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgoKCjx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTExIj4KICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPgogICAgICAgIAogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+CiAgICAgICAgICAgICAgICAxMQogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyB0ZXN0IiBjbGFzcz0icHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8L3RkPgogICAgPHRkIGNsYXNzPSJ0ZXN0TmFtZSI+CiAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4KICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTFdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IkRpZ2VzdGl2ZSB0cmFjdCBYLXJheSBOT1Mgbm9ybWFsIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IkRpZ2VzdGl2ZSB0cmFjdCBYLXJheSBOT1Mgbm9ybWFsIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzExXS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDAxMjk4NyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzExXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9ImRpZyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTFdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iZGlnIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTFdLmludGVybmFsUm93SWQiIHZhbHVlPSI4NSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMTFdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPgogICAgICAgICAgICAKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzExXS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5ub3JtYWxMb3dIaWdoIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTFdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5ub3JtYWxIaWdoIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTFdLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLnVuaXQuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC90ZD4KCiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPgogICAgICAgICAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzExXS5yZXBvcnRzWzExXS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAoKPGRpdiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiCiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLmludGVybmFsUm93SWQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLnJlc3VsdC52YWx1ZSIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLnJlc3VsdC5pZCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLmNvbW1lbnRzIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMTFdLnJlcG9ydHNbMTFdLm1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMV0ucmVwb3J0c1sxMV0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzExXS5yZXBvcnRzWzExXS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIF8xMSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCgogICAgPC90ZD4KPC90cj4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCgoKPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tMTIiPgogICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4KICAgICAgICAgICAgICAgIDEyCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4KICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPgogICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iVHJpLWlvZG90aHlyb25pbmUgZnJlZSBhYm5vcm1hbCIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJUcmktaW9kb3RoeXJvbmluZSBmcmVlIGFibm9ybWFsIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA1Mzc5NCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9InRyaSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTJdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0idHJpIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTJdLmludGVybmFsUm93SWQiIHZhbHVlPSI4OCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMTJdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPgogICAgICAgICAgICAKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5ub3JtYWxMb3dIaWdoIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTJdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5ub3JtYWxIaWdoIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTJdLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLnVuaXQuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC90ZD4KCiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPgogICAgICAgICAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzEyXS5yZXBvcnRzWzEyXS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAoKPGRpdiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiCiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ucmVwb3J0c1sxMl0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ucmVwb3J0c1sxMl0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ucmVwb3J0c1sxMl0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLmludGVybmFsUm93SWQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLnJlc3VsdC52YWx1ZSIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLnJlc3VsdC5pZCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ucmVwb3J0c1sxMl0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ucmVwb3J0c1sxMl0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLmNvbW1lbnRzIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMTJdLnJlcG9ydHNbMTJdLm1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxMl0ucmVwb3J0c1sxMl0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzEyXS5yZXBvcnRzWzEyXS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIF8xMiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCgogICAgPC90ZD4KPC90cj4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCgoKPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tMTMiPgogICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4KICAgICAgICAgICAgICAgIDEzCiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4KICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPgogICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iVFNIIGRlY3JlYXNlIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IlRTSCBkZWNyZWFzZSIgZGF0YS1icm93c2VyLXR5cGU9Im1lZGRyYSIgZGF0YS1mbGFnLXRhcmdldD0iIiBkYXRhLWZpZWxkSWQ9InRlc3ROYW1lIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubmFtZS5yZWFjdGlvbkNvZGVkIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubmFtZS5sbHRDb2RlIiBjbGFzcz0iaGlkZGVuLWlkIiB2YWx1ZT0iMTAwNDQ3MTQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5uYW1lLmxsdENvZGUiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIHZhbHVlPSJ0c2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9InRzaCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5pbnRlcm5hbFJvd0lkIiB2YWx1ZT0iOTEiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5pbnRlcm5hbFJvd0lkIiAvPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzEzXS5kZWxldGVkIHZhbHVlPWZhbHNlPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4KICAgICAgICAgICAgCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubm9ybWFsTG93SGlnaCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ubm9ybWFsSGlnaCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS51bml0LmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvdGQ+CgogICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4KICAgICAgICAgICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxM10ucmVwb3J0c1sxM10uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLnJlcG9ydHNbMTNdLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLnJlcG9ydHNbMTNdLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLnJlcG9ydHNbMTNdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5pbnRlcm5hbFJvd0lkIiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5yZXN1bHQudmFsdWUiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5yZXN1bHQuaWQiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTNdLnJlcG9ydHNbMTNdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLnJlcG9ydHNbMTNdLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5jb21tZW50cyIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzEzXS5yZXBvcnRzWzEzXS5tb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTNdLnJlcG9ydHNbMTNdLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxM10ucmVwb3J0c1sxM10uZGVsZXRlZCB2YWx1ZT0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiBfMTMiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAoKICAgIDwvdGQ+CjwvdHI+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgoKCjx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTE0Ij4KICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPgogICAgICAgIAogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+CiAgICAgICAgICAgICAgICAxNAogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyB0ZXN0IiBjbGFzcz0icHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8L3RkPgogICAgPHRkIGNsYXNzPSJ0ZXN0TmFtZSI+CiAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4KICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTRdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IlQzIG5vcm1hbCIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJUMyBub3JtYWwiIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTRdLm5hbWUubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDQzMDU0IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ubmFtZS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTRdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0idDMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTRdLm5hbWUucmVwb3J0ZWRSZWFjdGlvbiIgdmFsdWU9InQzIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTRdLmludGVybmFsUm93SWQiIHZhbHVlPSI5NCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMTRdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPgogICAgICAgICAgICAKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5ub3JtYWxMb3dIaWdoIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTRdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5ub3JtYWxIaWdoIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTRdLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLnVuaXQuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC90ZD4KCiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPgogICAgICAgICAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE0XS5yZXBvcnRzWzE0XS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAoKPGRpdiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiCiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLmludGVybmFsUm93SWQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLnJlc3VsdC52YWx1ZSIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLnJlc3VsdC5pZCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLmNvbW1lbnRzIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMTRdLnJlcG9ydHNbMTRdLm1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNF0ucmVwb3J0c1sxNF0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzE0XS5yZXBvcnRzWzE0XS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIF8xNCIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCgogICAgPC90ZD4KPC90cj4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCgoKPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tMTUiPgogICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4KICAgICAgICAgICAgICAgIDE1CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4KICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPgogICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iSW9kaWRlIGludG94aWNhdGlvbiIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJJb2RpZGUgaW50b3hpY2F0aW9uIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDAyMjkwMiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9ImlvZCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTVdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iaW9kIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTVdLmludGVybmFsUm93SWQiIHZhbHVlPSI5NyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMTVdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPgogICAgICAgICAgICAKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5ub3JtYWxMb3dIaWdoIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTVdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5ub3JtYWxIaWdoIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTVdLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLnVuaXQuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC90ZD4KCiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPgogICAgICAgICAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE1XS5yZXBvcnRzWzE1XS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAoKPGRpdiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiCiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ucmVwb3J0c1sxNV0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ucmVwb3J0c1sxNV0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ucmVwb3J0c1sxNV0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLmludGVybmFsUm93SWQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLnJlc3VsdC52YWx1ZSIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLnJlc3VsdC5pZCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ucmVwb3J0c1sxNV0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ucmVwb3J0c1sxNV0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLmNvbW1lbnRzIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMTVdLnJlcG9ydHNbMTVdLm1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNV0ucmVwb3J0c1sxNV0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzE1XS5yZXBvcnRzWzE1XS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIF8xNSIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCgogICAgPC90ZD4KPC90cj4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCgoKPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tMTYiPgogICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4KICAgICAgICAgICAgICAgIDE2CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4KICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPgogICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iRmx1IHByZXZlbnRpb24iIG1heGxlbmd0aD0iMjUwIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBkYXRhLXBsYWNlbWVudD0idG9wIiBkYXRhLXBsYWNlaG9sZGVyPSIiIGRhdGEtYnJvd3Nlci12YWx1ZT0iRmx1IHByZXZlbnRpb24iIGRhdGEtYnJvd3Nlci10eXBlPSJtZWRkcmEiIGRhdGEtZmxhZy10YXJnZXQ9IiIgZGF0YS1maWVsZElkPSJ0ZXN0TmFtZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLm5hbWUucmVhY3Rpb25Db2RlZCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLm5hbWUubGx0Q29kZSIgY2xhc3M9ImhpZGRlbi1pZCIgdmFsdWU9IjEwMDE2NzkyIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ubmFtZS5sbHRDb2RlIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiB2YWx1ZT0iZmx1IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ubmFtZS5jb2RlZFdpdGhTZWFyY2hTdHJpbmciIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5uYW1lLmhpZXJhcmNoeVN0b3JhZ2VJZCIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIHZhbHVlPSJmbHUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5uYW1lLnJlcG9ydGVkUmVhY3Rpb24iIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IjEwMCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLmludGVybmFsUm93SWQiIC8+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJidG4tb3Blbi1tZWRyYWIgaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSBiLTAgdGV4dC13aGl0ZSBkYXRlcGlja2VyLWljb24gICIKICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIiBpZD0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIiBuYW1lPSJzYWZldHlEYXRhLm1lZGRyYS5zZWFyY2giPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoIj48L2k+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPXNhZmV0eURhdGEudGVzdHNbMTZdLmRlbGV0ZWQgdmFsdWU9ZmFsc2U+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgdGVzdFVuaXRzIHRlc3QtaGFzLW5hbWUiPgogICAgICAgICAgICAKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5ub3JtYWxMb3dIaWdoIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5vcm1hbExvd0hpZ2ggICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICBub3JtYWxIaWdoTG93VmFsdWUgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5ub3JtYWxMb3dIaWdoIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSI1MCIgZGF0YS1maWVsZC1pZD0idGVzdE5vcm1hbExvd0hpZ2giIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5ub3JtYWxMb3dIaWdoIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ubm9ybWFsTG93IiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ubm9ybWFsTG93IiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLm5vcm1hbEhpZ2giIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5ub3JtYWxIaWdoIiAvPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS51bml0LmlkIiBjbGFzcz0iIHRlc3RVbml0IG51bGwgdGVtcGxhdGUtY29udHJvbCBjb2wtbWQtNyAgIj4KICAgIAogICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RVbml0Ij4KCgogICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sICAgc2VsZWN0Mi1ib3ggdGVzdFVuaXRGaWVsZCBzZWxlY3QyLWxhenkgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLnVuaXQuaWQiIGRhdGEtZnJvbT0ibGFiVGVzdFVuaXRzIiBkYXRhLXRhYnVsYXI9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZWhvbGRlcj0iU2VsZWN0IiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtc291cmNlPSJsYWItdGVzdC11bml0LWxpc3QiIGRhdGEtdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLnVuaXQuaWQiID4NCjxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj5TZWxlY3Q8L29wdGlvbj4NCjwvc2VsZWN0PgogICAgCiAgICAKCjwvZGl2PjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC90ZD4KCiAgICA8dGQgY2xhc3M9InRlc3RSZXBvcnRSb3cgdGVzdFJlcG9ydHMiPgogICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdGVzdC1kYXRlLXJvdyIgIGRhdGEtcmVwb3J0Tm89IjAiPgogICAgICAgICAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE2XS5yZXBvcnRzWzE2XS5kYXRlLnZhbHVlIiBjbGFzcz0idGVtcGxhdGUtY29udHJvbCB0ZXN0RGF0ZSAgY29sLW1kLTIgIj4KICAgIAoKPGRpdiBjbGFzcz0iIj4KICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXIgaW50ZXJuYWwgaW5wdXQtZ3JvdXAgZGF0ZSAiCiAgICAgICAgIGRhdGEtaWQ9InRlc3REYXRlIj4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ucmVwb3J0c1sxNl0uZGF0ZS52YWx1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ucmVwb3J0c1sxNl0uZGF0ZS52YWx1ZSIgZGF0YS1wYXJ0aWFsZGF0ZXNhbGxvd2VkPSIxIiB2YWx1ZT0iIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgcGxhY2Vob2xkZXI9IkRELU1NTS1DQ1lZIGhoOm1tOnNzIiBkYXRhLXByZWNpc2lvbj0iREQtTU1NLVlZWVkiIC8+CiAgICAgICAgPHNwYW4gdHlwZT0iYnV0dG9uIiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIGItMCBkYXRlcGlja2VyLWljb24iPgogICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2FsZW5kYXItYmxhbmsiPjwvaT4KICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ucmVwb3J0c1sxNl0uaW50ZXJuYWxSb3dJZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLmludGVybmFsUm93SWQiIC8+CjwvZGl2Pgo8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLnJlc3VsdC52YWx1ZSIgY2xhc3M9ImNvbC1tZC0zIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3RSZXN1bHQgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RSZXN1bHQiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgIHRlc3RSZXN1bHRJbnB1dCAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLnJlc3VsdC52YWx1ZSIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iMjAwMCIgZGF0YS1maWVsZC1pZD0idGVzdFJlc3VsdCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLnJlc3VsdC52YWx1ZSIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLnJlc3VsdC5pZCIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLnJlc3VsdC5pZCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ucmVwb3J0c1sxNl0uY29tbWVudHMiIGNsYXNzPSJjb2wtbWQtNSB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0Q29tbWVudHMgICI+CiAgICAgICAgPGRpdiBjbGFzcz0naW50ZXJuYWwnIGRhdGEtaWQ9InRlc3RDb21tZW50cyI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ucmVwb3J0c1sxNl0uY29tbWVudHMiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RDb21tZW50cyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLmNvbW1lbnRzIiAvPgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKICAgIAogICAgICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLm1vcmVJbmZvIiBjbGFzcz0nY29sLXNtLTEgICAgIHRlc3RNb3JlSW5mbyc+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoZWNrYm94IGNoZWNrYm94LXByaW1hcnkgICAgcC10LTAgJyBkYXRhLWlkPSJ0ZXN0TW9yZUluZm8iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3NhZmV0eURhdGEudGVzdHNbMTZdLnJlcG9ydHNbMTZdLm1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxNl0ucmVwb3J0c1sxNl0ubW9yZUluZm8iIHZhbHVlPSJ0cnVlIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGNsYXNzPSIgICIgIGRhdGEtc2VhcmNoLWZpZWxkPSIiLz4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSIiIGZvcj0idGVzdE1vcmVJbmZvIj48L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzE2XS5yZXBvcnRzWzE2XS5kZWxldGVkIHZhbHVlPT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlbC1yZXBvcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyByZXBvcnQiIGNsYXNzPSJwdWxsLXJpZ2h0IGJ0bi1kZWwtcGFuZWwgcmVtb3ZlLXNlY3Rpb24gZGVsLXRlc3QtcmVwb3J0IGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtZCBtZC1jbG9zZSBkZWxSZXBvcnRJY29uIF8xNiIgYXJpYS1oaWRkZW49InRydWUiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCgogICAgPC90ZD4KPC90cj4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKCgoKPHRyIGNsYXNzPSJyb3ctdGFibGUgcHYtc2VjdGlvbi1yZWNvcmQgdWktc29ydGFibGUtaGFuZGxlICAiIHN0eWxlPSJkaXNwbGF5OiB0YWJsZS1yb3ciIGlkPSJ0ZXN0LXNlY3Rpb24tMTciPgogICAgPHRkIGNsYXNzPSJzZXJpYWxObyI+CiAgICAgICAgCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJuZXctaW5kZXggYmFkZ2UtaW5kZXggcm93LWNvdW50Ij4KICAgICAgICAgICAgICAgIDE3CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtdGVzdCBoaWRlIj4KICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgdGl0bGU9IlJlbW92ZSB0aGlzIHRlc3QiIGNsYXNzPSJwdWxsLXJpZ2h0IHJlbW92ZS1zZWN0aW9uIGVkaXQtbG9jayI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsVGVzdEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDwvdGQ+CiAgICA8dGQgY2xhc3M9InRlc3ROYW1lIj4KICAgICAgICAKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLm5hbWUucmVhY3Rpb25Db2RlZCIgY2xhc3M9J2NvbC1tZC03ICAgdGVtcGxhdGUtY29udHJvbCAgdGVzdE5hbWUnPgogICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGludGVybmFsIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgIHNpbmdsZU1lZGRyYUZpZWxkIG1lZGRyYUJyb3dzZXIgICIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubmFtZS5yZWFjdGlvbkNvZGVkIiB2YWx1ZT0iQm9keSBpbWFnZSBkaXNvcmRlciIgbWF4bGVuZ3RoPSIyNTAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2VtZW50PSJ0b3AiIGRhdGEtcGxhY2Vob2xkZXI9IiIgZGF0YS1icm93c2VyLXZhbHVlPSJCb2R5IGltYWdlIGRpc29yZGVyIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDAwNTg5MiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9ImJvZCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iYm9kIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLmludGVybmFsUm93SWQiIHZhbHVlPSIxMDMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5pbnRlcm5hbFJvd0lkIiAvPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzE3XS5kZWxldGVkIHZhbHVlPWZhbHNlPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4KICAgICAgICAgICAgCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubm9ybWFsTG93SGlnaCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10ubm9ybWFsSGlnaCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE3XS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS51bml0LmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvdGQ+CgogICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4KICAgICAgICAgICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxN10ucmVwb3J0c1sxN10uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5pbnRlcm5hbFJvd0lkIiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5yZXN1bHQudmFsdWUiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5yZXN1bHQuaWQiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5jb21tZW50cyIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzE3XS5yZXBvcnRzWzE3XS5tb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTddLnJlcG9ydHNbMTddLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxN10ucmVwb3J0c1sxN10uZGVsZXRlZCB2YWx1ZT0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiBfMTciIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAoKICAgIDwvdGQ+CjwvdHI+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgoKCjx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTE4Ij4KICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPgogICAgICAgIAogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+CiAgICAgICAgICAgICAgICAxOAogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyB0ZXN0IiBjbGFzcz0icHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8L3RkPgogICAgPHRkIGNsYXNzPSJ0ZXN0TmFtZSI+CiAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4KICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMThdLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IkZhY3RvciBWIExlaWRlbiBjYXJyaWVyIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IkZhY3RvciBWIExlaWRlbiBjYXJyaWVyIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA3NTY1MiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9ImRlbiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMThdLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0iZGVuIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMThdLmludGVybmFsUm93SWQiIHZhbHVlPSIxMDYiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5pbnRlcm5hbFJvd0lkIiAvPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzE4XS5kZWxldGVkIHZhbHVlPWZhbHNlPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4KICAgICAgICAgICAgCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubm9ybWFsTG93SGlnaCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMThdLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ubm9ybWFsSGlnaCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE4XS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS51bml0LmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvdGQ+CgogICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4KICAgICAgICAgICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOF0ucmVwb3J0c1sxOF0uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMThdLnJlcG9ydHNbMThdLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLnJlcG9ydHNbMThdLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMThdLnJlcG9ydHNbMThdLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5pbnRlcm5hbFJvd0lkIiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5yZXN1bHQudmFsdWUiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5yZXN1bHQuaWQiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMThdLnJlcG9ydHNbMThdLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMThdLnJlcG9ydHNbMThdLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5jb21tZW50cyIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzE4XS5yZXBvcnRzWzE4XS5tb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMThdLnJlcG9ydHNbMThdLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxOF0ucmVwb3J0c1sxOF0uZGVsZXRlZCB2YWx1ZT0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiBfMTgiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAoKICAgIDwvdGQ+CjwvdHI+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCgoKCjx0ciBjbGFzcz0icm93LXRhYmxlIHB2LXNlY3Rpb24tcmVjb3JkIHVpLXNvcnRhYmxlLWhhbmRsZSAgIiBzdHlsZT0iZGlzcGxheTogdGFibGUtcm93IiBpZD0idGVzdC1zZWN0aW9uLTE5Ij4KICAgIDx0ZCBjbGFzcz0ic2VyaWFsTm8iPgogICAgICAgIAogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmV3LWluZGV4IGJhZGdlLWluZGV4IHJvdy1jb3VudCI+CiAgICAgICAgICAgICAgICAxOQogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iZGVsLXRlc3QgaGlkZSI+CiAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIHRpdGxlPSJSZW1vdmUgdGhpcyB0ZXN0IiBjbGFzcz0icHVsbC1yaWdodCByZW1vdmUtc2VjdGlvbiBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNsb3NlIGRlbFRlc3RJY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8L3RkPgogICAgPHRkIGNsYXNzPSJ0ZXN0TmFtZSI+CiAgICAgICAgCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5uYW1lLnJlYWN0aW9uQ29kZWQiIGNsYXNzPSdjb2wtbWQtNyAgIHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROYW1lJz4KICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnRlcm5hbCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICBzaW5nbGVNZWRkcmFGaWVsZCBtZWRkcmFCcm93c2VyICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLm5hbWUucmVhY3Rpb25Db2RlZCIgdmFsdWU9IlllbGxvdyBuYWlsIHN5bmRyb21lIiBtYXhsZW5ndGg9IjI1MCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgZGF0YS1wbGFjZW1lbnQ9InRvcCIgZGF0YS1wbGFjZWhvbGRlcj0iIiBkYXRhLWJyb3dzZXItdmFsdWU9IlllbGxvdyBuYWlsIHN5bmRyb21lIiBkYXRhLWJyb3dzZXItdHlwZT0ibWVkZHJhIiBkYXRhLWZsYWctdGFyZ2V0PSIiIGRhdGEtZmllbGRJZD0idGVzdE5hbWUiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5uYW1lLnJlYWN0aW9uQ29kZWQiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5uYW1lLmxsdENvZGUiIGNsYXNzPSJoaWRkZW4taWQiIHZhbHVlPSIxMDA0ODI0NCIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTldLm5hbWUubGx0Q29kZSIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5uYW1lLmNvZGVkV2l0aFNlYXJjaFN0cmluZyIgdmFsdWU9InllbGxvdyIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTldLm5hbWUuY29kZWRXaXRoU2VhcmNoU3RyaW5nIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLm5hbWUuaGllcmFyY2h5U3RvcmFnZUlkIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubmFtZS5oaWVyYXJjaHlTdG9yYWdlSWQiIC8+PGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiB2YWx1ZT0ieWVsbG93IiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubmFtZS5yZXBvcnRlZFJlYWN0aW9uIiAvPjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLmludGVybmFsUm93SWQiIHZhbHVlPSIxMDkiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5pbnRlcm5hbFJvd0lkIiAvPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYnRuLW9wZW4tbWVkcmFiIGlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgYi0wIHRleHQtd2hpdGUgZGF0ZXBpY2tlci1pY29uICAiCiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIgaWQ9InNhZmV0eURhdGEubWVkZHJhLnNlYXJjaCIgbmFtZT0ic2FmZXR5RGF0YS5tZWRkcmEuc2VhcmNoIj4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaCI+PC9pPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT1zYWZldHlEYXRhLnRlc3RzWzE5XS5kZWxldGVkIHZhbHVlPWZhbHNlPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC01IHRlc3RVbml0cyB0ZXN0LWhhcy1uYW1lIj4KICAgICAgICAgICAgCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubm9ybWFsTG93SGlnaCIgY2xhc3M9ImNvbC1tZC01IHRlbXBsYXRlLWNvbnRyb2wgIHRlc3ROb3JtYWxMb3dIaWdoICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Tm9ybWFsTG93SGlnaCI+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sICAgbm9ybWFsSGlnaExvd1ZhbHVlICIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLW1hbmRhdG9yeVNldD0iMCIgbmFtZT0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubm9ybWFsTG93SGlnaCIgdmFsdWU9IiIgZGF0YS1pbml0aWFsLXZhbHVlPSIiIG1heGxlbmd0aD0iNTAiIGRhdGEtZmllbGQtaWQ9InRlc3ROb3JtYWxMb3dIaWdoIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubm9ybWFsTG93SGlnaCIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLm5vcm1hbExvdyIgdmFsdWU9IiIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTldLm5vcm1hbExvdyIgLz48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5ub3JtYWxIaWdoIiB2YWx1ZT0iIiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ubm9ybWFsSGlnaCIgLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCgoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0udW5pdC5pZCIgY2xhc3M9IiB0ZXN0VW5pdCBudWxsIHRlbXBsYXRlLWNvbnRyb2wgY29sLW1kLTcgICI+CiAgICAKICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0VW5pdCI+CgoKICAgIDxzZWxlY3QgY2xhc3M9ImZvcm0tY29udHJvbCAgIHNlbGVjdDItYm94IHRlc3RVbml0RmllbGQgc2VsZWN0Mi1sYXp5ICAgIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS51bml0LmlkIiBkYXRhLWZyb209ImxhYlRlc3RVbml0cyIgZGF0YS10YWJ1bGFyPSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIGRhdGEtcGxhY2Vob2xkZXI9IlNlbGVjdCIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIiBkYXRhLXNvdXJjZT0ibGFiLXRlc3QtdW5pdC1saXN0IiBkYXRhLXZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS51bml0LmlkIiA+DQo8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+U2VsZWN0PC9vcHRpb24+DQo8L3NlbGVjdD4KICAgIAogICAgCgo8L2Rpdj48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvdGQ+CgogICAgPHRkIGNsYXNzPSJ0ZXN0UmVwb3J0Um93IHRlc3RSZXBvcnRzIj4KICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRlc3QtZGF0ZS1yb3ciICBkYXRhLXJlcG9ydE5vPSIwIj4KICAgICAgICAgICAgICAgIAoKCgogICAgPGRpdiBpZD0ic2FmZXR5RGF0YS50ZXN0c1sxOV0ucmVwb3J0c1sxOV0uZGF0ZS52YWx1ZSIgY2xhc3M9InRlbXBsYXRlLWNvbnRyb2wgdGVzdERhdGUgIGNvbC1tZC0yICI+CiAgICAKCjxkaXYgY2xhc3M9IiI+CiAgICA8ZGl2IGNsYXNzPSJkYXRlcGlja2VyIGludGVybmFsIGlucHV0LWdyb3VwIGRhdGUgIgogICAgICAgICBkYXRhLWlkPSJ0ZXN0RGF0ZSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLnJlcG9ydHNbMTldLmRhdGUudmFsdWUiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgaWQ9InNhZmV0eURhdGEudGVzdHNbMTldLnJlcG9ydHNbMTldLmRhdGUudmFsdWUiIGRhdGEtcGFydGlhbGRhdGVzYWxsb3dlZD0iMSIgdmFsdWU9IiIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIHBsYWNlaG9sZGVyPSJERC1NTU0tQ0NZWSBoaDptbTpzcyIgZGF0YS1wcmVjaXNpb249IkRELU1NTS1ZWVlZIiAvPgogICAgICAgIDxzcGFuIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBiLTAgZGF0ZXBpY2tlci1pY29uIj4KICAgICAgICAgICAgPGkgY2xhc3M9Im1kIG1kLWNhbGVuZGFyLWJsYW5rIj48L2k+CiAgICAgICAgPC9zcGFuPgogICAgPC9kaXY+CiAgICAKICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLnJlcG9ydHNbMTldLmludGVybmFsUm93SWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5pbnRlcm5hbFJvd0lkIiAvPgo8L2Rpdj4KPC9kaXY+CgoKCgoKCiAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5yZXN1bHQudmFsdWUiIGNsYXNzPSJjb2wtbWQtMyB0ZW1wbGF0ZS1jb250cm9sICB0ZXN0UmVzdWx0ICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0UmVzdWx0Ij4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgICB0ZXN0UmVzdWx0SW5wdXQgIiBkYXRhLW1hbmRhdG9yeT0iZmFsc2UiIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5yZXN1bHQudmFsdWUiIHZhbHVlPSIiIGRhdGEtaW5pdGlhbC12YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMDAiIGRhdGEtZmllbGQtaWQ9InRlc3RSZXN1bHQiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5yZXN1bHQudmFsdWUiIC8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5yZXN1bHQuaWQiIHZhbHVlPSIiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5yZXN1bHQuaWQiIC8+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgoKCgoKICAgIDxkaXYgaWQ9InNhZmV0eURhdGEudGVzdHNbMTldLnJlcG9ydHNbMTldLmNvbW1lbnRzIiBjbGFzcz0iY29sLW1kLTUgdGVtcGxhdGUtY29udHJvbCAgdGVzdENvbW1lbnRzICAiPgogICAgICAgIDxkaXYgY2xhc3M9J2ludGVybmFsJyBkYXRhLWlkPSJ0ZXN0Q29tbWVudHMiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCAgICAiIGRhdGEtbWFuZGF0b3J5PSJmYWxzZSIgZGF0YS1tYW5kYXRvcnlTZXQ9IjAiIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLnJlcG9ydHNbMTldLmNvbW1lbnRzIiB2YWx1ZT0iIiBkYXRhLWluaXRpYWwtdmFsdWU9IiIgbWF4bGVuZ3RoPSIyMDAwIiBkYXRhLWZpZWxkLWlkPSJ0ZXN0Q29tbWVudHMiIGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5jb21tZW50cyIgLz4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgoKCiAgICAKICAgICAgICA8ZGl2IGlkPSJzYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5tb3JlSW5mbyIgY2xhc3M9J2NvbC1zbS0xICAgICB0ZXN0TW9yZUluZm8nPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGVja2JveCBjaGVja2JveC1wcmltYXJ5ICAgIHAtdC0wICcgZGF0YS1pZD0idGVzdE1vcmVJbmZvIj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9zYWZldHlEYXRhLnRlc3RzWzE5XS5yZXBvcnRzWzE5XS5tb3JlSW5mbyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNhZmV0eURhdGEudGVzdHNbMTldLnJlcG9ydHNbMTldLm1vcmVJbmZvIiB2YWx1ZT0idHJ1ZSIgZGF0YS1tYW5kYXRvcnk9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbWFuZGF0b3J5U2V0PSIwIiBjbGFzcz0iICAiICBkYXRhLXNlYXJjaC1maWVsZD0iIi8+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iIiBmb3I9InRlc3RNb3JlSW5mbyI+PC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9c2FmZXR5RGF0YS50ZXN0c1sxOV0ucmVwb3J0c1sxOV0uZGVsZXRlZCB2YWx1ZT0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZWwtcmVwb3J0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiB0aXRsZT0iUmVtb3ZlIHRoaXMgcmVwb3J0IiBjbGFzcz0icHVsbC1yaWdodCBidG4tZGVsLXBhbmVsIHJlbW92ZS1zZWN0aW9uIGRlbC10ZXN0LXJlcG9ydCBlZGl0LWxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWQgbWQtY2xvc2UgZGVsUmVwb3J0SWNvbiBfMTkiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAoKICAgIDwvdGQ+CjwvdHI+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIDwvdGJvZHk+CiAgICA8L3RhYmxlPgo8L2Rpdj4KCgo8L2Rpdj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iaXNDYXNlRW50cnlQYWdlIiB2YWx1ZT0idHJ1ZSIgaWQ9ImlzQ2FzZUVudHJ5UGFnZSIgLz4KCjxkaXYgaWQ9Imp1c3RpZmljYXRpb25Nb2RhbCIgY2xhc3M9Im1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyI+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbWQiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgaWQ9Imp1c3RpZmljYXRpb25DbG9zZUJ1dHRvbiIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1oaWRkZW49InRydWUiPsOXPC9idXR0b24+CiAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1vZGFsLXRpdGxlIGp1c3RpZmljYXRpb25Db21tZW50cyI+Q2FzZSBBc3NpZ25tZW50PC9oND4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGFzc2lnbmVlVXNlckxpc3QiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS02IHJlcXVpcmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iYXNzaWduZWVVc2VyTGlzdCIgY2xhc3M9ImNvbnRyb2wtbGFiZWwgbGJsLWVsaXBzaXMiPkFzc2lnbiBUbzo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9ImFzc2lnbmVlVXNlckxpc3QiIGlkPSJhc3NpZ25lZVVzZXJMaXN0IiBjbGFzcz0iZm9ybS1jb250cm9sIHNlbGVjdDIiPjwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Imp1c3RpZmljYXRpb25Nb2RhbElkIiBjbGFzcz0iY29udHJvbC1sYWJlbCI+Q29tbWVudHMKICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPSJqdXN0aWZpY2F0aW9uTW9kYWxJZCIgbmFtZT0ianVzdGlmaWNhdGlvbkNvbW1lbnRzIiByb3dzPSI0IiBjb2xzPSIyMCIgbWF4bGVuZ3RoPSI1MDAiIGNsYXNzPSJmb3JtLWNvbnRyb2wgZm0tdGV4dC1hcmVhIiA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1heGxlbmd0aC1mZWVkYmFjayI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJqdXN0aWZpY2F0aW9uTW9kYWxPa0J1dHRvbiIgY2xhc3M9ImJ0biBidG4taW52ZXJzZSB3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQiPk9rPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9ImFzc2lnbkNhbmNlbEJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBidG4tbWQiPkNhbmNlbDwvYnV0dG9uPgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgaWQ9InNpbXBsZUp1c3RpZmljYXRpb25Nb2RhbCIgY2xhc3M9Im1vZGFsIGZhZGUiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9Im15TW9kYWxMYWJlbCIgYXJpYS1oaWRkZW49ImZhbHNlIiBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiIGRhdGEta2V5Ym9hcmQ9ImZhbHNlIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1tZCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIHNpbXBsZUp1c3RpZmljYXRpb25DYW5jZWxCdG4iIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj7DlzwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtb2RhbC10aXRsZSI+SnVzdGlmaWNhdGlvbjwvaDQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgIDxmb3JtPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgcmVxdWlyZWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIgZmFkZSBpbiBoaWRlIHAtMCBwLWwtMTAgcC1yLTEwIiBpZD0ibWVzc2FnZUJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJlcnJvck1lc3NhZ2UiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsICBsYmwtZWxpcHNpcyI+Q29tbWVudHM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgIGlkPSJzaW1wbGVKdXN0aWZpY2F0aW9uIiByb3dzPSI0IiBjb2xzPSIyMCIgbWF4bGVuZ3RoPSI1MDAiIG5hbWU9InNpbXBsZUp1c3RpZmljYXRpb24iIGNsYXNzPSJmb3JtLWNvbnRyb2wgIGZtLXRleHQtYXJlYSIgPjwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXhsZW5ndGgtZmVlZGJhY2siPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1pbnZlcnNlIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCBzaW1wbGVKdXN0aWZpY2F0aW9uT2tCdG4iIGRpc2FibGVkPSJkaXNhYmxlZCI+T2s8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGJ0bi1tZCBzaW1wbGVKdXN0aWZpY2F0aW9uQ2FuY2VsQnRuIiBkYXRhLWRpc21pc3M9Im1vZGFsIj5DYW5jZWw8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxzY3JpcHQ+CiAgICB2YXIgcmVqZWN0ZWRTdGF0ZUlkID0gNzsKICAgIHZhciBmaW5hbFN0YXRlSWQgPSAzOwogICAgdmFyIGFjdGl2ZVN0YXRlSWQgPSAyOwogICAgdmFyIGNsb3NlZFN0YXRlSWQgPSAxMTsKICAgIHZhciByZWZlcmVuY2VEYXRhVXBkYXRlRGF0ZVRpbWUgPSAiMDgvMzEvMjAyMCAwNDoyNjoyNiI7Cjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICBpZigoL01TSUUgXGR8VHJpZGVudC4qcnY6Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB8fCAoL0VkZ2UvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpKQogICAgICAgIGRvY3VtZW50LndyaXRlKCc8c2NyaXB0IHNyYz0iL2Fzc2V0cy92ZW5kb3JVaS9mb3JtZGF0YS5taW4uanMiPjxcL3NjcmlwdD4nKTsKPC9zY3JpcHQ+CgoKICAgPCEtLSBDb21tb24gSlMgRmlsZXMgLS0+CiAgICAKICAgIDxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vamF2YXNjcmlwdCI+CiAgICAgICAgdmFyIGNvbmZpZ1VwZGF0ZURhdGVUaW1lID0gIjA4LzMxLzIwMjAgMDQ6MDQ6MTYiOwogICAgICAgIHZhciBsb2dpblVzZXIgPSAiTG9hZDEwMSI7CiAgICAgICAgdmFyIHVzZXJuYW1lVG9TYXZlUHJlZmVyZW5jZSA9ICJMb2FkMTAxIjsKICAgICAgICB2YXIgbG9nZ2VkSW5Vc2VyRnVsbE5hbWUgPSAiTG9hZDEwMSI7CiAgICAgICAgdmFyIHByaXZhY3lMb2NhdGlvbnNGb3JDYXNlID0gWzEsIDk5LCA3MywgNzldOwogICAgICAgIHZhciBjb3Jwb3JhdGVUaW1lem9uZSA9ICJHTVQiOwogICAgICAgIHZhciB1c2VyVGltZVpvbmUgPSAiRXRjL0dNVCsxMiI7CiAgICAgICAgdmFyIGRlZmF1bHRUZW1wbGF0ZUlkPSIyIjsKICAgICAgICB2YXIgY3VycmVudFVzZXJJZD0iMzA4NDI3NDI5IjsKICAgICAgICB2YXIgc3VzcGVjdFByb2R1Y3RJZCA9IDI5OwogICAgICAgIHZhciByZWZlcmVuY2VEYXRhVXBkYXRlRGF0ZVRpbWUgPSAiMDgvMzEvMjAyMCAwNDoyNjoyNiI7CiAgICAgICAgdmFyIHByaW9yaXRpZXMgPSBbeyJpZCI6MTAyNSwidmFsdWUiOiJQMSIsInR5cGUiOiJjYXNlUHJpb3JpdHkifSx7ImlkIjoxMDI2LCJ2YWx1ZSI6IlAyIiwidHlwZSI6ImNhc2VQcmlvcml0eSJ9LHsiaWQiOjEwMjcsInZhbHVlIjoiUDMiLCJ0eXBlIjoiY2FzZVByaW9yaXR5In0seyJpZCI6MTAyOCwidmFsdWUiOiJQNCIsInR5cGUiOiJjYXNlUHJpb3JpdHkifSx7ImlkIjoxMDI5LCJ2YWx1ZSI6IlA1IiwidHlwZSI6ImNhc2VQcmlvcml0eSJ9XTsKICAgICAgICB2YXIgbG9nZ2VkSW5Vc2VyVHlwZSA9ICJOT05fTERBUCI7CiAgICAgICAgdmFyIHBhc3N3b3JkUmVzZXRVcmkgPSAiL3Bhc3N3b3JkL3Jlc2V0T3duUGFzc3dvcmQiOwogICAgICAgIHZhciBhdXRoVHlwZSA9ICJEYXRhYmFzZSI7CiAgICAgICAgdmFyIHNzb0xvZ291dFVybCA9ICIiOwogICAgICAgIHZhciBjYXNlSnVzdEF1dGhFbmFibGVkID0gZmFsc2U7CiAgICA8L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9hc3NldHMvYXBwbGljYXRpb24tYTA0Njk2ODdhNDg1OTMyMDYzM2IzNWVkOWM1Mzc0ZWUuanMiID48L3NjcmlwdD4KICAgIAogICAgCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2Fzc2V0cy92ZW5kb3IvYXR0YWNobWVudFZpZXdlci1tYW5pZmVzdC1iMzQ3YzBjMzc2NDNjN2I5ZTE3M2Y0YjA5YWRhZTYxNy5qcyIgPjwvc2NyaXB0PgogICAgCiAgICA8IS0tIEJlZ2luOiBDdXN0b20gUGFnZSBKYXZhU2NyaXB0IFNob3VsZCBHbyBIZXJlIC0tPgogICAgCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvYXNzZXRzL2FwcC9jYXNlLWVudHJ5L2Nhc2UtZW50cnktbWFuaWZlc3QtMTk5M2M2Yjc0ODlhOGNiNzQ3MWI2N2QxMDIxNWY2ZjguanMiID48L3NjcmlwdD4KCiAgICA8IS0tIEVuZDogQ3VzdG9tIFBhZ2UgSmF2YVNjcmlwdCBTaG91bGQgR28gSGVyZSAtLT4KPC9ib2R5Pgo8L2h0bWw+Cg==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="407329062" offset="0" length="4096" />
        <PacketInfo time="407329078" offset="4096" length="16384" />
        <PacketInfo time="407329093" offset="20480" length="16384" />
        <PacketInfo time="407329093" offset="36864" length="16384" />
        <PacketInfo time="407329109" offset="53248" length="16384" />
        <PacketInfo time="407329109" offset="69632" length="7809" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>